<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s流量策略-获取真实ip</title>
      <link href="/posts/2024/09/4d66e305.html"/>
      <url>/posts/2024/09/4d66e305.html</url>
      
        <content type="html"><![CDATA[<h2 id="externalTrafficPolicy-简介"><a href="#externalTrafficPolicy-简介" class="headerlink" title="externalTrafficPolicy 简介"></a>externalTrafficPolicy 简介</h2><p>如果服务需要将外部流量路由到 本地节点或者集群级别的端点，即service type 为LoadBalancer或NodePort，那么需要指明该参数。存在两种选项：”Cluster”（默认）和 “Local”。 “Cluster” 隐藏源 IP 地址，可能会导致第二跳（second hop）到其他节点，但是全局负载效果较好。”Local” 保留客户端源 IP 地址，避免 LoadBalancer 和 NodePort 类型服务的第二跳，但是可能会导致负载不平衡。</p><p>在实际的业务中，诸多业务是需要保留客户端源 IP，所以需要通过将服务的配置文件中的 externalTrafficPolicy 参数设置为 “Local” 来激活这个特性。</p><p><code>Kubernetes 有一个特性可以保留客户端源 IP。 如果将 service.spec.externalTrafficPolicy 设置为 Local， kube-proxy 只会将代理请求代理到本地端点，而不会将流量转发到其他节点。 这种方法保留了原始源 IP 地址。如果没有本地端点，则发送到该节点的数据包将被丢弃， 因此你可以在任何数据包处理规则中依赖正确的源 IP，你可能会应用一个数据包使其通过该端点。</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Service&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;example-service&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;spec&quot;: &#123;</span><br><span class="line">    &quot;ports&quot;: [&#123;</span><br><span class="line">      &quot;port&quot;: 8765,</span><br><span class="line">      &quot;targetPort&quot;: 9376</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;selector&quot;: &#123;</span><br><span class="line">      &quot;app&quot;: &quot;example&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;type&quot;: &quot;LoadBalancer&quot;,</span><br><span class="line">    &quot;externalTrafficPolicy&quot;: &quot;Local&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="使用保留源-IP-的警告和限制"><a href="#使用保留源-IP-的警告和限制" class="headerlink" title="使用保留源 IP 的警告和限制"></a>使用保留源 IP 的警告和限制</h3><p>新功能中，外部的流量不会按照 pod 平均分配，而是在节点（node）层面平均分配（因为 GCE/AWS 和其他外部负载均衡实现没有能力做节点权重， 而是平均地分配给所有目标节点，忽略每个节点上所拥有的 pod 数量）。</p><p>然而，在 pod 数量（NumServicePods） « 节点数（NumNodes）或者 pod 数量（NumServicePods） » 节点数（NumNodes）的情况下，即使没有权重策略，我们也可以看到非常接近公平分发的场景。</p><p>内部 pod 对 pod 的流量应该与 ClusterIP 服务类似，流量对于所有 pod 是均分的。</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>设置了externalTrafficPolicy:Local以后svc死活都不能访问，后来经过一系列排查iptables和kube-proxy终于发现了解决办法。<br>在kube-proxy启动参数里面需要设置–hostname-override：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- --hostname-override=$(NODE_NAME)</span><br><span class="line">        env:</span><br><span class="line">        - name: NODE_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              apiVersion: v1</span><br><span class="line">              fieldPath: spec.nodeName</span><br></pre></td></tr></table></figure><h2 id="通过podAntiAffinity-避免pod-流量不均衡"><a href="#通过podAntiAffinity-避免pod-流量不均衡" class="headerlink" title="通过podAntiAffinity 避免pod 流量不均衡"></a>通过podAntiAffinity 避免pod 流量不均衡</h2><p>竟然外部的流量不会按照 pod 平均分配，而是在节点（node）层面平均分配 ,那么我们能做的只有保证同一业务的pod调度到不同的node节点上。</p><p>podAntiAffinity使用场景：</p><ul><li>  将一个服务的POD分散在不同的主机或者拓扑域中，提高服务本身的稳定性。</li><li>  给POD对于一个节点的独占访问权限来保证资源隔离，保证不会有其它pod来分享节点资源。</li><li>  把可能会相互影响的服务的POD分散在不同的主机上</li></ul><p>对于亲和性和反亲和性，每种都有三种规则可以设置：</p><ul><li>  RequiredDuringSchedulingRequiredDuringExecution ：在调度期间要求满足亲和性或者反亲和性规则，如果不能满足规则，则POD不能被调度到对应的主机上。在之后的运行过程中，如果因为某些原因（比如修改label）导致规则不能满足，系统会尝试把POD从主机上删除（现在版本还不支持）。</li><li>  RequiredDuringSchedulingIgnoredDuringExecution ：在调度期间要求满足亲和性或者反亲和性规则，如果不能满足规则，则POD不能被调度到对应的主机上。在之后的运行过程中，系统不会再检查这些规则是否满足。</li><li>  PreferredDuringSchedulingIgnoredDuringExecution ：在调度期间尽量满足亲和性或者反亲和性规则，如果不能满足规则，POD也有可能被调度到对应的主机上。在之后的运行过程中，系统不会再检查这些规则是否满足。</li></ul><p>那我们的使用场景只能使用RequiredDuringSchedulingIgnoredDuringExecution，要严格保证同一业务pod调度到不同的主机。当然这样可能出现一种问题：<strong>不满足条件的pod，会pending</strong>。这个时候我们运维会接受到通知，去增加node节点或是驱赶业务不重要的pod。</p><h3 id="示例解读"><a href="#示例解读" class="headerlink" title="示例解读"></a><a href="https://blog.horus-k.com/2020/07/11/k8s/k8s%E6%B5%81%E9%87%8F%E7%AD%96%E7%95%A5-%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9Eip//#%E7%A4%BA%E4%BE%8B%E8%A7%A3%E8%AF%BB" title="示例解读"></a>示例解读</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: with-pod-affinity</span><br><span class="line">spec:</span><br><span class="line">  affinity:</span><br><span class="line">    podAntiAffinity:</span><br><span class="line">      requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">        podAffinityTerm:</span><br><span class="line">          labelSelector:</span><br><span class="line">            matchExpressions:</span><br><span class="line">            - key: name</span><br><span class="line">              operator: In</span><br><span class="line">              values:</span><br><span class="line">              - frontend</span><br><span class="line">          topologyKey: kubernetes.io/hostname</span><br><span class="line">  containers:</span><br><span class="line">  - name: with-pod-affinity</span><br><span class="line">    image: gcr.io/google_containers/pause:2.0</span><br></pre></td></tr></table></figure><p>使用kubernetes.io/hostname作为拓扑域,查看匹配规则，即同一打有同样标签name=frontend的pod会调度到不同的节点。</p><h3 id="亲和性-反亲和性调度策略比较"><a href="#亲和性-反亲和性调度策略比较" class="headerlink" title="亲和性/反亲和性调度策略比较"></a><a href="https://blog.horus-k.com/2020/07/11/k8s/k8s%E6%B5%81%E9%87%8F%E7%AD%96%E7%95%A5-%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9Eip//#%E4%BA%B2%E5%92%8C%E6%80%A7-x2F-%E5%8F%8D%E4%BA%B2%E5%92%8C%E6%80%A7%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E6%AF%94%E8%BE%83" title="亲和性/反亲和性调度策略比较"></a>亲和性/反亲和性调度策略比较</h3><table><thead><tr><th>调度策略</th><th align="right">匹配标签</th><th align="center">操作符</th><th align="right">拓扑域支持</th><th align="center">调度目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td align="right">主机</td><td align="center">In, NotIn, Exists, DoesNotExist, Gt, Lt</td><td align="right">否</td><td align="center">pod到指定主机</td></tr><tr><td>podAffinity</td><td align="right">Pod</td><td align="center">In, NotIn, Exists, DoesNotExist</td><td align="right">是</td><td align="center">pod与指定pod同一拓扑域</td></tr><tr><td>PodAntiAffinity</td><td align="right">Pod</td><td align="center">In, NotIn, Exists, DoesNotExist</td><td align="right">是</td><td align="center">pod与指定pod非同一拓扑域</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RealmSwift用法小结：增删改查实例</title>
      <link href="/posts/2024/09/c4d6eb7.html"/>
      <url>/posts/2024/09/c4d6eb7.html</url>
      
        <content type="html"><![CDATA[<p>增删改都太简单了，这里不赘述了。详情可以看<a href="https://realm.io/cn/docs/swift/latest/#creating-objects">官方文档</a><br>1.简单查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let result : Results&lt;ProjectItp&gt; = realm.objects(ProjectItp.self).filter(&quot;NSPredicate:xxxx&quot;)</span><br><span class="line"></span><br><span class="line">filter传入的参数是一个NSPredicate，可以上网了解一下这个NSPredicate</span><br><span class="line">简单地举几个例子</span><br><span class="line">[c] 表示忽略大小写,该符号可以用于==[c] !=[c] BEGINSWITH[c] CONTAINS[c] ENDSWITH[c] LIKE[c]</span><br><span class="line"></span><br><span class="line">//用AND 或者 &amp;&amp; 连接都可以</span><br><span class="line">filter(&quot;lastname == &#x27;fancy&#x27; &amp;&amp; l_id == 123456 &amp;&amp; active == true&quot;)</span><br><span class="line">filter(&quot;lastname == &#x27;fancy&#x27; AND l_id == 123456&quot;)</span><br><span class="line"></span><br><span class="line">// 字符串比较可以用以下类型 ==、!=、BEGINSWITH、CONTAINS 和 ENDSWITH</span><br><span class="line">filter(&quot;lastname  CONTAINS  &#x27;fancy&#x27; )</span><br><span class="line">//忽略大小写</span><br><span class="line">filter(&quot;lastname  CONTAINS[c]  &#x27;fancy&#x27; )</span><br></pre></td></tr></table></figure><p>太多了，如果要看更详细的 参考官方文档-查询</p><p>接下来展示几个例子，在文档中仅是简单提及或者没有提及，且无任何示例代码的查询<br>2.结果集排序</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对颜色为棕黄色、名字以 &quot;B&quot; 开头的狗狗进行排序</span><br><span class="line">let sortedDogs = realm.objects(Dog.self).filter(&quot;color = &#x27;tan&#x27; AND name BEGINSWITH &#x27;B&#x27;&quot;).sorted(byKeyPath: &quot;name&quot;)</span><br><span class="line">//对象属性 可以支持使用`.`符号链接到属性的属性，如果是List则不行</span><br><span class="line">let ownersByDogAge = dogOwners.sorted(byKeyPath: &quot;dog.age&quot;)</span><br><span class="line">//对多个属性按照优先级进行排序</span><br><span class="line">let sortedDogs = realm.objects(Dog.self).sorted(by: [SortDescriptor(keyPath: &quot;param1&quot;),SortDescriptor(keyPath: &quot;param2&quot;, ascending: true)])</span><br></pre></td></tr></table></figure><p>3.去重</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//可以传入多个属性， 示例中只传了一个属性</span><br><span class="line">let result : Results&lt;Dog&gt; = realm.objects(Dog.self).filter(&quot;appUserId == \(currentUserId) &amp;&amp; projectId == \(currentProjectId)&quot;).distinct(by: [&quot;favoriteId&quot;])</span><br></pre></td></tr></table></figure><p>4.求和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var sumPercent : Int = realm.objects(Dog.self).filter(&quot;appUserId == \(currentUserId)&quot;).sum(ofProperty: &quot;percentage&quot;)</span><br></pre></td></tr></table></figure><p>5.查询数量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var count : Int = realm.objects(Dog.self).filter(&quot;appUserId == \(currentUserId)&quot;).count</span><br></pre></td></tr></table></figure><p>6.相似查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对于 String 属性而言，LIKE 操作符可以用来比较左端属性和右端表达式：? 和 * 可用作通配符，其中 ? 可以匹配任意一个字符，* 匹配 0 个及其以上的字符。例如：value LIKE &#x27;?bc*&#x27; 可以匹配到诸如 “abcde” 和 “cbc” 之类的字符串；</span><br><span class="line">//以上文字 从文档中照搬 应该蛮好理解的吧</span><br></pre></td></tr></table></figure><p>7.子查询SUBQUERY</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//假设有如下数据模型</span><br><span class="line">struct Student &#123;</span><br><span class="line">var id = 0</span><br><span class="line">var name = &quot;&quot;</span><br><span class="line">var score = 0</span><br><span class="line">var courses : List&lt;Course&gt; = List&lt;Course&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Course &#123;</span><br><span class="line">var cid = 0</span><br><span class="line">var cname = &quot;&quot; //如高数1，高数2，大学英语1，大学物理1</span><br><span class="line">&#125;</span><br><span class="line">//查询任务如下：查询出所有学生中高数课数量&gt;2的学生</span><br><span class="line">realm.objects(Student.self).filter(&quot;SUBQUERY(courses, $course, $course.name contains &#x27;高数&#x27;).@count &gt; 2&quot;)</span><br><span class="line">//其中$course,这个是一个遍历时使用的变量名称，可以用任意变量名代替，相应的后面也要改</span><br><span class="line">//如：</span><br><span class="line">realm.objects(Student.self).filter(&quot;SUBQUERY(courses, $c, $c.name contains &#x27;高数&#x27;).@count &gt; 2&quot;)</span><br></pre></td></tr></table></figure><p>8.聚集表达式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用例7中的数据模型</span><br><span class="line">//查询任务如下： 课程总数大于5的学生</span><br><span class="line">realm.objects(Student.self).filter(&quot;courses.@count &gt; 5&quot;)</span><br><span class="line">//其它的@min、@max、@sum 和 @avg我还没想到有什么用</span><br><span class="line">//查询所有课程中编号最大值 &gt; 100的学生</span><br><span class="line">realm.objects(Student.self).filter(&quot;courses.@max.cid &gt; 100&quot;)</span><br><span class="line"></span><br><span class="line">//如果要查询最大值 最小值 总数及平均值 应该使用如下代码：</span><br><span class="line">var max : Int? = result.max(ofProperty: &quot;score&quot;)</span><br><span class="line">var min : Int? = result.min(ofProperty: &quot;score&quot;)</span><br><span class="line">var sum : Int? = result.sum(ofProperty: &quot;score&quot;)</span><br><span class="line">var average : Int? = result.average(ofProperty: &quot;score&quot;)</span><br></pre></td></tr></table></figure><p>9.关键字 ANY, ALL and NONE<br>以下摘自文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查找 所有朋友中有年龄小于14岁的人</span><br><span class="line">let teens = realm.objects(Contact.self).filtered(&#x27;ANY friends.age &lt; 14&#x27;);</span><br><span class="line"></span><br><span class="line">//查找 所有朋友的年龄都大于21岁的人</span><br><span class="line">let adults = realm.objects(Contact.self).filtered(&#x27;ALL friends.age &gt; 21&#x27;);</span><br></pre></td></tr></table></figure><p>10.其他</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询owner叫bob的车</span><br><span class="line">realm.objects(Car.self).filtered(&#x27;owner.name ==[c] &quot;bob&quot;&#x27;)</span><br><span class="line">//查询拥有至少一辆honda牌汽车的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;cars.make ==[c] &quot;honda&quot;&#x27;)</span><br><span class="line">//反向查询拥有至少一辆honda牌汽车的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;@links.Car.owner.make ==[c] &quot;honda&quot;&#x27;)</span><br><span class="line">//反向查询汽车均价3w以上的的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;@links.Car.owner.@avg.price &gt; 30000&#x27;)</span><br><span class="line">//查询汽车等于3辆的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;cars.@count == 3&#x27;)</span><br><span class="line">//反向查询拥有至少一辆honda牌并且价格大于3w的汽车的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;SUBQUERY(@links.Car.owner, $x, $x.make ==[c] &quot;honda&quot; &amp;&amp; $x.price &gt; 30000).@count &gt; 1&#x27;)</span><br><span class="line">//查找谁的汽车全都是honda牌的</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;ALL @links.Car.owner.make ==[c] &quot;honda&quot;&#x27;)</span><br><span class="line">//查找没有引入链接的人</span><br><span class="line">realm.objects(Person.self).filtered(&#x27;@links.@count == 0&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux环境离线安装docker服务和docker-buildx插件</title>
      <link href="/posts/2024/09/5cde54fc.html"/>
      <url>/posts/2024/09/5cde54fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、docker-离线安装"><a href="#一、docker-离线安装" class="headerlink" title="一、docker 离线安装"></a>一、docker 离线安装</h2><h3 id="1-下载压缩包"><a href="#1-下载压缩包" class="headerlink" title="1 下载压缩包"></a>1 下载压缩包</h3><p>官网下载地址：<a href="https://download.docker.com/linux/static/stable/x86/_64/">https://download.docker.com/linux/static/stable/x86\_64/</a><br>选择适合的版本，这里以docker-27.2.1.tgz 进行示意。</p><h3 id="2-上传压缩包并解压"><a href="#2-上传压缩包并解压" class="headerlink" title="2 上传压缩包并解压"></a>2 上传压缩包并解压</h3><p>把下载好的docker-27.2.1.tgz，上传到<a href="https://so.csdn.net/so/search?q=linux%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">linux服务器</a>任意路径后，执行解压：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf docker-27.2.1.tgz</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="3-部署docker"><a href="#3-部署docker" class="headerlink" title="3 部署docker"></a>3 部署docker</h3><p>在解压路径下执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp docker/* /usr/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-验证安装结果"><a href="#4-验证安装结果" class="headerlink" title="4 验证安装结果"></a>4 验证安装结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-设置docker开机自启"><a href="#5-设置docker开机自启" class="headerlink" title="5 设置docker开机自启"></a>5 设置docker开机自启</h3><h4 id="5-1-注册docker服务"><a href="#5-1-注册docker服务" class="headerlink" title="5.1 注册docker服务"></a>5.1 注册docker服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/docker.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line"># BindsTo=containerd.service</span><br><span class="line"># After=network-online.target firewalld.service containerd.service</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"># Requires=docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line"># ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span><br><span class="line"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span><br><span class="line"># to make them work for either version of systemd.</span><br><span class="line">StartLimitBurst=3</span><br><span class="line"></span><br><span class="line"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span><br><span class="line"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span><br><span class="line"># this option work for either version of systemd.</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"></span><br><span class="line"># Comment TasksMax if your systemd version does not support it.</span><br><span class="line"># Only systemd 226 and above support this option.</span><br><span class="line"># TasksMax=infinity</span><br><span class="line"></span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate=yes</span><br><span class="line"></span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存服务配置文件并退出vim</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><h4 id="5-2-启动服务"><a href="#5-2-启动服务" class="headerlink" title="5.2 启动服务"></a>5.2 启动服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 给启动配置添加执行权限</span><br><span class="line">chmod +x /etc/systemd/system/docker.service</span><br><span class="line"># 重载Unit服务配置</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 添加 docker 开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line"># 启动 docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：如果你的服务已经启动，一定要先停止，否则启动失败，此时 systemctl start docker 无法停止，需要手动 kill掉</strong></p><h2 id="二、docker-buidlx-插件离线安装"><a href="#二、docker-buidlx-插件离线安装" class="headerlink" title="二、docker-buidlx 插件离线安装"></a>二、docker-buidlx 插件离线安装</h2><h3 id="1-手动创建docker插件目录"><a href="#1-手动创建docker插件目录" class="headerlink" title="1 手动创建docker插件目录"></a>1 手动创建docker插件目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/lib/docker/cli-plugins/</span><br></pre></td></tr></table></figure><h3 id="2-下载docker-buildx到插件目录并授权"><a href="#2-下载docker-buildx到插件目录并授权" class="headerlink" title="2 下载docker-buildx到插件目录并授权"></a>2 下载docker-buildx到插件目录并授权</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -Lo /usr/local/lib/docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.17.1/buildx-v0.17.1.linux-amd64</span><br><span class="line"></span><br><span class="line"># 赋予可执行权限</span><br><span class="line">chmod +x /usr/local/lib/docker/cli-plugins/docker-buildx </span><br></pre></td></tr></table></figure><h3 id="3-验证buildx"><a href="#3-验证buildx" class="headerlink" title="3 验证buildx"></a>3 验证buildx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker buildx ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内用户一键安装Docker并配置镜像源</title>
      <link href="/posts/2024/09/4d4367cb.html"/>
      <url>/posts/2024/09/4d4367cb.html</url>
      
        <content type="html"><![CDATA[<p>Debian/Ubuntu从软件源一键安装<br>安装Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y docker.io  docker-compose</span><br></pre></td></tr></table></figure><p>自启动Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><p>Docker官方一键安装脚本<br>使用官方源安装（国内直接访问较慢）</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash</span><br></pre></td></tr></table></figure><p>使用阿里源安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>使用中国区Azure源安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror AzureChinaCloud</span><br></pre></td></tr></table></figure><p>自启动Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable --now docker</span><br></pre></td></tr></table></figure><p>一键安装最新版Docker Compose：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COMPOSE_VERSION=`git ls-remote https://github.com/docker/compose | grep refs/tags | grep -oP &quot;[0-9]+\.[0-9][0-9]+\.[0-9]+$&quot; | sort --version-sort | tail -n 1`</span><br><span class="line">sh -c &quot;curl -L https://github.com/docker/compose/releases/download/v$&#123;COMPOSE_VERSION&#125;/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose&quot;</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>配置国内镜像源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://dockerproxy.com&quot;,</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">    &quot;https://ypzju6vq.mirror.aliyuncs.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - Realm数据库的使用详解（附样例）</title>
      <link href="/posts/2024/09/b294a51a.html"/>
      <url>/posts/2024/09/b294a51a.html</url>
      
        <content type="html"><![CDATA[<p><code>本文代码已升级至Swift4</code></p><p>1，什么是Realm<br>Realm 于2014 年7月发布，是一个跨平台的移动数据库引擎，专门为移动应用的数据持久化而生。其目的是要取代 Core Data 和 SQLite。  </p><p>2，关于Realm，你要知道下面几点：<br>（1）使用简单，大部分常用的功能（比如插入、查询等）都可以用一行简单的代码轻松完成，学习成本低。<br>（2）Realm 不是基于 Core Data，也不是基于 SQLite 封装构建的。它有自己的数据库存储引擎。<br>（3）Realm 具有良好的跨平台特性，可以在 iOS 和 Android 平台上共同使用。代码可以使用 Swift 、 Objective-C 以及 Java 语言来编写。<br>（4）Realm 还提供了一个轻量级的数据库查看工具（Realm Browser）。你也可以用它进行一些简单的编辑操作（比如插入和删除操作）  </p><p>3，支持的类型</p><p>（1）Realm 支持以下的属性类型：Bool、Int8、Int16、Int32、Int64、Double、Float、String、Date（精度到秒）以及Data.</p><p>（2）也可以使用 <code>List&lt;object&gt;</code> 和 <code>Object</code> 来建立诸如一对多、一对一之类的关系模型，此外 Object 的子类也支持此功能。</p><p>4，Realm的安装配置 </p><span id="more"></span><p>（1）先去 Realm 的官网去下载最新框架：<a href="http://static.realm.io/downloads/swift/latest">http://static.realm.io/downloads/swift/latest</a></p><p>（2）拖拽 RealmSwift.framework 和 Realm.framework 文件到”Embedded Binaries”选项中。选中 Copy items if needed 并点击 Finish</p><p><a href="https://www.hangge.com/blog/cache/detail_891.html#"><img src="https://www.hangge.com/blog_uploads/201510/2015100722175619580.png" alt="原文:Swift - Realm数据库的使用详解（附样例）"></a></p><p>5，将数据插入到数据库中</p><p>下面代码判断默认数据库中是否有数据，如果没有的话将几个自定义对像插入到数据库中。</p><p>（1）这里以个人消费记录为例，我们先定义消费类别类，和具体消费记录类  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Foundation</span><br><span class="line">import RealmSwift</span><br><span class="line"> </span><br><span class="line">//消费类型</span><br><span class="line">class ConsumeType:Object &#123;</span><br><span class="line">    //类型名</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//消费条目</span><br><span class="line">class ConsumeItem:Object &#123;</span><br><span class="line">    //条目名</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">    //金额</span><br><span class="line">    @objc dynamic var cost = 0.00</span><br><span class="line">    //时间</span><br><span class="line">    @objc dynamic var date = Date()</span><br><span class="line">    //所属消费类别</span><br><span class="line">    @objc dynamic var type:ConsumeType?</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）判断数据库记录是否为空，空的话则插入数据库（这里以默认数据库为例）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RealmSwift</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        //使用默认的数据库</span><br><span class="line">        let realm = try! Realm()</span><br><span class="line">        //查询所有的消费记录</span><br><span class="line">        let items = realm.objects(ConsumeItem.self)</span><br><span class="line">        //已经有记录的话就不插入了</span><br><span class="line">        if items.count&gt;0 &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //创建两个消费类型</span><br><span class="line">        let type1 = ConsumeType()</span><br><span class="line">        type1.name = &quot;购物&quot;</span><br><span class="line">        let type2 = ConsumeType()</span><br><span class="line">        type2.name = &quot;娱乐&quot;</span><br><span class="line">         </span><br><span class="line">        //创建三个消费记录</span><br><span class="line">        let item1 = ConsumeItem(value: [&quot;买一台电脑&quot;,5999.00,Date(),type1]) //可使用数组创建</span><br><span class="line">         </span><br><span class="line">        let item2 = ConsumeItem()</span><br><span class="line">        item2.name = &quot;看一场电影&quot;</span><br><span class="line">        item2.cost = 30.00</span><br><span class="line">        item2.date = Date(timeIntervalSinceNow: -36000)</span><br><span class="line">        item2.type = type2</span><br><span class="line">         </span><br><span class="line">        let item3 = ConsumeItem()</span><br><span class="line">        item3.name = &quot;买一包泡面&quot;</span><br><span class="line">        item3.cost = 2.50</span><br><span class="line">        item3.date = Date(timeIntervalSinceNow: -72000)</span><br><span class="line">        item3.type = type1</span><br><span class="line">         </span><br><span class="line">        // 数据持久化操作（类型记录也会自动添加的）</span><br><span class="line">        try! realm.write &#123;</span><br><span class="line">            realm.add(item1)</span><br><span class="line">            realm.add(item2)</span><br><span class="line">            realm.add(item3)</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //打印出数据库地址</span><br><span class="line">        print(realm.configuration.fileURL ?? &quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6，Data类型数据的存取<br>参考另一篇文章：<a href="https://www.hangge.com/blog/cache/detail_891.htmldetail_1641.html">Swift - Realm数据库中图片的插入、读取（Data类型数据的存储）</a> </p><p>7，使用Realm Browser查看数据库  </p><p>（1）默认数据库是应用的 Documents 文件夹下的一个名为“default.realm”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//打印出数据库地址</span><br><span class="line">print(realm.configuration.fileURL ?? &quot;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）使用 Realm Browser 工具可以很方便的对.realm数据库进行读取和编辑（在 App Store 中搜索 Realm Browser 即可下载）。</p><p>可以看到，上面的几个对象已经成功的插入到数据库中来。</p><p><a href="https://www.hangge.com/blog/cache/detail_891.html#"><img src="https://www.hangge.com/blog_uploads/201510/2015100722181150977.png" alt="原文:Swift - Realm数据库的使用详解（附样例）"></a></p><p><a href="https://www.hangge.com/blog/cache/detail_891.html#"><img src="https://www.hangge.com/blog_uploads/201510/2015100722181987659.png" alt="原文:Swift - Realm数据库的使用详解（附样例）"></a></p><p>8，从数据库中读取记录并显示到表格中来</p><p>（1）通过查询操作，Realm 将会返回包含 Object 集合的 Results 实例。Results 的表现和 Array 十分相似，并且包含在 Results 中的对象能够通过索引下标进行访问。 </p><p>（2）所有的查询（包括查询和属性访问）在 Realm 中都是延迟加载的，只有当属性被访问时，才能够读取相应的数据。 </p><p>（3）查询结果并不是数据的拷贝：修改查询结果（在写入事务中）会直接修改硬盘上的数据。</p><p>下面我们把库里的数据加载出来，并通过表格显示出来。</p><p>效果图如下：</p><p><a href="https://www.hangge.com/blog/cache/detail_891.html#"><img src="https://www.hangge.com/blog_uploads/201510/2015100809455074293.png" alt="原文:Swift - Realm数据库的使用详解（附样例）"></a></p><p>代码如下：  </p><figure class="highlight plaintext"><figcaption><span>UIKit</span></figcaption><table><tr><td class="code"><pre><span class="line">import RealmSwift</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource  &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var tableView: UITableView!</span><br><span class="line">     </span><br><span class="line">    var dformatter = DateFormatter()</span><br><span class="line">     </span><br><span class="line">    //保存从数据库中查询出来的结果集</span><br><span class="line">    var consumeItems:Results&lt;ConsumeItem&gt;?</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        self.dformatter.dateFormat = &quot;MM月dd日 HH:mm&quot;</span><br><span class="line">         </span><br><span class="line">        self.tableView!.delegate = self</span><br><span class="line">        self.tableView!.dataSource = self</span><br><span class="line">        //创建一个重用的单元格</span><br><span class="line">        self.tableView!.register(UITableViewCell.self, forCellReuseIdentifier: &quot;MyCell&quot;)</span><br><span class="line">         </span><br><span class="line">        //使用默认的数据库</span><br><span class="line">        let realm = try! Realm()</span><br><span class="line">        //查询所有的消费记录</span><br><span class="line">        consumeItems = realm.objects(ConsumeItem.self)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    //在本例中，只有一个分区</span><br><span class="line">    func numberOfSections(in tableView: UITableView) -&gt; Int &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    //返回表格行数（也就是返回控件数）</span><br><span class="line">    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;</span><br><span class="line">        return self.consumeItems!.count</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    //创建各单元显示内容(创建参数indexPath指定的单元）</span><br><span class="line">    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)</span><br><span class="line">        -&gt; UITableViewCell &#123;</span><br><span class="line">        //同一形式的单元格重复使用，在声明时已注册</span><br><span class="line">        let cell = UITableViewCell(style: .value1, reuseIdentifier: &quot;MyCell&quot;)</span><br><span class="line">        let item = self.consumeItems![indexPath.row]</span><br><span class="line">        cell.textLabel?.text = item.name + &quot; ￥&quot; + String(format: &quot;%.1f&quot;, item.cost)</span><br><span class="line">        cell.detailTextLabel?.text = self.dformatter.string(from: item.date)</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9，查询前N条数据<br>Realm无法直接限制查询数量。所以我们如果想要查出部分数据（比如前5条记录），也是全部查出来后在结果集中捞取。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询并取出前5条数据</span><br><span class="line">let dogs = try! Realm().objects(Dog.self)</span><br><span class="line">for i in 0..&lt;5 &#123;</span><br><span class="line">    let dog = dogs[i]</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Realm为何无法限制查询数量？<br>通常查询数据库数据时，我们可以在sql语句中添加一些限制语句（比如rownum，limit，top等）来限制返回的结果集的行数。<br>但我们使用Realm会发现，它没有这种分页功能，感觉不管查什么都是把所有的结果都捞出来。比如我们只要User表的前10条数据，那么做法是先查询出所有的User数据，再从结果集中取出前10条数据。<br>有人可能会担心，如果数据库中数据非常多，那每次都这么查不会影响性能吗？<br>其实大可放心，由于Realm都是延迟加载的，只有当属性被访问时，才能够读取相应的数据。不像通常数据库，查询后，查询结果是从数据库拷贝一份出来放在内存中的。而Realm的查询结果应该说是数据库数据的引用，就算你查出来，如果不用也不会占用什么内存。</p></blockquote><p>10，支持断言查询(Predicate)，这样可以通过条件查询特定数据<br>同时可以使用链式查询数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询花费超过10元的消费记录(使用断言字符串查询)</span><br><span class="line">consumeItems = realm.objects(ConsumeItem.self).filter(&quot;cost &gt; 10&quot;)</span><br><span class="line"> </span><br><span class="line">//查询花费超过10元的购物记录(使用 NSPredicate 查询)</span><br><span class="line">let predicate = NSPredicate(format: &quot;type.name = &#x27;购物&#x27; AND cost &gt; 10&quot;)</span><br><span class="line">consumeItems = realm.objects(ConsumeItem.self).filter(predicate)</span><br><span class="line"> </span><br><span class="line">//使用链式查询</span><br><span class="line">consumeItems = realm.objects(ConsumeItem.self).filter(&quot;cost &gt; 10&quot;).filter(&quot;type.name = &#x27;购物&#x27;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>支持的断言：</p><ul><li>  比较操作数(comparison operand)可以是属性名称或者某个常量，但至少有一个操作数必须是属性名称；</li><li>  比较操作符 ==、&lt;=、&lt;、&gt;=、&gt;、!=, 以及 BETWEEN 支持 int、long、long long、float、double 以及 NSDate 属性类型的比较，比如说 age == 45；</li><li>  相等比较 ==以及!=，比如说Results<Employee>().filter(“company == %@”, company)</li><li>  比较操作符 == and != 支持布尔属性；</li><li>  对于 NSString 和 NSData 属性来说，我们支持 ==、!=、BEGINSWITH、CONTAINS 以及 ENDSWITH 操作符，比如说 name CONTAINS ‘Ja’；</li><li>  字符串支持忽略大小写的比较方式，比如说 name CONTAINS[c] ‘Ja’ ，注意到其中字符的大小写将被忽略；</li><li>  Realm 支持以下复合操作符：“AND”、“OR” 以及 “NOT”。比如说 name BEGINSWITH ‘J’ AND age &gt;= 32；</li><li>  包含操作符 IN，比如说 name IN {‘Lisa’, ‘Spike’, ‘Hachi’}；</li><li>  ==、!=支持与 nil 比较，比如说 Results<Company>().filter(“ceo == nil”)。注意到这只适用于有关系的对象，这里 ceo 是 Company 模型的一个属性。</li><li>  ANY 比较，比如说 ANY student.age &lt; 21</li><li>注意，虽然我们不支持复合表达式类型(aggregate expression type)，但是我们支持对对象的值使用 BETWEEN 操作符类型。比如说，Results<Person>.filter(“age BETWEEN %@”, [42, 43]])。</li></ul><p>11，查询结果的排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询花费超过10元的消费记录,并按升序排列</span><br><span class="line">consumeItems = realm.objects(ConsumeItem.self).filter(&quot;cost &gt; 10&quot;).sorted(byKeyPath: &quot;cost&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12，使用List实现一对多关系<br>List 中可以包含简单类型的 Object，表面上和可变的 Array 非常类似。<br>注意：List 只能够包含 Object 类型，不能包含诸如String之类的基础类型。<br>如果打算给我们的 Person 数据模型添加一个“dogs”属性，以便能够和多个“dogs”建立关系，也就是表明一个 Person 可以有多个 Dog，那么我们可以声明一个List类型的属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    ... // 其余的属性声明</span><br><span class="line">    let dogs = List&lt;Dog&gt;()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 这里我们就可以使用已存在的狗狗对象来完成初始化</span><br><span class="line">let aPerson = Person(value: [&quot;李四&quot;, 30, [aDog, anotherDog]])</span><br><span class="line"> </span><br><span class="line">// 还可以使用多重嵌套</span><br><span class="line">let aPerson = Person(value: [&quot;李四&quot;, 30, [[&quot;小黑&quot;, 5], [&quot;旺财&quot;, 6]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以和之前一样，对 List 属性进行访问和赋值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let someDogs = realm.objects(Dog.self).filter(&quot;name contains &#x27;小白&#x27;&quot;)</span><br><span class="line">ZhangSan.dogs.append(objectsIn: someDogs)</span><br><span class="line">ZhangSan.dogs.append(dahuang)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反向关系(Inverse Relationship)</p><p>通过反向关系(也被称为反向链接(backlink))，您可以通过一个特定的属性获取和给定对象有关系的所有对象。 Realm 提供了“链接对象 (linking objects)” 属性来表示这些反向关系。借助链接对象属性，您可以通过指定的属性来获取所有链接到指定对象的对象。</p><p>例如，一个 Dog 对象可以拥有一个名为 owners 的链接对象属性，这个属性中包含了某些 Person 对象，而这些 Person 对象在其 dogs 属性中包含了这一个确定的 Dog 对象。您可以将 owners 属性设置为 LinkingObjects 类型，然后指定其关系，说明其当中包含了 Person 对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog: Object &#123;</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">    @objc dynamic var age = 0</span><br><span class="line">     </span><br><span class="line">    // Realm 并不会存储这个属性，因为这个属性只定义了 getter</span><br><span class="line">    // 定义“owners”，和 Person.dogs 建立反向关系</span><br><span class="line">    let owners = LinkingObjects(fromType: Person.self, property: &quot;dogs&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>13，添加主键(Primary Keys) </p><p>重写 Object.primaryKey() 可以设置模型的主键。</p><p>声明主键之后，对象将被允许查询，更新速度更加高效，并且要求每个对象保持唯一性。</p><p>一旦带有主键的对象被添加到 Realm 之后，该对象的主键将不可修改。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var id = 0</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">     </span><br><span class="line">    override static func primaryKey() -&gt; String? &#123;</span><br><span class="line">        return &quot;id&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>14，添加索引属性(Indexed Properties)<br>重写 Object.indexedProperties() 方法可以为数据模型中需要添加索引的属性建立索引：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Book: Object &#123;</span><br><span class="line">    @objc dynamic var price = 0</span><br><span class="line">    @objc dynamic var title = &quot;&quot;</span><br><span class="line">     </span><br><span class="line">    override static func indexedProperties() -&gt; [String] &#123;</span><br><span class="line">        return [&quot;title&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>15，设置忽略属性(Ignored Properties)</p><p>重写 Object.ignoredProperties() 可以防止 Realm 存储数据模型的某个属性。Realm 将不会干涉这些属性的常规操作，它们将由成员变量(var)提供支持，并且您能够轻易重写它们的 setter 和 getter。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var tmpID = 0</span><br><span class="line">    var name: String &#123; // 计算属性将被自动忽略</span><br><span class="line">        return &quot;\(firstName) \(lastName)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    @objc dynamic var firstName = &quot;&quot;</span><br><span class="line">    @objc dynamic var lastName = &quot;&quot;</span><br><span class="line">     </span><br><span class="line">    override static func ignoredProperties() -&gt; [String] &#123;</span><br><span class="line">        return [&quot;tmpID&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>16，修改更新数据 </p><p>（1）直接更新内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在一个事务中更新对象</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">  consumeItem.name = &quot;去北京旅行&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）通过主键更新<br>如果您的数据模型中设置了主键的话，那么您可以使用 Realm().add(_:update:) 来更新对象（当对象不存在时也会自动插入新的对象。）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/****** 方式1 ***/</span><br><span class="line">// 创建一个带有主键的“书籍”对象，作为事先存储的书籍</span><br><span class="line">let cheeseBook = Book()</span><br><span class="line">cheeseBook.title = &quot;奶酪食谱&quot;</span><br><span class="line">cheeseBook.price = 9000</span><br><span class="line">cheeseBook.id = 1</span><br><span class="line"> </span><br><span class="line">// 通过 id = 1 更新该书籍</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.add(cheeseBook, update: true)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/****** 方式2 ***/</span><br><span class="line">// 假设带有主键值 `1` 的“书籍”对象已经存在</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.create(Book.self, value: [&quot;id&quot;: 1, &quot;price&quot;: 22], update: true)</span><br><span class="line">    // 这本书的`title`属性不会被改变</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）键值编码 </p><p>这个是在运行时才能决定哪个属性需要更新的时候，这个对于大量更新的对象极为有用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let persons = realm.objects(Person.self)</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    // 更新第一个</span><br><span class="line">    persons.first?.setValue(true, forKeyPath: &quot;isFirst&quot;)</span><br><span class="line">    // 将每个人的 planet 属性设置为“地球”</span><br><span class="line">    persons.setValue(&quot;地球&quot;, forKeyPath: &quot;planet&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>17，删除数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let cheeseBook = ... // 存储在 Realm 中的 Book 对象</span><br><span class="line"> </span><br><span class="line">// 在事务中删除一个对象</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">  realm.delete(cheeseBook)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也能够删除数据库中的所有数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 从 Realm 中删除所有数据</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">  realm.deleteAll()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>18，Realm数据库配置 </p><p>（1）修改默认的的数据库</p><p>通过调用 Realm() 来初始化以及访问我们的 realm 变量。其指向的是应用的 Documents 文件夹下的一个名为“default.realm”的文件。</p><p>通过对默认配置进行更改，我们可以使用不同的数据库。比如给每个用户帐号创建一个特有的 Realm 文件，通过切换配置，就可以直接使用默认的 Realm 数据库来直接访问各自数据库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func setDefaultRealmForUser(username: String) &#123;</span><br><span class="line">    var config = Realm.Configuration()</span><br><span class="line">     </span><br><span class="line">    // 使用默认的目录，但是使用用户名来替换默认的文件名</span><br><span class="line">    config.fileURL = config.fileURL!.deletingLastPathComponent()</span><br><span class="line">        .appendingPathComponent(&quot;\(username).realm&quot;)</span><br><span class="line">     </span><br><span class="line">    // 将这个配置应用到默认的 Realm 数据库当中</span><br><span class="line">    Realm.Configuration.defaultConfiguration = config</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）打包进项目里的数据库的使用<br>如果需要将应用的某些数据（比如配置信息，初始化信息等）打包到一个 Realm 文件中，作为主要 Realm 数据库的扩展，操作如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let config = Realm.Configuration(</span><br><span class="line">    // 获取需要打包文件的 URL 路径</span><br><span class="line">    fileURL: Bundle.main.url(forResource: &quot;MyBundledData&quot;, withExtension: &quot;realm&quot;),</span><br><span class="line">    // 以只读模式打开文件，因为应用数据包并不可写</span><br><span class="line">    readOnly: true)</span><br><span class="line"> </span><br><span class="line">// 通过配置打开 Realm 数据库</span><br><span class="line">let realm = try! Realm(configuration: config)</span><br><span class="line"> </span><br><span class="line">// 通过配置打开 Realm 数据库</span><br><span class="line">let results = realm.objects(Dog.self).filter(&quot;age &gt; 5&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）内存数据库<br>内存数据库在每次程序运行期间都不会保存数据。但是，这不会妨碍到 Realm 的其他功能，包括查询、关系以及线程安全。 假如您需要灵活的数据读写但又不想储存数据的话，那么内存数据库对您来说一定是一个不错的选择。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm(configuration: Realm.Configuration(inMemoryIdentifier: &quot;MyInMemoryRealm&quot;))</span><br></pre></td></tr></table></figure><p>19，加密数据库 </p><p>（1）加密后的 Realm文件不能跨平台使用（因为 NSFileProtection 只有 iOS 才可以使用） </p><p>（2）Realm 文件不能在没有密码保护的 iOS 设备中进行加密。为了避免这些问题（或者您想构建一个 OS X 的应用），可以使用 Realm 提供的加密方法。 </p><p>（3）加密过的 Realm 只会带来很少的额外资源占用（通常最多只会比平常慢10%）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*****   在创建 Realm 数据库时采用64位的密钥对数据库文件进行 AES-256+SHA2 加密   ****/</span><br><span class="line">// 产生随机密钥</span><br><span class="line">var key = Data(count: 64)</span><br><span class="line">_ = key.withUnsafeMutableBytes &#123; bytes in</span><br><span class="line">    SecRandomCopyBytes(kSecRandomDefault, 64, bytes)</span><br><span class="line">&#125;</span><br><span class="line">         </span><br><span class="line">// 打开加密文件</span><br><span class="line">let config = Realm.Configuration(encryptionKey: key)</span><br><span class="line">let realm:Realm</span><br><span class="line">do &#123;</span><br><span class="line">    realm = try Realm(configuration: config)</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">    // 如果密钥错误，`error` 会提示数据库不可访问</span><br><span class="line">    fatalError(&quot;Error opening realm: \(error)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 和往常一样使用 Realm 即可</span><br><span class="line">let dogs = realm.objects(Book.self).filter(&quot;name contains &#x27;Fido&#x27;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>20，数据迁移(Migration)<br>（1）为何要迁移<br>比如原来有如下 Person 模型：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var firstName = &quot;&quot;</span><br><span class="line">    @objc dynamic var lastName = &quot;&quot;</span><br><span class="line">    @objc dynamic var age = 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假如我们想要更新数据模型，给它添加一个 fullname 属性， 而不是将“姓”和“名”分离开来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var fullName = &quot;&quot;</span><br><span class="line">    @objc dynamic var age = 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个时候如果您在数据模型更新之前就已经保存了数据的话，那么 Realm 就会注意到代码和硬盘上数据不匹配。 每当这时，您必须进行数据迁移，否则当您试图打开这个文件的话 Realm 就会抛出错误。</p><p>（2）如何进行数据迁移<br>假设我们想要把上面所声明 Person 数据模型进行迁移。如下所示是最简单的数据迁移的必需流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在(application:didFinishLaunchingWithOptions:)中进行配置</span><br><span class="line"> </span><br><span class="line">let config = Realm.Configuration(</span><br><span class="line">  // 设置新的架构版本。这个版本号必须高于之前所用的版本号</span><br><span class="line">  // （如果您之前从未设置过架构版本，那么这个版本号设置为 0）</span><br><span class="line">  schemaVersion: 1,</span><br><span class="line"> </span><br><span class="line">  // 设置闭包，这个闭包将会在打开低于上面所设置版本号的 Realm 数据库的时候被自动调用</span><br><span class="line">  migrationBlock: &#123; migration, oldSchemaVersion in</span><br><span class="line">    // 目前我们还未进行数据迁移，因此 oldSchemaVersion == 0</span><br><span class="line">    if (oldSchemaVersion &lt; 1) &#123;</span><br><span class="line">      // 什么都不要做！Realm 会自行检测新增和需要移除的属性，然后自动更新硬盘上的数据库架构</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">// 告诉 Realm 为默认的 Realm 数据库使用这个新的配置对象</span><br><span class="line">Realm.Configuration.defaultConfiguration = config</span><br><span class="line"> </span><br><span class="line">// 现在我们已经告诉了 Realm 如何处理架构的变化，打开文件之后将会自动执行迁移</span><br><span class="line">let realm = try! Realm()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然这个迁移操作是最精简的了，但是我们需要让这个闭包能够自行计算新的属性（这里指的是 fullName），这样才有意义。 在迁移闭包中，我们能够调用Migration().enumerateObjects(_:_:) 来枚举特定类型的每个 Object 对象，然后执行必要的迁移逻辑。注意，对枚举中每个已存在的 Object 实例来说，应该是通过访问 oldObject 对象进行访问，而更新之后的实例应该通过 newObject 进行访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在 application(application:didFinishLaunchingWithOptions:) 中进行配置</span><br><span class="line"> </span><br><span class="line">Realm.Configuration.defaultConfiguration = Realm.Configuration(</span><br><span class="line">  schemaVersion: 1,</span><br><span class="line">  migrationBlock: &#123; migration, oldSchemaVersion in</span><br><span class="line">    if (oldSchemaVersion &lt; 1) &#123;</span><br><span class="line">      // enumerateObjects(ofType:_:) 方法遍历了存储在 Realm 文件中的每一个“Person”对象</span><br><span class="line">      migration.enumerateObjects(ofType: Person.className()) &#123; oldObject, newObject in</span><br><span class="line">        // 将名字进行合并，存放在 fullName 域中</span><br><span class="line">        let firstName = oldObject![&quot;firstName&quot;] as! String</span><br><span class="line">        let lastName = oldObject![&quot;lastName&quot;] as! String</span><br><span class="line">        newObject![&quot;fullName&quot;] = &quot;\(firstName) \(lastName)&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>21，使用带有 REST API 功能的 Realm 数据库示例<br>我们将从 豆瓣FM的API 那里获取一组 JSON 格式的频道数据，然后将它以 Realm Objects 的形式储存到默认的 Realm 数据库里。 </p><p>（1）json数据格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line"> &quot;channels&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name_en&quot;: &quot;Personal Radio&quot;,</span><br><span class="line">            &quot;seq_id&quot;: 0,</span><br><span class="line">            &quot;abbr_en&quot;: &quot;My&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;私人兆赫&quot;,</span><br><span class="line">            &quot;channel_id&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;华语&quot;,</span><br><span class="line">            &quot;seq_id&quot;: 0,</span><br><span class="line">            &quot;abbr_en&quot;: &quot;&quot;,</span><br><span class="line">            &quot;channel_id&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;name_en&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;欧美&quot;,</span><br><span class="line">            &quot;seq_id&quot;: 1,</span><br><span class="line">            &quot;abbr_en&quot;: &quot;&quot;,</span><br><span class="line">            &quot;channel_id&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;name_en&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）我们将直接把 Dictionary 插入到 Realm 中，然后让 Realm 自行快速地将其映射到 Object 上。</p><p>（从 iOS9 起，新特性要求App访问网络请求，要采用 HTTPS 协议。直接请求HTTP数据会报错，解决办法可以参照的我另一篇文章：<a href="https://www.hangge.com/blog/cache/detail_891.htmldetail_822.html">Swift - 网络请求报App Transport Security has blocked a cleartext错</a>）<br>为了确保示例能够成功，我们需要一个所有属性完全匹配 JSON 键结构的 Object 结构体。如果 JSON 的键结构不匹配 Object 结构体属性结构的话，那么就会在插入时被忽略。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RealmSwift</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        // 调用API</span><br><span class="line">        let url = URL(string: &quot;http://www.douban.com/j/app/radio/channels&quot;)!</span><br><span class="line">        let response = try! Data(contentsOf: url)</span><br><span class="line">         </span><br><span class="line">        // 对 JSON 的回应数据进行反序列化操作</span><br><span class="line">        let json = try! JSONSerialization.jsonObject(with: response,</span><br><span class="line">                                         options: .allowFragments) as! [String:Any]</span><br><span class="line">        let channels = json[&quot;channels&quot;] as! [[String:Any]]</span><br><span class="line">         </span><br><span class="line">        let realm = try! Realm()</span><br><span class="line">        try! realm.write &#123;</span><br><span class="line">            // 为数组中的每个元素保存一个对象（以及其依赖对象）</span><br><span class="line">            for channel in channels &#123;</span><br><span class="line">                if channel[&quot;seq_id&quot;] as! Int == 0 &#123;continue&#125; //第一个频道数据有问题,丢弃掉</span><br><span class="line">                realm.create(DoubanChannel.self, value: channel, update: true)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        print(realm.configuration.fileURL ?? &quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//豆瓣频道</span><br><span class="line">class DoubanChannel:Object &#123;</span><br><span class="line">    //频道id</span><br><span class="line">    @objc dynamic var channel_id = &quot;&quot;</span><br><span class="line">    //频道名称</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">    //频道英文名称</span><br><span class="line">    @objc dynamic var name_en = &quot;&quot;</span><br><span class="line">    //排序</span><br><span class="line">    @objc dynamic var seq_id = 0</span><br><span class="line">    @objc dynamic var abbr_en = &quot;&quot;</span><br><span class="line">     </span><br><span class="line">    //设置主键</span><br><span class="line">    override static func primaryKey() -&gt; String? &#123;</span><br><span class="line">        return &quot;channel_id&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）可以看到数据已经成功插入到库中了</p><p><a href="https://www.hangge.com/blog/cache/detail_891.html#"><img src="https://www.hangge.com/blog_uploads/201510/2015100815102987949.png" alt="原文:Swift - Realm数据库的使用详解（附样例）"></a></p><p>22，当前版本的限制</p><p>Realm 致力于平衡数据库读取的灵活性和性能。为了实现这个目标，在 Realm 中所存储的信息的各个方面都有基本的限制。例如：</p><p>（1）类名称的长度最大只能存储 57 个 UTF8 字符。</p><p>（2）属性名称的长度最大只能支持 63 个 UTF8 字符。</p><p>（3）NSData 以及 String 属性不能保存超过 16 MB 大小的数据。如果要存储大量的数据，可通过将其分解为16MB 大小的块，或者直接存储在文件系统中，然后将文件路径存储在 Realm 中。如果您的应用试图存储一个大于 16MB 的单一属性，系统将在运行时抛出异常。</p><p>（4）对字符串进行排序以及不区分大小写查询只支持“基础拉丁字符集”、“拉丁字符补充集”、“拉丁文扩展字符集 A” 以及”拉丁文扩展字符集 B“（UTF-8 的范围在 0~591 之间）。</p><p>原文地址：<a href="https://www.hangge.com/blog/cache/detail_891.html">https://www.hangge.com/blog/cache/detail_891.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分拆 View Controller 中的自动布局代码</title>
      <link href="/posts/2024/09/1b218757.html"/>
      <url>/posts/2024/09/1b218757.html</url>
      
        <content type="html"><![CDATA[<h1 id="分拆-View-Controller-中的自动布局代码"><a href="#分拆-View-Controller-中的自动布局代码" class="headerlink" title="分拆 View Controller 中的自动布局代码"></a>分拆 View Controller 中的自动布局代码</h1><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E7%9A%84%E5%8D%8F%E8%AE%AE">创建一个关于自动布局的协议</a></li><li><a href="#%E4%B8%BA-ui-%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B8%83%E5%B1%80%E4%BB%A3%E7%A0%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">为 UI 控件的布局代码创建一个文件</a></li><li><a href="#view-controller-%E4%B8%AD%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%AE%8C%E6%88%90%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B8%83%E5%B1%80">View Controller 中一句话完成控件的布局</a></li><li><a href="#references">References</a></li></ul><p>当页面复杂起来的时候，或者说，当页面控件数量太多的时候，自动布局的代码也会逐渐繁琐起来，造成了 View Controller 中的代码繁重起来</p><p>因此，这里提供一种方法，将 UI 的布局代码移动到其他文件中，这个方法受到了 <a href="http://www.jianshu.com/p/dea57a338b23">👉 这篇文章</a> 的启发，大部分的代码也是从这里出来 </p><p>布局的方法使用自动布局，而且还是用 SnapKit 的那种，语言使用的是 Swift 3</p><h2 id="创建一个关于自动布局的协议"><a href="#创建一个关于自动布局的协议" class="headerlink" title="创建一个关于自动布局的协议"></a>创建一个关于自动布局的协议</h2><p>先创建一个文件，普通的 Swift 文件的那种，并在里面 <code>import SnapKit</code></p><h3 id="定义一个-protocol"><a href="#定义一个-protocol" class="headerlink" title="定义一个 protocol"></a>定义一个 protocol</h3><span id="more"></span><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Layoutable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutMaker</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutUpdater</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>layoutMaker()</code> 使用来创建约束，<code>layoutUpdater()</code> 是用来更新约束</p><hr><p>这里的 <code>(ConstraintMaker) -&gt; Void</code> 是什么?</p><p>看下面一段代码，这是我们布局自定义控件的一般写法，至少是我吧</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">ivCalendar.snp.makeConstraints &#123; (make) <span class="keyword">in</span></span><br><span class="line">  make.left.equalTo(contentView).offset(<span class="type">PreviewCellConstants</span>.marginToFrame)</span><br><span class="line">  make.centerY.equalTo(lbDate)</span><br><span class="line">  make.size.equalTo(<span class="type">PreviewCellConstants</span>.<span class="type">LabelCalendar</span>.size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看 <code>makeConstraints</code> 方法的定义</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">makeConstraints</span>(<span class="keyword">_</span> <span class="params">closure</span>: (<span class="keyword">_</span> make: <span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">   <span class="type">ConstraintMaker</span>.makeConstraints(item: <span class="keyword">self</span>.view, closure: closure)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，我们写的一大串的布局代码，其实是一个 Closure，类型是 <code>(ConstraintMaker) -&gt; Void</code>，而这里，就是我们用来分拆代码的关键了</p><hr><p>对于上面的 <code>func layoutUpdater() -&gt; (ConstraintMaker) -&gt; Void</code> 协议方法，很多时候，我们只需要 make，而不太需要 update，这里可以选择将它删除。但是，也可以为它实现一个默认的实现，也就是 protocol 的 extension</p><blockquote><p>如果没用到 <code>func layoutUpdater() -&gt; (ConstraintMaker) -&gt; Void</code> 这个方法，而且不作处理（删除它，或者提供默认实现），那么，在 implement 协议的时候，编译器将就会报错：没有 conforms to protocol</p></blockquote><p>Layoutabel 的默认实现，只是简单地返回一个空的 Closure，当我们有实现对应的方法时，调用的将会是后者</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Layoutable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutMaker</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; make <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutUpdater</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; make <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为-UIView-添加布局相关的方法"><a href="#为-UIView-添加布局相关的方法" class="headerlink" title="为 UIView 添加布局相关的方法"></a>为 UIView 添加布局相关的方法</h3><p>在与协议的同一个文件中，顺便向 UIView 添加一个 extension，添加布局方法，这个方法，是之后在 View Controller 中用到的一行代码实现布局的方法</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MARK: - 自动布局的 extension</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeLayout</span>(<span class="params">layouter</span>: <span class="type">Layoutable</span>) &#123;</span><br><span class="line">        snp.makeConstraints(layouter.layoutMaker())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateLayout</span>(<span class="params">layouter</span>: <span class="type">Layoutable</span>) &#123;</span><br><span class="line">        snp.updateConstraints(layouter.layoutUpdater())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>snp.makeConstraints(...)</code> 这一句，正是我们布局时写得算是最多的一句代码了。但现在，我们将会很少看到它了</p><p>同时，我们也可以看到，<code>snp.makeConstraints(...)</code> 中传入的参数，都是通过协议来调用的（大致意思，意会一下吧），这也许就是 面向协议编程 的抽象吧 </p><p>之后，我们的工作将会聚焦在：如何创建一个实现 Layoutable 协议的类和它的实例</p><h2 id="为-UI-控件的布局代码创建一个文件"><a href="#为-UI-控件的布局代码创建一个文件" class="headerlink" title="为 UI 控件的布局代码创建一个文件"></a>为 UI 控件的布局代码创建一个文件</h2><p>下面的工作，可能就显得略烦琐，甚至看起来有点“蠢”了</p><h3 id="为-UI-控件创建一个文件"><a href="#为-UI-控件创建一个文件" class="headerlink" title="为 UI 控件创建一个文件"></a>为 UI 控件创建一个文件</h3><p>为你觉得需要的 UI 控件，创建一个普通的 Swift 文件，并 <code>import SnapKit</code></p><h3 id="创建一个-struct，并声明实现-Layoutable-协议"><a href="#创建一个-struct，并声明实现-Layoutable-协议" class="headerlink" title="创建一个 struct，并声明实现 Layoutable 协议"></a>创建一个 struct，并声明实现 Layoutable 协议</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ClipRecordPanelLayout</span>: <span class="title class_">Layoutable</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>为什么使用 struct，而不是使用 class ？</p><p>我的理解是这样的：</p><p>对于 class，在赋值的时候，实例会对其属性（对象的那种）默认进行了一个强引用，而这种强引用，很多时候就是造成内存问题（像循环引用）的原因</p><p>而对于 struct，在赋值的时候，实例只会对属性进行一系列的复制，不带引用的复制，因此可以避免出现内存问题</p><hr><h3 id="定义一些属性"><a href="#定义一些属性" class="headerlink" title="定义一些属性"></a>定义一些属性</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ClipRecordPanelLayout</span>: <span class="title class_">Layoutable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> views: (<span class="type">UIView</span>)</span><br><span class="line">    <span class="keyword">var</span> constants: (panelHeight: <span class="type">CGFloat</span>?, bottomOffset: <span class="type">CGFloat</span>?)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在布局的时候，我们通常需要其他的一些 view 来作为参照物，并且需要写死一些常量，因此，在这里，使用了 views 和 constants 来分别装载这些参照物和常量</p><p>views 和 constants 都是 tuple 的类型，使用 tuple 的原因是，tuple 可以（天生）存放不同类型的数据，并且，可以为其中的值进行命名</p><p>在这个例子中，constants 存放的都是 CGFloat? 类型，但也可以存放不同的类型，如</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> constants: (bottomOffset: <span class="type">CGFloat</span>, size: <span class="type">CGSize</span>)</span><br></pre></td></tr></table></figure><h3 id="实现协议方法"><a href="#实现协议方法" class="headerlink" title="实现协议方法"></a>实现协议方法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ClipRecordPanelLayout</span>: <span class="title class_">Layoutable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> views: (<span class="type">UIView</span>)</span><br><span class="line">    <span class="keyword">var</span> constants: (panelHeight: <span class="type">CGFloat</span>?, bottomOffset: <span class="type">CGFloat</span>?)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutMaker</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> superView <span class="operator">=</span> views</span><br><span class="line">        <span class="keyword">let</span> (panelHeight, <span class="keyword">_</span>) <span class="operator">=</span> constants</span><br><span class="line">        <span class="keyword">return</span> &#123; make <span class="keyword">in</span></span><br><span class="line">            make.bottom.equalTo(superView)</span><br><span class="line">            make.left.right.equalTo(superView)</span><br><span class="line">            make.height.equalTo(panelHeight<span class="operator">!</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">layoutUpdater</span>() -&gt; (<span class="type">ConstraintMaker</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> superView <span class="operator">=</span> views</span><br><span class="line">        <span class="keyword">let</span> (<span class="keyword">_</span>, bottomOffset) <span class="operator">=</span> constants</span><br><span class="line">        <span class="keyword">return</span> &#123; make <span class="keyword">in</span></span><br><span class="line">            make.bottom.equalTo(superView).offset(bottomOffset<span class="operator">!</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里分别实现了 <code>layoutMaker()</code> 和 <code>layoutUpdater()</code> 的方法，分别对应的是建立约束和更新约束的操作</p><p>在获取参照物和常量的时候，使用了 tuple 的解构，将数据分别存放到不同的变量中，不需要的数据，直接使用 <code>_</code> 进行忽略</p><p>在 constants 中，其中的元素的数据类型使用的 <code>CGFloat?</code>，是因为这两个数据，并不是同时都需要用到，那么，为了方便起见，在需要某一个参数的时候，直接传 <code>nil</code></p><p>所以，这里的一个文件，只定义了一类的约束（也许有多个 UI 控件的布局方式是一样的，就是常量不同罢了）</p><h2 id="View-Controller-中一句话完成控件的布局"><a href="#View-Controller-中一句话完成控件的布局" class="headerlink" title="View Controller 中一句话完成控件的布局"></a>View Controller 中一句话完成控件的布局</h2><p>定义完了一类控件的约束之后，最后，在 View Controller 中将约束应用到 UI 控件中，像这样：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">panel.makeLayout(layouter: <span class="type">ClipRecordPanelLayout</span>(with: (view), constants: (<span class="type">PanelHeight</span>, <span class="literal">nil</span>)))</span><br></pre></td></tr></table></figure><p>这样，就一句话实现了对 UI 控件的布局了，当然这是针对简单的情况，要是含有多个参照物和常量，还是需要将 Layoutable 的实例单独抽取出来新建，避免一行代码过长</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="http://www.jianshu.com/p/dea57a338b23">MVVM与Controller瘦身实践</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Realm 使用备忘</title>
      <link href="/posts/2024/09/c9b9e18a.html"/>
      <url>/posts/2024/09/c9b9e18a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Realm-使用备忘"><a href="#Realm-使用备忘" class="headerlink" title="Realm 使用备忘"></a>Realm 使用备忘</h1><p>关于使用 Realm 的一些疑问解答 <a href="https://stackoverflow.com/a/31594548/5211544">👉 链接</a></p><h2 id="为对象设置-primary-key"><a href="#为对象设置-primary-key" class="headerlink" title="为对象设置 primary key"></a>为对象设置 primary key</h2><p>重写 <code>Object.primaryKey()</code> 方法</p><h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>向一个 realm 对象添加数据对象的操作，必须在一个 <code>write</code> 事务中进行，因为 <code>write</code> 事务会产生不可预计的耗时操作，因此，应尽量减少 <code>write</code> 事务</p><hr><p><strong><code>write</code> 事务是同步并阻塞的</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若 Thread A 开始了一个 write 事务，</span><br><span class="line">Thread B 在 Thread A 结束前开始一个 write 事务</span><br><span class="line">两者都在同一个 realm 对象上进行</span><br><span class="line"></span><br><span class="line">那么，Thread A 必须完成 write 事务并提交后，Thread B 的 write 事务才能进行</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h2><p>向 realm 添加完对象之后，可以继续使用这个对象，并且所有对这个对象的更改都会被存储（但必须是在同一个 <code>write</code> 事务中进行）</p><hr><p>任何对对象作出的更改都可以在其他线程中访问到，只要：</p><ol><li>使用的是同一个 realm 对象</li><li><code>write</code> 事务完成了</li></ol><hr><p>需要注意的是</p><p><code>write</code> 操作会彼此阻塞，并且，当有多个 <code>write</code> 操作时，会阻塞其所在的线程</p><p>因此，推荐将 <code>write</code> 操作放置到一个独立的线程</p><hr><p>当 <code>write</code> 操作进行时，<code>read</code> 操作并不会被阻塞</p><p>当对一个 realm 进行 <code>write</code> 操作时，所有其他有关这个数据对象的 realm 都会被通知到，并且作出更新</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>可以同时有任意数目的线程访问同一个 Realm 文件，并且由于每个线程都有对应的快照，因此线程之间绝不会产生影响</p><p>不能让多个线程都持有同一个 Realm 对象的实例</p><hr><p>已归入管理的实例(managed)，若需要跨线程，需要使用 realm 提供的 <a href="https://realm.io/cn/docs/swift/latest/#section-26">机制</a></p><h2 id="Realm-对象"><a href="#Realm-对象" class="headerlink" title="Realm 对象"></a>Realm 对象</h2><p>Realm 文件可以存储在硬盘或者内存上</p><ul><li>硬盘上，使用 <code>init(path:)</code> 进行初始化</li><li>内存上，使用 <code>Configuraion</code> 进行配置</li></ul><hr><p>Realm 实例在内部的实现机制上，会进行缓存，因此，创建相同的 Realm 对象的消耗很小</p><blockquote><p>相同的 Realm 对象是指：使用相同的文件路径或 identifer</p></blockquote><hr><p>若需要确保 Realm 实例彻底被销毁，则需要</p><ul><li>在 <code>autoreleasepool &#123;&#125;</code> 块中使用 Realm 的 API</li><li>确保没有强引用指向 Realm</li></ul>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RealmSwift使用入门教程</title>
      <link href="/posts/2024/09/4cd7a987.html"/>
      <url>/posts/2024/09/4cd7a987.html</url>
      
        <content type="html"><![CDATA[<h2 id="打开一个-Realm"><a href="#打开一个-Realm" class="headerlink" title="打开一个 Realm"></a>打开一个 Realm</h2><ul><li>  向构造函数传递一个配置对象，这个配置对象指明了如何访问 Realm</li><li>配置对象指明了 Realm 数据库是位于什么地方<ul><li>  本地文件系统的 URL</li><li>  Realm 对象服务器的 URL, 同时还会包括访问的一些验证数据</li><li>  一个位于内存中的 Realm 标识符</li></ul></li></ul><h2 id="后台刷新"><a href="#后台刷新" class="headerlink" title="后台刷新"></a>后台刷新</h2><p>在 iOS 8 后，若使用了后台刷新的特性，并且涉及了 Realm, 则需要注意了</p><p>App 内的文件在设备锁屏下，会使用 <code>NSFileProtection</code> 自动加密，对 Realm 数据库进行打开操作会抛出异常</p><p>因此，需要降低 Realm 数据库文件和它的辅助文件的保护等级，同时，也可以选择使用 Realm 自带的加密方式</p><p>降低保护等级，从相关文件的上一层文件夹入手</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()</span><br><span class="line"></span><br><span class="line">// Get our Realm file&#x27;s parent directory</span><br><span class="line">let folderPath = realm.configuration.fileURL!.deletingLastPathComponent().path</span><br><span class="line"></span><br><span class="line">// Disable file protection for this directory</span><br><span class="line">try! FileManager.default.setAttributes([FileAttributeKey(rawValue: NSFileProtectionKey): NSFileProtectionNone],</span><br><span class="line">                                       ofItemAtPath: folderPath)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="打开一个默认-Realm"><a href="#打开一个默认-Realm" class="headerlink" title="打开一个默认 Realm"></a>打开一个默认 Realm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()</span><br></pre></td></tr></table></figure><h2 id="设置-Realm-的配置"><a href="#设置-Realm-的配置" class="headerlink" title="设置 Realm 的配置"></a>设置 Realm 的配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Realm(configuration: config)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置默认的配置</span><br><span class="line">Realm.Configuration.defaultConfiguration = config</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在实践中，发生异常的时刻总是会在第一次在某一个线程中，创建一个 Realm 实例。随后，在相同的线程中访问 Realm 实例总会成功，因为会复用缓存的实例</p><p>捕获异常，使用 Swift 的捕获机制就好</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  let realm = try Realm()</span><br><span class="line">&#125; catch let error as NSError &#123;</span><br><span class="line">  // handle error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Realm-的文件"><a href="#Realm-的文件" class="headerlink" title="Realm 的文件"></a>Realm 的文件</h2><ul><li>  <code>.realm</code> 主文件</li><li>  <code>.realm.lock</code> 与资源锁相关</li><li>  <code>.realm.management</code> 进程间通信的锁相关文件</li><li>  <code>.realm.note</code> A named pipe for notifications?</li></ul><h2 id="压缩-Realm"><a href="#压缩-Realm" class="headerlink" title="压缩 Realm"></a>压缩 Realm</h2><p>Realm 的架构意味着，它的文件大小会比它最后包含的数据大小要大，这与 Realm 的高性能，并行和安全的优点有关</p><p>为了避免在扩充 Realm 文件时经常调用耗时的系统操作，Realm 文件在运行时默认不会压缩</p><p>当然，可以通过 Configuration 来控制压缩</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let config = Realm.Configuration(shouldCompactOnLaunch: &#123; totalBytes, usedBytes in</span><br><span class="line">    // totalBytes refers to the size of the file on disk in bytes (data + free space)</span><br><span class="line">    // usedBytes refers to the number of bytes used by data in the file</span><br><span class="line"></span><br><span class="line">    // Compact if the file is over 100MB in size and less than 50% &#x27;used&#x27;</span><br><span class="line">    let oneHundredMB = 100 * 1024 * 1024</span><br><span class="line">    return (totalBytes &gt; oneHundredMB) &amp;&amp; (Double(usedBytes) / Double(totalBytes)) &lt; 0.5</span><br><span class="line">&#125;)</span><br><span class="line">do &#123;</span><br><span class="line">    // Realm is compacted on the first open if the configuration block conditions were met.</span><br><span class="line">    let realm = try Realm(configuration: config)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    // handle error compacting or opening Realm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是：</p><ul><li>  实现原理就是通过创建一个文件，重新写入数据，之后再把源文件替换掉，所以，这可能是一个很耗时的操作</li><li>  即使压缩的条件满足了，但如果另一个线程正在访问 Reaml, 压缩操作将会跳过不执行</li></ul><h2 id="删除-Realm-文件"><a href="#删除-Realm-文件" class="headerlink" title="删除 Realm 文件"></a>删除 Realm 文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autoreleasepool &#123;</span><br><span class="line">    // all Realm usage here</span><br><span class="line">&#125;</span><br><span class="line">let realmURL = Realm.Configuration.defaultConfiguration.fileURL!</span><br><span class="line">let realmURLs = [</span><br><span class="line">    realmURL,</span><br><span class="line">    realmURL.appendingPathExtension(&quot;lock&quot;),</span><br><span class="line">    realmURL.appendingPathExtension(&quot;note&quot;),</span><br><span class="line">    realmURL.appendingPathExtension(&quot;management&quot;)</span><br><span class="line">]</span><br><span class="line">for URL in realmURLs &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        try FileManager.default.removeItem(at: URL)</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        // handle error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="定义-Model"><a href="#定义-Model" class="headerlink" title="定义 Model"></a>定义 Model</h3><p>使用 Swift 定义的 Realm 的数据模型是通过类属性来实现，像普通 Swift 类一样使用，只要继承了 <code>Object</code> 类，或者另一个数据模型类</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>主要的限制就是，数据模型的实例，只能在创建它的线程中使用</p><h3 id="Model-的定义必须合法"><a href="#Model-的定义必须合法" class="headerlink" title="Model 的定义必须合法"></a>Model 的定义必须合法</h3><p>Realm 将会在代码运行时，转换所有的 Model, 因此，它们必须是合法的，即使有些模型并没有使用到</p><h3 id="所有必选项属性都需要有默认值"><a href="#所有必选项属性都需要有默认值" class="headerlink" title="所有必选项属性都需要有默认值"></a>所有必选项属性都需要有默认值</h3><p>在 Swift 中使用 Realm, <code>Swift.reflect(_:)</code> 将会被调用来了解关于 Model 的信息，这就要求，Model 的 <code>init()</code> 方法必须能成功调用</p><h2 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h2><ul><li>  <code>Bool</code></li><li>  <code>Int</code></li><li>  <code>Int8</code></li><li>  <code>Int16</code></li><li>  <code>Int32</code></li><li>  <code>Int64</code></li><li>  <code>Double</code></li><li>  <code>Float</code></li><li>  <code>String</code></li><li>  <code>Date</code></li><li>  <code>Data</code></li></ul><blockquote><p><code>CGFloat</code> 不鼓励使用，因为这不是与平台无关的类型</p><p><code>String</code>, <code>Date</code>, <code>Data</code> 类型的属性，可以是 optional 若要存储 optional 的数字类型，需要使用 <code>RealmOptional</code></p></blockquote><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>定义一个主键可以提升查找和更新数据的性能，主键一旦设置了就不可以更改</p><p>定义主键直接覆盖 <code>Object.primaryKey()</code> 方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var id = 0</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    override static func primaryKey() -&gt; String? &#123;</span><br><span class="line">        return &quot;id&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引-Indexing-properties"><a href="#索引-Indexing-properties" class="headerlink" title="索引 Indexing properties[]"></a>索引 Indexing properties[]</h2><p>cons</p><ul><li>  写速度稍微下降</li><li>  Realm 文件稍微大一点，因为要存储索引</li></ul><p>pros</p><ul><li>  让使用比较操作符的查询速度加快</li></ul><p>支持建立索引的数据类型</p><ul><li>  <code>String</code></li><li>  integer</li><li>  <code>Bool</code></li><li>  <code>Date</code></li></ul><p>使用索引，直接覆盖 <code>Object.indexedProperties()</code> 方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Book: Object &#123;</span><br><span class="line">    @objc dynamic var price = 0</span><br><span class="line">    @objc dynamic var title = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    override static func indexedProperties() -&gt; [String] &#123;</span><br><span class="line">        return [&quot;title&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="忽略属性"><a href="#忽略属性" class="headerlink" title="忽略属性"></a>忽略属性<a href="https://monsoir.github.io/Notes/iOS/Realm.html#%E5%BF%BD%E7%95%A5%E5%B1%9E%E6%80%A7"></a></h2><p>若不想某些属性整合到 Realm, 就可以通过覆盖 <code>Object.ignoreProperties()</code> 方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var tmpID = 0</span><br><span class="line">    var name: String &#123; // read-only properties are automatically ignored</span><br><span class="line">        return &quot;\(firstName) \(lastName)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    @objc dynamic var firstName = &quot;&quot;</span><br><span class="line">    @objc dynamic var lastName = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    override static func ignoredProperties() -&gt; [String] &#123;</span><br><span class="line">        return [&quot;tmpID&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些被忽略的属性</p><ul><li>  将使用 ivars 来进行支持，可以随便定义它们的 setter 和 getter</li><li>  不会响应与 Realm 相关的特性，但仍然可以被 KVO</li></ul><h2 id="模型数据自动刷新"><a href="#模型数据自动刷新" class="headerlink" title="模型数据自动刷新"></a>模型数据自动刷新</h2><p>如果 UI 以来模型数据的话，可以订阅 Realm notifications 来监控数据的更新状态</p><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><ul><li>  <code>Results</code> 从查询中获取到的结果</li><li>  <code>List</code> 表示模型的”对多”关系</li><li>  <code>LinkingObjects</code> 表示模型间的反向关系</li><li>  <code>RealmCollection</code> Realm 集合类型需要实现的一个协议</li><li>  <code>AnyRealmCollection</code> 一个无类型的类，用来向具体的集合类型传递方法调用</li></ul><h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><blockquote><p>所有对模型数据的更改（添加，修改，删除），都必须在一个写事务中进行</p></blockquote><p>通过模型数据类创建的实例，在添加到 Realm 之前，可以像普通的 Swift 类实例一样浪，但当添加到 Realm 时，必须通过一个写事务</p><ul><li>  由于写事务会产生不可忽略的开销，因此需要尽可能减少写入数据</li><li>  Realm 的写操作都是<strong>同步的</strong></li><li>  写操作会在 <code>beginWrite()</code> 时自动刷新，所以不会产生竞争条件???</li><li>  因为写操作会堵塞当前线程，所以最佳实践是将写操作搬到一个独立的线程中进行</li><li>  读操作并不会由于写事务的进行而被堵塞，除非有多个写事务同时需要进行</li></ul><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据有两种方式</p><ul><li>  直接在写事务中对属性进行赋值</li><li>  KVC</li></ul><h2 id="通过主键来更新数据"><a href="#通过主键来更新数据" class="headerlink" title="通过主键来更新数据"></a>通过主键来更新数据</h2><p>基于主键对数据进行更新或添加，调用 <code>Realm().add(_:update:)</code>, 重点在于 <code>update</code> 这个参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Creating a book with the same primary key as a previously saved book</span><br><span class="line">let cheeseBook = Book()</span><br><span class="line">cheeseBook.title = &quot;Cheese recipes&quot;</span><br><span class="line">cheeseBook.price = 9000</span><br><span class="line">cheeseBook.id = 1</span><br><span class="line"></span><br><span class="line">// Updating book with id = 1</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.add(cheeseBook, update: true)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式更新数据，可以只传入需要更新的数据，而不是整个对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Assuming a &quot;Book&quot; with a primary key of `1` already exists.</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.create(Book.self, value: [&quot;id&quot;: 1, &quot;price&quot;: 9000.0], update: true)</span><br><span class="line">    // the book&#x27;s `title` property will remain unchanged.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于没有定义主键的模型，不可以基于主键来添加或更新数据</p></blockquote><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li>查询操作返回一个 <code>Results</code> 实例<ul><li>  这个实例大抵与 Swift 的 <code>Array</code> 相同，不同之处在于，<code>Results</code> 中的元素类型都必须是一致的</li></ul></li><li>  所有的查询操作，属性访问，都是懒加载的</li><li>  <code>Results</code> 中的数据并不是数据的一份副本，所以对 <code>Results</code> 中的数据进行修改（需要在写事务中），都会直接影响到持久性存储中的数据</li><li>  当查询操作执行之后，或一个通知 block 被添加之后，<code>Results</code> 中的数据将与最新数据保持同步</li></ul><p>最简单的查询，返回所有数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let dogs = realm.objects(Dog.self)</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>过滤调用方法 <code>Results().filter(_:...)</code></p><p>过滤条件使用的是字符串，与 <code>NSPredicate</code> 大抵相同</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Query using a predicate string</span><br><span class="line">var tanDogs = realm.objects(Dog.self).filter(&quot;color = &#x27;tan&#x27; AND name BEGINSWITH &#x27;B&#x27;&quot;)</span><br><span class="line"></span><br><span class="line">// Query using an NSPredicate</span><br><span class="line">let predicate = NSPredicate(format: &quot;color = %@ AND name BEGINSWITH %@&quot;, &quot;tan&quot;, &quot;B&quot;)</span><br><span class="line">tanDogs = realm.objects(Dog.self).filter(predicate)</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h2 id="分页读取"><a href="#分页读取" class="headerlink" title="分页读取"></a>分页读取</h2><p>在其他的数据库中，通常使用 <code>LIMIT</code> 关键字限制一次读取的数据量，达到了分页的效果</p><p>而在 Realm 中，由于懒加载的特性，直接拿 <code>Results</code> 读取就可以了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Loop through the first 5 Dog objects</span><br><span class="line">// restricting the number of objects read from disk</span><br><span class="line">let dogs = try! Realm().objects(Dog.self)</span><br><span class="line">for i in 0..&lt;5 &#123;</span><br><span class="line">    let dog = dogs[i]</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知<a href="https://monsoir.github.io/Notes/iOS/Realm.html#%E9%80%9A%E7%9F%A5"></a></h2><p>可以注册一个监听器来接受通知，这些通知将会在 Realm 发生改变，或者 Realm 中的实体发生了变化是发出</p><ul><li>  Realm notifications Realm 作为一个整体发生改变时发出</li><li>  collection notifications 单独的一个实例发生修改，添加或删除时发出</li></ul><p>当一个通知的 token 还在被强引用着时，通知就会发出，所以，当需要获取通知时，必须保持对 token 的强引用，否则，通知将会被取消订阅</p><p>通知将会在它们注册订阅者的线程上进行发送，并且这个线程必须要有一个 RunLoop - 如果在主线程外的线程订阅通知，则需要负责对该线程创建一个 RunLoop</p><p>通知的发送是异步的，发送时机在对应的写事务 commit 之后进行</p><p>由于同时是通过 RunLoop 来尽心传递，所以通知可能会被该 RunLoop 中的其他活动延迟。当通知不能被立即传递时，多个写事务中的变化可能会合并成一个通知</p><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p>通知可以被注册到一整个 Realm 中，每一次某个 Realm 中的写事务提交后，通知都会被传递</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Observe Realm Notifications</span><br><span class="line">let token = realm.addNotificationBlock &#123; notification, realm in</span><br><span class="line">    viewController.updateUI()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// later</span><br><span class="line">token.stop()</span><br></pre></td></tr></table></figure><h3 id="集合通知"><a href="#集合通知" class="headerlink" title="集合通知"></a>集合通知</h3><p>集合通知中不会包含整个对应的 Realm, 但包含对数据变化的跟详细的叙述，如添加，删除，更改</p><p>集合通知也是异步传递，通知中的参数首先是最原始的结果，后面就是对添加，删除，更新数据的进一步说明，这些变化可以通过 <code>RealmCollectionChange</code> 参数进行获取，其中包括了 <code>deletions</code>, <code>insertions</code>, <code>modifications</code></p><p>通知将会涵盖对实例属性的一切修改，以及一对一，一对多关系的变化，但不会包含反向关系的变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ViewController: UITableViewController &#123;</span><br><span class="line">    var notificationToken: NotificationToken? = nil</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        let realm = try! Realm()</span><br><span class="line">        let results = realm.objects(Person.self).filter(&quot;age &gt; 5&quot;)</span><br><span class="line"></span><br><span class="line">        // Observe Results Notifications</span><br><span class="line">        notificationToken = results.addNotificationBlock &#123; [weak self] (changes: RealmCollectionChange) in</span><br><span class="line">            guard let tableView = self?.tableView else &#123; return &#125;</span><br><span class="line">            switch changes &#123;</span><br><span class="line">            case .initial:</span><br><span class="line">                // Results are now populated and can be accessed without blocking the UI</span><br><span class="line">                tableView.reloadData()</span><br><span class="line">            case .update(_, let deletions, let insertions, let modifications):</span><br><span class="line">                // Query results have changed, so apply them to the UITableView</span><br><span class="line">                tableView.beginUpdates()</span><br><span class="line">                tableView.insertRows(at: insertions.map(&#123; IndexPath(row: $0, section: 0) &#125;),</span><br><span class="line">                                     with: .automatic)</span><br><span class="line">                tableView.deleteRows(at: deletions.map(&#123; IndexPath(row: $0, section: 0)&#125;),</span><br><span class="line">                                     with: .automatic)</span><br><span class="line">                tableView.reloadRows(at: modifications.map(&#123; IndexPath(row: $0, section: 0) &#125;),</span><br><span class="line">                                     with: .automatic)</span><br><span class="line">                tableView.endUpdates()</span><br><span class="line">            case .error(let error):</span><br><span class="line">                // An error occurred while opening the Realm file on the background worker thread</span><br><span class="line">                fatalError(&quot;\(error)&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deinit &#123;</span><br><span class="line">        notificationToken?.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象通知"><a href="#对象通知" class="headerlink" title="对象通知"></a>对象通知</h3><p>Realm 支持对象级别的通知。这意味着，可以为某一个特定的 Realm 数据模型注册通知</p><p>当这个数据模型实例被删除之后，通知回调将不会在被调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class StepCounter: Object &#123;</span><br><span class="line">    @objc dynamic var steps = 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let stepCounter = StepCounter()</span><br><span class="line">let realm = try! Realm()</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.add(stepCounter)</span><br><span class="line">&#125;</span><br><span class="line">var token : NotificationToken?</span><br><span class="line">token = stepCounter.addNotificationBlock &#123; change in</span><br><span class="line">    switch change &#123;</span><br><span class="line">    case .change(let properties):</span><br><span class="line">        for property in properties &#123;</span><br><span class="line">            if property.name == &quot;steps&quot; &amp;&amp; property.newValue as! Int &gt; 1000 &#123;</span><br><span class="line">                print(&quot;Congratulations, you&#x27;ve exceeded 1000 steps.&quot;)</span><br><span class="line">                token = nil</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(&quot;An error occurred: \(error)&quot;)</span><br><span class="line">    case .deleted:</span><br><span class="line">        print(&quot;The object was deleted.&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="界面驱动存储"><a href="#界面驱动存储" class="headerlink" title="界面驱动存储"></a>界面驱动存储</h2><p>Realm 中的通知总是异步传送的，所以并不会堵塞主线程。但在某些情况下，数据的变化需要在主线程中同步进行，并立即反应到 UI 上</p><p>其中一种情况就是为 table view 添加一个条目，同时需要为 table view 的数据源添加一条数据，此时，通知的异步在这里并不恰当，因为异步的通知反馈将会导致 App 崩溃，因为 table view 的条目与数据源中的数据不一致</p><p>此时，我们将使用 <code>Realm.commitWrite(withoutNotifying:)</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Add fine-grained notification block</span><br><span class="line">token = collection.addNotificationBlock &#123; changes in</span><br><span class="line">    switch changes &#123;</span><br><span class="line">    case .initial:</span><br><span class="line">        tableView.reloadData()</span><br><span class="line">    case .update(_, let deletions, let insertions, let modifications):</span><br><span class="line">        // Query results have changed, so apply them to the UITableView</span><br><span class="line">        tableView.beginUpdates()</span><br><span class="line">        tableView.insertRows(at: insertions.map(&#123; IndexPath(row: $0, section: 0) &#125;),</span><br><span class="line">                             with: .automatic)</span><br><span class="line">        tableView.deleteRows(at: deletions.map(&#123; IndexPath(row: $0, section: 0)&#125;),</span><br><span class="line">                             with: .automatic)</span><br><span class="line">        tableView.reloadRows(at: modifications.map(&#123; IndexPath(row: $0, section: 0) &#125;),</span><br><span class="line">                             with: .automatic)</span><br><span class="line">        tableView.endUpdates()</span><br><span class="line">    case .error(let error):</span><br><span class="line">        // handle error</span><br><span class="line">        ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func insertItem() throws &#123;</span><br><span class="line">     // Perform an interface-driven write on the main thread:</span><br><span class="line">     collection.realm!.beginWrite()</span><br><span class="line">     collection.insert(Item(), at: 0)</span><br><span class="line">     // And mirror it instantly in the UI</span><br><span class="line">     tableView.insertRows(at: [IndexPath(row: 0, section: 0)], with: .automatic)</span><br><span class="line">     // Making sure the change notification doesn&#x27;t apply the change a second time</span><br><span class="line">     try collection.realm!.commitWrite(withoutNotifying: [token])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>  <a href="https://realm.io/docs/swift/latest/">https://realm.io/docs/swift/latest/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RealmSwift:如何正确创建一对一关系？</title>
      <link href="/posts/2024/09/3eb09049.html"/>
      <url>/posts/2024/09/3eb09049.html</url>
      
        <content type="html"><![CDATA[<p>RealmSwift是一种流行的移动端数据库解决方案，它提供了一种简单且高效的方式来存储和管理移动应用程序的数据。在RealmSwift中，创建一对一关系可以通过以下步骤来实现：</p><ol><li>定义数据模型：首先，需要定义两个数据模型类，分别表示关系中的两个对象。例如，我们可以创建一个Person类和一个Address类来表示人和他们的地址。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person: Object &#123;</span><br><span class="line">    @objc dynamic var name = &quot;&quot;</span><br><span class="line">    @objc dynamic var age = 0</span><br><span class="line">    @objc dynamic var address: Address?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Address: Object &#123;</span><br><span class="line">    @objc dynamic var street = &quot;&quot;</span><br><span class="line">    @objc dynamic var city = &quot;&quot;</span><br><span class="line">    @objc dynamic var person: Person?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span>  <ol start="2"><li><p>建立关联：在Person类和Address类中，使用<code>@objc dynamic var</code>关键字声明一个属性，用于建立两个对象之间的关联。在Person类中，我们声明了一个名为address的可选属性，表示一个人可以有一个地址。在Address类中，我们声明了一个名为person的可选属性，表示一个地址可以属于一个人。</p></li><li><p>创建和保存对象：要创建一对一关系，我们可以先创建Person对象和Address对象，然后将它们关联起来。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let person = Person()</span><br><span class="line">person.name = &quot;John&quot;</span><br><span class="line">person.age = 30</span><br><span class="line"></span><br><span class="line">let address = Address()</span><br><span class="line">address.street = &quot;123 Main St&quot;</span><br><span class="line">address.city = &quot;New York&quot;</span><br><span class="line"></span><br><span class="line">person.address = address</span><br><span class="line">address.person = person</span><br><span class="line"></span><br><span class="line">// 保存对象到数据库</span><br><span class="line">let realm = try! Realm()</span><br><span class="line">try! realm.write &#123;</span><br><span class="line">    realm.add(person)</span><br><span class="line">    realm.add(address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询关联对象：要查询关联对象，可以使用Realm提供的查询语法。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()</span><br><span class="line">let persons = realm.objects(Person.self)</span><br><span class="line">for person in persons &#123;</span><br><span class="line">    if let address = person.address &#123;</span><br><span class="line">        print(&quot;Person: \(person.name), Address: \(address.street), \(address.city)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就成功地创建了一个一对一关系，并且可以通过查询来获取关联对象的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Realm数据库入门</title>
      <link href="/posts/2024/09/33816da1.html"/>
      <url>/posts/2024/09/33816da1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近项目中在用Realm，所以把自己实践过程中的一些心得总结分享一下。</p><p>Realm是由Y Combinator孵化的创业团队开源出来的一款可以用于iOS(同样适用于Swift&amp;Objective-C)和Android的跨平台移动数据库。目前最新版是Realm 2.0.2，支持的平台包括Java，Objective-C，Swift，React Native，Xamarin。</p><p>Realm官网上说了好多优点，我觉得选用Realm的最吸引人的优点就三点：</p><ol><li><p><strong>跨平台</strong>：现在很多应用都是要兼顾iOS和Android两个平台同时开发。如果两个平台都能使用相同的数据库，那就不用考虑内部数据的架构不同，使用Realm提供的API，可以使数据持久化层在两个平台上无差异化的转换。</p></li><li><p><strong>简单易用</strong>：Core Data 和 SQLite 冗余、繁杂的知识和代码足以吓退绝大多数刚入门的开发者，而换用 Realm，则可以极大地减少学习成本，立即学会本地化存储的方法。毫不吹嘘的说，把官方最新文档完整看一遍，就完全可以上手开发了。</p></li><li><p><strong>可视化</strong>：Realm 还提供了一个轻量级的数据库查看工具，在Mac Appstore 可以下载“Realm Browser”这个工具，开发者可以查看数据库当中的内容，执行简单的插入和删除数据的操作。毕竟，很多时候，开发者使用数据库的理由是因为要提供一些所谓的“知识库”。</p></li></ol><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-223.png" alt=""> “Realm Browser”这个工具调试起Realm数据库实在太好用了，强烈推荐。<span id="more"></span><p>如果使用模拟器进行调试,可以通过</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[RLMRealmConfiguration defaultConfiguration].fileURL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印出Realm 数据库地址,然后在Finder中⌘⇧G跳转到对应路径下,用Realm Browser打开对应的.realm文件就可以看到数据啦.</p><p>如果是使用真机调试的话“Xcode-&gt;Window-&gt;Devices(⌘⇧2)”,然后找到对应的设备与项目,点击Download Container，导出xcappdata文件后,显示包内容,进到AppData-&gt;Documents,使用Realm Browser打开.realm文件即可.</p><p>自2012年起， Realm 就已经开始被用于正式的商业产品中了。经过4年的使用，逐步趋于稳定。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>1.Realm 安装</li><li>2.Realm 中的相关术语</li><li>3.Realm 入门——如何使用</li><li>4.Realm 使用中可能需要注意的一些问题</li><li>5.Realm “放弃”——优点和缺点</li><li>6.Realm 到底是什么？</li><li>7.总结</li></ul><h2 id="一-Realm-安装"><a href="#一-Realm-安装" class="headerlink" title="一. Realm 安装"></a>一. Realm 安装</h2><p>使用 Realm 构建应用的基本要求：</p><ol><li>iOS 7 及其以上版本, macOS 10.9 及其以上版本，此外 Realm 支持 tvOS 和 watchOS 的所有版本。</li><li>需要使用 Xcode 7.3 或者以后的版本。</li></ol><p><strong>注意</strong> 这里如果是纯的OC项目，就安装OC的Realm，如果是纯的Swift项目，就安装Swift的Realm。如果是混编项目，就需要安装OC的Realm，然后要把 <a href="https://github.com/realm/realm-cocoa/blob/master/Realm/Swift/RLMSupport.swift">Swift/RLMSupport.swift</a> 文件一同编译进去。</p><p>RLMSupport.swift这个文件为 Objective-C 版本的 Realm 集合类型中引入了 Sequence 一致性，并且重新暴露了一些不能够从 Swift 中进行原生访问的 Objective-C 方法，例如可变参数 (variadic arguments)。更加详细的说明见<a href="https://realm.io/docs/objc/latest/#getting-started">官方文档</a>。</p><p>安装方法就4种：</p><h3 id="一-Dynamic-Framework"><a href="#一-Dynamic-Framework" class="headerlink" title="一. Dynamic Framework"></a>一. Dynamic Framework</h3><p><strong>注意：动态框架与 iOS 7 不兼容，要支持 iOS 7 的话请查看“静态框架”。</strong></p><ol><li>下载<a href="https://static.realm.io/downloads/objc/realm-objc-2.0.2.zip">最新的Realm发行版本</a>，并解压；</li><li>前往Xcode 工程的”General”设置项中，从ios/dynamic/、osx/、tvos/<br>或者watchos/中将’Realm.framework’拖曳到”Embedded Binaries”选项中。确认<strong>Copy items if needed</strong>被选中后，点击<strong>Finish</strong>按钮；</li><li>在单元测试 Target 的”Build Settings”中，在”Framework Search Paths”中添加Realm.framework的上级目录；</li><li>如果希望使用 Swift 加载 Realm，请拖动Swift/RLMSupport.swift<br>文件到 Xcode 工程的文件导航栏中并选中<strong>Copy items if needed</strong>；</li><li>如果在 iOS、watchOS 或者 tvOS 项目中使用 Realm，请在您应用目标的”Build Phases”中，创建一个新的”Run Script Phase”，并将</li></ol><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bash <span class="string">&quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;FRAMEWORKS_FOLDER_PATH&#125;/Realm.framework/strip-frameworks.sh&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这条脚本复制到文本框中。 因为要绕过<a href="http://www.openradar.me/radar?id=6409498411401216">APP商店提交的bug</a>，这一步在打包通用设备的二进制发布版本时是必须的。</p><h3 id="二-CocoaPods"><a href="#二-CocoaPods" class="headerlink" title="二.CocoaPods"></a>二.CocoaPods</h3><p>在项目的Podfile中，添加pod ‘Realm’，在终端运行pod install。</p><h3 id="三-Carthage"><a href="#三-Carthage" class="headerlink" title="三.Carthage"></a>三.Carthage</h3><p>1.在Carthage 中添加github “realm/realm-cocoa”，运行carthage update。为了修改用以构建项目的 Swift toolchain，通过–toolchain参数来指定合适的 toolchain。–no-use-binaries参数也是必需的，这可以避免 Carthage 将预构建的 Swift 3.0 二进制包下载下来。 例如：  </p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">carthage <span class="keyword">update</span> --toolchain <span class="keyword">com</span>.apple.dt.toolchain.Swift_2_3 --<span class="keyword">no</span>-use-binaries</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.从 Carthage/Build/目录下对应平台文件夹中，将 Realm.framework<br> 拖曳到您 Xcode 工程”General”设置项的”Linked Frameworks and Libraries”选项卡中；</p><p>3.<strong>iOS/tvOS/watchOS:</strong> 在您应用目标的“Build Phases”设置选项卡中，点击“+”按钮并选择“New Run Script Phase”。在新建的Run Script中，填写:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/usr/local/bin/carthage <span class="keyword">copy</span>-frameworks</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在“Input Files”内添加您想要使用的框架路径，例如:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(SRCROOT)/Carthage/Build/iOS/Realm.framework</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为要绕过<a href="http://www.openradar.me/radar?id=6409498411401216">APP商店提交的bug</a>，这一步在打包通用设备的二进制发布版本时是必须的。</p><h3 id="四-Static-Framework-iOS-only"><a href="#四-Static-Framework-iOS-only" class="headerlink" title="四.Static Framework (iOS only)"></a>四.Static Framework (iOS only)</h3><ol><li>下载 <a href="https://static.realm.io/downloads/objc/realm-objc-2.0.2.zip">Realm 的最新版本</a>并解压，将 Realm.framework 从 ios/static/文件夹拖曳到您 Xcode 项目中的文件导航器当中。确保 <strong>Copy items if needed</strong> 选中然后单击 <strong>Finish</strong>；</li><li>在 Xcode 文件导航器中选择您的项目，然后选择您的应用目标，进入到** Build Phases** 选项卡中。在 <strong>Link Binary with Libraries</strong> 中单击 + 号然后添加<strong>libc++.dylib</strong>；</li></ol><h2 id="二-Realm-中的相关术语"><a href="#二-Realm-中的相关术语" class="headerlink" title="二. Realm 中的相关术语"></a>二. Realm 中的相关术语</h2><p>为了能更好的理解Realm的使用，先介绍一下涉及到的相关术语。</p><p><strong>RLMRealm</strong>：Realm是框架的核心所在，是我们构建数据库的访问点，就如同Core Data的管理对象上下文（managed object context）一样。出于简单起见，realm提供了一个默认的defaultRealm( )的便利构造器方法。</p><p><strong>RLMObject</strong>：这是我们自定义的Realm数据模型。创建数据模型的行为对应的就是数据库的结构。要创建一个数据模型，我们只需要继承RLMObject，然后设计我们想要存储的属性即可。</p><p>**关系(Relationships)**：通过简单地在数据模型中声明一个RLMObject类型的属性，我们就可以创建一个“一对多”的对象关系。同样地，我们还可以创建“多对一”和“多对多”的关系。</p><p><strong>写操作事务(Write Transactions)<strong>：数据库中的所有操作，比如创建、编辑，或者删除对象，都必须在</strong>事务</strong>中完成。“事务”是指位于write闭包内的代码段。</p><p>**查询(Queries)**：要在数据库中检索信息，我们需要用到“检索”操作。检索最简单的形式是对Realm( )数据库发送查询消息。如果需要检索更复杂的数据，那么还可以使用断言（predicates）、复合查询以及结果排序等等操作。</p><p><strong>RLMResults</strong>：这个类是执行任何查询请求后所返回的类，其中包含了一系列的<strong>RLMObject</strong>对象。RLMResults和NSArray类似，我们可以用下标语法来对其进行访问，并且还可以决定它们之间的关系。不仅如此，它还拥有许多更强大的功能，包括排序、查找等等操作。</p><h2 id="三-Realm-入门——如何使用"><a href="#三-Realm-入门——如何使用" class="headerlink" title="三.Realm 入门——如何使用"></a>三.Realm 入门——如何使用</h2><p>由于Realm的API极为友好，一看就懂，所以这里就按照平时开发的顺序，把需要用到的都梳理一遍。</p><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">void</span>)creatDataBaseWithName:(<span class="built_in">NSString</span> *)databaseName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *docPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *path = [docPath objectAtIndex:<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *filePath = [path stringByAppendingPathComponent:databaseName];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;数据库目录 = %@&quot;</span>,filePath);</span><br><span class="line"></span><br><span class="line">    RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</span><br><span class="line">    config.fileURL = [<span class="built_in">NSURL</span> URLWithString:filePath];</span><br><span class="line">    config.objectClasses = @[MyClass.class, MyOtherClass.class];</span><br><span class="line">    config.readOnly = <span class="literal">NO</span>;</span><br><span class="line">    <span class="type">int</span> currentVersion = <span class="number">1.0</span>;</span><br><span class="line">    config.schemaVersion = currentVersion;</span><br><span class="line">    </span><br><span class="line">    config.migrationBlock = ^(RLMMigration *migration , uint64_t oldSchemaVersion) &#123;</span><br><span class="line">       <span class="comment">// 这里是设置数据迁移的block</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion &lt; currentVersion) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    [RLMRealmConfiguration setDefaultConfiguration:config];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建数据库主要设置RLMRealmConfiguration，设置数据库名字和存储地方。把路径以及数据库名字拼接好字符串，赋值给fileURL即可。</p><p>objectClasses这个属性是用来控制对哪个类能够存储在指定 Realm 数据库中做出限制。例如，如果有两个团队分别负责开发您应用中的不同部分，并且同时在应用内部使用了 Realm 数据库，那么您肯定不希望为它们协调进行数据迁移您可以通过设置RLMRealmConfiguration的 objectClasses属性来对类做出限制。objectClasses一般可以不用设置。</p><p>readOnly是控制是否只读属性。</p><p>还有一个很特殊的数据库，内存数据库。</p><p>通常情况下，Realm 数据库是存储在硬盘中的，但是您能够通过设置inMemoryIdentifier而不是设置RLMRealmConfiguration中的 fileURL属性，以创建一个完全在内存中运行的数据库。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];config.inMemoryIdentifier = <span class="string">@&quot;MyInMemoryRealm&quot;</span>;RLMRealm *realm = [RLMRealm realmWithConfiguration:config error:<span class="literal">nil</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内存数据库在每次程序运行期间都不会保存数据。但是，这不会妨碍到 Realm 的其他功能，包括查询、关系以及线程安全。</p><p>如果需要一种灵活的数据读写但又不想储存数据的方式的话，那么可以选择用内存数据库。(关于内存数据库的性能 和 类属性的 性能，还没有测试过，感觉性能不会有太大的差异，所以内存数据库使用场景感觉不多)</p><p>使用内存数据库需要注意的是：</p><ol><li>内存数据库会在临时文件夹中创建多个文件，用来协调处理诸如跨进程通知之类的事务。 实际上没有任何的数据会被写入到这些文件当中，除非操作系统由于内存过满， <del>需要清除磁盘上的多余空间。</del> 才会去把内存里面的数据存入到文件中。（感谢 @酷酷的哀殿 指出）</li></ol><ol start="2"><li>如果某个内存 Realm 数据库实例没有被引用，那么所有的数据就会被释放。所以必须要在应用的生命周期内保持对Realm内存数据库的强引用，以避免数据丢失。</li></ol><h3 id="2-建表"><a href="#2-建表" class="headerlink" title="2. 建表"></a>2. 建表</h3><p>Realm数据模型是基于标准 Objective‑C 类来进行定义的，使用属性来完成模型的具体定义。</p><p>我们只需要继承 RLMObject或者一个已经存在的模型类，您就可以创建一个新的 Realm 数据模型对象。对应在数据库里面就是一张表。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Realm/Realm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RLMUser</span> : <span class="title">RLMObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span>       *accid;</span><br><span class="line"><span class="comment">//用户注册id</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span>      custId;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span>       *custName;</span><br><span class="line"><span class="comment">//头像大图url</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span>       *avatarBig;</span><br><span class="line"><span class="keyword">@property</span> RLMArray&lt;Car&gt; *cars;</span><br><span class="line"></span><br><span class="line">RLM_ARRAY_TYPE(RLMUser) <span class="comment">// 定义RLMArray&lt;RLMUser&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">RLMObject</span></span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *carName;</span><br><span class="line"><span class="keyword">@property</span> RLMUser *owner;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">RLM_ARRAY_TYPE(Car) <span class="comment">// 定义RLMArray&lt;Car&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，RLMObject 官方建议不要加上 Objective-C的property attributes(如nonatomic, atomic, strong, copy, weak 等等）假如设置了，这些attributes会一直生效直到RLMObject被写入realm数据库。</p><p>RLM_ARRAY_TYPE宏创建了一个协议，从而允许 RLMArray<Car>语法的使用。如果该宏没有放置在模型接口的底部的话，您或许需要提前声明该模型类。</p><p>关于RLMObject的的关系</p><p>1.对一(To-One)关系</p><p>对于多对一(many-to-one)或者一对一(one-to-one)关系来说，只需要声明一个RLMObject子类类型的属性即可，如上面代码例子，@property RLMUser *owner;</p><p>2.对多(To-Many)关系<br>通过 RLMArray类型的属性您可以定义一个对多关系。如上面代码例子，@property RLMArray<Car> *cars;</p><p>3.反向关系(Inverse Relationship)</p><p>链接是单向性的。因此，如果对多关系属性 RLMUser.cars链接了一个 Car实例，而这个实例的对一关系属性 Car.owner又链接到了对应的这个 RLMUser实例，那么实际上这些链接仍然是互相独立的。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Car</span> : <span class="title">RLMObject</span></span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *carName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) RLMLinkingObjects *owners;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)linkingObjectsProperties &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">             <span class="string">@&quot;owners&quot;</span>: [RLMPropertyDescriptor descriptorWithClass:RLMUser.class propertyName:<span class="string">@&quot;cars&quot;</span>],</span><br><span class="line">             &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以类比Core Data里面xcdatamodel文件里面那些“箭头”</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-224.png" alt=""> <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)primaryKey &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@&quot;ID&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置属性默认值</span></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)defaultPropertyValues&#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;<span class="string">@&quot;carName&quot;</span>:<span class="string">@&quot;测试&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置忽略属性,即不存到realm数据库中</span></span><br><span class="line">+ (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)ignoredProperties &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@&quot;ID&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般来说,属性为nil的话realm会抛出异常,但是如果实现了这个方法的话,就只有name为nil会抛出异常,也就是说现在cover属性可以为空了</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)requiredProperties &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@&quot;name&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置索引,可以加快检索的速度</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)indexedProperties &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@&quot;ID&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还可以给RLMObject设置主键primaryKey，默认值defaultPropertyValues，忽略的属性ignoredProperties，必要属性requiredProperties，索引indexedProperties。比较有用的是主键和索引。</p><h3 id="3-存储数据"><a href="#3-存储数据" class="headerlink" title="3.存储数据"></a>3.存储数据</h3><p>新建对象</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// (1) 创建一个Car对象，然后设置其属性</span></span><br><span class="line">Car *car = [[Car alloc] init];</span><br><span class="line">car.carName = <span class="string">@&quot;Lamborghini&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 通过字典创建Car对象</span></span><br><span class="line">Car *myOtherCar = [[Car alloc] initWithValue:@&#123;<span class="string">@&quot;name&quot;</span> : <span class="string">@&quot;Rolls-Royce&quot;</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 通过数组创建狗狗对象</span></span><br><span class="line">Car *myThirdcar = [[Car alloc] initWithValue:@[<span class="string">@&quot;BMW&quot;</span>]];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意，所有的必需属性都必须在对象添加到 Realm 前被赋值</strong></p><h2 id="4-增"><a href="#4-增" class="headerlink" title="4.增"></a>4.增</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">[realm beginWriteTransaction];</span><br><span class="line">[realm addObject:Car];</span><br><span class="line">[realm commitWriteTransaction];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>请注意，如果在进程中存在多个写入操作的话，那么单个写入操作将会阻塞其余的写入操作，并且还会锁定该操作所在的当前线程。</strong></p><p>Realm这个特性与其他持久化解决方案类似，我们建议您使用该方案常规的最佳做法：将写入操作转移到一个独立的线程中执行。</p><p>官方给出了一个建议：</p><p>由于 Realm 采用了 MVCC 设计架构，<strong>读取操作并不会因为写入事务正在进行而受到影响</strong>。除非您需要立即使用多个线程来同时执行写入操作，不然您应当采用批量化的写入事务，而不是采用多次少量的写入事务。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        </span><br><span class="line">        RLMRealm *realm = [RLMRealm defaultRealm];</span><br><span class="line">        [realm transactionWithBlock:^&#123;</span><br><span class="line">            [realm addObject: Car];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码就是把写事务放到子线程中去处理。</p><h3 id="5-删"><a href="#5-删" class="headerlink" title="5.删"></a>5.删</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[realm beginWriteTransaction];</span><br><span class="line"><span class="comment">// 删除单条记录</span></span><br><span class="line">[realm deleteObject:Car];</span><br><span class="line"><span class="comment">// 删除多条记录</span></span><br><span class="line">[realm deleteObjects:CarResult];</span><br><span class="line"><span class="comment">// 删除所有记录</span></span><br><span class="line">[realm deleteAllObjects];</span><br><span class="line"></span><br><span class="line">[realm commitWriteTransaction];</span><br></pre></td></tr></table></figure><h3 id="6-改"><a href="#6-改" class="headerlink" title="6.改"></a>6.改</h3><p>当没有主键的情况下，需要先查询，再修改数据。<br>当有主键的情况下，有以下几个非常好用的API</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[realm addOrUpdateObject:Car];</span><br><span class="line"></span><br><span class="line">[Car createOrUpdateInRealm:realm withValue:@&#123;<span class="string">@&quot;id&quot;</span>: @<span class="number">1</span>, <span class="string">@&quot;price&quot;</span>: @<span class="number">9000.0</span>f&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>addOrUpdateObject会去先查找有没有传入的Car相同的主键，如果有，就更新该条数据。这里需要注意，<strong>addOrUpdateObject这个方法不是增量更新</strong>，所有的值都必须有，如果有哪几个值是null，那么就会覆盖原来已经有的值，这样就会出现数据丢失的问题。</p><p>createOrUpdateInRealm：withValue：这个方法是增量更新的，后面传一个字典，使用这个方法的前提是有主键。方法会先去主键里面找有没有字典里面传入的主键的记录，如果有，就只更新字典里面的子集。如果没有，就新建一条记录。</p><h3 id="7-查"><a href="#7-查" class="headerlink" title="7.查"></a>7.查</h3><p>在Realm中所有的查询（包括查询和属性访问）在 Realm 中都是延迟加载的，只有当属性被访问时，才能够读取相应的数据。</p><p>查询结果并不是数据的拷贝：修改查询结果（在写入事务中）会直接修改硬盘上的数据。同样地，您可以直接通过包含在RLMResults中的RLMObject对象完成遍历关系图的操作。除非查询结果被使用，否则检索的执行将会被推迟。这意味着链接几个不同的临时 {RLMResults} 来进行排序和匹配数据，不会执行额外的工作，例如处理中间状态。<br>一旦检索执行之后，或者通知模块被添加之后， RLMResults将随时保持更新，接收 Realm 中，在后台线程上执行的检索操作中可能所做的更改。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从默认数据库查询所有的车</span></span><br><span class="line">RLMResults&lt;Car *&gt; *cars = [Car allObjects];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用断言字符串查询</span></span><br><span class="line">RLMResults&lt;Dog *&gt; *tanDogs = [Dog objectsWhere:<span class="string">@&quot;color = &#x27;棕黄色&#x27; AND name BEGINSWITH &#x27;大&#x27;&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 NSPredicate 查询</span></span><br><span class="line"><span class="built_in">NSPredicate</span> *pred = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;color = %@ AND name BEGINSWITH %@&quot;</span>,</span><br><span class="line">                     <span class="string">@&quot;棕黄色&quot;</span>, <span class="string">@&quot;大&quot;</span>];</span><br><span class="line">RLMResults *results = [Dog objectsWithPredicate:pred];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序名字以“大”开头的棕黄色狗狗</span></span><br><span class="line">RLMResults&lt;Dog *&gt; *sortedDogs = [[Dog objectsWhere:<span class="string">@&quot;color = &#x27;棕黄色&#x27; AND name BEGINSWITH &#x27;大&#x27;&quot;</span>] sortedResultsUsingProperty:<span class="string">@&quot;name&quot;</span> ascending:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Realm还能支持链式查询</p><p>Realm 查询引擎一个特性就是它能够通过非常小的事务开销来执行链式查询(chain queries)，而不需要像传统数据库那样为每个成功的查询创建一个不同的数据库服务器访问。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">RLMResults&lt;Car *&gt; *Cars = [Car objectsWhere:<span class="string">@&quot;color = blue&quot;</span>];</span><br><span class="line">RLMResults&lt;Car *&gt; *CarsWithBNames = [Cars objectsWhere:<span class="string">@&quot;name BEGINSWITH &#x27;B&#x27;&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-其他相关特性"><a href="#8-其他相关特性" class="headerlink" title="8.其他相关特性"></a>8.其他相关特性</h3><p>1.支持KVC和KVO</p><p>RLMObject、RLMResult以及 RLMArray<br>都遵守键值编码(Key-Value Coding)（KVC）机制。当您在运行时才能决定哪个属性需要更新的时候，这个方法是最有用的。<br>将 KVC 应用在集合当中是大量更新对象的极佳方式，这样就可以不用经常遍历集合，为每个项目创建一个访问器了。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">RLMResults&lt;Person *&gt; *persons = [Person allObjects];</span><br><span class="line">[[RLMRealm defaultRealm] transactionWithBlock:^&#123; </span><br><span class="line">    [[persons firstObject] setValue:@YES forKeyPath:<span class="string">@&quot;isFirst&quot;</span>]; <span class="comment">// 将每个人的 planet 属性设置为“地球” </span></span><br><span class="line">    [persons setValue:<span class="string">@&quot;地球&quot;</span> forKeyPath:<span class="string">@&quot;planet&quot;</span>];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Realm 对象的大多数属性都遵从 KVO 机制。所有 RLMObject子类的持久化(persisted)存储（未被忽略）的属性都是遵循 KVO 机制的，并且 RLMObject以及 RLMArray中 无效的(invalidated)属性也同样遵循（然而 RLMLinkingObjects属性并不能使用 KVO 进行观察）。</p><p>2.支持数据库加密</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 产生随机密钥</span></span><br><span class="line"><span class="built_in">NSMutableData</span> *key = [<span class="built_in">NSMutableData</span> dataWithLength:<span class="number">64</span>];</span><br><span class="line">SecRandomCopyBytes(kSecRandomDefault, key.length, (uint8_t *)key.mutableBytes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开加密文件</span></span><br><span class="line">RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</span><br><span class="line">config.encryptionKey = key;</span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">RLMRealm *realm = [RLMRealm realmWithConfiguration:config error:&amp;error];</span><br><span class="line"><span class="keyword">if</span> (!realm) &#123;</span><br><span class="line">    <span class="comment">// 如果密钥错误，`error` 会提示数据库不可访问</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Error opening realm: %@&quot;</span>, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Realm 支持在创建 Realm 数据库时采用64位的密钥对数据库文件进行 AES-256+SHA2 加密。这样硬盘上的数据都能都采用AES-256来进行加密和解密，并用 SHA-2 HMAC 来进行验证。每次您要获取一个 Realm 实例时，您都需要提供一次相同的密钥。</p><p>不过，加密过的 Realm 只会带来很少的额外资源占用（通常最多只会比平常慢10%）。</p><p>3.通知</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取 Realm 通知</span></span><br><span class="line">token = [realm addNotificationBlock:^(<span class="built_in">NSString</span> *notification, RLMRealm * realm) &#123;</span><br><span class="line">     [myViewController updateUI];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[token stop];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除通知</span></span><br><span class="line">[realm removeNotification:<span class="keyword">self</span>.token];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Realm 实例将会在每次写入事务提交后，给其他线程上的 Realm 实例发送通知。一般控制器如果想一直持有这个通知，就需要申请一个属性，strong持有这个通知。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 观察 RLMResults 通知</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.notificationToken = [[Person objectsWhere:<span class="string">@&quot;age &gt; 5&quot;</span>] addNotificationBlock:^(RLMResults&lt;Person *&gt; *results, RLMCollectionChange *change, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Failed to open Realm on background worker: %@&quot;</span>, error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">UITableView</span> *tableView = weakSelf.tableView;</span><br><span class="line">        <span class="comment">// 对于变化信息来说，检索的初次运行将会传递 nil</span></span><br><span class="line">        <span class="keyword">if</span> (!changes) &#123;</span><br><span class="line">            [tableView reloadData];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检索结果被改变，因此将它们应用到 UITableView 当中</span></span><br><span class="line">        [tableView beginUpdates];</span><br><span class="line">        [tableView deleteRowsAtIndexPaths:[changes deletionsInSection:<span class="number">0</span>]</span><br><span class="line">                         withRowAnimation:<span class="built_in">UITableViewRowAnimationAutomatic</span>];</span><br><span class="line">        [tableView insertRowsAtIndexPaths:[changes insertionsInSection:<span class="number">0</span>]</span><br><span class="line">                         withRowAnimation:<span class="built_in">UITableViewRowAnimationAutomatic</span>];</span><br><span class="line">        [tableView reloadRowsAtIndexPaths:[changes modificationsInSection:<span class="number">0</span>]</span><br><span class="line">                         withRowAnimation:<span class="built_in">UITableViewRowAnimationAutomatic</span>];</span><br><span class="line">        [tableView endUpdates];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们还能进行更加细粒度的通知，用集合通知就可以做到。</p><p>集合通知是异步触发的，首先它会在初始结果出现的时候触发，随后当某个写入事务改变了集合中的所有或者某个对象的时候，通知都会再次触发。这些变化可以通过传递到通知闭包当的 RLMCollectionChange参数访问到。这个对象当中包含了受 deletions、insertions和 modifications 状态所影响的索引信息。</p><p>集合通知对于 RLMResults、RLMArray、RLMLinkingObjects 以及 RLMResults 这些衍生出来的集合来说，当关系中的对象被添加或者删除的时候，一样也会触发这个状态变化。</p><p>4.数据库迁移</p><p>这是Realm的优点之一，方便迁移。</p><p>对比Core Data的数据迁移，实在是方便太多了。关于iOS Core Data 数据迁移 指南请看这篇<a href="http://www.jianshu.com/p/b3b764fc5191">文章</a>。</p><p>数据库存储方面的增删改查应该都没有什么大问题，比较蛋疼的应该就是数据迁移了。在版本迭代过程中，很可能会发生表的新增，删除，或者表结构的变化，如果新版本中不做数据迁移，用户升级到新版，很可能就直接crash了。对比Core Data的数据迁移比较复杂，Realm的迁移实在太简单了。</p><p>1.新增删除表，Realm不需要做迁移<br>2.新增删除字段，Realm不需要做迁移。Realm 会自行检测新增和需要移除的属性，然后自动更新硬盘上的数据库架构。</p><p>举个官方给的数据迁移的例子：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</span><br><span class="line">config.schemaVersion = <span class="number">2</span>;</span><br><span class="line">config.migrationBlock = ^(RLMMigration *migration, uint64_t oldSchemaVersion)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// enumerateObjects:block: 遍历了存储在 Realm 文件中的每一个“Person”对象</span></span><br><span class="line">    [migration enumerateObjects:Person.className block:^(RLMObject *oldObject, RLMObject *newObject) &#123;</span><br><span class="line">        <span class="comment">// 只有当 Realm 数据库的架构版本为 0 的时候，才添加 “fullName” 属性</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            newObject[<span class="string">@&quot;fullName&quot;</span>] = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@ %@&quot;</span>, oldObject[<span class="string">@&quot;firstName&quot;</span>], oldObject[<span class="string">@&quot;lastName&quot;</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有当 Realm 数据库的架构版本为 0 或者 1 的时候，才添加“email”属性</span></span><br><span class="line">        <span class="keyword">if</span> (oldSchemaVersion &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            newObject[<span class="string">@&quot;email&quot;</span>] = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// 替换属性名</span></span><br><span class="line">       <span class="keyword">if</span> (oldSchemaVersion &lt; <span class="number">3</span>) &#123; <span class="comment">// 重命名操作应该在调用 `enumerateObjects:` 之外完成 </span></span><br><span class="line">            [migration renamePropertyForClass:Person.className oldName:<span class="string">@&quot;yearsSinceBirth&quot;</span> newName:<span class="string">@&quot;age&quot;</span>]; &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;;</span><br><span class="line">[RLMRealmConfiguration setDefaultConfiguration:config];</span><br><span class="line"><span class="comment">// 现在我们已经成功更新了架构版本并且提供了迁移闭包，打开旧有的 Realm 数据库会自动执行此数据迁移，然后成功进行访问</span></span><br><span class="line">[RLMRealm defaultRealm];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在block里面分别有3种迁移方式，第一种是合并字段的例子，第二种是增加新字段的例子，第三种是原字段重命名的例子。</p><h2 id="四-Realm-使用中可能需要注意的一些问题"><a href="#四-Realm-使用中可能需要注意的一些问题" class="headerlink" title="四. Realm 使用中可能需要注意的一些问题"></a>四. Realm 使用中可能需要注意的一些问题</h2><p>在我从0开始接触Realm到熟练上手，基本就遇到了多线程这一个坑。可见Realm的API文档是多么的友好。虽然坑不多，但是还有有些需要注意的地方。</p><h3 id="1-跨线程访问数据库，Realm对象一定需要新建一个"><a href="#1-跨线程访问数据库，Realm对象一定需要新建一个" class="headerlink" title="1.跨线程访问数据库，Realm对象一定需要新建一个"></a>1.跨线程访问数据库，Realm对象一定需要新建一个</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*** Terminating app due <span class="keyword">to</span> uncaught exception <span class="string">&#x27;RLMException&#x27;</span>, reason: <span class="string">&#x27;Realm accessed from incorrect thread.&#x27;</span>**</span><br><span class="line">***** First <span class="keyword">throw</span> <span class="keyword">call</span> stack:**</span><br><span class="line">**(**</span><br><span class="line">** <span class="number">0</span>   CoreFoundation                      <span class="number">0</span>x000000011479f34b __exceptionPreprocess + <span class="number">171</span>**</span><br><span class="line">** <span class="number">1</span>   libobjc.A.dylib                     <span class="number">0</span>x00000001164a321e objc_exception_throw + <span class="number">48</span>**</span><br><span class="line">** <span class="number">2</span>   BHFangChuang                        <span class="number">0</span>x000000010dd4c2b5 -[RLMRealm beginWriteTransaction] + <span class="number">77</span>**</span><br><span class="line">** <span class="number">3</span>   BHFangChuang                        <span class="number">0</span>x000000010dd4c377 -[RLMRealm transactionWithBlock:error:] + <span class="number">45</span>**</span><br><span class="line">** <span class="number">4</span>   BHFangChuang                        <span class="number">0</span>x000000010dd4c348 -[RLMRealm transactionWithBlock:] + <span class="number">19</span>**</span><br><span class="line">** <span class="number">5</span>   BHFangChuang                        <span class="number">0</span>x000000010d51d7ae __71-[RealmDataBaseHelper updateUserWithLoginDate:andLogoutDate:according:]_block_invoke + <span class="number">190</span>**</span><br><span class="line">** <span class="number">6</span>   libdispatch.dylib                   <span class="number">0</span>x00000001180ef980 _dispatch_call_block_and_release + <span class="number">12</span>**</span><br><span class="line">** <span class="number">7</span>   libdispatch.dylib                   <span class="number">0</span>x00000001181190cd _dispatch_client_callout + <span class="number">8</span>**</span><br><span class="line">** <span class="number">8</span>   libdispatch.dylib                   <span class="number">0</span>x00000001180f8366 _dispatch_queue_override_invoke + <span class="number">1426</span>**</span><br><span class="line">** <span class="number">9</span>   libdispatch.dylib                   <span class="number">0</span>x00000001180fa3b7 _dispatch_root_queue_drain + <span class="number">720</span>**</span><br><span class="line">** <span class="number">10</span>  libdispatch.dylib                   <span class="number">0</span>x00000001180fa08b _dispatch_worker_thread3 + <span class="number">123</span>**</span><br><span class="line">** <span class="number">11</span>  libsystem_pthread.dylib             <span class="number">0</span>x00000001184c8746 _pthread_wqthread + <span class="number">1299</span>**</span><br><span class="line">** <span class="number">12</span>  libsystem_pthread.dylib             <span class="number">0</span>x00000001184c8221 start_wqthread + <span class="number">13</span>**</span><br><span class="line">**)**</span><br><span class="line">**libc++abi.dylib: terminating with uncaught exception of <span class="built_in">type</span> NSException**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果程序崩溃了，出现以上错误，那就是因为你访问Realm数据的时候，使用的Realm对象所在的线程和当前线程不一致。</p><p>解决办法就是在当前线程重新获取最新的Realm，即可。</p><h3 id="2-自己封装一个Realm全局实例单例是没啥作用的"><a href="#2-自己封装一个Realm全局实例单例是没啥作用的" class="headerlink" title="2. 自己封装一个Realm全局实例单例是没啥作用的"></a>2. 自己封装一个Realm全局实例单例是没啥作用的</h3><p>这个也是我之前对Realm多线程理解不清，导致的一个误解。</p><p>很多开发者应该都会对Core Data和Sqlite3或者FMDB，自己封装一个类似Helper的单例。于是我也在这里封装了一个单例，在新建完Realm数据库的时候strong持有一个Realm的对象。然后之后的访问中只需要读取这个单例持有的Realm对象就可以拿到数据库了。</p><p>想法是好的，但是同一个Realm对象是不支持跨线程操作realm数据库的。</p><p>Realm 通过确保每个线程始终拥有 Realm 的一个快照，以便让并发运行变得十分轻松。你可以同时有任意数目的线程访问同一个 Realm 文件，并且由于每个线程都有对应的快照，因此线程之间绝不会产生影响。需要注意的一件事情就是不能让多个线程都持有同一个 Realm 对象的 实例 。如果多个线程需要访问同一个对象，那么它们分别会获取自己所需要的实例（否则在一个线程上发生的更改就会造成其他线程得到不完整或者不一致的数据）。</p><p>其实RLMRealm *realm = [RLMRealm defaultRealm]; 这句话就是获取了当前realm对象的一个实例，其实实现就是拿到单例。所以我们每次在子线程里面不要再去读取我们自己封装持有的realm实例了，直接调用系统的这个方法即可，能保证访问不出错。</p><h3 id="3-transactionWithBlock-已经处于一个写的事务中，事务之间不能嵌套"><a href="#3-transactionWithBlock-已经处于一个写的事务中，事务之间不能嵌套" class="headerlink" title="3.transactionWithBlock 已经处于一个写的事务中，事务之间不能嵌套"></a>3.transactionWithBlock 已经处于一个写的事务中，事务之间不能嵌套</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[realm transactionWithBlock:^&#123;</span><br><span class="line">                [<span class="keyword">self</span>.realm beginWriteTransaction];</span><br><span class="line">                [<span class="keyword">self</span> convertToRLMUserWith:bhUser To:[<span class="keyword">self</span> convertToRLMUserWith:bhUser To:<span class="literal">nil</span>]];</span><br><span class="line">                [<span class="keyword">self</span>.realm commitWriteTransaction];</span><br><span class="line">            &#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>transactionWithBlock 已经处于一个写的事务中，如果还在block里面再写一个commitWriteTransaction，就会出错，写事务是不能嵌套的。</p><p>出错信息如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">*** Terminating app due <span class="keyword">to</span> uncaught exception <span class="string">&#x27;RLMException&#x27;</span>, reason: <span class="string">&#x27;The Realm is already in a write transaction&#x27;</span>**</span><br><span class="line">***** First <span class="keyword">throw</span> <span class="keyword">call</span> stack:**</span><br><span class="line">**(**</span><br><span class="line">** <span class="number">0</span>   CoreFoundation                      <span class="number">0</span>x0000000112e2d34b __exceptionPreprocess + <span class="number">171</span>**</span><br><span class="line">** <span class="number">1</span>   libobjc.A.dylib                     <span class="number">0</span>x0000000114b3121e objc_exception_throw + <span class="number">48</span>**</span><br><span class="line">** <span class="number">2</span>   BHFangChuang                        <span class="number">0</span>x000000010c4702b5 -[RLMRealm beginWriteTransaction] + <span class="number">77</span>**</span><br><span class="line">** <span class="number">3</span>   BHFangChuang                        <span class="number">0</span>x000000010bc4175a __71-[RealmDataBaseHelper updateUserWithLoginDate:andLogoutDate:according:]_block_invoke_2 + <span class="number">42</span>**</span><br><span class="line">** <span class="number">4</span>   BHFangChuang                        <span class="number">0</span>x000000010c470380 -[RLMRealm transactionWithBlock:error:] + <span class="number">54</span>**</span><br><span class="line">** <span class="number">5</span>   BHFangChuang                        <span class="number">0</span>x000000010c470348 -[RLMRealm transactionWithBlock:] + <span class="number">19</span>**</span><br><span class="line">** <span class="number">6</span>   BHFangChuang                        <span class="number">0</span>x000000010bc416d7 __71-[RealmDataBaseHelper updateUserWithLoginDate:andLogoutDate:according:]_block_invoke + <span class="number">231</span>**</span><br><span class="line">** <span class="number">7</span>   libdispatch.dylib                   <span class="number">0</span>x0000000116819980 _dispatch_call_block_and_release + <span class="number">12</span>**</span><br><span class="line">** <span class="number">8</span>   libdispatch.dylib                   <span class="number">0</span>x00000001168430cd _dispatch_client_callout + <span class="number">8</span>**</span><br><span class="line">** <span class="number">9</span>   libdispatch.dylib                   <span class="number">0</span>x0000000116822366 _dispatch_queue_override_invoke + <span class="number">1426</span>**</span><br><span class="line">** <span class="number">10</span>  libdispatch.dylib                   <span class="number">0</span>x00000001168243b7 _dispatch_root_queue_drain + <span class="number">720</span>**</span><br><span class="line">** <span class="number">11</span>  libdispatch.dylib                   <span class="number">0</span>x000000011682408b _dispatch_worker_thread3 + <span class="number">123</span>**</span><br><span class="line">** <span class="number">12</span>  libsystem_pthread.dylib             <span class="number">0</span>x0000000116bed746 _pthread_wqthread + <span class="number">1299</span>**</span><br><span class="line">** <span class="number">13</span>  libsystem_pthread.dylib             <span class="number">0</span>x0000000116bed221 start_wqthread + <span class="number">13</span>**</span><br><span class="line">**)**</span><br><span class="line">**libc++abi.dylib: terminating with uncaught exception of <span class="built_in">type</span> NSException**</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-建议每个model都需要设置主键，这样可以方便add和update"><a href="#4-建议每个model都需要设置主键，这样可以方便add和update" class="headerlink" title="4.建议每个model都需要设置主键，这样可以方便add和update"></a>4.建议每个model都需要设置主键，这样可以方便add和update</h3><p>如果能设置主键，请尽量设置主键，因为这样方便我们更新数据，我们可以很方便的调用addOrUpdateObject: 或者 createOrUpdateInRealm：withValue：方法进行更新。这样就不需要先根据主键，查询出数据，然后再去更新。有了主键以后，这两步操作可以一步完成。</p><h3 id="5-查询也不能跨线程查询"><a href="#5-查询也不能跨线程查询" class="headerlink" title="5.查询也不能跨线程查询"></a>5.查询也不能跨线程查询</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">RLMResults * results = [<span class="keyword">self</span> selectUserWithAccid:bhUser.accid];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        </span><br><span class="line">        RLMRealm *realm = [RLMRealm defaultRealm];</span><br><span class="line">        [realm transactionWithBlock:^&#123;</span><br><span class="line">            [realm addOrUpdateObject:results[<span class="number">0</span>]];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于查询是在子线程外查询的，所以跨线程也会出错，出错信息如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">***** Terminating app due <span class="keyword">to</span> uncaught exception <span class="string">&#x27;RLMException&#x27;</span>, reason: <span class="string">&#x27;Realm accessed from incorrect thread&#x27;</span>**</span><br><span class="line">***** First <span class="keyword">throw</span> <span class="keyword">call</span> stack:**</span><br><span class="line">**(**</span><br><span class="line">** <span class="number">0</span>   CoreFoundation                      <span class="number">0</span>x000000011517a34b __exceptionPreprocess + <span class="number">171</span>**</span><br><span class="line">** <span class="number">1</span>   libobjc.A.dylib                     <span class="number">0</span>x0000000116e7e21e objc_exception_throw + <span class="number">48</span>**</span><br><span class="line">** <span class="number">2</span>   BHFangChuang                        <span class="number">0</span>x000000010e7c34ab _ZL10throwErrorP8NSString + <span class="number">129</span>**</span><br><span class="line">** <span class="number">3</span>   BHFangChuang                        <span class="number">0</span>x000000010e7c177f -[RLMResults <span class="built_in">count</span>] + <span class="number">40</span>**</span><br><span class="line">** <span class="number">4</span>   BHFangChuang                        <span class="number">0</span>x000000010df8f3bf -[RealmDataBaseHelper convertToRLMUserWith:LoginDate:LogoutDate:To:] + <span class="number">159</span>**</span><br><span class="line">** <span class="number">5</span>   BHFangChuang                        <span class="number">0</span>x000000010df8efc1 __71-[RealmDataBaseHelper updateUserWithLoginDate:andLogoutDate:according:]_block_invoke_2 + <span class="number">81</span>**</span><br><span class="line">** <span class="number">6</span>   BHFangChuang                        <span class="number">0</span>x000000010e7bd320 -[RLMRealm transactionWithBlock:error:] + <span class="number">54</span>**</span><br><span class="line">** <span class="number">7</span>   BHFangChuang                        <span class="number">0</span>x000000010e7bd2e8 -[RLMRealm transactionWithBlock:] + <span class="number">19</span>**</span><br><span class="line">** <span class="number">8</span>   BHFangChuang                        <span class="number">0</span>x000000010df8eecf __71-[RealmDataBaseHelper updateUserWithLoginDate:andLogoutDate:according:]_block_invoke + <span class="number">351</span>**</span><br><span class="line">** <span class="number">9</span>   libdispatch.dylib                   <span class="number">0</span>x0000000118b63980 _dispatch_call_block_and_release + <span class="number">12</span>**</span><br><span class="line">** <span class="number">10</span>  libdispatch.dylib                   <span class="number">0</span>x0000000118b8d0cd _dispatch_client_callout + <span class="number">8</span>**</span><br><span class="line">** <span class="number">11</span>  libdispatch.dylib                   <span class="number">0</span>x0000000118b6c366 _dispatch_queue_override_invoke + <span class="number">1426</span>**</span><br><span class="line">** <span class="number">12</span>  libdispatch.dylib                   <span class="number">0</span>x0000000118b6e3b7 _dispatch_root_queue_drain + <span class="number">720</span>**</span><br><span class="line">** <span class="number">13</span>  libdispatch.dylib                   <span class="number">0</span>x0000000118b6e08b _dispatch_worker_thread3 + <span class="number">123</span>**</span><br><span class="line">** <span class="number">14</span>  libsystem_pthread.dylib             <span class="number">0</span>x0000000118f3c746 _pthread_wqthread + <span class="number">1299</span>**</span><br><span class="line">** <span class="number">15</span>  libsystem_pthread.dylib             <span class="number">0</span>x0000000118f3c221 start_wqthread + <span class="number">13</span>**</span><br><span class="line">**)**</span><br><span class="line">**libc++abi.dylib: terminating with uncaught exception of <span class="built_in">type</span> **</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五-Realm-“放弃”——优点和缺点"><a href="#五-Realm-“放弃”——优点和缺点" class="headerlink" title="五. Realm “放弃”——优点和缺点"></a>五. Realm “放弃”——优点和缺点</h2><p>关于Realm的优点，在官网上也说了很多了，我感触最深的3个优点也在文章开头提到了。</p><p>CoreData VS Realm 的对比，可以看看<a href="http://www.iiiyu.com/2016/01/19/CoreData-VS-Realm/">这篇文章</a></p><p>说到使用 Realm最后的二道门槛，一是如何从其他数据库迁移到Realm，二是Realm数据库的一些限制。</p><p>接下来请还在考虑是否使用Realm的同学仔细看清楚，下面是你需要权衡是否要换到Realm数据库的重要标准。（以下描述基于Realm最新版 2.0.2）</p><h3 id="1-从其他数据库迁移到Realm"><a href="#1-从其他数据库迁移到Realm" class="headerlink" title="1.从其他数据库迁移到Realm"></a>1.从其他数据库迁移到Realm</h3><p>如果从其他数据库迁移到Realm，请看我之前写过的一篇<a href="http://www.jianshu.com/p/d79b2b1bfa72">文章</a>，简单的提一下蛋疼的问题，由于切换了数据库，需要在未来几个版本都必须维护2套数据库，因为老用户的数据需要慢慢从老数据库迁移到Realm，这个有点蛋疼。迁移数据的那段代码需要“恶心”的存在工程里。但是一旦都迁移完成，之后的路就比较平坦了。</p><p>关于Core Data迁移过来没有fetchedResultController的问题，这里提一下。由于使用Realm的话就无法使用Core Data的fetchedResultController，那么如果数据库更新了数据，是不是只能通过reloadData来更新tableview了？目前基本上是的，Realm提供了我们通知机制，目前的Realm支持给realm数据库对象添加通知，这样就可以在数据库写入事务提交后获取到，从而更新UI；详情可以参考<a href="https://realm.io/cn/docs/swift/latest/#notification">https://realm.io/cn/docs/swift/latest/#notification</a>当然如果仍希望使用NSFetchedResultsController的话，那么推荐使用RBQFetchedResultsController，这是一个替代品，地址是：<a href="https://github.com/Roobiq/RBQFetchedResultsController">https://github.com/Roobiq/RBQFetchedResultsController</a>目前Realm计划在未来实现类似的效果，具体您可以参见这个PR：<a href="http://github.com/realm/realm-cocoa/issues/687">http://github.com/realm/realm-cocoa/issues/687</a>。</p><p>当然，如果是新的App，还在开发中，可以考虑直接使用Realm，会更爽。</p><p>以上是第一道门槛，如果觉得迁移带来的代价还能承受，那么恭喜你，已经踏入Realm一半了。那么还请看第二道“门槛”。</p><h3 id="2-Realm数据库当前版本的限制"><a href="#2-Realm数据库当前版本的限制" class="headerlink" title="2. Realm数据库当前版本的限制"></a>2. Realm数据库当前版本的限制</h3><p>把用户一部分拦在Realm门口的还在这第二道坎，因为这些限制，这些“缺点”，导致App的业务无法使用Realm得到满足，所以最终放弃了Realm。当然，这些问题，有些是可以灵活通过改变表结构解决的，毕竟人是活的（如果真的想用Realm，想些办法，谁也拦不住）</p><p>1.类名称的长度最大只能存储 57 个 UTF8 字符。</p><p>2.属性名称的长度最大只能支持 63 个 UTF8 字符。</p><p>3.NSData以及 NSString属性不能保存超过 16 MB 大小的数据。如果要存储大量的数据，可通过将其分解为16MB 大小的块，或者直接存储在文件系统中，然后将文件路径存储在 Realm 中。如果您的应用试图存储一个大于 16MB 的单一属性，系统将在运行时抛出异常。</p><p>4.对字符串进行排序以及不区分大小写查询只支持“基础拉丁字符集”、“拉丁字符补充集”、“拉丁文扩展字符集 A” 以及”拉丁文扩展字符集 B“（UTF-8 的范围在 0~591 之间）。</p><p>5.尽管 Realm 文件可以被多个线程同时访问，但是您不能跨线程处理 Realms、Realm 对象、查询和查询结果。（这个其实也不算是个问题，我们在多线程中新建新的Realm对象就可以解决）</p><p>6.Realm对象的 Setters &amp; Getters 不能被重载</p><p>因为 Realm 在底层数据库中重写了 setters 和 getters 方法，所以您不可以在您的对象上再对其进行重写。一个简单的替代方法就是：创建一个新的 Realm 忽略属性，该属性的访问起可以被重写， 并且可以调用其他的 getter 和 setter 方法。</p><p>7.文件大小 &amp; 版本跟踪</p><p>一般来说 Realm 数据库比 SQLite 数据库在硬盘上占用的空间更少。如果您的 Realm 文件大小超出了您的想象，这可能是因为您数据库中的 RLMRealm中包含了旧版本数据。<br>为了使您的数据有相同的显示方式，Realm 只在循环迭代开始的时候才更新数据版本。这意味着，如果您从 Realm 读取了一些数据并进行了在一个锁定的线程中进行长时间的运行，然后在其他线程进行读写 Realm 数据库的话，那么版本将不会被更新，Realm 将保存中间版本的数据，但是这些数据已经没有用了，这导致了文件大小的增长。这部分空间会在下次写入操作时被重复利用。这些操作可以通过调用writeCopyToPath:error:来实现。</p><p>解决办法：<br>通过调用invalidate，来告诉 Realm 您不再需要那些拷贝到 Realm 的数据了。这可以使我们不必跟踪这些对象的中间版本。在下次出现新版本时，再进行版本更新。<br>您可能在 Realm 使用Grand Central Dispatch时也发现了这个问题。在 dispatch 结束后自动释放调度队列（dispatch queue）时，调度队列（dispatch queue）没有随着程序释放。这造成了直到 <br>RLMRealm 对象被释放后，Realm 中间版本的数据空间才会被再利用。为了避免这个问题，您应该在 dispatch 队列中，使用一个显式的自动调度队列（dispatch queue）。</p><p>8.Realm 没有自动增长属性</p><p>Realm 没有线程/进程安全的自动增长属性机制，这在其他数据库中常常用来产生主键。然而，在绝大多数情况下，对于主键来说，我们需要的是一个唯一的、自动生成的值，因此没有必要使用顺序的、连续的、整数的 ID 作为主键。</p><p>解决办法：</p><p>在这种情况下，一个独一无二的字符串主键通常就能满足需求了。一个常见的模式是将默认的属性值设置为 [[NSUUID UUID] UUIDString]<br>以产生一个唯一的字符串 ID。<br>自动增长属性另一种常见的动机是为了维持插入之后的顺序。在某些情况下，这可以通过向某个 RLMArray中添加对象，或者使用 [NSDate date]默认值的createdAt属性。</p><p>9.所有的数据模型必须直接继承自RealmObject。这阻碍我们利用数据模型中的任意类型的继承。</p><p>这一点也不算问题，我们只要自己在建立一个model就可以解决这个问题。自己建立的model可以自己随意去继承，这个model专门用来接收网络数据，然后把自己的这个model转换成要存储到表里面的model，即RLMObject对象。这样这个问题也可以解决了。</p><p>Realm 允许模型能够生成更多的子类，也允许跨模型进行代码复用，但是由于某些 Cocoa 特性使得运行时中丰富的类多态无法使用。以下是可以完成的操作：</p><ul><li>父类中的类方法，实例方法和属性可以被它的子类所继承</li><li>子类中可以在方法以及函数中使用父类作为参数</li></ul><p>以下是不能完成的：</p><ul><li>多态类之间的转换（例如子类转换成子类，子类转换成父类，父类转换成子类等）</li><li>同时对多个类进行检索</li><li>多类容器 (RLMArray以及 RLMResults)</li></ul><p>10.Realm不支持集合类型</p><p>这一点也是比较蛋疼。</p><p>Realm支持以下的属性类型：BOOL、bool、int、NSInteger、long、long long、float、double、NSString、NSDate、NSData以及 <a href="https://realm.io/cn/docs/objc/latest/#optional-properties">被特殊类型标记的</a>NSNumber。CGFloat属性的支持被取消了，因为它不具备平台独立性。</p><p>这里就是不支持集合，比如说NSArray，NSMutableArray，NSDictionary，NSMutableDictionary，NSSet，NSMutableSet。如果服务器传来的一个字典，key是一个字符串，对应的value就是一个数组，这时候就想存储这个数组就比较困难了。当然Realm里面是有集合的，就是RLMArray，这里面装的都是RLMObject。</p><p>所以我们想解决这个问题，就需要把数据里面的东西都取出来，如果是model，就先自己接收一下，然后转换成RLMObject的model，再存储到RLMArray里面去，这样转换一遍，还是可以的做到的。</p><p>这里列出了暂时Realm当前办法存在的“缺点”，如果这10点，在自己的App上都能满足业务需求，那么这一道坎也不是问题了。</p><p>以上两道砍请仔细衡量清楚，这里还有一篇文章是关于更换数据库的心得体会的，<a href="http://www.jianshu.com/p/d684693f1d77">高速公路换轮胎——为遗留系统替换数据库</a>考虑更换的同学也可以看看。这两道坎如果真的不适合，过不去，那么请放弃Realm吧！</p><h2 id="六-Realm-到底是什么？"><a href="#六-Realm-到底是什么？" class="headerlink" title="六. Realm 到底是什么？"></a>六. Realm 到底是什么？</h2><p>大家都知道Sqlite3 是一个移动端上面使用的小型数据库，FMDB是基于Sqlite3进行的一个封装。</p><p>那Core Data是数据库么？<br>Core Data本身并不是数据库，它是一个拥有多种功能的框架，其中一个重要的功能就是把应用程序同数据库之间的交互过程自动化了。有了Core Data框架以后，我们无须编写Objective-C代码，又可以是使用关系型数据库。因为Core Data会在底层自动给我们生成应该最佳优化过的SQL语句。</p><p>那么Realm是数据库么？</p><p>Realm 不是 ORM，也不基于 SQLite 创建，而是为移动开发者定制的全功能数据库。它可以将原生对象直接映射到Realm的数据库引擎（远不仅是一个键值对存储）中。</p><p>Realm 是一个 <a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control">MVCC 数据库</a> ，底层是用 C++ 编写的。MVCC 指的是多版本并发控制。</p><p>Realm是满足ACID的。原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。一个支持事务（Transaction）的数据库，必需要具有这四种特性。Realm都已经满足。</p><h3 id="1-Realm-采用MVCC的设计思想"><a href="#1-Realm-采用MVCC的设计思想" class="headerlink" title="1.Realm 采用MVCC的设计思想"></a>1.Realm 采用MVCC的设计思想</h3><p>MVCC 解决了一个重要的并发问题：在所有的数据库中都有这样的时候，当有人正在写数据库的时候有人又想读取数据库了（例如，不同的线程可以同时读取或者写入同一个数据库）。这会导致数据的不一致性 - 可能当你读取记录的时候一个写操作才部分结束。</p><p>有很多的办法可以解决读、写并发的问题，最常见的就是给数据库加锁。在之前的情况下，我们在写数据的时候就会加上一个锁。在写操作完成之前，所有的读操作都会被阻塞。这就是众所周知的读-写锁。这常常都会很慢。Realm采用的是MVCC数据库的优点就展现出来了，速度非常快。</p><p>MVCC 在设计上采用了和 Git 一样的源文件管理算法。你可以把 Realm 的内部想象成一个 Git，它也有分支和原子化的提交操作。这意味着你可能工作在许多分支上（数据库的版本），但是你却没有一个完整的数据拷贝。Realm 和真正的 MVCC 数据库还是有些不同的。一个像 Git 的真正的 MVCC 数据库，你可以有成为版本树上 HEAD 的多个候选者。而 Realm 在某个时刻只有一个写操作，而且总是操作最新的版本 - 它不可以在老的版本上工作。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-226.png" alt=""> <p>Realm底层是B+树实现的，在Realm团队开源的<a href="https://github.com/realm/realm-core">realm-core</a>里面可以看到源码，里面有用bpTree，这是一个B+树的实现。B+ 树是一种树数据结构，是一个n叉树，每个节点通常有多个孩子，一棵B+树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。</p><p>B+ 树通常用于数据库和操作系统的<a href="http://baike.baidu.com/view/266589.htm">文件系统</a>中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和BFS等文件系统都在使用B+树作为元数据索引。B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-227.png" alt=""> <p>Realm会让每一个连接的线程都会有数据在一个特定时刻的快照。这也是为什么能够在上百个线程中做大量的操作并同时访问数据库，却不会发生崩溃的原因。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-228.png" alt=""> <p>上图很好的展现了Realm的一次写操作流程。这里分3个阶段，阶段一中，V1指向根节点R。在阶段二中，准备写入操作，这个时候会有一个V2节点，指向新的R’，并且新建一个分支出来，A’和C’。相应的右孩子指向原来V1指向的R的右孩子。如果写入操作失败，就丢弃左边这个分支。这样的设计可以保证即使失败，也仅仅只丢失最新数据，而不会破坏整个数据库。如果写入成功，那么把原来的R，A，C节点放入Garbage中，于是就到了第三阶段，写入成功，变成了V2指向根节点。</p><p>在这个写入的过程中，第二阶段是最关键的，写入操作并不会改变原有数据，而是新建了一个新的分支。这样就不用加锁，也可以解决数据库的并发问题。</p><p><strong>正是B+树的底层数据结构 + MVCC的设计，保证了Realm的高性能。</strong></p><h3 id="2-Realm-采用了-zero-copy-架构"><a href="#2-Realm-采用了-zero-copy-架构" class="headerlink" title="2.Realm 采用了 zero-copy 架构"></a>2.Realm 采用了 zero-copy 架构</h3><p>因为 Realm 采用了 zero-copy 架构，这样几乎就没有内存开销。这是因为每一个 Realm 对象直接通过一个本地 long 指针和底层数据库对应，这个指针是数据库中数据的钩子。</p><p>通常的传统的数据库操作是这样的，数据存储在磁盘的数据库文件中，我们的查询请求会转换为一系列的SQL语句，创建一个数据库连接。数据库服务器收到请求，通过解析器对SQL语句进行词法和语法语义分析，然后通过查询优化器对SQL语句进行优化，优化完成执行对应的查询，读取磁盘的数据库文件(有索引则先读索引)，读取命中查询的每一行的数据，然后存到内存里（这里有内存消耗）。之后你需要把数据序列化成可在内存里面存储的格式，这意味着比特对齐，这样 CPU 才能处理它们。最后，数据需要转换成语言层面的类型，然后它会以对象的形式返回，比如Objective-C的对象等。</p><p>这里就是Realm另外一个很快的原因，Realm的数据库文件是通过memory-mapped，也就是说数据库文件本身是映射到内存(实际上是虚拟内存)中的，Realm访问文件偏移就好比文件已经在内存中一样(这里的内存是指虚拟内存)，它允许文件在没有做反序列化的情况下直接从内存读取，提高了读取效率。Realm 只需要简单地计算偏移来找到文件中的数据，然后从原始访问点返回数据结构的值 。</p><p><strong>正是Realm采用了 zero-copy 架构，几乎没有内存开销，Realm核心文件格式基于memory-mapped，节约了大量的序列化和反序列化的开销，导致了Realm获取对象的速度特别高效。</strong></p><h3 id="3-Realm-对象在不同的线程间不能共享"><a href="#3-Realm-对象在不同的线程间不能共享" class="headerlink" title="3. Realm 对象在不同的线程间不能共享"></a>3. Realm 对象在不同的线程间不能共享</h3><p>Realm 对象不能在线程间传递的原因就是为了保证隔离性和数据一致性。这样做的目的只有一个，为了速度。</p><p>由于Realm是基于零拷贝的，所有对象都在内存里，所以会自动更新。如果允许Realm对象在线程间共享，Realm 会无法确保数据的一致性，因为不同的线程会在不确定的什么时间点同时改变对象的数据。</p><p>要想保证多线程能共享对象就是加锁，但是加锁又会导致一个长时间的后台写事务会阻塞 UI 的读事务。不加锁就不能保证数据的一致性，但是可以满足速度的要求。Realm在衡量之后，还是为了速度，做出了不允许线程间共享的妥协。</p><p><strong>正是因为不允许对象在不同的线程间共享，保证了数据的一致性，不加线程锁，保证了Realm的在速度上遥遥领先。</strong></p><h3 id="4-真正的懒加载"><a href="#4-真正的懒加载" class="headerlink" title="4. 真正的懒加载"></a>4. 真正的懒加载</h3><p>大多数数据库趋向于在水平层级存储数据，这也就是为什么你从 SQLite 读取一个属性的时候，你就必须要加载整行的数据。它在文件中是连续存储的。</p><p>不同的是，Realm尽可能让 Realm 在垂直层级连续存储属性，你也可以看作是按列存储。</p><p>在查询到一组数据后，只有当你真正访问对象的时候才真正加载进来。</p><h3 id="5-Realm-中的文件"><a href="#5-Realm-中的文件" class="headerlink" title="5. Realm 中的文件"></a>5. Realm 中的文件</h3><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-229.png" alt=""> <p>先来说说中间的Database File</p><p>.realm 文件是memory mapped的，所有的对象都是文件首地址偏移量的一个引用。对象的存储不一定是连续的，但是Array可以保证是连续存储。</p><p>.realm执行写操作的时候，有3个指针，一个是*current top pointer ，一个是 other top pointer ，最后一个是 switch bit*。</p><p>switch bit* 标示着top pointer是否已经被使用过。如果被使用过了，代表着数据库已经是可读的。</p><p>the top pointer优先更新，紧接着是the switch bit更新。因为即使写入失败了，虽然丢失了所有数据，但是这样能保证数据库依旧是可读的。</p><p>再来说说 .lock file。</p><p>.lock文件中会包含 the shared group 的metadata。这个文件承担着允许多线程访问相同的Realm对象的职责。</p><p>最后说说Commit logs history</p><p>这个文件会用来更新索引indexes，会用来同步。里面主要维护了3个小文件，2个是数据相关的，1个是操作management的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上面的分析之后，深深的感受到Realm就是为速度而生的！在保证了ACID的要求下，很多设计都是以速度为主。当然，Realm 最核心的理念就是对象驱动，这是 Realm 的核心原则。Realm 本质上是一个嵌入式数据库，但是它也是看待数据的另一种方式。它用另一种角度来重新看待移动应用中的模型和业务逻辑。</p><p>Realm还是跨平台的，多个平台都使用相同的数据库，是多么好的一件事情呀。相信使用Realm作为App数据库的开发者会越来越多。</p><p>参考链接  </p><p><a href="https://realm.io/">Realm官网</a><br><a href="https://realm.io/docs/objc/latest/api/index.html">Realm官方文档</a><br><a href="https://github.com/realm">Realm GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-RealmSwift中实现多表联合查询</title>
      <link href="/posts/2024/09/2a61baa7.html"/>
      <url>/posts/2024/09/2a61baa7.html</url>
      
        <content type="html"><![CDATA[<p>在Realm数据库中，直接进行像SQL那样的JOIN操作是不支持的，因为Realm设计为一个轻量级的、易于使用的数据库，它侧重于对象关系映射（ORM）而非复杂的查询语言。然而，你可以通过以下几种方式在Realm中模拟联合查询（JOIN）的效果：</p><h3 id="1-使用链接对象（Linking-Objects）"><a href="#1-使用链接对象（Linking-Objects）" class="headerlink" title="1. 使用链接对象（Linking Objects）"></a>1. 使用链接对象（Linking Objects）</h3><p>如果你的模型之间存在关联，你可以在Realm模型中定义链接对象（Linking Objects）来引用其他模型的对象。这样，当你查询一个模型时，可以间接地访问到与之关联的其他模型的数据。</p><p>假设有两个模型<code>Person</code>和<code>Dog</code>，其中<code>Person</code>有一个或多个<code>Dog</code>，可以这样定义模型：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import RealmSwift  </span><br><span class="line">  </span><br><span class="line">class Dog: Object &#123;  </span><br><span class="line">    @objc dynamic var name = &quot;&quot;  </span><br><span class="line">    @objc dynamic var ownerId: ObjectIdentifier?  </span><br><span class="line">  </span><br><span class="line">    // 反向链接到Person，这不是必需的，但有助于从Dog访问Person  </span><br><span class="line">    let owners = LinkingObjects(fromType: Person.self, property: &quot;dogs&quot;)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class Person: Object &#123;  </span><br><span class="line">    @objc dynamic var name = &quot;&quot;  </span><br><span class="line">    let dogs = List&lt;Dog&gt;()  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：上面的<code>ownerId</code>字段和<code>LinkingObjects</code>属性是可选的，具体取决于你的需求。如果你只是想从<code>Person</code>访问<code>Dog</code>，那么<code>dogs</code>列表就足够了。</p><h3 id="2-使用查询结果手动组合数据"><a href="#2-使用查询结果手动组合数据" class="headerlink" title="2. 使用查询结果手动组合数据"></a>2. 使用查询结果手动组合数据</h3><p>如果你需要更复杂的查询，可能需要先从Realm中查询出需要的数据，然后在Swift代码中手动组合这些数据。</p><p>例如，如果你想要获取所有拥有特定品种狗的人的名字，你可以首先查询出这些狗，然后遍历这些狗来找到它们的主人：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()  </span><br><span class="line">  </span><br><span class="line">// 假设我们要找所有拥有&quot;Golden Retriever&quot;品种狗的人  </span><br><span class="line">let dogs = realm.objects(Dog.self).filter(&quot;name CONTAINS &#x27;Golden Retriever&#x27;&quot;)  </span><br><span class="line">  </span><br><span class="line">var ownersNames = [String]()  </span><br><span class="line">for dog in dogs &#123;  </span><br><span class="line">    if let owner = dog.owners.first &#123; // 假设每个狗只有一个主人，或者我们只关心第一个主人  </span><br><span class="line">        ownersNames.append(owner.name)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// ownersNames 现在包含了所有拥有&quot;Golden Retriever&quot;品种狗的人的名字</span><br></pre></td></tr></table></figure><p>注意：上面的<code>owners</code>属性是基于<code>LinkingObjects</code>的，但在这个例子中，我们实际上更可能直接从<code>Dog</code>的<code>ownerId</code>（如果它是一个指向<code>Person</code>的引用）来查询<code>Person</code>对象。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift-MBProgressHUD和SVProgressHUD各自的缺点及解决方案</title>
      <link href="/posts/2024/09/134580b7.html"/>
      <url>/posts/2024/09/134580b7.html</url>
      
        <content type="html"><![CDATA[<p>MBProgressHUD和SVProgressHUD各自都有缺点：    </p><p>当A页面进入B页面，B页面查询数据时，报错需要弹出toast弹窗，并退出B页面到A页面。一般toast弹窗是现实在keywindow上的，但是kewindow是B页面，而由于自动返回A页面，B页面销毁了，就看不到这个toast弹窗了。使用MBProgressHUD时就会遇到该问题。有的app为了解决这个问题人为延迟推出B页面，这样降低用户的体验流畅度，不完美。</p><p>另一种采用SVProgressHUD来实现，它是异步时弹窗，显示调用弹窗和实际显示弹窗有一个时间差，正好在B页面调用弹窗，在回到A页面时，弹窗出来，所以能显示出来。我们遇到过一个问题，一个请求后台在十几毫秒内返回，蒙层弹窗还没有出来请求回来了，并且取消弹窗，实际上SVProgressHUD还没有出来，导致后面没有取消处理了，一直在哪里转圈了。  </p><p>最佳解决方案是创建一个优先级高于当前级别的window显示蒙层和动画。  </p><span id="more"></span><p>当然若搞不定最佳的window解决方案，只能规避两者的缺点两个库都是使用当弹toast弹窗时用MBProgressHUD，当弹模态弹窗时用MBProgressHUD。当然的window解决方案也有它的不完美，就是弹出widndow弹窗时，键盘若在显示时可能消失，widndow弹窗消失时，键盘恢复原来位置。</p><p>如：在输入手机号达到11位，会自动去后台查询该手机号是否存在，当然在查询期间要弹窗widndow透明蒙层，防止在查询手机号时用户修改了手机号，导致数据不一致，并且是程序自动触发，查询成功后页面会出现变化，当然存在手机号出错，用户修改手机号的场景，所以光标还要在手机号输入框，并且激活键盘状态。这时第一就会出现查询期间键盘消失，查询结束键盘恢复的问题。当发送一个请求回来立即发送另一个请求，并且这两个请求都弹出了蒙层，会出现页面闪烁的问题。所以没有绝对的完美，要以满足用户的功能为主，小细节也可以接受。并且MBProgressHUD（实时）和SVProgressHUD（延时）都是加在keywindow上的，无法系统的控制tabbar按钮切换。</p><p>总之，window解决方案虽然存在影响键盘的小问题，也不失为更完美的解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode-解决&quot;Permission Failure&quot; (10/2007); server message = &quot;CREATE operation not permitted&quot;问题</title>
      <link href="/posts/2024/09/9ce5cc31.html"/>
      <url>/posts/2024/09/9ce5cc31.html</url>
      
        <content type="html"><![CDATA[<p>在为我的ios app加入icloud同步功能时候，使用模拟器运行app时遇到一个错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Optional(&lt;CKError 0x60000246ccc0: &quot;Permission Failure&quot; (10/2007); server message = &quot;CREATE operation not permitted&quot;; op = 1E2586ACAD82E59D; uuid = DEDC710D-84EC-4353-B310-9B9B65A32338; container ID = &quot;***&quot;&gt;)</span><br></pre></td></tr></table></figure><p>我首先去检查了模拟器里是否已经登录了appleid账号（新申请的）。没问题，是已登录的，但是奇怪的是icloud选项是灰色的，看来这就是问题原因了。</p><span id="more"></span><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-221.png" alt=""> <p>我又去登录了icloud网页版，发现这个icloud是仅允许网页登录。</p><p>看来我只需要解决这个问题就行了。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-222.png" alt=""> <p><code>其实解决办法很简单，只需要找一个苹果设备登录一下这个appleid就行了 ，这个appleid就拥有了完全的icloud权限。</code></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Xcode </tag>
            
            <tag> Simulator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki的数据库结构说明</title>
      <link href="/posts/2024/09/135ce13c.html"/>
      <url>/posts/2024/09/135ce13c.html</url>
      
        <content type="html"><![CDATA[<p>This document contains a brief description of the Anki2 database structure as of version 11 (see <code>ver</code> field of the <code>col</code> table). There are planned upgrades to Anki’s db structure as explained in <a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure-Planned-Changes.md">the planned changes document.</a></p><p>Thanks to @sartak and @fasiha for <a href="https://gist.github.com/sartak/3921255">starting to make this</a>. Additional thanks to @bibstha for <a href="https://github.com/bibstha/Anki-Android/wiki/Anki2-database-documentation">more documentation</a></p><h1 id="Anki-database-structure"><a href="#Anki-database-structure" class="headerlink" title="Anki database structure"></a>Anki database structure</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#anki-database-structure"></a></p><p>Anki uses a single <a href="https://sqlite.org/index.html">SQLite</a> database to store information on all of its decks, templates, fields and cards. This file can be found inside the Anki package file (the <code>.apkg</code> file) with the extension <code>.anki2</code>.</p><p>Extracting <code>example.apkg</code> we have the following structure.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── example</span><br><span class="line">│&amp;nbsp;&amp;nbsp; ├── example.anki2</span><br><span class="line">│&amp;nbsp;&amp;nbsp; └── media</span><br><span class="line">└── example.apkg</span><br></pre></td></tr></table></figure><span id="more"></span><p>In linux <code>sqliteman</code> or <code>sqlite3</code> can be used to read and modify the <code>.anki2</code> files.</p><h1 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#terminology"></a></p><p>Anki contains basically the following types:</p><ol><li> Cards</li><li> Decks</li><li> Notes</li><li> Templates</li><li> Collection</li></ol><p>More information on what these represent are clearly explained in <a href="http://ankisrs.net/docs/manual.html#basics">http://ankisrs.net/docs/manual.html#basics</a>.</p><p>This document often refers to “epoch seconds/milliseconds”. This is the amount of time that has passed since the <a href="https://en.wikipedia.org/wiki/Epoch_(computing)">Unix Epoch</a> (1 January 1970 00:00:00 UT).</p><h1 id="Database-schema"><a href="#Database-schema" class="headerlink" title="Database schema"></a>Database schema</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#database-schema"></a></p><h2 id="Cards"><a href="#Cards" class="headerlink" title="Cards"></a>Cards</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#cards"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Cards are what you review. </span></span><br><span class="line"><span class="comment">-- There can be multiple cards for each note, as determined by the Template.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cards (</span><br><span class="line">    id              <span class="type">integer</span> <span class="keyword">primary</span> key,</span><br><span class="line">      <span class="comment">-- the epoch milliseconds of when the card was created</span></span><br><span class="line">    nid             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">--    </span></span><br><span class="line">      <span class="comment">-- notes.id</span></span><br><span class="line">    did             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- deck id (available in col table)</span></span><br><span class="line">    ord             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- ordinal : identifies which of the card templates or cloze deletions it corresponds to </span></span><br><span class="line">      <span class="comment">--   for card templates, valid values are from 0 to num templates - 1</span></span><br><span class="line">      <span class="comment">--   for cloze deletions, valid values are from 0 to max cloze index - 1 (they&#x27;re 0 indexed despite the first being called `c1`)</span></span><br><span class="line">    mod             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- modification time as epoch seconds</span></span><br><span class="line">    usn             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- update sequence number : used to figure out diffs when syncing. </span></span><br><span class="line">      <span class="comment">--   value of -1 indicates changes that need to be pushed to server. </span></span><br><span class="line">      <span class="comment">--   usn &lt; server usn indicates changes that need to be pulled from server.</span></span><br><span class="line">    type            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- 0=new, 1=learning, 2=review, 3=relearning</span></span><br><span class="line">    queue           <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- -3=user buried(In scheduler 2),</span></span><br><span class="line">      <span class="comment">-- -2=sched buried (In scheduler 2), </span></span><br><span class="line">      <span class="comment">-- -2=buried(In scheduler 1),</span></span><br><span class="line">      <span class="comment">-- -1=suspended,</span></span><br><span class="line">      <span class="comment">-- 0=new, 1=learning, 2=review (as for type)</span></span><br><span class="line">      <span class="comment">-- 3=in learning, next rev in at least a day after the previous review</span></span><br><span class="line">      <span class="comment">-- 4=preview</span></span><br><span class="line">    due             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">     <span class="comment">-- Due is used differently for different card types: </span></span><br><span class="line">     <span class="comment">--   new: the order in which cards are to be studied; starts from 1.</span></span><br><span class="line">     <span class="comment">--   learning/relearning: epoch timestamp in seconds</span></span><br><span class="line">     <span class="comment">--   review: days since the collection&#x27;s creation time</span></span><br><span class="line">    ivl             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- interval (used in SRS algorithm). Negative = seconds, positive = days</span></span><br><span class="line">      <span class="comment">-- v2 scheduler used seconds for (re)learning cards and days for review cards</span></span><br><span class="line">      <span class="comment">-- v3 scheduler uses seconds only for intraday (re)learning cards and days for interday (re)learning cards and review cards</span></span><br><span class="line">    factor          <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- The ease factor of the card in permille (parts per thousand). If the ease factor is 2500, the card’s interval will be multiplied by 2.5 the next time you press Good.</span></span><br><span class="line">    reps            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- number of reviews</span></span><br><span class="line">    lapses          <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- the number of times the card went from a &quot;was answered correctly&quot; </span></span><br><span class="line">      <span class="comment">--   to &quot;was answered incorrectly&quot; state</span></span><br><span class="line">    <span class="keyword">left</span>            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- of the form a*1000+b, with:</span></span><br><span class="line">      <span class="comment">-- a the number of reps left today</span></span><br><span class="line">      <span class="comment">-- b the number of reps left till graduation</span></span><br><span class="line">      <span class="comment">-- for example: &#x27;2004&#x27; means 2 reps left today and 4 reps till graduation</span></span><br><span class="line">    odue            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- original due: In filtered decks, it&#x27;s the original due date that the card had before moving to filtered.</span></span><br><span class="line">                    <span class="comment">-- If the card lapsed in scheduler1, then it&#x27;s the value before the lapse. (This is used when switching to scheduler 2. At this time, cards in learning becomes due again, with their previous due date)</span></span><br><span class="line">                    <span class="comment">-- In any other case it&#x27;s 0.</span></span><br><span class="line">    odid            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- original did: only used when the card is currently in filtered deck</span></span><br><span class="line">    flags           <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- an integer. This integer mod 8 represents a &quot;flag&quot;, which can be see in browser and while reviewing a note. Red 1, Orange 2, Green 3, Blue 4, no flag: 0. This integer divided by 8 represents currently nothing</span></span><br><span class="line">    data            text <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">      <span class="comment">-- currently unused</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#collection"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- col contains a single row that holds various information about the collection</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> col (</span><br><span class="line">    id              <span class="type">integer</span> <span class="keyword">primary</span> key,</span><br><span class="line">      <span class="comment">-- arbitrary number since there is only one row</span></span><br><span class="line">    crt             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- timestamp of the creation date in second. It&#x27;s correct up to the day. For V1 scheduler, the hour corresponds to starting a new day. By default, new day is 4.</span></span><br><span class="line">    mod             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- last modified in milliseconds</span></span><br><span class="line">    scm             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- schema mod time: time when &quot;schema&quot; was modified. </span></span><br><span class="line">      <span class="comment">--   If server scm is different from the client scm a full-sync is required</span></span><br><span class="line">    ver             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- version</span></span><br><span class="line">    dty             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- dirty: unused, set to 0</span></span><br><span class="line">    usn             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- update sequence number: used for finding diffs when syncing. </span></span><br><span class="line">      <span class="comment">--   See usn in cards table for more details.</span></span><br><span class="line">    ls              <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- &quot;last sync time&quot;</span></span><br><span class="line">    conf            text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- json object containing configuration options that are synced. Described below in &quot;configuration JSONObjects&quot;</span></span><br><span class="line">    models          text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- json object of json object(s) representing the models (aka Note types) </span></span><br><span class="line">      <span class="comment">-- keys of this object are strings containing integers: &quot;creation time in epoch milliseconds&quot; of the models</span></span><br><span class="line">      <span class="comment">-- values of this object are other json objects of the form described below in &quot;Models JSONObjects&quot;</span></span><br><span class="line">    decks           text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- json object of json object(s) representing the deck(s)</span></span><br><span class="line">      <span class="comment">-- keys of this object are strings containing integers: &quot;deck creation time in epoch milliseconds&quot; for most decks, &quot;1&quot; for the default deck</span></span><br><span class="line">      <span class="comment">-- values of this object are other json objects of the form described below in &quot;Decks JSONObjects&quot;</span></span><br><span class="line">    dconf           text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- json object of json object(s) representing the options group(s) for decks</span></span><br><span class="line">      <span class="comment">-- keys of this object are strings containing integers: &quot;options group creation time in epoch milliseconds&quot; for most groups, &quot;1&quot; for the default option group</span></span><br><span class="line">      <span class="comment">-- values of this object are other json objects of the form described below in &quot;DConf JSONObjects&quot;</span></span><br><span class="line">    tags            text <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">      <span class="comment">-- a cache of tags used in the collection (This list is displayed in the browser. Potentially at other place)</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Graves"><a href="#Graves" class="headerlink" title="Graves"></a>Graves</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#graves"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Contains deleted cards, notes, and decks that need to be synced. </span></span><br><span class="line"><span class="comment">-- usn should be set to -1, </span></span><br><span class="line"><span class="comment">-- oid is the original id.</span></span><br><span class="line"><span class="comment">-- type: 0 for a card, 1 for a note and 2 for a deck</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> graves (</span><br><span class="line">    usn             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    oid             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    type            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#notes"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Notes contain the raw information that is formatted into a number of cards</span></span><br><span class="line"><span class="comment">-- according to the models</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> notes (</span><br><span class="line">    id              <span class="type">integer</span> <span class="keyword">primary</span> key,</span><br><span class="line">      <span class="comment">-- epoch milliseconds of when the note was created</span></span><br><span class="line">    guid            text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- globally unique id, almost certainly used for syncing</span></span><br><span class="line">    mid             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- model id</span></span><br><span class="line">    mod             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- modification timestamp, epoch seconds</span></span><br><span class="line">    usn             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- update sequence number: for finding diffs when syncing.</span></span><br><span class="line">      <span class="comment">--   See the description in the cards table for more info</span></span><br><span class="line">    tags            text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- space-separated string of tags. </span></span><br><span class="line">      <span class="comment">--   includes space at the beginning and end, for LIKE &quot;% tag %&quot; queries</span></span><br><span class="line">    flds            text <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- the values of the fields in this note. separated by 0x1f (31) character.</span></span><br><span class="line">    sfld            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- sort field: used for quick sorting and duplicate check. The sort field is an integer so that when users are sorting on a field that contains only numbers, they are sorted in numeric instead of lexical order. Text is stored in this integer field.</span></span><br><span class="line">    csum            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- field checksum used for duplicate check.</span></span><br><span class="line">      <span class="comment">--   integer representation of first 8 digits of sha1 hash of the first field</span></span><br><span class="line">    flags           <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- unused</span></span><br><span class="line">    data            text <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">      <span class="comment">-- unused</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Review-Log"><a href="#Review-Log" class="headerlink" title="Review Log"></a>Review Log</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#review-log"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- revlog is a review history; it has a row for every review you&#x27;ve ever done!</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> revlog (</span><br><span class="line">    id              <span class="type">integer</span> <span class="keyword">primary</span> key,</span><br><span class="line">       <span class="comment">-- epoch-milliseconds timestamp of when you did the review</span></span><br><span class="line">    cid             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">       <span class="comment">-- cards.id</span></span><br><span class="line">    usn             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">        <span class="comment">-- update sequence number: for finding diffs when syncing. </span></span><br><span class="line">        <span class="comment">--   See the description in the cards table for more info</span></span><br><span class="line">    ease            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">       <span class="comment">-- which button you pushed to score your recall. </span></span><br><span class="line">       <span class="comment">-- review:  1(wrong), 2(hard), 3(ok), 4(easy)</span></span><br><span class="line">       <span class="comment">-- learn/relearn:   1(wrong), 2(ok), 3(easy)</span></span><br><span class="line">    ivl             <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">       <span class="comment">-- interval (i.e. as in the card table)</span></span><br><span class="line">    lastIvl         <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">       <span class="comment">-- last interval (i.e. the last value of ivl. Note that this value is not necessarily equal to the actual interval between this review and the preceding review)</span></span><br><span class="line">    factor          <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">      <span class="comment">-- factor</span></span><br><span class="line">    <span class="type">time</span>            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">       <span class="comment">-- how many milliseconds your review took, up to 60000 (60s)</span></span><br><span class="line">    type            <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">       <span class="comment">--  0=learn, 1=review, 2=relearn, 3=filtered, 4=manual</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Indexes"><a href="#Indexes" class="headerlink" title="Indexes"></a>Indexes</h2><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#indexes"></a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX ix_cards_nid <span class="keyword">on</span> cards (nid);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_cards_sched <span class="keyword">on</span> cards (did, queue, due);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_cards_usn <span class="keyword">on</span> cards (usn);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_notes_csum <span class="keyword">on</span> notes (csum);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_notes_usn <span class="keyword">on</span> notes (usn);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_revlog_cid <span class="keyword">on</span> revlog (cid);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX ix_revlog_usn <span class="keyword">on</span> revlog (usn);</span><br></pre></td></tr></table></figure><h1 id="Models-JSONObjects"><a href="#Models-JSONObjects" class="headerlink" title="Models JSONObjects"></a>Models JSONObjects</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#models-jsonobjects"></a></p><p>Here is an annotated description of the JSONObjects in the models field of the <code>col</code> table. Each object is the value of a key that’s a model id (epoch time in milliseconds):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;model id (epoch time in milliseconds)&quot;</span> :</span><br><span class="line">  &#123;</span><br><span class="line">    css : <span class="string">&quot;CSS, shared for all templates&quot;</span>,</span><br><span class="line">    did :</span><br><span class="line">        <span class="string">&quot;Long specifying the id of the deck that cards are added to by default&quot;</span>,</span><br><span class="line">    flds : [</span><br><span class="line">             <span class="string">&quot;JSONArray containing object for each field in the model as follows:&quot;</span>,</span><br><span class="line">             &#123;</span><br><span class="line">               font : <span class="string">&quot;display font&quot;</span>,</span><br><span class="line">               media : <span class="string">&quot;array of media. appears to be unused&quot;</span>,</span><br><span class="line">               name : <span class="string">&quot;field name&quot;</span>,</span><br><span class="line">               ord : <span class="string">&quot;ordinal of the field - goes from 0 to num fields -1&quot;</span>,</span><br><span class="line">               rtl : <span class="string">&quot;boolean, right-to-left script&quot;</span>,</span><br><span class="line">               size : <span class="string">&quot;font size&quot;</span>,</span><br><span class="line">               sticky : <span class="string">&quot;sticky fields retain the value that was last added </span></span><br><span class="line"><span class="string">                           when adding new notes&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">           ],</span><br><span class="line">    id : <span class="string">&quot;model ID, matches notes.mid&quot;</span>,</span><br><span class="line">    latexPost : <span class="string">&quot;String added to end of LaTeX expressions (usually \\end&#123;document&#125;)&quot;</span>,</span><br><span class="line">    latexPre : <span class="string">&quot;preamble for LaTeX expressions&quot;</span>,</span><br><span class="line">    mod : <span class="string">&quot;modification time in seconds&quot;</span>,</span><br><span class="line">    name : <span class="string">&quot;model name&quot;</span>,</span><br><span class="line">    req : [</span><br><span class="line">            <span class="string">&quot;req is unused in modern clients. May exist for backwards compatibility. </span></span><br><span class="line"><span class="string">             https://forums.ankiweb.net/t/is-req-still-used-or-present/9977</span></span><br><span class="line"><span class="string">             AnkiDroid 2.14 uses it, AnkiDroid 2.15 does not use it but still generates it.</span></span><br><span class="line"><span class="string">             Array of arrays describing, for each template T, which fields are required to generate T.</span></span><br><span class="line"><span class="string">             The array is of the form [T,string,list], where:</span></span><br><span class="line"><span class="string">             -  T is the ordinal of the template. </span></span><br><span class="line"><span class="string">             - The string is &#x27;none&#x27;, &#x27;all&#x27; or &#x27;any&#x27;. </span></span><br><span class="line"><span class="string">             - The list contains ordinal of fields, in increasing order.</span></span><br><span class="line"><span class="string">             The meaning is as follows:</span></span><br><span class="line"><span class="string">             - if the string is &#x27;none&#x27;, then no cards are generated for this template. The list should be empty.</span></span><br><span class="line"><span class="string">             - if the string is &#x27;all&#x27; then the card is generated only if each field of the list are filled</span></span><br><span class="line"><span class="string">             - if the string is &#x27;any&#x27;, then the card is generated if any of the field of the list is filled.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             The algorithm to decide how to compute req from the template is explained on: </span></span><br><span class="line"><span class="string">             https://github.com/Arthur-Milchior/anki/blob/commented/documentation//templates_generation_rules.md&quot;</span></span><br><span class="line">          ],</span><br><span class="line">    sortf : <span class="string">&quot;Integer specifying which field is used for sorting in the browser&quot;</span>,</span><br><span class="line">    tags : <span class="string">&quot;Anki saves the tags of the last added note to the current model, use an empty array []&quot;</span>,</span><br><span class="line">    tmpls : [</span><br><span class="line">              <span class="string">&quot;JSONArray containing object of CardTemplate for each card in model&quot;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                afmt : <span class="string">&quot;answer template string&quot;</span>,</span><br><span class="line">                bafmt : <span class="string">&quot;browser answer format: </span></span><br><span class="line"><span class="string">                          used for displaying answer in browser&quot;</span>,</span><br><span class="line">                bqfmt : <span class="string">&quot;browser question format: </span></span><br><span class="line"><span class="string">                          used for displaying question in browser&quot;</span>,</span><br><span class="line">                did : <span class="string">&quot;deck override (null by default)&quot;</span>,</span><br><span class="line">                name : <span class="string">&quot;template name&quot;</span>,</span><br><span class="line">                ord : <span class="string">&quot;template number, see flds&quot;</span>,</span><br><span class="line">                qfmt : <span class="string">&quot;question format string&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">    type : <span class="string">&quot;Integer specifying what type of model. 0 for standard, 1 for cloze&quot;</span>,</span><br><span class="line">    usn : <span class="string">&quot;usn: Update sequence number: used in same way as other usn vales in db&quot;</span>,</span><br><span class="line">    vers : <span class="string">&quot;Legacy version number (unused), use an empty array []&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Decks-JSONObjects"><a href="#Decks-JSONObjects" class="headerlink" title="Decks JSONObjects"></a>Decks JSONObjects</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#decks-jsonobjects"></a></p><p>Here is an annotated description of the JSONObjects in the decks field of the <code>col</code> table:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;deck id (creation time in epoch milliseconds for most decks, &#x27;1&#x27; for the default deck)&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;name of deck&quot;</span>, </span><br><span class="line">    extendRev: <span class="string">&quot;extended review card limit (for custom study)</span></span><br><span class="line"><span class="string">                Potentially absent, in this case it&#x27;s considered to be 10 by aqt.customstudy&quot;</span>, </span><br><span class="line">    usn: <span class="string">&quot;usn: Update sequence number: used in same way as other usn vales in db&quot;</span>, </span><br><span class="line">    collapsed: <span class="string">&quot;true when deck is collapsed&quot;</span>, </span><br><span class="line">    browserCollapsed: <span class="string">&quot;true when deck collapsed in browser&quot;</span>, </span><br><span class="line">    newToday/revToday/lrnToday : two number array.</span><br><span class="line">                                 First one is the number of days that have passed between the collection was created and the deck was last updated</span><br><span class="line">                                 The second one is equal to the number of cards seen today in <span class="built_in">this</span> deck minus the number of <span class="keyword">new</span> <span class="title class_">cards</span> in custom study today.</span><br><span class="line">                                 BEWARE, it<span class="string">&#x27;s changed in anki.sched(v2).Scheduler._updateStats and anki.sched(v2).Scheduler._updateCutoff.update  but can&#x27;</span>t be found by grepping <span class="string">&#x27;newToday&#x27;</span>, because it<span class="string">&#x27;s instead written as type+&quot;Today&quot; with type which may be new/rev/lrnToday    </span></span><br><span class="line"><span class="string">    timeToday: &quot;two number array used somehow for custom study. Currently unused in the code&quot;, </span></span><br><span class="line"><span class="string">    dyn: &quot;1 if dynamic (AKA filtered) deck&quot;, </span></span><br><span class="line"><span class="string">    extendNew: &quot;extended new card limit (for custom study). </span></span><br><span class="line"><span class="string">                Potentially absent, in this case it&#x27;</span>s considered to be <span class="number">10</span> by aqt.customstudy<span class="string">&quot;, </span></span><br><span class="line"><span class="string">    conf: &quot;</span>id of option group from dconf in `col` table. Or absent <span class="keyword">if</span> the deck is dynamic. </span><br><span class="line">          Its absent in filtered deck<span class="string">&quot;, </span></span><br><span class="line"><span class="string">    id: &quot;</span>deck <span class="title function_">ID</span> <span class="params">(automatically generated <span class="type">long</span>)</span><span class="string">&quot;, </span></span><br><span class="line"><span class="string">    mod: &quot;</span>last modification time<span class="string">&quot;, </span></span><br><span class="line"><span class="string">    desc: &quot;</span>deck description<span class="string">&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="DConf-JSONObjects"><a href="#DConf-JSONObjects" class="headerlink" title="DConf JSONObjects"></a>DConf JSONObjects</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#dconf-jsonobjects"></a></p><p>Here is an annotated description of the JSONObjects in the dconf field of the <code>col.decks</code> table:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;deck config id (creation time in epoch milliseconds for most option groups, &#x27;1&#x27; for the default option group)&quot;</span> :</span><br><span class="line">  &#123;</span><br><span class="line">        autoplay : <span class="string">&quot;whether the audio associated to a question should be</span></span><br><span class="line"><span class="string">played when the question is shown&quot;</span></span><br><span class="line">        dyn : <span class="string">&quot;Whether this deck is dynamic. Not present by default in decks.py&quot;</span></span><br><span class="line">        id : <span class="string">&quot;deck ID (automatically generated long). Not present by default in decks.py&quot;</span></span><br><span class="line">        lapse : &#123;</span><br><span class="line">            <span class="string">&quot;The configuration for lapse cards.&quot;</span></span><br><span class="line">            delays : <span class="string">&quot;The list of successive delay between the learning steps of the new cards, as explained in the manual.&quot;</span></span><br><span class="line">            leechAction : <span class="string">&quot;What to do to leech cards. 0 for suspend, 1 for mark. Numbers according to the order in which the choices appear in aqt/dconf.ui&quot;</span></span><br><span class="line">            leechFails : <span class="string">&quot;the number of lapses authorized before doing leechAction.&quot;</span></span><br><span class="line">            minInt: <span class="string">&quot;a lower limit to the new interval after a leech&quot;</span></span><br><span class="line">            mult : <span class="string">&quot;percent by which to multiply the current interval when a card goes has lapsed&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxTaken : <span class="string">&quot;The number of seconds after which to stop the timer&quot;</span></span><br><span class="line">        mod : <span class="string">&quot;Last modification time&quot;</span></span><br><span class="line">        name : <span class="string">&quot;The name of the configuration&quot;</span></span><br><span class="line">        <span class="keyword">new</span> : &#123;</span><br><span class="line">            <span class="string">&quot;The configuration for new cards.&quot;</span></span><br><span class="line">            bury : <span class="string">&quot;Whether to bury cards related to new cards answered&quot;</span></span><br><span class="line">            delays : <span class="string">&quot;The list of successive delay between the learning steps of the new cards, as explained in the manual.&quot;</span></span><br><span class="line">            initialFactor : <span class="string">&quot;The initial ease factor&quot;</span></span><br><span class="line">            ints : <span class="string">&quot;The list of delays according to the button pressed while leaving the learning mode. Good, easy and unused. In the GUI, the first two elements corresponds to Graduating Interval and Easy interval&quot;</span></span><br><span class="line">            order : <span class="string">&quot;In which order new cards must be shown. NEW_CARDS_RANDOM = 0 and NEW_CARDS_DUE = 1.&quot;</span></span><br><span class="line">            perDay : <span class="string">&quot;Maximal number of new cards shown per day.&quot;</span></span><br><span class="line">            separate : <span class="string">&quot;Seems to be unused in the code.&quot;</span></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        replayq : <span class="string">&quot;whether the audio associated to a question should be played when the answer is shown&quot;</span></span><br><span class="line">        rev : &#123;</span><br><span class="line">            <span class="string">&quot;The configuration for review cards.&quot;</span></span><br><span class="line">            bury : <span class="string">&quot;Whether to bury cards related to new cards answered&quot;</span></span><br><span class="line">            ease4 : <span class="string">&quot;the number to add to the easyness when the easy button is pressed&quot;</span></span><br><span class="line">            fuzz : <span class="string">&quot;The new interval is multiplied by a random number between -fuzz and fuzz&quot;</span></span><br><span class="line">            ivlFct : <span class="string">&quot;multiplication factor applied to the intervals Anki generates&quot;</span></span><br><span class="line">            maxIvl : <span class="string">&quot;the maximal interval for review&quot;</span></span><br><span class="line">            minSpace : <span class="string">&quot;not currently used according to decks.py code&#x27;s comment&quot;</span></span><br><span class="line">            perDay : <span class="string">&quot;Numbers of cards to review per day&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer : <span class="string">&quot;whether timer should be shown (1) or not (0)&quot;</span></span><br><span class="line">        usn : <span class="string">&quot;See usn in cards table for details.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="configuration-JSONObject"><a href="#configuration-JSONObject" class="headerlink" title="configuration JSONObject"></a>configuration JSONObject</h1><p><a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#configuration-jsonobject"></a></p><p>Here is an annotated description of the JSONObject in the conf field of the <code>col</code> table when the collection is started. More values may be added to it by any add-on. Unlike the <code>models</code>, <code>decks</code>, and <code>dconf</code> JSONObjects, there should be only one <code>conf</code> JSONObject per collection.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;curDeck&quot;</span>: <span class="string">&quot;The id (as int) of the last deck selected (during review, adding card, changing the deck of a card)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;activeDecks&quot;</span>: <span class="string">&quot;The list containing the current deck id and its descendant (as ints)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;newSpread&quot;</span>: <span class="string">&quot;In which order to view to review the cards. This can be selected in Preferences&gt;Basic. Possible values are:</span></span><br><span class="line"><span class="string">      0 -- NEW_CARDS_DISTRIBUTE (Mix new cards and reviews)</span></span><br><span class="line"><span class="string">      1 -- NEW_CARDS_LAST (see new cards after review)</span></span><br><span class="line"><span class="string">      2 -- NEW_CARDS_FIRST (See new card before review)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;collapseTime&quot;</span>: <span class="string">&quot;&#x27;Preferences&gt;Basic&gt;Learn ahead limit&#x27;*60. If there is no more card to review now but next card in learning is in less than collapseTime second, show it now.</span></span><br><span class="line"><span class="string">    If there are no other card to review, then we can review cards in learning in advance if they are due in less than this number of seconds.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeLim&quot;</span>: <span class="string">&quot;&#x27;Preferences&gt;Basic&gt;Timebox time limit&#x27;*60. Each time this number of second elapse, anki tell you how many card you reviewed.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;estTimes&quot;</span>: <span class="string">&quot;&#x27;Preferences&gt;Basic&gt;Show next review time above answer buttons&#x27;. A Boolean.&quot;</span></span><br><span class="line">    <span class="string">&quot;dueCounts&quot;</span>: <span class="string">&quot;&#x27;Preferences&gt;Basic&gt;Show remaining card count during review&#x27;. A Boolean.&quot;</span></span><br><span class="line">    <span class="string">&quot;curModel&quot;</span>: <span class="string">&quot;Id (as string) of the last note type (a.k.a. model) used (i.e. either when creating a note, or changing the note type of a note).&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nextPos&quot;</span>: <span class="string">&quot;This is the highest value of a due value of a new card. It allows to decide the due number to give to the next note created. (This is useful to ensure that cards are seen in order in which they are added.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sortType&quot;</span>: <span class="string">&quot;A string representing how the browser must be sorted. Its value should be one of the possible value of &#x27;aqt.browsers.DataModel.activeCols&#x27; (or equivalently of &#x27;activeCols&#x27;  but not any of (&#x27;question&#x27;, &#x27;answer&#x27;, &#x27;template&#x27;, &#x27;deck&#x27;, &#x27;note&#x27;, &#x27;noteTags&#x27;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sortBackwards&quot;</span>: <span class="string">&quot;A Boolean stating whether the browser sorting must be in increasing or decreasing order&quot;</span>,</span><br><span class="line">    <span class="string">&quot;addToCur&quot;</span>: <span class="string">&quot;A Boolean. True for &#x27;When adding, default to current deck&#x27; in Preferences&gt;Basic. False for &#x27;Change deck depending on note type&#x27;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dayLearnFirst&quot;</span>: <span class="string">&quot;A Boolean. It corresponds to the option &#x27;Show learning cards with larger steps before reviews&#x27;. But this option does not seems to appear in the preference box&quot;</span>,</span><br><span class="line">    <span class="string">&quot;newBury&quot;</span>: <span class="string">&quot;A Boolean. Always set to true and not read anywhere in the code but at the place where it is set to True if it is not already true. Hence probably quite useful.&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;lastUnburied&quot;</span>:<span class="string">&quot;The date of the last time the scheduler was initialized or reset. If it&#x27;s not today, then buried notes must be unburied. This is not in the json until scheduler is used once.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;activeCols&quot;</span>:<span class="string">&quot;the list of name of columns to show in the browser. Possible values are listed in aqt.browser.Browser.setupColumns. They are:</span></span><br><span class="line"><span class="string">    &#x27;question&#x27; -- the browser column&#x27;Question&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;answer&#x27; -- the browser column&#x27;Answer&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;template&#x27; -- the browser column&#x27;Card&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;deck&#x27; -- the browser column&#x27;Deck&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;noteFld&#x27; -- the browser column&#x27;Sort Field&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;noteCrt&#x27; -- the browser column&#x27;Created&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;noteMod&#x27; -- the browser column&#x27;Edited&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardMod&#x27; -- the browser column&#x27;Changed&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardDue&#x27; -- the browser column&#x27;Due&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardIvl&#x27; -- the browser column&#x27;Interval&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardEase&#x27; -- the browser column&#x27;Ease&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardReps&#x27; -- the browser column&#x27;Reviews&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;cardLapses&#x27; -- the browser column&#x27;Lapses&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;noteTags&#x27; -- the browser column&#x27;Tags&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;note&#x27; -- the browser column&#x27;Note&#x27;,</span></span><br><span class="line"><span class="string">    The default columns are: noteFld, template, cardDue and deck</span></span><br><span class="line"><span class="string">    This is not in the json at creation. It&#x27;s added when the browser is open.</span></span><br><span class="line"><span class="string">     &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS模拟器无法使用Apple ID登录解决办法</title>
      <link href="/posts/2024/09/31f9f56.html"/>
      <url>/posts/2024/09/31f9f56.html</url>
      
        <content type="html"><![CDATA[<p>我正在使用 CloudKit 开发 iOS 应用程序。我使用新创建的 Apple ID 在模拟器中进行测试。这个 Apple ID 在我的浏览器中登录时工作正常。但是，当尝试在我的模拟器中使用它时，它一直告诉我用户名/密码不正确。（当然，我确保用户名密码是正确的）</p><p>该怎么解决呢？</p><p>很简单，在网页上登录iCloud <a href="https://www.icloud.com/">https://www.icloud.com/</a> （国内用户是登录<a href="https://www.icloud.com.cn/">https://www.icloud.com.cn</a> ），并接受了登录后的条款和条件，然后就可以在模拟器中连接我的AppleID。</p><p>希望能解决你的问题！</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> icloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode13 building for iOS Simulator, but linking in dylib built for iOS 报错解决办法</title>
      <link href="/posts/2024/09/c59f7787.html"/>
      <url>/posts/2024/09/c59f7787.html</url>
      
        <content type="html"><![CDATA[<p>因为苹果M1芯片用的是arm64的架构，而之前的mac是用的英特尔芯片。   </p><p>所以要在 TARGET -&gt; Architectures -&gt; Excluded Architectures -&gt; 添加arm64    </p><p>同时在 pod项目里，也要 PROJECT -&gt; Architectures -&gt; Excluded Architectures -&gt; 添加arm64  </p><p>之前一直没解决是因为没有在pod项目里也添加arm64  。</p><span id="more"></span><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-220.png" alt=""> <p>然后clean一下项目，重新编译启动就可以了。<br>当然，因为直接配置的pods项目，所以可能在执行pod install时，会被覆盖掉，还需要重新设置，所以也可以不用直接配置，而是在podfile文件末尾添加以下脚本：然后执行pod install 命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">    installer.pods_project.targets.each do |target|</span><br><span class="line">        target.build_configurations.each do |config|</span><br><span class="line">            config.build_settings[&quot;EXCLUDED_ARCHS[sdk=iphonesimulator*]&quot;] = &quot;arm64&quot;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode问题记录-File not found: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphoneos.a</title>
      <link href="/posts/2024/09/2019abfa.html"/>
      <url>/posts/2024/09/2019abfa.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Xcode 版本14.3</p><p>运行到模拟器的报错信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ld: &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; not found: ld: file not found: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphonesimulator.a</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>搜了下网上的方案，说是Xcode 14.3版本有bug，需要回退到14.2版本才能解决。但是我嫌太麻烦了，找到了一个更简单的解决办法。</p><span id="more"></span><p>解决这个问题很简单，只需要将第三方库部署目标的iOS版本设置成和应用最低部署目标的iOS版本一致。Xcode 14支持的最低部署目标iOS 11，所以将第三方库部署目标的ios版本设置成11就搞定了。</p><p>在podfile中加上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.targets.each do |target|</span><br><span class="line">    target.build_configurations.each do |config|</span><br><span class="line">      config.build_settings[&#x27;IPHONEOS_DEPLOYMENT_TARGET&#x27;] = &#x27;11.0&#x27;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后重新执行pod install 即可。</p><blockquote><p>这段代码的作用是先获取Pods项目（pods_project）中的目标数组（targets），然后遍历目标数组通过目标对象（target）获取构建配置数组（build_configurations），最后遍历构建配置数组修改构建配置对象中的构建设置（build_settings），将iOS 部署目标版本设为11.0。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod Install 报错失败解决方法</title>
      <link href="/posts/2024/09/73e6ca5b.html"/>
      <url>/posts/2024/09/73e6ca5b.html</url>
      
        <content type="html"><![CDATA[<p>很久没跑ios项目，今天pod Install报这个错，记录一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Cloning spec repo `cocoapods` from `https://github.com/CocoaPods/Specs.git`</span><br><span class="line"> </span><br><span class="line"># 过了很久很久没反应</span><br><span class="line"> </span><br><span class="line">[!] Unable to add a source with url `https://github.com/CocoaPods/Specs.git` named `cocoapods`.</span><br><span class="line">You can try adding it manually in `/Users/xxx/.cocoapods/repos` or via `pod repo add`.</span><br></pre></td></tr></table></figure><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p><code>cd ~/.cocoapods/repos/</code><br>检查一下 master 文件夹是否存在，如果存在 master 文件夹，执行 pod repo remove master。不存在则跳过这一条命令。</p><p><code>pod repo remove master</code><br>接下来继续执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod setup</span><br><span class="line"></span><br><span class="line">git clone --depth 1 https://github.com/CocoaPods/Specs.git master</span><br></pre></td></tr></table></figure><p>如果失败，尝试科学上网。</p><span id="more"></span><p>此时应该已经解决问题了。</p><h2 id="切换远程分支"><a href="#切换远程分支" class="headerlink" title="切换远程分支"></a>切换远程分支</h2><p>参考：<a href="https://blog.csdn.net/csdnwr/article/details/123813996?spm=1001.2014.3001.5501" title="解决git clone过大的仓库_csdnwr的博客-CSDN博客_gitlab远程仓库太大">解决git clone过大的仓库_csdnwr的博客-CSDN博客_gitlab远程仓库太大</a></p><p><code>git remote set-branches origin &#39;*&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pod </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alpine-glibc docker镜像&amp;dockerfile编写</title>
      <link href="/posts/2024/09/c73bace5.html"/>
      <url>/posts/2024/09/c73bace5.html</url>
      
        <content type="html"><![CDATA[<h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>来自frolvlad/alpine-glibc</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.11</span><br><span class="line">​</span><br><span class="line">ENV LANG=C.UTF-8</span><br><span class="line">​</span><br><span class="line"># Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.</span><br><span class="line">​</span><br><span class="line">RUN ALPINE_GLIBC_BASE_URL=&quot;https://github.com/sgerrand/alpine-pkg-glibc/releases/download&quot; &amp;&amp; \</span><br><span class="line">    ALPINE_GLIBC_PACKAGE_VERSION=&quot;2.31-r0&quot; &amp;&amp; \</span><br><span class="line">    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=&quot;glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk&quot; &amp;&amp; \</span><br><span class="line">    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=&quot;glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk&quot; &amp;&amp; \</span><br><span class="line">    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=&quot;glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk&quot; &amp;&amp; \</span><br><span class="line">    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \</span><br><span class="line">    echo \</span><br><span class="line">        &quot;-----BEGIN PUBLIC KEY-----\</span><br><span class="line">        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\</span><br><span class="line">        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\</span><br><span class="line">        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\</span><br><span class="line">        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\</span><br><span class="line">        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\</span><br><span class="line">        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\</span><br><span class="line">        1QIDAQAB\</span><br><span class="line">        -----END PUBLIC KEY-----&quot; | sed &#x27;s/ */\n/g&#x27; &gt; &quot;/etc/apk/keys/sgerrand.rsa.pub&quot; &amp;&amp; \</span><br><span class="line">    wget \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME&quot; &amp;&amp; \</span><br><span class="line">    apk add --no-cache \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BASE_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BIN_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_I18N_PACKAGE_FILENAME&quot; &amp;&amp; \</span><br><span class="line">    \</span><br><span class="line">    rm &quot;/etc/apk/keys/sgerrand.rsa.pub&quot; &amp;&amp; \</span><br><span class="line">    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 &quot;$LANG&quot; || true &amp;&amp; \</span><br><span class="line">    echo &quot;export LANG=$LANG&quot; &gt; /etc/profile.d/locale.sh &amp;&amp; \</span><br><span class="line">    \</span><br><span class="line">    apk del glibc-i18n &amp;&amp; \</span><br><span class="line">    \</span><br><span class="line">    rm &quot;/root/.wget-hsts&quot; &amp;&amp; \</span><br><span class="line">    apk del .build-dependencies &amp;&amp; \</span><br><span class="line">    rm \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BASE_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_BIN_PACKAGE_FILENAME&quot; \</span><br><span class="line">        &quot;$ALPINE_GLIBC_I18N_PACKAGE_FILENAME&quot;</span><br></pre></td></tr></table></figure><p>如果受限于网络原因，无法直接下载几个apk，也可以直接通过浏览器下载，然后add进去即可。</p><h2 id="包含时区的"><a href="#包含时区的" class="headerlink" title="包含时区的"></a>包含时区的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM frolvlad/alpine-glibc</span><br><span class="line">ENV TZ Asia/Shanghai</span><br><span class="line">RUN apk add --update --no-cache \</span><br><span class="line">    tzdata &amp;&amp; ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/sgerrand/alpine-pkg-glibc">https://github.com/sgerrand/alpine-pkg-glibc</a><br><a href="https://github.com/Docker-Hub-frolvlad/docker-alpine-glibc">https://github.com/Docker-Hub-frolvlad/docker-alpine-glibc</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-MySQL,MariaDB数据库操作</title>
      <link href="/posts/2024/09/e9ccd3ee.html"/>
      <url>/posts/2024/09/e9ccd3ee.html</url>
      
        <content type="html"><![CDATA[<p>MariaDB实际上是MySQL的兼容分支, 下面的代码都可以支持。<br>mysql.client使用MariaDB提供的客户端组件(已内嵌在支持库中） </p><p>代码示例:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import console;</span><br><span class="line">import mysql.client;</span><br><span class="line"></span><br><span class="line">console.showLoading(&quot; 正在连接测试数据库&quot; )</span><br><span class="line">var dbClient,err = mysql.client(</span><br><span class="line">    server = &quot;db4free.net&quot;; //数据库服务器,可省略默认为localhost</span><br><span class="line">    uid = &quot;aardio_mysql&quot;;//用户名,可省略默认为root</span><br><span class="line">    pwd = &quot;aardio.com&quot;;</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">if(!dbClient)&#123; </span><br><span class="line">    console.log(&quot;如果是有人无聊修改了密码,请自行到db4free.net申请免费数据库&quot;)</span><br><span class="line">    return console.logPause(err); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选择数据库</span><br><span class="line">dbClient.selectDb(&quot;aardio_mysql&quot;)  </span><br><span class="line"></span><br><span class="line">//查询数据并返回记录集</span><br><span class="line">var result = dbClient.stepQuery(&quot;select version()&quot;);</span><br><span class="line">console.dump(result)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">dbClient.query(sql,...) 等所有需要格式化SQL语句的函数，</span><br><span class="line">内部都是调用 dbClient.format(sql,...) 函数转换 SQL 语句。</span><br><span class="line"></span><br><span class="line">如果SQL参数后面的格式化参数是一个数组，SQL中的占位符请使用?或??，</span><br><span class="line">如果格式化参数是非数组的表参数，SQL中的占位符请使用@开头的命名参数。</span><br><span class="line">如果格式化参数不是表，则调用  string.format(sql,...) 格式化。</span><br><span class="line"></span><br><span class="line">dbClient.format()对于数值和布尔值不作转换，</span><br><span class="line">字符串会进行安全转义处理（可避免SQL非法注入），buffer会转换为16进制编码。</span><br><span class="line">如果参数值是数组则展开为列表,例如 &#x27;a&#x27;,&#x27;b&#x27;，</span><br><span class="line">如果是嵌套数组则展开为分组列表, 例如(&#x27;a&#x27;,&#x27;b&#x27;),(&#x27;c&#x27;,&#x27;d&#x27;)</span><br><span class="line">如果参数值是命名表对象（非数组），则格式化为SQL键值对（键调用dbMysql.escapeId 函数格式化 ）。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//为避免有人乱改测试数据库表结构又没有删除，先删除旧的表</span><br><span class="line">dbClient.query(&quot;DROP TABLE IF EXISTS ??&quot;,&#123;library&#125;);</span><br><span class="line">//上面的SQL会格式化为 &quot;DROP TABLE IF EXISTS `library`&quot;</span><br><span class="line"></span><br><span class="line">//执行SQL语句,注意mysql表名、字段名可包含于反引号内(用键盘左上角ESC下方的按键内)</span><br><span class="line">var ret,err = dbClient.query(&quot;CREATE TABLE IF NOT EXISTS `library` (</span><br><span class="line">    `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `name` VARCHAR(100) NOT NULL, </span><br><span class="line">    `auditing` TINYINT(1) DEFAULT &#x27;0&#x27;,</span><br><span class="line">    `bytes` BLOB,</span><br><span class="line">    `time` DATETIME DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    PRIMARY KEY (`id`),</span><br><span class="line">    UNIQUE KEY `id` (`id`)</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;&quot;);</span><br><span class="line">console.dump(ret,err)</span><br><span class="line"></span><br><span class="line">var dbTable,err  = dbClient.listTables() </span><br><span class="line">for tbl in dbTable.each()&#123;</span><br><span class="line">    console.log(&quot;发现数据表:&quot;,tbl);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">var ret,err = dbClient.query(&quot;INSERT `library` VALUES(null,&#x27;测试&#x27;,@num,@str,@time)&quot;,&#123;</span><br><span class="line">    num = 123;</span><br><span class="line">    str = raw.buffer(&quot;测试:&#x27;这是字符串!&#x27;命名参数可以自动处理字符串转义&quot;);</span><br><span class="line">    time = time();</span><br><span class="line">&#125; ) </span><br><span class="line"></span><br><span class="line">console.dump(ret)</span><br><span class="line"></span><br><span class="line">//如果是占位符对应的格式化参数是嵌套数组则展开为分组列表, 例如(&#x27;a&#x27;,&#x27;b&#x27;),(&#x27;c&#x27;,&#x27;d&#x27;)</span><br><span class="line">var ret,err = dbClient.query(&quot;INSERT `library`(`name`,`auditing`,`bytes`,`time`) VALUES ?&quot;,&#123; &#123;</span><br><span class="line">    &#123;&#x27;嵌套数组1&#x27;,123,&quot;测试xx&quot;,time()&#125;</span><br><span class="line">    &#123;&#x27;嵌套数组2&#x27;,123,raw.buffer(&quot;测试xxx2&quot;),time()&#125;</span><br><span class="line">&#125; &#125; ) </span><br><span class="line">console.dump(ret,err);</span><br><span class="line"></span><br><span class="line">var ret,err = dbClient.query(&quot;INSERT `library`(`name`,`auditing`,`bytes`,`time`) VALUES(&#x27;测试2&#x27;,@num,@str,@time)&quot;,&#123;</span><br><span class="line">    num = 123;</span><br><span class="line">    str = &quot;测试2&quot;;</span><br><span class="line">    time = time().addday(-2);</span><br><span class="line">&#125; ) </span><br><span class="line">console.dump(ret,err);</span><br><span class="line"></span><br><span class="line">//如果格式化参数值是数组则展开为列表,例如 &#x27;a&#x27;,&#x27;b&#x27;，示例如下：</span><br><span class="line">dbClient.query(&quot;DELETE FROM `library` WHERE `name` IN (?)&quot;,&#123;&#123;&#x27;嵌套数组1&#x27;,&#x27;嵌套数组2&#x27;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">//查询数据并返回记录集</span><br><span class="line">var result = dbClient.query(&quot;SELECT * FROM `library` WHERE time &gt;=@time&quot;,&#123;</span><br><span class="line">    time = tostring(time().addday(-3),&quot;%Y/%m/%d&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">for name,auditing,bytes in result.each()&#123; </span><br><span class="line">    console.log(&quot;输出&quot;, name,auditing,bytes ); //逐行输出所有记录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查询数据并返回全部记录集到一个表</span><br><span class="line">var result = dbClient.query(&quot;SELECT * FROM `library` WHERE time &gt;= (</span><br><span class="line">    SELECT DATE(`time`) FROM `library` ORDER BY `time` DESC LIMIT 0,1</span><br><span class="line">)&quot;);</span><br><span class="line">console.dumpJson(result.getTable())</span><br><span class="line"></span><br><span class="line">//创建存储过程</span><br><span class="line">var ret,err = dbClient.query(&quot;</span><br><span class="line">CREATE PROCEDURE demo(IN n int)  </span><br><span class="line">BEGIN     </span><br><span class="line">    SET n=123;   </span><br><span class="line">    SELECT n;  </span><br><span class="line">END;   </span><br><span class="line">&quot;)</span><br><span class="line"></span><br><span class="line">//调用存储过程</span><br><span class="line">var ret,err = dbClient.getTable(&quot;CALL demo(@n)&quot;,&#123;</span><br><span class="line">    n=123 //传入命名参数</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.dump(ret);</span><br><span class="line"></span><br><span class="line">//移除存储过程</span><br><span class="line">console.dump( dbClient.query(&quot;DROP PROCEDURE IF EXISTS `demo`&quot;) );</span><br><span class="line"></span><br><span class="line">//移除数据库</span><br><span class="line">dbClient.query(&quot;DROP TABLE IF EXISTS `library`&quot;);</span><br><span class="line">console.pause();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他数据库请参考：<br><a href="http://bbs.aardio.com/thread-10304-1-1.html">SQLite数据库基本操作: 增、删、改、查</a><br><a href="http://bbs.aardio.com/thread-10302-1-1.html">Access数据库基本操作: 增、删、改、查</a><br><a href="http://bbs.aardio.com/thread-10489-1-1.html">MSSQL Server数据库基本操作: 增、删、改、查</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-分享一个plus界面贴图练习的作品Ovplayer播放器界面</title>
      <link href="/posts/2024/09/81c55a07.html"/>
      <url>/posts/2024/09/81c55a07.html</url>
      
        <content type="html"><![CDATA[<p>好长时间没专门练习界面贴图, 今天花了一天时间仿了一个视频播放器, 纯plus贴图 , 里面所有的可见元素均为Plus贴图实现!<br>代码里基本用到了Plus的所有扩展功能, 送给所有喜欢aar的人 ^_^  </p><p>最后说一句: Plus贴图真方便<br>2018.4.6 10:30<br>更新了下, 注释掉了Jacen说的DPI那个代码,解决错位问题.<br>2018.4.6 11:50<br>更新了下自定义的贴图函数ctrlSkin(res){}导致界面出错内存崩溃问题, 将所有skin展开了,目前来看貌似这个问题解决了.<br>2018.4.6 21.05<br>更新了主界面全屏设置,导航替换为win.ui.tabs()实现<br>2018.4.6 21.29<br>更新新增加的tabs可删除功能  </p><p>源码下载链接：<a href="https://pan.baidu.com/s/1dmCTaTm-lMhJu5gMSCjlGw">https://pan.baidu.com/s/1dmCTaTm-lMhJu5gMSCjlGw</a> 密码：awy0  </p><p>附上主界面的部分代码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;Ovplayer播放器&quot;;right=1145;bottom=686;bgcolor=4208437;border=&quot;none&quot;)</span><br><span class="line">mainForm.add(</span><br><span class="line">closeButton=&#123;cls=&quot;plus&quot;;left=1106;top=13;right=1131;bottom=38;background=&quot;\res\Images\sys_close.png&quot;;dr=1;dt=1;notify=1;repeat=&quot;repeat-x&quot;;z=9&#125;;</span><br><span class="line">custom=&#123;cls=&quot;custom&quot;;text=&quot;custom&quot;;left=0;top=50;right=1146;bottom=687;ah=1;aw=1;bgcolor=8421376;db=1;dl=1;dr=1;dt=1;z=12&#125;;</span><br><span class="line">maxButton=&#123;cls=&quot;plus&quot;;left=1076;top=13;right=1101;bottom=38;background=&quot;\res\Images\sys_max.png&quot;;dr=1;dt=1;notify=1;repeat=&quot;repeat-x&quot;;z=8&#125;;</span><br><span class="line">minButton=&#123;cls=&quot;plus&quot;;left=1046;top=13;right=1071;bottom=38;background=&quot;\res\Images\sys_min.png&quot;;dr=1;dt=1;notify=1;repeat=&quot;repeat-x&quot;;z=7&#125;;</span><br><span class="line">modelPlus1=&#123;cls=&quot;plus&quot;;text=&quot;播放器&quot;;left=148;top=1;right=284;bottom=50;background=&quot;\res\Images\sys_tab_bkg.png&quot;;clipBk=false;color=12632256;dl=1;dt=1;font=LOGFONT(name=&#x27;微软雅黑&#x27;;h=-16);notify=1;repeat=&quot;repeat-x&quot;;z=2&#125;;</span><br><span class="line">modelPlus2=&#123;cls=&quot;plus&quot;;text=&quot;影视库&quot;;left=284;top=1;right=420;bottom=50;background=&quot;\res\Images\sys_tab_bkg.png&quot;;clipBk=false;color=12632256;dl=1;dt=1;font=LOGFONT(name=&#x27;微软雅黑&#x27;;h=-16);notify=1;repeat=&quot;repeat-x&quot;;z=4&#125;;</span><br><span class="line">plus=&#123;cls=&quot;plus&quot;;left=1007;top=0;right=1009;bottom=51;background=&quot;\res\Images\sys_split.png&quot;;clipBk=false;dr=1;dt=1;repeat=&quot;center&quot;;z=5&#125;;</span><br><span class="line">plus2=&#123;cls=&quot;plus&quot;;left=0;top=0;right=140;bottom=51;background=&quot;\res\Images\logo.png&quot;;clipBk=false;dl=1;dt=1;repeat=&quot;center&quot;;z=1&#125;;</span><br><span class="line">plus4=&#123;cls=&quot;plus&quot;;left=144;top=0;right=146;bottom=51;background=&quot;\res\Images\sys_split.png&quot;;clipBk=false;dl=1;dt=1;repeat=&quot;center&quot;;z=3&#125;;</span><br><span class="line">searchButton=&#123;cls=&quot;plus&quot;;left=950;top=12;right=979;bottom=41;background=&quot;\res\Images\sys_search.png&quot;;clipBk=false;dr=1;dt=1;notify=1;repeat=&quot;repeat-x&quot;;transparent=1;z=11&#125;;</span><br><span class="line">searchText=&#123;cls=&quot;plus&quot;;text=&quot;足球小将翼&quot;;left=776;top=13;right=980;bottom=42;align=&quot;left&quot;;background=&quot;\res\Images\sys_input.png&quot;;bkBottom=4;bkLeft=13;bkRight=32;bkTop=3;clipBk=false;color=12632256;dr=1;dt=1;editable=1;font=LOGFONT(name=&#x27;微软雅黑&#x27;);paddingLeft=17;paddingRight=33;paddingTop=7;transparent=1;z=10&#125;;</span><br><span class="line">setButton=&#123;cls=&quot;plus&quot;;left=1016;top=13;right=1041;bottom=38;background=&quot;\res\Images\sys_setting.png&quot;;dr=1;dt=1;notify=1;repeat=&quot;repeat-x&quot;;z=6&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import gdip.bitmap;</span><br><span class="line">import win.ui.tabs;</span><br><span class="line"></span><br><span class="line">/*顶部左侧导航皮肤&#123;&#123;*/</span><br><span class="line">//至少要添加2个创建好的选项卡(作为设计模板,创建成功后可清除)</span><br><span class="line">var tbs = win.ui.tabs(mainForm.modelPlus1,mainForm.modelPlus2);</span><br><span class="line">//指定选项卡的外观样式</span><br><span class="line">tbs.skin(</span><br><span class="line">     background = &#123; </span><br><span class="line">                //这里上下顺序很重要,切记!</span><br><span class="line">                //focus = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                hover = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136,0,136,48);</span><br><span class="line">                active = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                default = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(0,0,136,48);</span><br><span class="line">                //disabled = gdip.bitmap(&quot;/res/images/btn-hover.png&quot;).clone(0,137*3,137,48); </span><br><span class="line">        &#125;;</span><br><span class="line">        color = &#123; </span><br><span class="line">                default = 0xFFc0c0c0;</span><br><span class="line">        hover = 0xFF06c9a9; </span><br><span class="line">        active = 0xFF06c9a9;</span><br><span class="line">    &#125;</span><br><span class="line">    checked = &#123;</span><br><span class="line">            background = &#123; </span><br><span class="line">                    //这里上下顺序很重要,切记! default设置默认选中样式</span><br><span class="line">                        //focus = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                        hover = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                        active = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                        default = gdip.bitmap(&quot;\res\Images\sys_tab_bkg.png&quot;).clone(136*2,0,136,48);</span><br><span class="line">                        //disabled = gdip.bitmap(&quot;/res/images/btn-hover.png&quot;).clone(0,137*3,137,48); </span><br><span class="line">                &#125;;</span><br><span class="line">                color = &#123; </span><br><span class="line">                        default = 0xFF06c9a9;</span><br><span class="line">                hover = 0xFF06c9a9; </span><br><span class="line">                active = 0xFF06c9a9;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">tbs.add(&#123;</span><br><span class="line">    text=&quot;看动漫&quot;;</span><br><span class="line">    hasCloseButton = true;</span><br><span class="line">    &#125;,&quot;\其他窗口\shipinku.aardio&quot; </span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">//也可以用下面的代码自定义关闭按钮的外观样式</span><br><span class="line">tbs.closeButton.skin(</span><br><span class="line">    background = &#123; </span><br><span class="line">        hover = 0xFFe35c51; </span><br><span class="line">        active = 0xFF8f241b;</span><br><span class="line">        default = 0x99FFCC66; </span><br><span class="line">    &#125;</span><br><span class="line">    color = &#123;</span><br><span class="line">        hover = 0xFFFFFFFF; </span><br><span class="line">        active = 0xFFEEEEEE;</span><br><span class="line">        default = 0xCCFFFFFF; </span><br><span class="line">    &#125; </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">//可以自定义关闭按钮在选项卡上的显示位</span><br><span class="line">tbs.beforeShowCloseButton = function(strip,rcStrip,rcCloseButton)&#123;</span><br><span class="line">    return rcStrip.right - 15, rcStrip.top;</span><br><span class="line">&#125;</span><br><span class="line">//给模版项添加加载的窗体</span><br><span class="line">tbs.loadForm(1,&quot;\其他窗口\player.aardio&quot;);</span><br><span class="line">tbs.loadForm(2,&quot;\其他窗口\shipinku.aardio&quot;);</span><br><span class="line"></span><br><span class="line">//默认选中</span><br><span class="line">tbs.selIndex = 1;</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line">/*顶部右侧皮肤&#123;&#123;*/</span><br><span class="line">var setButtonSkin = &#123;</span><br><span class="line">                        background = &#123; </span><br><span class="line">                                hover = gdip.bitmap(&quot;\res\Images\sys_setting.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                active = gdip.bitmap(&quot;\res\Images\sys_setting.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                default = gdip.bitmap(&quot;\res\Images\sys_setting.png&quot;).clone(0,0,25,25);</span><br><span class="line">                        &#125;;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line">var minButtonSkin = &#123;</span><br><span class="line">                        background = &#123; </span><br><span class="line">                                hover = gdip.bitmap(&quot;\res\Images\sys_min.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                active = gdip.bitmap(&quot;\res\Images\sys_min.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                default = gdip.bitmap(&quot;\res\Images\sys_min.png&quot;).clone(0,0,25,25);</span><br><span class="line">                        &#125;;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line">var maxButtonSkin = &#123;</span><br><span class="line">                        background = &#123; </span><br><span class="line">                                hover = gdip.bitmap(&quot;\res\Images\sys_max.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                active = gdip.bitmap(&quot;\res\Images\sys_max.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                default = gdip.bitmap(&quot;\res\Images\sys_max.png&quot;).clone(0,0,25,25);</span><br><span class="line">                        &#125;;</span><br><span class="line">                        checked = &#123;</span><br><span class="line">                                background = &#123; </span><br><span class="line">                                        hover = gdip.bitmap(&quot;\res\Images\sys_recovery.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                        active = gdip.bitmap(&quot;\res\Images\sys_recovery.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                        default = gdip.bitmap(&quot;\res\Images\sys_recovery.png&quot;).clone(0,0,25,25);</span><br><span class="line">                                &#125;;        </span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line">var closeButtonSkin = &#123;</span><br><span class="line">                        background = &#123; </span><br><span class="line">                                hover = gdip.bitmap(&quot;\res\Images\sys_close.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                active = gdip.bitmap(&quot;\res\Images\sys_close.png&quot;).clone(25,0,25,25);</span><br><span class="line">                                default = gdip.bitmap(&quot;\res\Images\sys_close.png&quot;).clone(0,0,25,25);</span><br><span class="line">                        &#125;;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line">mainForm.setButton.skin( setButtonSkin );</span><br><span class="line">mainForm.minButton.skin( minButtonSkin );</span><br><span class="line">mainForm.maxButton.skin( maxButtonSkin );</span><br><span class="line">mainForm.closeButton.skin( closeButtonSkin );</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line">/*顶部右侧基本功能&#123;&#123;*/</span><br><span class="line">mainForm.minButton.oncommand = function(id,event)&#123;</span><br><span class="line">        mainForm.show(0x6/*_SW_MINIMIZE*/);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.maxButton.oncommand = function(id,event)&#123;</span><br><span class="line">    mainForm.maxButton.checked = mainForm.hitmax()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.closeButton.oncommand = function(id,event)&#123;</span><br><span class="line">        mainForm.close();</span><br><span class="line">&#125;</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line">/*搜索框皮肤&#123;&#123;*/</span><br><span class="line">var searchSkin = &#123;</span><br><span class="line">                background = &#123; </span><br><span class="line">                        hover = gdip.bitmap(&quot;\res\Images\sys_search.png&quot;).clone(34,0,34,29);</span><br><span class="line">                        active = gdip.bitmap(&quot;\res\Images\sys_search.png&quot;).clone(34,0,34,29);</span><br><span class="line">                        default = gdip.bitmap(&quot;\res\Images\sys_search.png&quot;).clone(0,0,34,29);</span><br><span class="line">                &#125;;</span><br><span class="line">&#125;</span><br><span class="line">mainForm.searchButton.skin( searchSkin )</span><br><span class="line">//使其能够响应通知</span><br><span class="line">mainForm.searchButton.setParent( mainForm.searchText )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">mainForm.setButton.oncommand = function(id,event)&#123;</span><br><span class="line">        var frmChild,wb = mainForm.loadForm(&quot;\其他窗口\setList.aardio&quot;);</span><br><span class="line">        var x,y,cx,cy = win.getPos(mainForm.setButton.hwnd,true);</span><br><span class="line">        frmChild.setPos(x+cx/2-frmChild.width/2,y+cy);</span><br><span class="line">        frmChild.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">        select( message ) &#123; </span><br><span class="line">                case 0x201/*_WM_LBUTTONDOWN*/&#123;</span><br><span class="line">                        mainForm.hitCaption();</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                        </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.searchButton.oncommand = function(id,event)&#123;</span><br><span class="line">        mainForm.msgbox(mainForm.searchText.text);</span><br><span class="line">&#125;</span><br><span class="line">//供其他界面调用</span><br><span class="line">mainForm.recFun = function()&#123;</span><br><span class="line">        mainForm.maxButton.oncommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import win.ui.resizeBorder;</span><br><span class="line">win.ui.resizeBorder(mainForm,3);</span><br><span class="line">import win.ui.minmax;</span><br><span class="line">win.ui.minmax(mainForm,1000,500);</span><br><span class="line">import win.ui.shadow;</span><br><span class="line">win.ui.shadow(mainForm,,5);</span><br><span class="line"></span><br><span class="line">//mainForm.enableDpiScaling();</span><br><span class="line">mainForm.show();</span><br><span class="line"></span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 源码分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-winform如何删除控件</title>
      <link href="/posts/2024/09/32d95a57.html"/>
      <url>/posts/2024/09/32d95a57.html</url>
      
        <content type="html"><![CDATA[<p>使用 winform.edit.close() 删除控件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=234;parent=...;right=566;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add( </span><br><span class="line">button=&#123; bottom=168;text=&quot;button&quot;;left=206;top=127;z=2;right=342;cls=&quot;button&quot; &#125;;</span><br><span class="line">edit=&#123; text=&quot;edit&quot;;bottom=97;right=389;left=158;multiline=1;top=45;z=1;edge=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        winform.edit.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-通过chrome.dll中间件控制外部chrome浏览器</title>
      <link href="/posts/2024/09/1a3ec057.html"/>
      <url>/posts/2024/09/1a3ec057.html</url>
      
        <content type="html"><![CDATA[<p>目前aardio有ie/webkit/blink/htmlayout等几种内核，主要是做界面用的，很小巧，标准库封装得很全面。还有一个群友分享的CEF3的浏览内核，可以兼容大部分网站，适合于做DOM网页操作等。现在分享的这个chrome.dll调用示例，是群友参考别人的东西所写的，本例程可以让aardio写的程序通过chrome.dll中间件控制外部的chrome浏览器，它的优点在于它控制的是一个完整功能的官方正式版浏览器，所以网页兼容性问题不再有了，至于你想用它来做什么，随便你折腾。</p><p>这个是演示工程，chrome.dll已经放在res资源文件夹内，如果你已经安装有chrome浏览器，可以直接运行。如果没有，你需要的是先安装chrome浏览器。  </p><p>谷歌浏览器 Google Chrome 59.0.3071.86 正式版下载地址   <a href="http://dl.pconline.com.cn/download/51614-1.html">http://dl.pconline.com.cn/download/51614-1.html</a> </p><p>AARDIO调用chrome.dll操作外部chrome浏览器示例源码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">mainForm.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import com;</span><br><span class="line">import console;</span><br><span class="line">import com.lite</span><br><span class="line">import fsys.lnk;</span><br><span class="line">import com.activeX</span><br><span class="line"></span><br><span class="line">//分享自简码编程 http://www.jianma123.com </span><br><span class="line">//chrome.dll介绍http://bbs.anjian.com/showtopic-588808-1.aspx</span><br><span class="line">//CSS选择器介绍http://www.w3school.com.cn/cssref/css_selectors.asp </span><br><span class="line"> </span><br><span class="line">console.open();</span><br><span class="line"></span><br><span class="line">path  = fsys.lnk.search( &quot;chrome.exe&quot;)  </span><br><span class="line">com.activeX.regsvr32As(&quot;\res\chrome.dll&quot;) //注册 chrome.dll</span><br><span class="line">chrome = com.CreateObject(&quot;lt.chrome.1&quot;) // 不知道Progid 可以下载 RegDllView 搜索chrome查看</span><br><span class="line"></span><br><span class="line">com.DumpTypeInfo(chrome) //输出所有成员</span><br><span class="line"></span><br><span class="line">//chrome.get_ids()  返回的标签顺序经常错乱。所以需要处理下。存放多个标签 chrome.get_ids, 数组内存在的就删除，留下的就是最后一个打开的了,然后增加到数组内,如果同时打开俩个或者以上需自行处理</span><br><span class="line">idtab = &#123;&#125;</span><br><span class="line">get_ids = function()&#123;</span><br><span class="line">    s = chrome.get_ids()</span><br><span class="line">    for(i=1;#idtab;1)&#123;</span><br><span class="line">        s = string.replace(s,idtab[i],&quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    s = string.replace(s,&quot;||&quot;,&quot;&quot;)</span><br><span class="line">    table.push(idtab,s)</span><br><span class="line">    return idtab; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(path)&#123;</span><br><span class="line"></span><br><span class="line">    chrome.launch(path, &quot;--user-data-dir=c:\user_data&quot;) </span><br><span class="line">    var ids = get_ids() </span><br><span class="line">    if(ids[1] != &quot;&quot;)&#123;</span><br><span class="line">        console.log(ids[1])</span><br><span class="line">        chrome.load(ids[1] , &quot;http://www.aardio.com&quot;) //打开 网页</span><br><span class="line">        console.dump(&quot;打开aardio.com&quot;)</span><br><span class="line">         do&#123;</span><br><span class="line">             win.delay(100)</span><br><span class="line">             loading = chrome.is_loading(ids[1] )//等待网页加载完成</span><br><span class="line">         &#125;while(loading)</span><br><span class="line">    </span><br><span class="line">        chrome.exec_js(ids[1] , &quot;document.querySelector(&#x27;.bbs-link a&#x27;).click();&quot;) //点击 &gt;&gt; 下载最新版本( 5.6MB )</span><br><span class="line">        console.dump(&quot;点击 &gt;&gt; 下载最新版本( 5.6MB )&quot;)</span><br><span class="line">        </span><br><span class="line">         do&#123;</span><br><span class="line">             win.delay(100)</span><br><span class="line">             loading = chrome.is_loading(ids[1] )//等待网页加载完成</span><br><span class="line">         &#125;while(loading)</span><br><span class="line">    </span><br><span class="line">         chrome.exec_js(ids[1] , &quot;document.querySelector(&#x27;#scbar_txt&#x27;).value=&#x27;网页&#x27;;&quot;) //搜索关键字</span><br><span class="line">         chrome.exec_js(ids[1] , &quot;document.querySelector(&#x27;#scbar_btn&#x27;).click();&quot;) // 点击搜索按钮</span><br><span class="line">         console.dump(&quot;搜索点击&quot;)</span><br><span class="line">         </span><br><span class="line">         win.delay(100)</span><br><span class="line">         var ids = get_ids() </span><br><span class="line">    </span><br><span class="line">         do&#123;</span><br><span class="line">             win.delay(100)</span><br><span class="line">             loading = chrome.is_loading(ids[2] )//等待网页加载完成</span><br><span class="line">         &#125;while(loading)</span><br><span class="line">         </span><br><span class="line">         console.dump(ids)</span><br><span class="line">         chrome.activate(ids[1])//激活标签1</span><br><span class="line">         console.dump(&quot;激活标签1&quot;)</span><br><span class="line">         win.delay(2000) </span><br><span class="line">         chrome.activate(ids[2])//激活标签2</span><br><span class="line">         console.dump(&quot;激活标签2&quot;)</span><br><span class="line">         </span><br><span class="line">         win.delay(1000)</span><br><span class="line">         console.dump(&quot;打开 主题 连接2&quot;)</span><br><span class="line">         chrome.exec_js(ids[2] , &quot;document.querySelector(&#x27;#threadlist ul li:nth-child(2) a&#x27;).click();&quot;) </span><br><span class="line"></span><br><span class="line">         win.delay(2000)</span><br><span class="line">         console.dump(&quot;关闭标签2&quot;)</span><br><span class="line">         chrome.close(ids[2])//关闭标签2</span><br><span class="line">      </span><br><span class="line">        win.delay(5000)</span><br><span class="line">        chrome.quit()</span><br><span class="line">         </span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        console.log(&quot;获取失败&quot;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else &#123;</span><br><span class="line">    win.msgbox(&quot;找不到 chrome.exe&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.show();</span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure><p><strong>下载地址：</strong> </p><p><a href="http://www.jianma123.com/download/chromedll-control-chromebrowser.zip">http://www.jianma123.com/download/chromedll-control-chromebrowser.zip</a>  </p><p><strong>鸣谢：</strong></p><p>感谢chrome.dll插件作者兰天的分享。</p><p>感谢群友周、王港两位学长的分享。  </p><p><strong>插件说明：</strong></p><p>chrome插件，支持chrome 45以上版本，暂不支持xp系统  </p><p><strong>方法说明：</strong></p><p>bool launch(string path，string args)</p><p>启动浏览器</p><p>path: chrome浏览器的路径</p><p>args: chrome浏览器的启动参数，多个参数可以用”||”分隔</p><p>返回值: 启动成功则返回 true， 否则返回 false</p><p>quit()</p><p>退出浏览器 </p><p>string get_ids()</p><p>获得所有已创建标签的id</p><p>返回值: 返回所有id，id用”||”分隔  </p><p>string create()</p><p>创建一个新的标签</p><p>返回值: 创建成功返回窗口id，否则返回空字符串  </p><p>close(string id)</p><p>关闭一个标签</p><p>id: 标签id  </p><p>activate(string id)</p><p>激活一个标签</p><p>id: 标签id  </p><p>string get_url(string id)</p><p>获得窗口网页的地址</p><p>id: 标签id</p><p>返回值: 返回网页的地址  </p><p>load(string id, string url)</p><p>载入指定的地址</p><p>id: 标签id</p><p>url: 要载入的地址  </p><p>reload(string id)</p><p>重新载入网页</p><p>id: 窗口id  </p><p>back(string id)</p><p>后退</p><p>id: 标签id  </p><p>forward(string id)  </p><p>前进</p><p>id: 标签id  </p><p>stop(string id)</p><p>停止加载网页</p><p>id: 标签id  </p><p>bool is_loading(string id)</p><p>网页是否加载中</p><p>id: 标签id</p><p>返回值: 如果网页正在加载中则返回 true，否则返回 false  </p><p>string exec_js(string id, string js_code)</p><p>在网页执行一段javascript代码</p><p>id: 标签id</p><p>js_code: javascript代码</p><p>返回值: 如果代码成功执行则返回执行结果  </p><p>set_user_agent(string id, string ua)</p><p>修改指定标签的user agent字符串</p><p>id: 标签id</p><p>ua: user agent 字符串  </p><p>bool is_dialog_open(string id)</p><p>指定标签是否有对话框打开(alert, confirm, prompt)</p><p>id: 标签id</p><p>返回值: 如果有对话框打开则返回true  </p><p>string get_dialog_message(string id)</p><p>获取对话框的消息文本</p><p>id: 标签id</p><p>返回值: 如果有对话框打开则返回消息文本  </p><p>handle_dialog(string id, bool accept, string prompt_text)</p><p>处理对话框</p><p>id: 标签id</p><p>accept: 参数为true则确定，否则取消</p><p>prompt_text:向prompt弹出的对话框写入内容  </p><p>clear_browser_cache(string id)</p><p>清除缓存</p><p>id: 标签id  </p><p>clear_browser_cookies(string id)</p><p>清除cookies</p><p>id: 标签id  </p><p>set_file_input_files(string id, string selector, string paths)</p><p>设置 file input 的 value 值</p><p>id: 标签id selector: 获取 file input 的css选择器</p><p>paths: 文件路径，多个文件用”||”分隔  </p><p>string dama2(string id, string selector, string name, string password, string type)</p><p>上传图片验证码到打码兔 <a href="http://www.dama2.com/">http://www.dama2.com/</a></p><p>id: 标签id</p><p>selector: 获取图片验证码的css选择器</p><p>name: 打码兔用户名</p><p>password: 打码兔密码</p><p>type: 验证码类型 <a href="http://wiki.dama2.com/index.php?n=ApiDoc.Pricedesc">http://wiki.dama2.com/index.php?n=ApiDoc.Pricedesc</a></p><p>返回值: 如果失败返回以“-”为前缀的字符串，成功则返回验证码答案</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> web自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-Web自动化aardio语言简单演示01</title>
      <link href="/posts/2024/09/88909d8f.html"/>
      <url>/posts/2024/09/88909d8f.html</url>
      
        <content type="html"><![CDATA[<p>实现的功能： </p><ul><li>1：打开网址：百度</li><li>2: 查找网页元素节点</li><li>3:找到节点后输入搜索文本</li><li>4:模拟鼠标点击按钮事件</li><li>5:在搜索结果中查找，文本，并进行判断弹窗</li><li>6:局部变量演示</li><li>7:输出结果演示窗口和自定义TXT文本内容</li></ul><p>源码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui; //导入Windows窗口库</span><br><span class="line">import web.form; //导入Web窗体库</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;Lua扩展胶水语言-AArdio-百度Web自动化示例&quot;;right=758;bottom=474)</span><br><span class="line">mainForm.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;吾爱执行&quot;;left=32;top=413;right=157;bottom=464;z=2&#125;;</span><br><span class="line">custom=&#123;cls=&quot;custom&quot;;text=&quot;custom&quot;;left=2;top=2;right=759;bottom=402;autosize=1;center=1;edge=1;transparent=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">wb = web.form(mainForm.custom) //在自定义控件custom上创建Web窗体</span><br><span class="line">wb.noScriptErr=true; //禁止javascript错误，防止一些JS标准和不同厂家浏览器版本之间引起的不兼容错误</span><br><span class="line"> </span><br><span class="line">mainForm.button.oncommand = function(id,event)&#123; //标准button按钮,&#123;&#125;内的是触发事件和方法</span><br><span class="line">    wb.go(&quot;www.baidu.com&quot;) //打开网址百度</span><br><span class="line">    wb.wait(,12000);//根据用户网络环境不同，等待12秒网页加载时间</span><br><span class="line">    ele = wb.getEle(&quot;kw&quot;); //获取百度输入框的源代码ID节点&quot;kw&quot;主流新版本的浏览器自带的F12,审查元素就可以看到</span><br><span class="line">    ele.value = &quot;吾爱论坛&quot; //模拟用户输入文本</span><br><span class="line">    ele = wb.getEle(&quot;su&quot;); ////获取《百度一下》的源代码ID节点&quot;su&quot;</span><br><span class="line">    ele.click() //触发按钮事件,相当于模拟鼠标点击了《百度一下》</span><br><span class="line">    win.delay(3000);//延迟3秒，等待搜索结果出来。</span><br><span class="line">    var wuaipojie = &quot;testcrack&quot;; //局部变量简单演示，由于变量名不能用数字开头，所以我起名为局部变量为wuaipojie并赋值字符串testcrack</span><br><span class="line">    if(string.indexOf(wb.body.innerText,&quot;吾爱破解-LCG-LSG|安卓破解|病毒分析|破解软件|[url]www.52pojie.cn[/url]&quot;)) //用if语句，判断搜索结果是否有“”内的内容</span><br><span class="line">    string.save(&quot;\演示成功.txt&quot;,string.concat(wuaipojie,&quot;吾爱破解&quot;,)) //如果有就在当前目录下创建一个txt文件，起名演示成功,并在txt里输出上面局部变量的赋值内容和我手动添加的字符串“吾爱破解”</span><br><span class="line">    mainForm.msgbox(&quot;演示成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mainForm.show()           //窗体显示，参数空。</span><br><span class="line">return win.loopMessage(); //几乎每个GUI窗体都需要的消息循环</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> webform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-SmartQQ之aardio源码</title>
      <link href="/posts/2024/09/6b2b0d16.html"/>
      <url>/posts/2024/09/6b2b0d16.html</url>
      
        <content type="html"><![CDATA[<p>网友分享的用aardio开发的SmartQQ源码</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-219.png" alt=""> <p>源码如下（直接可运行）：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui; import process; import console;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;SmartQQ--by Danboy&quot;;right=543;bottom=490;max=false)</span><br><span class="line">mainForm.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;扫码登录&quot;;left=48;top=435;right=174;bottom=462;ah=1;aw=1;z=10&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=242;top=26;right=523;bottom=113;ah=1;aw=1;bgcolor=16053492;edge=1;multiline=1;style=1539;z=1&#125;;</span><br><span class="line">groupbox=&#123;cls=&quot;groupbox&quot;;left=7;top=0;right=218;bottom=467;ah=1;aw=1;bgcolor=15793151;edge=1;z=2&#125;;</span><br><span class="line">groupbox2=&#123;cls=&quot;groupbox&quot;;text=&quot;消息群发:&quot;;left=226;top=10;right=537;bottom=167;ah=1;aw=1;edge=1;z=7&#125;;</span><br><span class="line">groupbox3=&#123;cls=&quot;groupbox&quot;;text=&quot;消息接收&quot;;left=224;top=187;right=537;bottom=467;ah=1;aw=1;edge=1;z=9&#125;;</span><br><span class="line">phtoplus=&#123;cls=&quot;plus&quot;;left=12;top=6;right=50;bottom=44;ah=1;aw=1;z=3&#125;;</span><br><span class="line">qrplus=&#123;cls=&quot;plus&quot;;left=20;top=260;right=210;bottom=429;ah=1;aw=1;foreRepeat=&quot;center&quot;;z=5&#125;;</span><br><span class="line">richedit=&#123;cls=&quot;richedit&quot;;left=227;top=201;right=534;bottom=463;ah=1;aw=1;bgcolor=16053492;multiline=1;vscroll=1;wrap=1;z=11&#125;;</span><br><span class="line">send=&#123;cls=&quot;button&quot;;text=&quot;发送&quot;;left=345;top=124;right=422;bottom=162;ah=1;aw=1;z=8&#125;;</span><br><span class="line">static=&#123;cls=&quot;static&quot;;left=65;top=28;right=207;bottom=42;ah=1;aw=1;transparent=1;z=6&#125;;</span><br><span class="line">treeview=&#123;cls=&quot;treeview&quot;;left=7;top=49;right=216;bottom=463;ah=1;asel=false;aw=1;bgcolor=15856113;edge=1;hide=1;style=256;vscroll=1;z=4&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">mainForm.button.oncommand = function(id,event)&#123;</span><br><span class="line">        thread.set(&quot;runStart&quot;,true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">        if wParam == 0xF060/*_SC_CLOSE*/ process().terminate();</span><br><span class="line">&#125;</span><br><span class="line">mainForm.enableDpiScaling();</span><br><span class="line">mainForm.show();</span><br><span class="line"></span><br><span class="line">mainForm.qrplus.foreground = &quot;\res\alloylogo.png&quot;;</span><br><span class="line">import win.ui.statusbar;</span><br><span class="line">win.ui.statusbar(mainForm).addItem(&#x27;源码请访问:http://bbs.aardio.com/&#x27;, 520/*宽度*/);</span><br><span class="line"></span><br><span class="line">while ! thread.get(&quot;runStart&quot;) &#123; win.delay(1000); &#125;</span><br><span class="line"></span><br><span class="line">import fsys;</span><br><span class="line">fsys.delete( &#123;&quot;C:\二维码.png&quot;;&quot;C:\phto.png&quot;;&quot;C:\phtos.png&quot;&#125;);</span><br><span class="line">var http = com.CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);  </span><br><span class="line">http.setOption(4,13056); //忽略错误标志</span><br><span class="line">http.SetTimeouts(10000,100000,10000,10000 ); //设置超时</span><br><span class="line">var t = tostring(math.random()) ++ tostring(math.random(10, 99));</span><br><span class="line">http.Open(&quot;GET&quot;,&quot;https://ssl.ptlogin2.qq.com/ptqrshow?appid=501004106&amp;e=0&amp;l=M&amp;s=5&amp;d=72&amp;v=4&amp;t=0&quot; ++ t , false);</span><br><span class="line">http.Send();</span><br><span class="line">var stream = com.CreateObject(&quot;Adodb.Stream&quot;);</span><br><span class="line">stream.Type = 1;</span><br><span class="line">stream.Mode = 3;</span><br><span class="line">stream.Open();</span><br><span class="line">stream.Write( &#123; _safearray = http.ResponseBody &#125; ); //aardio13.52后版本可以直接写成:stream.Write(http.ResponseBody)</span><br><span class="line">stream.SaveToFile(&quot;C:\二维码.png&quot;,2);</span><br><span class="line">stream.Close();</span><br><span class="line">mainForm.qrplus.foreground = &quot;C:\二维码.png&quot;;</span><br><span class="line"></span><br><span class="line">var qrsig = string.match(http.GetResponseHeader(&quot;Set-Cookie&quot;),&quot;qrsig=(.+?);&quot;);</span><br><span class="line">import web.script;</span><br><span class="line">var js = web.script(&quot;JavaScript&quot;);</span><br><span class="line">var hash33 = /*  </span><br><span class="line">function hash33(o) &#123;  </span><br><span class="line">    for (var t = 0,</span><br><span class="line">    e = 0,</span><br><span class="line">    n = o.length; e &lt; n; ++e) t += (t &lt;&lt; 5) + o.charCodeAt(e);</span><br><span class="line">    return 2147483647 &amp; t</span><br><span class="line">&#125;</span><br><span class="line">hash33(&quot;</span><br><span class="line">*/</span><br><span class="line">var ptqrtoken = js.Eval(hash33 ++ qrsig ++ &#x27;&quot;)&#x27;);</span><br><span class="line">var nickname;</span><br><span class="line">while true &#123;</span><br><span class="line">        http.Open(&quot;GET&quot;,&#x27;https://ssl.ptlogin2.qq.com/ptqrlogin?u1=http%3A%2F%2Fw.qq.com%2Fproxy.html&amp;ptqrtoken=&#x27; ++ ptqrtoken ++ &#x27;&amp;ptredirect=0&amp;h=1&amp;t=1&amp;g=1&amp;from_ui=1&amp;ptlang=2052&amp;action=0-0-1504153382266&amp;js_ver=10228&amp;js_type=1&amp;login_sig=&amp;pt_uistyle=40&amp;aid=501004106&amp;daid=164&amp;mibao_css=m_webqq&amp;&#x27;,false);</span><br><span class="line">        http.Send(); //响应信息，判断是二维码状态(是否失效、认证)和首次登录</span><br><span class="line">        win.delay(1000);</span><br><span class="line">        if string.indexOf(http.ResponseText,&quot;登录成功&quot;) &#123;</span><br><span class="line">                var checkUrl = string.match(http.ResponseText,&quot;(http.+?)&#x27;,&quot;);</span><br><span class="line">                nickname = string.left(string.split(http.ResponseText,&quot;&lt;&#x27;登录成功！&#x27;, &#x27;&gt;&quot;)[2],string.len(string.split(http.ResponseText,&quot;&lt;&#x27;登录成功！&#x27;, &#x27;&gt;&quot;)[2]) - 5,true); //登录的QQ昵称</span><br><span class="line">                http.setOption(6,0); //禁止自动重定向</span><br><span class="line">                http.Open(&quot;GET&quot;,checkUrl,false);</span><br><span class="line">                http.Send(); //检测登录</span><br><span class="line">                break ;</span><br><span class="line">        &#125; elseif string.indexOf(http.ResponseText,&quot;二维码已失效&quot;) &#123;</span><br><span class="line">                mainForm.msgbox(&quot;二维码已失效，请重试&quot;); process().terminate();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">var uin,skey,p_uin,p_skey,pt4_token = string.match(http.GetAllResponseHeaders(),&quot;uin=(.+?);.+?skey=(.+?);.+?p_uin=(.+?);.+?p_skey=(.+?);.+?pt4_token=(.+?);&quot;);</span><br><span class="line">var cookie = &quot;uin=&quot; ++ uin ++ &quot;; skey=&quot; ++ skey ++ &quot;; p_uin=&quot; ++ p_uin ++ &quot;; p_skey=&quot; ++ p_skey ++ &quot;; pt4_token=&quot; ++ pt4_token ++ &quot;; ptwebqq=&quot; ++ qrsig;  //须加qrsig</span><br><span class="line">thread.set(&quot;cookie&quot;,cookie);</span><br><span class="line"></span><br><span class="line">http.Open(&quot;GET&quot;,&#x27;http://s.web2.qq.com/api/getvfwebqq?ptwebqq=&amp;clientid=53999199&amp;psessionid=&amp;t=1504250606785&#x27;,false);</span><br><span class="line">http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://s.web2.qq.com/proxy.html?v=20130916001&amp;callback=1&amp;id=1&#x27;);</span><br><span class="line">http.SetRequestHeader(&quot;Cookie&quot;,&quot;uin=&quot; ++ uin ++ &quot;; skey=&quot; ++ skey ++ &quot;; p_uin=&quot; ++ p_uin ++ &quot;; p_skey=&quot; ++ p_skey ++ &quot;; pt4_token=&quot; ++ pt4_token ++ &quot;;&quot;);</span><br><span class="line">http.Send();</span><br><span class="line">import web.json;</span><br><span class="line">var vfwebqq = web.json.parse(http.ResponseText)[&quot;result&quot;][&quot;vfwebqq&quot;]; //取得vfwebqq</span><br><span class="line"></span><br><span class="line">//二次登录</span><br><span class="line">http.Open(&quot;POST&quot;,&#x27;http://d1.web2.qq.com/channel/login2&#x27;,false);</span><br><span class="line">http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://d1.web2.qq.com/proxy.html?v=20151105001&amp;callback=1&amp;id=2&#x27;);</span><br><span class="line">http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">http.Send(&#x27;r=&#123;&quot;ptwebqq&quot;:&quot;&quot;,&quot;clientid&quot;:53999199,&quot;psessionid&quot;:&quot;&quot;,&quot;status&quot;:&quot;online&quot;&#125;&#x27;);</span><br><span class="line">var psessionid,QQ = web.json.parse(http.ResponseText)[&quot;result&quot;][&quot;psessionid&quot;],web.json.parse(http.ResponseText)[&quot;result&quot;][&quot;uin&quot;];</span><br><span class="line">thread.set(&quot;psessionid&quot;,psessionid); thread.set(&quot;QQ&quot;,QQ);</span><br><span class="line"></span><br><span class="line">var gethash = /*</span><br><span class="line">var hash2 = function(uin,ptvfwebqq)&#123;</span><br><span class="line">            uin += &quot;&quot;;</span><br><span class="line">            var ptb = [];</span><br><span class="line">            for (var i=0;i&lt;ptvfwebqq.length;i++)&#123;</span><br><span class="line">                var ptbIndex = i%4;</span><br><span class="line">                ptb[ptbIndex] ^= ptvfwebqq.charCodeAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            var salt = [&quot;EC&quot;, &quot;OK&quot;];</span><br><span class="line">            var uinByte = [];</span><br><span class="line">            uinByte[0] = (((uin &gt;&gt; 24) &amp; 0xFF) ^ salt[0].charCodeAt(0));</span><br><span class="line">            uinByte[1] = (((uin &gt;&gt; 16) &amp; 0xFF) ^ salt[0].charCodeAt(1));</span><br><span class="line">            uinByte[2] = (((uin &gt;&gt; 8) &amp; 0xFF) ^ salt[1].charCodeAt(0));</span><br><span class="line">            uinByte[3] = ((uin &amp; 0xFF) ^ salt[1].charCodeAt(1));</span><br><span class="line">            var result = [];</span><br><span class="line">            for (var i=0;i&lt;8;i++)&#123;</span><br><span class="line">                if (i%2 == 0)</span><br><span class="line">                    result = ptb[i&gt;&gt;1];</span><br><span class="line">                else</span><br><span class="line">                    result = uinByte[i&gt;&gt;1];</span><br><span class="line">            &#125;</span><br><span class="line">            return byte2hex(result);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        var byte2hex = function(bytes)&#123;//bytes array</span><br><span class="line">            var hex = [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;];</span><br><span class="line">            var buf = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">            for (var i=0;i&lt;bytes.length;i++)&#123;</span><br><span class="line">                buf += (hex[(bytes&gt;&gt;4) &amp; 0xF]);</span><br><span class="line">                buf += (hex[bytes &amp; 0xF]);</span><br><span class="line">            &#125;</span><br><span class="line">            return buf;</span><br><span class="line">        &#125;</span><br><span class="line">hash2(&quot;</span><br><span class="line">*/</span><br><span class="line">var hash = js.Eval(gethash ++ QQ ++ &#x27;&quot;,&quot;&#x27; + qrsig + &#x27;&quot;)&#x27;); //获取hash</span><br><span class="line"></span><br><span class="line">http.Open(&quot;GET&quot;, &#x27;http://d1.web2.qq.com/channel/get_online_buddies2?vfwebqq=&#x27; + vfwebqq + &#x27;&amp;clientid=53999199&amp;psessionid=&#x27; + psessionid + &#x27;&amp;t=1505017526904&#x27;,false)</span><br><span class="line">http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://d1.web2.qq.com/proxy.html?v=20151105001&amp;callback=1&amp;id=2&#x27;);</span><br><span class="line">http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">http.Send();  //获取登录状态</span><br><span class="line">if string.indexOf(http.ResponseText,&quot;online&quot;) &#123;</span><br><span class="line">        mainForm.static.text = nickname; mainForm.button.hide = 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">        mainForm.msgbox(&quot;登录失败,请重新尝试&quot;); process().terminate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.Open(&quot;POST&quot;,&#x27;http://s.web2.qq.com/api/get_user_friends2&#x27;,false);  //取好友列表</span><br><span class="line">http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://s.web2.qq.com/proxy.html?v=20130916001&amp;callback=1&amp;id=1&#x27;);</span><br><span class="line">http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">http.Send(&#x27;r=&#123;&quot;vfwebqq&quot;:&quot;&#x27; + vfwebqq + &#x27;&quot;,&quot;hash&quot;:&quot;&#x27; + hash + &#x27;&quot;&#125;&#x27;);</span><br><span class="line">var friendtab = web.json.parse(http.ResponseText);</span><br><span class="line">for i=1;#friendtab[&quot;result&quot;][&quot;categories&quot;] - 1 &#123; //分组名排序</span><br><span class="line">        for j=i+1;#friendtab[&quot;result&quot;][&quot;categories&quot;] &#123;</span><br><span class="line">                if tonumber(friendtab[&quot;result&quot;][&quot;categories&quot;][&quot;sort&quot;]) &gt; tonumber(friendtab[&quot;result&quot;][&quot;categories&quot;][j][&quot;sort&quot;]) &#123;</span><br><span class="line">                        table.insert(friendtab[&quot;result&quot;][&quot;categories&quot;],friendtab[&quot;result&quot;][&quot;categories&quot;][j],i);</span><br><span class="line">                        table.remove(friendtab[&quot;result&quot;][&quot;categories&quot;],j+1);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">var hitem = mainForm.treeview.insertItem(text = &quot;QQ好友&quot;);</span><br><span class="line">var qqfs0 = mainForm.treeview.insertItem(&#123;text = &quot;我的好友&quot;&#125;,hitem);</span><br><span class="line">var qqfstab,uintab,gidtab = &#123;&#125;,&#123;&#125;,&#123;&#125;; table.push(qqfstab,qqfs0);</span><br><span class="line">for i=1;#friendtab[&quot;result&quot;][&quot;categories&quot;] &#123; //挑出各分组成员名</span><br><span class="line">        var qqfs1 = mainForm.treeview.insertItem(&#123;text = friendtab[&quot;result&quot;][&quot;categories&quot;][&quot;name&quot;]&#125;,hitem); //分组名加到QQ好友根组下</span><br><span class="line">        table.push(qqfstab,qqfs1);</span><br><span class="line">        for j=1;#friendtab[&quot;result&quot;][&quot;friends&quot;] &#123;</span><br><span class="line">                if ! friendtab[&quot;result&quot;][&quot;friends&quot;][j] continue ;</span><br><span class="line">                if friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;categories&quot;] == friendtab[&quot;result&quot;][&quot;categories&quot;][&quot;index&quot;] &#123; //分组</span><br><span class="line">                        for k=1;#friendtab[&quot;result&quot;][&quot;marknames&quot;] &#123;</span><br><span class="line">                                if friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;uin&quot;] == friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;] &#123;</span><br><span class="line">                                        table.push(uintab,friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;markname&quot;],friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;]);</span><br><span class="line">                                        mainForm.treeview.insertItem(&#123;friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;markname&quot;]&#125;,qqfs1);</span><br><span class="line">                                        friendtab[&quot;result&quot;][&quot;friends&quot;][j] = null; break ;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        for k=1;#friendtab[&quot;result&quot;][&quot;info&quot;] &#123;</span><br><span class="line">                                if ! friendtab[&quot;result&quot;][&quot;friends&quot;][j] continue ;</span><br><span class="line">                                if friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;uin&quot;] == friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;] &#123;</span><br><span class="line">                                        table.push(uintab,friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;nick&quot;],friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;])</span><br><span class="line">                                        mainForm.treeview.insertItem(&#123;friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;nick&quot;]&#125;,qqfs1);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125; elseif i == 1 ? friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;categories&quot;] == &quot;0&quot; &#123; //我的好友</span><br><span class="line">                        for k=1;#friendtab[&quot;result&quot;][&quot;marknames&quot;] &#123;</span><br><span class="line">                                if friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;uin&quot;] == friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;] &#123;</span><br><span class="line">                                        table.push(uintab,friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;markname&quot;],friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;]);</span><br><span class="line">                                        mainForm.treeview.insertItem(&#123;friendtab[&quot;result&quot;][&quot;marknames&quot;][k][&quot;markname&quot;]&#125;,qqfs0);</span><br><span class="line">                                        friendtab[&quot;result&quot;][&quot;friends&quot;][j] = null; break ;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        for k=1;#friendtab[&quot;result&quot;][&quot;info&quot;] &#123;</span><br><span class="line">                                if ! friendtab[&quot;result&quot;][&quot;friends&quot;][j] continue ;</span><br><span class="line">                                if friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;uin&quot;] == friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;] &#123;</span><br><span class="line">                                        table.push(uintab,friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;nick&quot;],friendtab[&quot;result&quot;][&quot;friends&quot;][j][&quot;uin&quot;]);</span><br><span class="line">                                        mainForm.treeview.insertItem(&#123;friendtab[&quot;result&quot;][&quot;info&quot;][k][&quot;nick&quot;]&#125;,qqfs0);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.Open(&quot;POST&quot;,&#x27;http://s.web2.qq.com/api/get_group_name_list_mask2&#x27;,false);  //取群列表</span><br><span class="line">http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://s.web2.qq.com/proxy.html?v=20130916001&amp;callback=1&amp;id=1&#x27;);</span><br><span class="line">http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">http.Send(&#x27;r=&#123;&quot;vfwebqq&quot;:&quot;&#x27; + vfwebqq + &#x27;&quot;,&quot;hash&quot;:&quot;&#x27; + hash + &#x27;&quot;&#125;&#x27;);</span><br><span class="line">var grouptab = web.json.parse(http.ResponseText);</span><br><span class="line">var hitemq = mainForm.treeview.insertItem(text = &quot;QQ群组&quot;);</span><br><span class="line">for i=1;#grouptab[&quot;result&quot;][&quot;gnamelist&quot;] &#123;</span><br><span class="line">        table.push(gidtab,grouptab[&quot;result&quot;][&quot;gnamelist&quot;][&quot;name&quot;],grouptab[&quot;result&quot;][&quot;gnamelist&quot;][&quot;gid&quot;]);</span><br><span class="line">        mainForm.treeview.insertItem(&#123;grouptab[&quot;result&quot;][&quot;gnamelist&quot;][&quot;name&quot;]&#125;,hitemq);</span><br><span class="line">&#125;</span><br><span class="line">table.push(qqfstab,hitemq);</span><br><span class="line">thread.set(&quot;uintab&quot;,uintab); thread.set(&quot;gidtab&quot;,gidtab);</span><br><span class="line"></span><br><span class="line">import win.ui.ctrl.treeviewex; //调用树形控件扩展库实现节点自选择--carl论坛坛主的</span><br><span class="line">var treeviewEx = win.ui.ctrl.treeviewex(mainForm.treeview)</span><br><span class="line">treeviewEx.onnotify = function(id,code,ptr) &#123; /*响应通知*/        </span><br><span class="line">        return treeviewEx.exOnnotify(id,code,ptr);</span><br><span class="line">&#125;;</span><br><span class="line">treeviewEx.exIsToggle = true;//开启点击节点时折叠的就展开，展开的就折叠，默认已开启</span><br><span class="line">treeviewEx.exIsChecked = true;//开启1.打勾节点则全选所有子节点,不打勾则全不选子节点，2.子节点其中一个打勾,则父节点打勾,默认已开启</span><br><span class="line"></span><br><span class="line">mainForm.threadCallable(); //多线程操作界面线程</span><br><span class="line">thread.invoke(</span><br><span class="line">        function(mainForm)&#123;</span><br><span class="line">                import win.ui; import com; import web.json; import console; import thread.table;</span><br><span class="line">                var cookie = thread.get(&quot;cookie&quot;);</span><br><span class="line">                var uintab,gidtab = thread.get(&quot;uintab&quot;),thread.get(&quot;gidtab&quot;);</span><br><span class="line">                var psessionid,QQ = thread.get(&quot;psessionid&quot;),thread.get(&quot;QQ&quot;);</span><br><span class="line">                var http = com.CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);</span><br><span class="line">                http.setOption(4,13056); //忽略错误标志--不知道有什么用,该报错还是会报错而中断程序,只能加try了</span><br><span class="line">                http.SetTimeouts(10000,100000,10000,10000 ); //设置超时</span><br><span class="line">                mainForm.qrplus.hide = 1; mainForm.treeview.hide = 0;</span><br><span class="line">               </span><br><span class="line">                function GetLogo()&#123;</span><br><span class="line">                        try &#123; http.Open(&quot;GET&quot;, &#x27;https://q.qlogo.cn/g?b=qq&amp;nk=&#x27; + QQ + &#x27;&amp;s=100&amp;t=1505017526894&#x27;,false); //取QQ头像</span><br><span class="line">                                   http.Send(); &#125; catch (e) &#123;</span><br><span class="line">                                GetLogo();</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">                GetLogo();</span><br><span class="line">                var stream = com.CreateObject(&quot;Adodb.Stream&quot;);</span><br><span class="line">                stream.Type = 1;</span><br><span class="line">                stream.Mode = 3;</span><br><span class="line">                stream.Open();</span><br><span class="line">                stream.Write( &#123; _safearray = http.ResponseBody &#125; );</span><br><span class="line">                stream.SaveToFile(&quot;C:\phto.png&quot;,2);</span><br><span class="line">                stream.Close();</span><br><span class="line">                import gdip.image;</span><br><span class="line">                var image = gdip.image(&quot;C:\phto.png&quot;);</span><br><span class="line">                image = image.getThumbnail(0.4,0.4,true);</span><br><span class="line">                image.save(&quot;C:\phtos.png&quot;);</span><br><span class="line">                mainForm.phtoplus.foreground = &quot;C:\phtos.png&quot;;</span><br><span class="line">               </span><br><span class="line">                while true &#123; try &#123; //发送心跳包接收消息</span><br><span class="line">                        http.Open(&quot;POST&quot;,&#x27;http://d1.web2.qq.com/channel/poll2&#x27;,false);  </span><br><span class="line">                        http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">                        http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://d1.web2.qq.com/proxy.html?v=20151105001&amp;callback=1&amp;id=2&#x27;);</span><br><span class="line">                        http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">                        http.Send(&#x27;r=&#123;&quot;ptwebqq&quot;:&quot;&quot;,&quot;clientid&quot;:53999199,&quot;psessionid&quot;:&quot;&#x27; + psessionid + &#x27;&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;);        </span><br><span class="line">                        if http.ResponseText &#123;</span><br><span class="line">                                var nametab = thread.table(&quot;nametab&quot;);</span><br><span class="line">                                var msg = web.json.parse(http.ResponseText)[&quot;result&quot;][1][&quot;value&quot;][&quot;content&quot;][2]</span><br><span class="line">                                var uin = web.json.parse(http.ResponseText)[&quot;result&quot;][1][&quot;value&quot;][&quot;from_uin&quot;]</span><br><span class="line">                                var name;</span><br><span class="line">                                if string.indexOf(http.ResponseText,&#x27;&quot;message&quot;&#x27;) &#123; //QQ好友消息</span><br><span class="line">                                        for k,v in uintab &#123;</span><br><span class="line">                                                if v = uin name = uintab[k-1]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        for k,v in nametab.each() &#123;</span><br><span class="line">                                                if v = name &#123; mainForm.richedit.log(&quot;QQ好友-&quot; + name + &#x27;:  &#x27; + msg,&#x27;\r\n&#x27;);</span><br><span class="line">                                                break ; &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125; elseif string.indexOf(http.ResponseText,&quot;group_message&quot;) &#123; //QQ群组消息</span><br><span class="line">                                        for k,v in gidtab &#123;</span><br><span class="line">                                                if v = uin name = gidtab[k-1]</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        for k,v in nametab.each() &#123;</span><br><span class="line">                                                if v = name &#123; mainForm.richedit.log(&quot;QQ群组-&quot; + name + &#x27;:  &#x27; + msg,&#x27;\r\n&#x27;);</span><br><span class="line">                                                break ; &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                if mainForm.richedit.getLength() &gt; 2000 mainForm.richedit.clear();</span><br><span class="line">                        &#125;</span><br><span class="line">                         sleep(500);</span><br><span class="line">                &#125; &#125;</span><br><span class="line">        &#125;,mainForm</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mainForm.send.oncommand = function(id,event)&#123;</span><br><span class="line">        for i=1;#qqfstab &#123;</span><br><span class="line">                if mainForm.treeview.getChecked(qqfstab) &#123;</span><br><span class="line">                        for hItem in mainForm.treeview.each(qqfstab)&#123;</span><br><span class="line">                                if mainForm.treeview.getChecked(hItem) &#123;</span><br><span class="line">                                        var name = mainForm.treeview.getItemText(hItem);</span><br><span class="line">                                        for k,v in uintab &#123;  </span><br><span class="line">                                                if v = name &#123; //发送QQ好友消息</span><br><span class="line">                                                        var buf = &#x27;r=&#123;&quot;to&quot;:&#x27; + uintab[k+1] +&#x27;,&quot;content&quot;:&quot;[\\&quot;&#x27; + mainForm.edit.text +&#x27;\\&quot;,[\\&quot;font\\&quot;,&#123;\\&quot;name\\&quot;:\\&quot;</span><br><span class="line">宋体\\&quot;,\\&quot;size\\&quot;:10,\\&quot;style\\&quot;:[0,0,0],\\&quot;color\\&quot;:\\&quot;000000\\&quot;&#125;]]&quot;,&quot;face&quot;:0,&quot;clientid&quot;:53999199,&quot;msg_id&quot;:20610002,&quot;psessionid&quot;:&quot;&#x27; + psessionid + &#x27;&quot;&#125;&#x27;</span><br><span class="line">                                                        http.Open(&quot;POST&quot;,&#x27;http://d1.web2.qq.com/channel/send_buddy_msg2&#x27;,false);  </span><br><span class="line">                                                        http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">                                                        http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://d1.web2.qq.com/cfproxy.html?v=20151105001&amp;callback=1&#x27;);</span><br><span class="line">                                                        http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">                                                        http.Send(buf);</span><br><span class="line">                                                &#125;        </span><br><span class="line">                                        &#125;</span><br><span class="line">                                        for k,v in gidtab &#123;</span><br><span class="line">                                                if v = name &#123; //发送QQ群组消息</span><br><span class="line">                                                        var buf = &#x27;r=&#123;&quot;group_uin&quot;:&#x27; + gidtab[k+1] +&#x27;,&quot;content&quot;:&quot;[\\&quot;&#x27; + mainForm.edit.text +&#x27;\\&quot;,[\\&quot;font\\&quot;,&#123;\\&quot;name\\&quot;:\\&quot;</span><br><span class="line">宋体\\&quot;,\\&quot;size\\&quot;:10,\\&quot;style\\&quot;:[0,0,0],\\&quot;color\\&quot;:\\&quot;000000\\&quot;&#125;]]&quot;,&quot;face&quot;:0,&quot;clientid&quot;:53999199,&quot;msg_id&quot;:20610001,&quot;psessionid&quot;:&quot;&#x27; + psessionid + &#x27;&quot;&#125;&#x27;</span><br><span class="line">                                                        http.Open(&quot;POST&quot;,&#x27;http://d1.web2.qq.com/channel/send_qun_msg2&#x27;,false);  </span><br><span class="line">                                                        http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">                                                        http.SetRequestHeader(&quot;Referer&quot;, &#x27;http://d1.web2.qq.com/cfproxy.html?v=20151105001&amp;callback=1&#x27;);</span><br><span class="line">                                                        http.SetRequestHeader(&quot;Cookie&quot;,cookie);</span><br><span class="line">                                                        http.Send(buf);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import thread.table;</span><br><span class="line">tmid = mainForm.addtimer( //多线程用不了treeview控件的each函数,只能用定时器处理了....</span><br><span class="line">        500/*毫秒*/,</span><br><span class="line">        function(hwnd,msg,id,tick)&#123;//定时执行代码</span><br><span class="line">                var nametab = thread.table(&quot;nametab&quot;,true);</span><br><span class="line">                for i=1;#qqfstab &#123;</span><br><span class="line">                        if mainForm.treeview.getChecked(qqfstab) &#123;</span><br><span class="line">                                for hItem in mainForm.treeview.each(qqfstab)&#123;</span><br><span class="line">                                        if mainForm.treeview.getChecked(hItem) &#123;</span><br><span class="line">                                                var name = mainForm.treeview.getItemText(hItem);</span><br><span class="line">                                                nametab.push(name);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 软件源码分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何设置窗体悬浮在桌面（设置桌面为父窗口）</title>
      <link href="/posts/2024/09/bc3cfeae.html"/>
      <url>/posts/2024/09/bc3cfeae.html</url>
      
        <content type="html"><![CDATA[<p>要求窗口悬浮在桌面，但是其他软件可以覆盖，不影响使用，当按下win+d可以正常显示窗体，应该如何实现？</p><p>设置窗口的父窗口为桌面窗口即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;bgcolor=8388736)</span><br><span class="line">winform.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import winex.desktop</span><br><span class="line">var desk = winex.desktop.listview.hwnd</span><br><span class="line">win.setParent(winform.hwnd, desk)</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>从这个代码中，我们还能学习到aardio里桌面的句柄是<code>winex.desktop.listview.hwnd</code>.</p><p>快捷键代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winform.reghotkey( function(id,mod,vk)&#123; //注册热键按 Ctrl+D</span><br><span class="line">    if(win.getForeground()=winform.hwnd)&#123;</span><br><span class="line">        //io.print(&quot;收到快捷键命令&quot;)</span><br><span class="line">        winform.show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,0x2/*_MOD_CONTROL*/,&#x27;D&#x27;#)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> winex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何获得置顶窗口的句柄</title>
      <link href="/posts/2024/09/d7ceec30.html"/>
      <url>/posts/2024/09/d7ceec30.html</url>
      
        <content type="html"><![CDATA[<p>置顶窗口并不一定只有一个，可能有多个，所以不存在 win.getTopmost() 之类的函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win;</span><br><span class="line">var hwnd = win.GetWindow( win.getForeground(),0x0/*_GW_HWNDFIRST*/)</span><br></pre></td></tr></table></figure><p>上面的代码可以获取顶部窗口，但不一定是你想要的。<br>查找窗口最好使用 winex.find() winex.findEx() 等函数。</p><p>获取指定窗口句柄的另一个方法：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import winex;</span><br><span class="line">//返回顶层桌面可见并含有_WS_EX_TOPMOST样式的窗口</span><br><span class="line">io.open()</span><br><span class="line">winex.enumTop(</span><br><span class="line">    function(hwnd)&#123;</span><br><span class="line">     var text = win.getText(hwnd)</span><br><span class="line">     if (text!==&quot;&quot; &amp;&amp; win.isVisible(hwnd) &amp;&amp; win.getStyleEx(hwnd,0x8/*_WS_EX_TOPMOST*/))</span><br><span class="line">        io.print(&quot;顶层窗口&quot;,winex.getText(hwnd))</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-用edge浏览器打开网页并控制元素</title>
      <link href="/posts/2024/09/573195fb.html"/>
      <url>/posts/2024/09/573195fb.html</url>
      
        <content type="html"><![CDATA[<p>源码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">console.showLoading(&quot; 正在启动 SeleniumBasic &quot;);</span><br><span class="line"> </span><br><span class="line">import dotNet.seleniumBasic;</span><br><span class="line">var SeleniumBasic = dotNet.seleniumBasic;</span><br><span class="line"></span><br><span class="line">var wd = SeleniumBasic.CreateDefaultWebDriver();</span><br><span class="line">if(!wd) error(&quot;初始化或配置环境失败&quot;,2) </span><br><span class="line"></span><br><span class="line">//打开网站</span><br><span class="line">wd.Url = &quot;https://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">//查找表单</span><br><span class="line">var form = wd.FindElementById(&quot;form&quot;)</span><br><span class="line"></span><br><span class="line">//查找输入框</span><br><span class="line">var keyword = form.FindElementById(&quot;kw&quot;)</span><br><span class="line"></span><br><span class="line">//清空输入框，aardio 不能像 VB 那样省略函数调用后的括号</span><br><span class="line">keyword.Clear();</span><br><span class="line"></span><br><span class="line">//发送字符串    </span><br><span class="line">keyword.SendKeys(&quot;aardio&quot;);</span><br><span class="line"></span><br><span class="line">//自动点击按钮</span><br><span class="line">var button = form.FindElementById(&quot;su&quot;);</span><br><span class="line">button.Click();</span><br><span class="line"></span><br><span class="line">//重开控制台以前置控制台窗口，然后等待按键    </span><br><span class="line">console.close();</span><br><span class="line">console.pause(,&quot;按任意键退出浏览器&quot;);</span><br><span class="line"></span><br><span class="line">//退出浏览器</span><br><span class="line">wd.Quit();</span><br></pre></td></tr></table></figure><span id="more"></span><p>参考原文链接：<a href="https://www.aardio.net/read-269.html">https://www.aardio.net/read-269.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> webform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何保证程序唯一运行：原子窗体</title>
      <link href="/posts/2024/09/287bcf68.html"/>
      <url>/posts/2024/09/287bcf68.html</url>
      
        <content type="html"><![CDATA[<p>有的时候做的程序需要只能打开一个，如何实现呢？</p><p>1.打开当前窗体设计界面</p><p>2.从工具箱里面找到原子窗体</p><p>点击原子窗体，就会自动生成对应的代码。</p><p>这样，就搞定了。</p><p>示例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">import win.ui.atom;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( right=599;text=&quot;原子窗体&quot;;bottom=399 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">var atom,hwnd  = winform.atom(&quot;请在这里输入唯一标识字符串，建议使用[工具-&gt;GUID]生成器生成&quot;);</span><br><span class="line">if(!atom)&#123;</span><br><span class="line">        /*为窗口设置原子值可以避免一个程序重复运行多个实例*/</span><br><span class="line">        win.quitMessage();        </span><br><span class="line">        return;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">winform.show( true )</span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所谓【原子窗体】，就是他具有唯一性，如果相同原子标识的窗体已经运行，后面的就会自动退出。</p><p>当然进程唯一运行的法很多，可以用 process.mutex 创建互斥体，或者用 fsys.mmap 创建共享内存，标准库里其实很多好东西。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单 Centos7 配置阿里云yum源</title>
      <link href="/posts/2024/09/dfd20ed6.html"/>
      <url>/posts/2024/09/dfd20ed6.html</url>
      
        <content type="html"><![CDATA[<p>第一步：下载repo文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>第二步：清除缓存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">rm -rf  /var/cache/yum/</span><br></pre></td></tr></table></figure><p>第三步：生成缓存 (这一步有点慢，需要耐心等待)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><p>至此，Centos7配置阿里云yum源成功。</p><span id="more"></span><p><strong>合并命令一键执行：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">rm -rf  /var/cache/yum/</span><br><span class="line">yum makecache</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问kuboard报错:Failed to retrieve connector list</title>
      <link href="/posts/2024/08/4679676.html"/>
      <url>/posts/2024/08/4679676.html</url>
      
        <content type="html"><![CDATA[<p>K8s集群部署完毕后，安装kuboard（版本号:v3.5.2.7），查看kuboard状态为running。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get pods -A|grep kuboard</span><br><span class="line">kuboard                kuboard-v3-master                                            1/1     Running   0             28m</span><br></pre></td></tr></table></figure><p>但是访问kuboard报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;message&quot;:“Failed to retrieve connector list.&quot;,</span><br><span class="line">&quot;type&quot;:&quot;Internal Server Error&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-218.png" alt="">   <p>查看kuboar容器日志:</p><p><code>kubectl logs kuboard-v3-master -n kuboard</code></p><span id="more"></span>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[GIN] 2024/08/31 - 10:58:59 | 200 |     128.155µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:58:59 | 200 |     158.753µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:01.150+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:61&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-f0736a56-3d98-4909-a65d-ab8223f8d18a/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unavailable desc = etcdserver: request timed out&quot;&#125;</span><br><span class="line">time=&quot;2024-08-31T02:59:01Z&quot; level=error msg=&quot;Storage health check failed: delete auth request: etcdserver: request timed out&quot;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:06.203+0800&quot;,&quot;caller&quot;:&quot;wal/wal.go:806&quot;,&quot;msg&quot;:&quot;slow fdatasync&quot;,&quot;took&quot;:&quot;10.054787821s&quot;,&quot;expected-duration&quot;:&quot;1s&quot;&#125;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:09 | 200 |     126.781µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:09 | 200 |     208.837µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:18 | 303 |    8.606739ms |   10.100.62.174 | GET      &quot;/&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:18 | 303 |     993.333µs |   10.100.62.174 | GET      &quot;/login?state=%2F&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:19 | 200 |     214.749µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:19 | 200 |     774.826µs |      10.244.0.1 | GET      &quot;/kuboard-resources/version.json&quot;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:21.151+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:61&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-f0736a56-3d98-4909-a65d-ab8223f8d18a/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unavailable desc = etcdserver: request timed out&quot;&#125;</span><br><span class="line">time=&quot;2024-08-31T02:59:21Z&quot; level=error msg=&quot;Storage health check failed: create auth request: etcdserver: request timed out&quot;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:23.563+0800&quot;,&quot;caller&quot;:&quot;etcdserver/util.go:163&quot;,&quot;msg&quot;:&quot;apply request took too long&quot;,&quot;took&quot;:&quot;5.000096055s&quot;,&quot;expected-duration&quot;:&quot;100ms&quot;,&quot;prefix&quot;:&quot;read-only range &quot;,&quot;request&quot;:&quot;key:\&quot;kuboard-sso-namespace/connector/\&quot; range_end:\&quot;kuboard-sso-namespace/connector0\&quot; &quot;,&quot;response&quot;:&quot;&quot;,&quot;error&quot;:&quot;context deadline exceeded&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:23.563+0800&quot;,&quot;caller&quot;:&quot;traceutil/trace.go:145&quot;,&quot;msg&quot;:&quot;trace[1745762788] range&quot;,&quot;detail&quot;:&quot;&#123;range_begin:kuboard-sso-namespace/connector/; range_end:kuboard-sso-namespace/connector0; &#125;&quot;,&quot;duration&quot;:&quot;5.000255889s&quot;,&quot;start&quot;:&quot;2024-08-31T10:59:18.563+0800&quot;,&quot;end&quot;:&quot;2024-08-31T10:59:23.563+0800&quot;,&quot;steps&quot;:[&quot;trace[1745762788] &#x27;agreement among raft nodes before linearized reading&#x27;  (duration: 5.00003686s)&quot;]&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:23.564+0800&quot;,&quot;caller&quot;:&quot;clientv3/retry_interceptor.go:61&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint://client-f0736a56-3d98-4909-a65d-ab8223f8d18a/127.0.0.1:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = Unknown desc = context deadline exceeded&quot;&#125;</span><br><span class="line">time=&quot;2024-08-31T02:59:23Z&quot; level=error msg=&quot;Failed to parse authorization request: Unable to retrieve connectors&quot;</span><br><span class="line">[GIN] 2024/08/31 - 10:59:23 | 400 |  5.005672321s |   10.100.62.174 | GET      &quot;/sso/auth?access_type=offline&amp;client_id=kuboard-sso&amp;redirect_uri=%2Fcallback&amp;response_type=code&amp;scope=openid+profile+email+groups&amp;state=%2F&amp;connector_id=default&quot;</span><br><span class="line">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-08-31T10:59:25.563+0800&quot;,&quot;caller&quot;:&quot;etcdserver/v3_server.go:746&quot;,&quot;msg&quot;:&quot;timed out waiting for read index response (local node might have slow network)&quot;,&quot;timeout&quot;:&quot;7s&quot;&#125;</span><br></pre></td></tr></table></figure><p>检查etcd没问题。实在没找到问题原因，遂准备将kuboard替换成以前安装过的老版本v3.5.1.0.</p><p>首先修改kuboard.yaml里的镜像版本号:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/kubernetes/manifests/kuboard.yaml</span><br></pre></td></tr></table></figure><p>然后删除kuboard容器:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete pod kuboard-v3-master -n kuboard</span><br></pre></td></tr></table></figure><p>片刻后kuboard启动成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get pods -A|grep kuboard</span><br><span class="line">kuboard                kuboard-v3-master                                            1/1     Running   0             28m</span><br></pre></td></tr></table></figure><p>访问kuboard界面，居然就成功了。虽然没找到问题根本原因，也在此分享下解决办法。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kuboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群-如何动态修改nginx容器的50x/404页面</title>
      <link href="/posts/2024/08/aec600b8.html"/>
      <url>/posts/2024/08/aec600b8.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，nginx的50x页面/404页面都是类似如下：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-217.png" alt=""> <p>由于此界面暴露了web容器信息，在漏洞扫描时是无法过关的。</p><p>在k8s集群里，不重新制作nginx镜像的情况下，如何替换掉默认的nginx的50x/404界面呢？</p><p>在nginx里，错误界面的默认配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要重新指定错误界面，修改成如下配置即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_page   500 502 503 504  /502.html;</span><br><span class="line">location = /502.html &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_page   404  /404.html;</span><br><span class="line">location = /404.html &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这个需要事先准备好502.html和404.html，这个很简单，直接在deployment的preStart里动态写入即可。</p><p>完整的yaml如下：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pvc</span><br><span class="line">  namespace: component</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 3Gi</span><br><span class="line">  storageClassName: storage-class</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  default.conf: &gt;</span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       listen  [::]:80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line">   </span><br><span class="line">       #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">   </span><br><span class="line">       location / &#123;</span><br><span class="line">           root   /usr/share/nginx/html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       #error_page  404              /404.html;</span><br><span class="line">   </span><br><span class="line">       # redirect server error pages to the static page /50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  /502.html;</span><br><span class="line">       location = /502.html &#123;</span><br><span class="line">           root   /usr/share/nginx/html;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       error_page   404  /404.html;</span><br><span class="line">       location = /404.html &#123;</span><br><span class="line">           root   /usr/share/nginx/html;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations: &#123;&#125;</span><br><span class="line">  labels: &#123;&#125;</span><br><span class="line">  name: nginx-configmap</span><br><span class="line">  namespace: component</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx</span><br><span class="line">  namespace: component</span><br><span class="line">spec:</span><br><span class="line">  progressDeadlineSeconds: 600</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      creationTimestamp: null</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      nodeName: master</span><br><span class="line">      containers:</span><br><span class="line">        - env:</span><br><span class="line">            - name: TZ</span><br><span class="line">              value: Asia/Shanghai</span><br><span class="line">          image: &#x27;nginx:alpine3.18&#x27;</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          lifecycle:</span><br><span class="line">            postStart:</span><br><span class="line">              exec:</span><br><span class="line">                command:</span><br><span class="line">                  - /bin/sh</span><br><span class="line">                  - &#x27;-c&#x27;</span><br><span class="line">                  - |</span><br><span class="line">                    echo &#x27;&lt;!DOCTYPE html&gt;</span><br><span class="line">                    &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">                        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">                        &lt;title&gt;502 Bad Gateway&lt;/title&gt;</span><br><span class="line">                        &lt;style&gt;</span><br><span class="line">                            body &#123;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                                padding: 0;</span><br><span class="line">                                font-family: Arial, sans-serif;</span><br><span class="line">                                display: flex;</span><br><span class="line">                                justify-content: center;</span><br><span class="line">                                align-items: center;</span><br><span class="line">                                height: 100vh;</span><br><span class="line">                                background-color: #f2f2f2;</span><br><span class="line">                                color: #333;</span><br><span class="line">                            &#125;</span><br><span class="line">                            .container &#123;</span><br><span class="line">                                text-align: center;</span><br><span class="line">                            &#125;</span><br><span class="line">                            h1 &#123;</span><br><span class="line">                                font-size: 72px;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            p &#123;</span><br><span class="line">                                font-size: 24px;</span><br><span class="line">                                margin: 10px 0 20px;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a &#123;</span><br><span class="line">                                color: #007bff;</span><br><span class="line">                                text-decoration: none;</span><br><span class="line">                                font-size: 18px;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a:hover &#123;</span><br><span class="line">                                text-decoration: underline;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &lt;/style&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                    &lt;body&gt;</span><br><span class="line">                        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">                            &lt;h1&gt;502&lt;/h1&gt;</span><br><span class="line">                            &lt;p&gt;Bad Gateway&lt;/p&gt;</span><br><span class="line">                            &lt;p&gt;服务暂时不可用，请稍后再试。&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/body&gt;</span><br><span class="line">                    &lt;/html&gt;&#x27; &gt; /usr/share/nginx/html/502.html</span><br><span class="line"></span><br><span class="line">                    echo &#x27;&lt;!DOCTYPE html&gt;</span><br><span class="line">                    &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">                    &lt;head&gt;</span><br><span class="line">                        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">                        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">                        &lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line">                        &lt;style&gt;</span><br><span class="line">                            body &#123;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                                padding: 0;</span><br><span class="line">                                font-family: Arial, sans-serif;</span><br><span class="line">                                display: flex;</span><br><span class="line">                                justify-content: center;</span><br><span class="line">                                align-items: center;</span><br><span class="line">                                height: 100vh;</span><br><span class="line">                                background-color: #f2f2f2;</span><br><span class="line">                                color: #333;</span><br><span class="line">                            &#125;</span><br><span class="line">                            .container &#123;</span><br><span class="line">                                text-align: center;</span><br><span class="line">                            &#125;</span><br><span class="line">                            h1 &#123;</span><br><span class="line">                                font-size: 72px;</span><br><span class="line">                                margin: 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                            p &#123;</span><br><span class="line">                                font-size: 24px;</span><br><span class="line">                                margin: 10px 0 20px;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a &#123;</span><br><span class="line">                                color: #007bff;</span><br><span class="line">                                text-decoration: none;</span><br><span class="line">                                font-size: 18px;</span><br><span class="line">                            &#125;</span><br><span class="line">                            a:hover &#123;</span><br><span class="line">                                text-decoration: underline;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &lt;/style&gt;</span><br><span class="line">                    &lt;/head&gt;</span><br><span class="line">                    &lt;body&gt;</span><br><span class="line">                        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">                            &lt;h1&gt;404&lt;/h1&gt;</span><br><span class="line">                            &lt;p&gt;Not Found&lt;/p&gt;</span><br><span class="line">                            &lt;p&gt;您访问的页面不存在。&lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/body&gt;</span><br><span class="line">                    &lt;/html&gt;&#x27; &gt; /usr/share/nginx/html/404.html</span><br><span class="line">          name: nginx</span><br><span class="line">          livenessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /</span><br><span class="line">              port: 80</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            initialDelaySeconds: 3</span><br><span class="line">            periodSeconds: 3</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          readinessProbe:</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /</span><br><span class="line">              port: 80</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            initialDelaySeconds: 3</span><br><span class="line">            periodSeconds: 3</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 32125</span><br><span class="line">              name: http3</span><br><span class="line">              protocol: TCP</span><br><span class="line">          terminationMessagePath: /dev/termination-log</span><br><span class="line">          terminationMessagePolicy: File</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - mountPath: /etc/nginx/conf.d/default.conf</span><br><span class="line">              name: config-volume</span><br><span class="line">              subPath: default.conf</span><br><span class="line">      dnsPolicy: ClusterFirst</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">      securityContext:</span><br><span class="line">        fsGroup: 0</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nginx-pvc-claim</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: nginx-pvc</span><br><span class="line">        - configMap:</span><br><span class="line">            defaultMode: 420</span><br><span class="line">            items:</span><br><span class="line">              - key: default.conf</span><br><span class="line">                path: default.conf</span><br><span class="line">            name: nginx-configmap</span><br><span class="line">          name: config-volume</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations: &#123;&#125;</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  name: nginx</span><br><span class="line">  namespace: component</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - name: port2</span><br><span class="line">      nodePort: 30080</span><br><span class="line">      port: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  sessionAffinity: ClientIP</span><br><span class="line">  sessionAffinityConfig:</span><br><span class="line">    clientIP:</span><br><span class="line">      timeoutSeconds: 10800</span><br><span class="line">  type: NodePort</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群-pod 一直pending nodes are available: 1 node(s) had untolerated taint {node-role.kubernetes.io/control-plane: }</title>
      <link href="/posts/2024/08/9cfc7b27.html"/>
      <url>/posts/2024/08/9cfc7b27.html</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>k8s集群在 执行<code>kubectl get pods -A</code>命令后发现某个pod一直处于pending状态  。  执行 <code>kubectl describe pod &lt;pod名&gt; -n &lt;pod所在命名空间&gt;</code>后找到pending原因，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nodes are available: 1 node(s) had untolerated taint &#123;node-role.kubernetes.io/control-plane: &#125;, that the pod didn&#x27;t tolerate</span><br></pre></td></tr></table></figure><p>提示控制面（即master节点）有污点。</p><h2 id="查找污点原因"><a href="#查找污点原因" class="headerlink" title="查找污点原因"></a>查找污点原因</h2><p>查找节点是否存在污点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe nodes &lt;node-name&gt; |grep Taints</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#kubectl describe nodes master |grep Taints</span><br><span class="line">Taints:             node-role.kubernetes.io/control-plane:NoSchedule</span><br></pre></td></tr></table></figure><p>可以看到master节点存在污点：<code>node-role.kubernetes.io/control-plane:NoSchedule</code></p><h2 id="删除污点"><a href="#删除污点" class="headerlink" title="删除污点"></a>删除污点</h2><p>删除污点命令：<br><code>kubectl taint nodes &lt;node-name&gt; node-role.kubernetes.io/control-plane:NoSchedule- </code><br>这里我们使用如下命令删除master节点的污点:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes master node-role.kubernetes.io/control-plane:NoSchedule-</span><br></pre></td></tr></table></figure><p>删除污点后我们会发现pod启动正常了。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios开发-Swift-常用权限检测</title>
      <link href="/posts/2024/08/f260fd3f.html"/>
      <url>/posts/2024/08/f260fd3f.html</url>
      
        <content type="html"><![CDATA[<p>最近在Swift项目实践中，用到了系统的一些权限请求，如定位、相机、相册、日历…..，为了更方便的查询各种权限状态以及使用这些功能，我简单的整理了一些常用的系统权限的状态以及授权。</p><p>特别说明：在使用这些功能时，需要在info.plist中添加对应的描述，否则将导致项目崩溃，在添加定位权限描述以及相册权限描述时，需要添加以下描述，否则可能会导致包上传到itunesConnect时找不到包，当然，苹果也会在你包上传之后发邮件提醒你</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*  Privacy - Photo Library Additions Usage Description</span><br><span class="line">*  Privacy - Photo Library Usage Description</span><br><span class="line">*  Privacy - Location When In Use Usage Description</span><br><span class="line">*  Privacy - Location Always and When In Use Usage Description</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-导入头文件、自定义权限的各种状态，方便各种的权限状态的统一处理"><a href="#1-导入头文件、自定义权限的各种状态，方便各种的权限状态的统一处理" class="headerlink" title="1.导入头文件、自定义权限的各种状态，方便各种的权限状态的统一处理"></a>1.导入头文件、自定义权限的各种状态，方便各种的权限状态的统一处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import CoreLocation</span><br><span class="line">import ContactsUI</span><br><span class="line">import PhotosUI</span><br><span class="line">import AssetsLibrary</span><br><span class="line">import EventKitUI</span><br><span class="line">import CoreTelephony</span><br><span class="line">import AVFoundation</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//回调处理</span><br><span class="line">typealias BWPrivacyAuthorizerCompletionClosure = (_ granted: Bool)-&gt;Void</span><br><span class="line"></span><br><span class="line">enum BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    case notDetermined                  //尚未授权</span><br><span class="line">    case restricted                     //家长控制</span><br><span class="line">    case denied                         //拒绝</span><br><span class="line">    case authorized                     //已授权</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-常用权限状态，将各种权限状态转化成统一的自定义的权限状态，方便统一处理"><a href="#2-常用权限状态，将各种权限状态转化成统一的自定义的权限状态，方便统一处理" class="headerlink" title="2.常用权限状态，将各种权限状态转化成统一的自定义的权限状态，方便统一处理"></a>2.常用权限状态，将各种权限状态转化成统一的自定义的权限状态，方便统一处理</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定位授权状态</span><br><span class="line"> func bw_locationAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">     let status = CLLocationManager.authorizationStatus()</span><br><span class="line">     switch status &#123;</span><br><span class="line">     case .denied:</span><br><span class="line">         return .denied</span><br><span class="line">     case .notDetermined:</span><br><span class="line">         return .notDetermined</span><br><span class="line">     case .restricted:</span><br><span class="line">         return .restricted</span><br><span class="line">     case .authorized:</span><br><span class="line">         return .authorized</span><br><span class="line">     default:</span><br><span class="line">         return .authorized</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//通讯录授权状态</span><br><span class="line">func bw_contactAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    let status = CNContactStore.authorizationStatus(for: .contacts)</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        return .notDetermined</span><br><span class="line">    case .restricted:</span><br><span class="line">        return .restricted</span><br><span class="line">    case .denied:</span><br><span class="line">        return .denied</span><br><span class="line">    case .authorized:</span><br><span class="line">        return .authorized</span><br><span class="line">    default:</span><br><span class="line">        return .authorized</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//相册授权状态</span><br><span class="line">func bw_photoLibraryAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    if #available(iOS 9.0, *) &#123;</span><br><span class="line">        let status = PHPhotoLibrary.authorizationStatus()</span><br><span class="line">        switch status &#123;</span><br><span class="line">        case .notDetermined:</span><br><span class="line">            return .notDetermined</span><br><span class="line">        case .restricted:</span><br><span class="line">            return .restricted</span><br><span class="line">        case .denied:</span><br><span class="line">            return .denied</span><br><span class="line">        default:</span><br><span class="line">            return .authorized</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let status = ALAssetsLibrary.authorizationStatus()</span><br><span class="line">        switch status &#123;</span><br><span class="line">        case .notDetermined:</span><br><span class="line">            return .notDetermined</span><br><span class="line">        case .restricted:</span><br><span class="line">            return .restricted</span><br><span class="line">        case .denied:</span><br><span class="line">            return .denied</span><br><span class="line">        default:</span><br><span class="line">            return .authorized</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//相机授权状态</span><br><span class="line">func bw_cameraAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    let status = AVCaptureDevice.authorizationStatus(for: AVMediaType.video)</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        return .notDetermined</span><br><span class="line">    case .restricted:</span><br><span class="line">        return .restricted</span><br><span class="line">    case .denied:</span><br><span class="line">        return .denied</span><br><span class="line">    case .authorized:</span><br><span class="line">        return .authorized</span><br><span class="line">    default:</span><br><span class="line">        return .authorized</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//日历授权状态</span><br><span class="line">func bw_calendarAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    let status = EKEventStore.authorizationStatus(for: EKEntityType.event)</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        return .notDetermined</span><br><span class="line">    case .restricted:</span><br><span class="line">        return .restricted</span><br><span class="line">    case .denied:</span><br><span class="line">        return .denied</span><br><span class="line">    case .authorized:</span><br><span class="line">        return .authorized</span><br><span class="line">    default:</span><br><span class="line">        return .authorized</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//麦克风权限</span><br><span class="line">func bw_audioAuthorizationStatus() -&gt; BWPrivacyAuthorizerStatus &#123;</span><br><span class="line">    let status = AVAudioSession.sharedInstance().recordPermission</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .undetermined:</span><br><span class="line">        return .notDetermined</span><br><span class="line">    case .denied:</span><br><span class="line">        return .denied</span><br><span class="line">    case .granted:</span><br><span class="line">        return .authorized</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-请求授权"><a href="#3-请求授权" class="headerlink" title="3.请求授权"></a>3.请求授权</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//MARK: 通讯录相关权限</span><br><span class="line"></span><br><span class="line">func bw_requestContactAuthorization(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_contactAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        let store = CNContactStore.init()</span><br><span class="line">        store.requestAccess(for: .contacts) &#123; (granted, error) in</span><br><span class="line">            DispatchQueue.main.async &#123;</span><br><span class="line">                if granted == false &#123;</span><br><span class="line">                    bw_showAlertWithTitle(&quot;无法访问通讯录&quot;, message: bw_authorizationNotice(title: &quot;通讯录&quot;))</span><br><span class="line">                &#125;</span><br><span class="line">                completion(granted)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .restricted,.denied:</span><br><span class="line">        completion(false)</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法访问通讯录&quot;, message: bw_authorizationNotice(title: &quot;通讯录&quot;))</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 相册相关权限</span><br><span class="line"></span><br><span class="line">func bw_requestPhotoLibraryAuthorization(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_photoLibraryAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        if #available(iOS 9.0, *) &#123;</span><br><span class="line">            PHPhotoLibrary.requestAuthorization &#123; (status) in</span><br><span class="line">                DispatchQueue.main.async &#123;</span><br><span class="line">                    switch status &#123;</span><br><span class="line">                    case .authorized:</span><br><span class="line">                        completion(true)</span><br><span class="line">                    default:</span><br><span class="line">                        completion(false)</span><br><span class="line">                        bw_showAlertWithTitle(&quot;无法访问照片&quot;, message: bw_authorizationNotice(title: &quot;照片&quot;))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .restricted,.denied:</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法访问照片&quot;, message: bw_authorizationNotice(title: &quot;照片&quot;))</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 相机相关权限</span><br><span class="line">func bw_requestCameraAuthorization(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_cameraAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        AVCaptureDevice.requestAccess(for: .video, completionHandler: &#123; (granted: Bool) in</span><br><span class="line">            DispatchQueue.main.async &#123;</span><br><span class="line">                if granted == false &#123;</span><br><span class="line">                    bw_showAlertWithTitle(&quot;无法访问相机&quot;, message: bw_authorizationNotice(title: &quot;相机&quot;))</span><br><span class="line">                &#125;</span><br><span class="line">                completion(granted)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    case .restricted,.denied:</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法访问相机&quot;, message: bw_authorizationNotice(title: &quot;相机&quot;))</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 日历相关权限</span><br><span class="line"></span><br><span class="line">func bw_requestCalendarAuthorization(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_calendarAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        let store = EKEventStore.init()</span><br><span class="line">        store.requestAccess(to: .event) &#123;(granted, error) in</span><br><span class="line">            DispatchQueue.main.async &#123;</span><br><span class="line">                if granted == false &#123;</span><br><span class="line">                    bw_showAlertWithTitle(&quot;无法访问日历&quot;, message: bw_authorizationNotice(title: &quot;日历&quot;))</span><br><span class="line">                &#125;</span><br><span class="line">                completion(granted)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    case .restricted,.denied:</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法访问日历&quot;, message: bw_authorizationNotice(title: &quot;日历&quot;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK:定位相关权限</span><br><span class="line">func bw_requestLocationAuthorization(with locationManager: CLLocationManager, completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_locationAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .denied,.restricted:</span><br><span class="line">        completion(false)</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法开启定位&quot;, message: &quot;请在iPhone的\&quot;设置-隐私-位置\&quot;中允许\(BWAppDispalyName)开启位置权限&quot;)</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        locationManager.requestWhenInUseAuthorization()</span><br><span class="line">    //            locationManager.startUpdatingLocation()</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 麦克风相关权限</span><br><span class="line">func bw_requestAudioAuthorization(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    let status = bw_audioAuthorizationStatus()</span><br><span class="line">    switch status &#123;</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        AVAudioSession.sharedInstance().requestRecordPermission &#123; (granted) in</span><br><span class="line">            DispatchQueue.main.async &#123;</span><br><span class="line">                if granted == false &#123;</span><br><span class="line">                    bw_showAlertWithTitle(&quot;无法访问麦克风&quot;, message: bw_authorizationNotice(title: &quot;麦克风&quot;))</span><br><span class="line">                &#125;</span><br><span class="line">                completion(granted)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .denied:</span><br><span class="line">        completion(true)</span><br><span class="line">        bw_showAlertWithTitle(&quot;无法访问麦克风&quot;, message: bw_authorizationNotice(title: &quot;麦克风&quot;))</span><br><span class="line">    case .authorized:</span><br><span class="line">        completion(true)</span><br><span class="line">    default:</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 通知相关权限</span><br><span class="line">func bw_notificationAuthorizationStatus(with completion: @escaping BWPrivacyAuthorizerCompletionClosure) &#123;</span><br><span class="line">    if #available(iOS 10.0, *) &#123;</span><br><span class="line">        UNUserNotificationCenter.current().getNotificationSettings &#123; (settings) in</span><br><span class="line">            switch settings.authorizationStatus &#123;</span><br><span class="line">            case .authorized,.provisional:</span><br><span class="line">                completion(true)</span><br><span class="line">            case .notDetermined:</span><br><span class="line">                completion(false)</span><br><span class="line">            case .denied:</span><br><span class="line">                completion(false)</span><br><span class="line">            @unknown default:</span><br><span class="line">                completion(false)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let isNotificationEnabled = UIApplication.shared.currentUserNotificationSettings?.types.contains(UIUserNotificationType.alert)</span><br><span class="line">        if isNotificationEnabled == true &#123;</span><br><span class="line">            completion(true)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            completion(false)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//MARK: 弹窗展示</span><br><span class="line"></span><br><span class="line">private func bw_authorizationNotice(title: String) -&gt; String &#123;</span><br><span class="line">    return &quot;请在iPhone的\&quot;设置-隐私-\(title)\&quot;中允许\(BWAppDispalyName)访问\(title)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private func bw_showAlertWithTitle(_ title: String, message: String) &#123;</span><br><span class="line">    let alertController = UIAlertController.init(title: title, message: message, preferredStyle: .alert)</span><br><span class="line">    let cancelAction = UIAlertAction.init(title: &quot;取消&quot;, style: .cancel, handler: nil)</span><br><span class="line">    let goAction = UIAlertAction.init(title: &quot;前往设置&quot;, style: .default) &#123; (action) in</span><br><span class="line">        if let settingUrl = URL(string: UIApplication.openSettingsURLString) &#123;</span><br><span class="line">            if UIApplication.shared.canOpenURL(settingUrl) &#123;</span><br><span class="line">                UIApplication.shared.openURL(settingUrl)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alertController.addAction(cancelAction)</span><br><span class="line">    alertController.addAction(goAction)</span><br><span class="line">    UIApplication.shared.keyWindow?.rootViewController?.present(alertController, animated: true, completion: nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群如何动态修改NodePort 的端口范围</title>
      <link href="/posts/2024/08/8d2aaf55.html"/>
      <url>/posts/2024/08/8d2aaf55.html</url>
      
        <content type="html"><![CDATA[<p>在一个已经部署好的 Kubernetes 集群中，动态修改 <code>NodePort</code> 的端口范围需要修改 Kubernetes API Server 的启动参数，并重新启动 API Server。具体步骤如下：</p><h3 id="1-修改-Kubernetes-API-Server-配置"><a href="#1-修改-Kubernetes-API-Server-配置" class="headerlink" title="1. 修改 Kubernetes API Server 配置"></a>1. 修改 Kubernetes API Server 配置</h3><p>对于基于 kubeadm 部署的集群，API Server 的配置文件通常位于 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> 中。这是一个静态 Pod 配置文件。</p><ul><li>使用 <code>kubectl</code> 或 SSH 连接到控制节点。</li><li>打开 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> 文件。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>  找到 <code>command</code> 或 <code>args</code> 部分，添加或修改 <code>--service-node-port-range</code> 参数。例如，要将范围修改为 1-65535，可以添加以下内容：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- --service-node-port-range=1-65535</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><pre><code>例如：</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">containers:</span><br><span class="line">- command:</span><br><span class="line">  - kube-apiserver</span><br><span class="line">  - --advertise-address=192.168.0.1</span><br><span class="line">  - --allow-privileged=true</span><br><span class="line">  - --service-node-port-range=20000-40000</span><br><span class="line">  # ... 其他参数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-保存并退出编辑"><a href="#2-保存并退出编辑" class="headerlink" title="2. 保存并退出编辑"></a>2. 保存并退出编辑</h3><p>保存文件并退出编辑器。</p><h3 id="3-Kubernetes-API-Server-自动重启"><a href="#3-Kubernetes-API-Server-自动重启" class="headerlink" title="3. Kubernetes API Server 自动重启"></a>3. Kubernetes API Server 自动重启</h3><p>由于 <code>/etc/kubernetes/manifests/kube-apiserver.yaml</code> 是一个静态 Pod 配置文件，修改后 Kubernetes 会自动检测到变更，并重新启动 API Server。你可以通过运行以下命令来验证 API Server 是否成功重启：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system | grep kube-apiserver</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-验证更改"><a href="#4-验证更改" class="headerlink" title="4. 验证更改"></a>4. 验证更改</h3><p>一旦 API Server 重新启动，你可以通过以下方式验证更改是否生效：</p><ul><li>创建一个 <code>NodePort</code> 类型的 Service，并检查其分配的端口号是否在新的范围内。</li><li>  使用以下命令检查 <code>NodePort</code> 范围：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get configmap -n kube-system kubeadm-config -o yaml | grep service-node-port-range</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你使用其他工具（如 <code>kops</code>、<code>rke</code> 等）部署了 Kubernetes，则需要按照相应工具的方式修改 API Server 的配置。</p><p><strong>注意：</strong> 动态修改 <code>NodePort</code> 范围会影响集群的服务暴露策略。建议在进行修改前确认所有相关服务的影响，并在生产环境中进行充分测试。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-从零开始学aardio笔记：reduce详解</title>
      <link href="/posts/2024/08/9f6450e7.html"/>
      <url>/posts/2024/08/9f6450e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做了个抓取网页表格数据的功能，师兄推荐了<code>reduce</code> 这个写法，不会，不懂，没接触过，做个笔记。</p><p><code>reduce</code> 是一个经典的无循环函数，在js，python这些语言中都有相同的函数，<br>aardio中 <code>reduce</code> 函数的设计，基本与js的用法规则一样，例如空数组不指定初始值报错，指定初始值不跳过第一个数组成员，不指定初始值跳过第一个数组成员（用第一个数组成员作为初始值），初始值可以是任意对象，这些规则全都一样，参数的位置用法都一样。</p><h1 id="基本用法-Function"><a href="#基本用法-Function" class="headerlink" title="基本用法 Function"></a>基本用法 Function</h1><p>基本用法 Function ，结构：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值 = reduce(数组，回调函数（结果，当前成员，当前索引），结果初始值)</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值 = reduce(要操作的数组</span><br><span class="line">            ，function( 结果 /*初始值或上次结果*/ ,数组当前成员,数组当前索引)&#123;</span><br><span class="line">                处理函数语句;</span><br><span class="line">                return 本次结果;  // 回调函数的返回值，即为修改结果值：结果 = 本次结果 ，同时在下次回调时传入该值。</span><br><span class="line">            &#125;, 结果初始值  // 指定结果初始值：结果= 结果初始值</span><br><span class="line">        ) // 【结果】在reduce结束后，会当做 reduce 的【返回值】返回。</span><br></pre></td></tr></table></figure><h1 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><h2 id="用法1，数组值求和："><a href="#用法1，数组值求和：" class="headerlink" title="用法1，数组值求和："></a><a href="https://sobaigu.com/aardio-notes-04.html#%E7%94%A8%E6%B3%951%EF%BC%8C%E6%95%B0%E7%BB%84%E5%80%BC%E6%B1%82%E5%92%8C%EF%BC%9A"></a>用法1，数组值求和：</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var arr = &#123;1;2;3;4;5&#125;</span><br><span class="line">var value = reduce(arr, lambda(a,b) a + b );</span><br><span class="line"></span><br><span class="line">console.dump(value);</span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><h2 id="用法2，将数组中所有值转换为字符串"><a href="#用法2，将数组中所有值转换为字符串" class="headerlink" title="用法2，将数组中所有值转换为字符串"></a><a href="https://sobaigu.com/aardio-notes-04.html#%E7%94%A8%E6%B3%952%EF%BC%8C%E5%B0%86%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%80%E6%9C%89%E5%80%BC%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2"></a>用法2，将数组中所有值转换为字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var arr = &#123;1;22;3;456&#125;</span><br><span class="line"></span><br><span class="line">//将数组中的所有值转换为字符串</span><br><span class="line">var value = reduce(arr,function(a,b,i)&#123;</span><br><span class="line">    a[ i ] = tostring(b)</span><br><span class="line">    return a;</span><br><span class="line">&#125;,&#123;&#125;);</span><br><span class="line"></span><br><span class="line">console.dump(value);</span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><h2 id="用法3，筛选数组中的值"><a href="#用法3，筛选数组中的值" class="headerlink" title="用法3，筛选数组中的值"></a><a href="https://sobaigu.com/aardio-notes-04.html#%E7%94%A8%E6%B3%953%EF%BC%8C%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%80%BC"></a>用法3，筛选数组中的值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var arr = &#123;1;22;3;456&#125;</span><br><span class="line"></span><br><span class="line">//筛选出所有小于100的数</span><br><span class="line">var value = reduce(arr,function(a,b)&#123;</span><br><span class="line">    if( b &lt;100) table.push(a,b);</span><br><span class="line">    return a;</span><br><span class="line">&#125;,&#123;&#125;);</span><br><span class="line"></span><br><span class="line">console.dump(value);</span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><h1 id="摘抄网友提炼的重点「待消化o-╯□╰-o」"><a href="#摘抄网友提炼的重点「待消化o-╯□╰-o」" class="headerlink" title="摘抄网友提炼的重点「待消化o(╯□╰)o」"></a>摘抄网友提炼的重点「待消化o(╯□╰)o」</h1><ol><li> reduce 是一个经典的无循环函数。</li><li> 指定【结果初始值】时，回调函数 function 的【结果】=【结果初始值】，数组成员从头到尾逐个遍历，【数组当前成员值】从第1个开始，【数组当前索引】从1开始。</li><li> 不指定【参考值的初始值】时，回调函数 function 的【结果】= 【数组的第1个成员值】。顺理成章的，数组成员就不能再从第个开始，而是跳过第1个，从第2个开始遍历。【数组当前成员值】从第2个开始，【数组当前索引】从2开始。所以，在此情况下，如果要操作的数组为空数组{}时，不指定初始值则会报错。因为空数组不存在“第1个成员值”，也就无法给“结果”赋值。</li><li> 初始值可以是任意对象，如： 123，{} ，“abc” 等。</li><li> 最后一次赋值的【结果】，将作为 reduce 的最终返回值。</li></ol><table><tbody><tr><td>数组</td><td>指定结果初始值</td><td>回调函数 function()</td><td>返回值（参考值）</td></tr><tr><td>空数组</td><td>必须指定</td><td>不执行</td><td>结果 = 结果初始值</td></tr><tr><td rowspan="2">1个成员的数组</td><td>如果指定初始值</td><td>执行1次</td><td>结果 = 本次结果</td></tr><tr><td>如果指定初始值</td><td>执行1次</td><td>结果 = 本次结果</td></tr><tr><td>2个以上成员的数组</td><td>皆可</td><td>至少执行1次</td><td>结果 = 最后一个本次结果</td></tr></tbody></table><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://bbs.aardio.com/forum.php?mod=viewthread&tid=22397">官网论坛：reduce 函数用法大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS批量删除目录下的文件夹</title>
      <link href="/posts/2024/08/453a33df.html"/>
      <url>/posts/2024/08/453a33df.html</url>
      
        <content type="html"><![CDATA[<p>删除文件夹使用rd命令,但文件夹多了,难免有点烦,此时简单的批处理就派上大用处了,当然,使用搜索然后全选删除也不失为一种快捷的方法…</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@rem for /r %%d in (.) do if exist &quot;%%d\.svn&quot; echo /s /q &quot;%%d\.svn&quot;</span><br><span class="line">@for /r %%d in (.) do if exist &quot;%%d\.svn&quot; rd /s /q &quot;%%d\.svn&quot;</span><br></pre></td></tr></table></figure><p>把以上命令稍加润色,可以做出一些易用点的批处理.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">@echo ===================================================================</span><br><span class="line">@echo 清除svn,vss,cvs标记文件</span><br><span class="line">@echo filename : clearSvnCvsVss.bat</span><br><span class="line">@echo ===================================================================</span><br><span class="line">@ECHO 按Ctrl + C取消。</span><br><span class="line">@pause</span><br><span class="line">@echo 执行批处理：%0</span><br><span class="line">@echo 转到：%1</span><br><span class="line">cd /d %1</span><br><span class="line">@echo (1)开始清除“.SVN”文件夹</span><br><span class="line">@rem for /r %%d in (.) do if exist &quot;%%d\.svn&quot; echo /s /q &quot;%%d\.svn&quot;</span><br><span class="line">@for /r %%d in (.) do if exist &quot;%%d\.svn&quot; rd /s /q &quot;%%d\.svn&quot;</span><br><span class="line">@echo 删除完后请检查是否清楚干净。考虑不同的编码工具带有自己的特殊标志，可根据具体情况修改批处理文件中的命令行。</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-从零开始学aardio笔记：模式匹配</title>
      <link href="/posts/2024/08/fe4db2da.html"/>
      <url>/posts/2024/08/fe4db2da.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始尝试着解决一些实际问题，在学的过程中，有些知识点和以前理解的不一样，或者以前理解的正则规则就错了。刚好要用到提取网页数据，把aardio的模式匹配入门过了一遍。</p><blockquote><p>要在实践中去掌握知识。</p><p>知识是从来不能脱离实践的，例如贪婪匹配，逻辑匹配，你为什么不用学？你碰到了实际的需要，你会想：要是这里能……多好啊？ 你一查，还真有呢，你马上就懂了，几乎就是闪电的时间你就明白了，这就是实践中碰撞出来的知识火花。</p><p>– 《模式匹配快速入门》</p></blockquote><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><ol><li> <code>.</code> ：任意字符/字节（ 与正则表达式相同 ）</li><li> <code>:</code> ：任意双字节( 中文字符，正则表达式无此语法 )</li><li> <code>*，+</code> ：星号表示出现0到任意次，加号则表示出现1次到任意次</li><li> <code>^，&amp;</code> ：字符串开始和结束</li><li> <code>[]</code> ：匹配指定字符中的某个</li><li> <code>()</code> ：圆括号设定模式匹配返回的结果，每增加一对圆括号，匹配函数就多一个返回值 <strong>「新知识√」</strong></li><li> <code>&lt;&gt;</code> ：字符串匹配，匹配尖括号中的整串字符</li><li> <code>&#123;&#125;</code> ：大括号指定模式重复匹配的次数</li><li> <code>%</code> ：对称匹配</li></ol><h1 id="其他预定义字符"><a href="#其他预定义字符" class="headerlink" title="其他预定义字符"></a>其他预定义字符</h1><span id="more"></span><ol><li> <code>\n</code> ：换行符</li><li> <code>\r</code> 回车符</li><li> <code>\w</code> 字母和数字</li><li> <code>\s</code> 空白符</li><li> <code>\d</code> 数字</li><li> <code>\f</code> 换页符 <code>\x0c</code></li><li> <code>\v</code> 匹配一个垂直制表符。等价于 <code>\x0b</code></li><li> <code>\t</code> 制表符</li></ol><p>以上部分与正则表达式兼容，以下是 aardio 模式匹配特有：</p><ol><li> <code>\a</code> 字母</li><li> <code>\c</code> 控制字符</li><li> <code>\i</code> 是否ASCII字符( 字节码 <code>&lt; 0x80</code> )</li><li> <code>\l</code> 小写字母</li><li> <code>\p</code> 标点字符</li><li> <code>\u</code> 大写字母</li><li> <code>\x</code> 十六进制数字（正则表达式里用于16进制字符前缀，即 <code>\xhh</code> ）</li><li> <code>\z</code> 表示 <code>\0</code></li></ol><blockquote><p>大写表示反义( 与正则表达式相同 )，例如\D表示不是数字的字符。</p></blockquote><h1 id="修饰符示例"><a href="#修饰符示例" class="headerlink" title="修饰符示例"></a>修饰符示例</h1><p>指定一个模式应当怎样去匹配。修饰符有很多种，而最常用的就是用来指定匹配次数。</p><p><strong><code>p&#123;2,3&#125;</code></strong> 表示 <code>a</code> 出现 <code>2</code> 到 <code>3</code> 次</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open()</span><br><span class="line">结果 = string.match(&quot;12345678&quot;,&quot;\d&#123;2,5&#125;&quot;)</span><br><span class="line">io.print( 结果 ) //显示 12345</span><br></pre></td></tr></table></figure><p><strong><code>p+</code></strong> 表示 <code>a</code> 出现 <code>1</code> 次到任意次数，等价于 <code>p&#123;1,&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open()</span><br><span class="line">结果 = string.match(&quot;12345678&quot;,&quot;\d+&quot;)</span><br><span class="line">io.print( 结果 ) //显示 12345678</span><br></pre></td></tr></table></figure><p><strong><code>p*</code></strong> 表示 <code>a</code> 出现 <code>0</code> 次到任意次数，等价于 <code>p&#123;0,&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open()</span><br><span class="line">结果 = string.match(&quot;12345678&quot;,&quot;\d+\s*&quot;) //这里的&quot;\s*&quot;匹配零个或多个空格</span><br><span class="line">io.print( 结果 ) //还是显示 12345678</span><br></pre></td></tr></table></figure><h1 id="匹配身份证的例子"><a href="#匹配身份证的例子" class="headerlink" title="匹配身份证的例子"></a>匹配身份证的例子</h1><p>匹配身份证示例及更完整的教程，请参考aardio官方教程： <a href="http://bbs.aardio.com/forum.php?mod=viewthread&tid=172&from=portal">模式匹配快速入门</a></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>可以熟练使用模式匹配中的括号，表示你精通了模式匹配。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ab] 中括号匹配指定字符中的一个。</span><br><span class="line"></span><br><span class="line">&lt;ab&gt; 尖括号匹配一连串的字符。</span><br><span class="line"></span><br><span class="line">p&#123;2,3&#125; 大括号指定模式重复匹配的次数</span><br><span class="line"></span><br><span class="line">(p)  而圆括号则设定模式匹配返回的结果，每增加一对圆括号，匹配函数就多一个返回值</span><br></pre></td></tr></table></figure><p><strong>《模式匹配语法参考》</strong><br><a href="/aardio/pattern-syntax.html">模式表达式语法</a>  </p><p><strong>《模式匹配函数说明》</strong><br><a href="/aardio/pattern-matching.html">模式匹配函数</a>  </p><p>多结合实际案例练习，多到论坛跟大家交流。<br>然后你也尝试象我这样写教程，不要怕写的不好。<br>把自已的学习心得写出来。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 模式匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何后台打开“我的电脑”</title>
      <link href="/posts/2024/08/906d0af3.html"/>
      <url>/posts/2024/08/906d0af3.html</url>
      
        <content type="html"><![CDATA[<p>方法1：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import winex.desktop;</span><br><span class="line">var lv = winex.desktop.listview;</span><br><span class="line">var index = lv.findItem(&quot;此电脑&quot;);</span><br><span class="line">lv.selected = &#123;index&#125;;</span><br><span class="line">var rect = lv.getItemRect(index);</span><br><span class="line">var pos = (rect.top+20)&lt;&lt;16|(rect.left+20);</span><br><span class="line">::SendMessageInt(lv.hwnd,0x203/*_WM_LBUTTONDBLCLK*/,0,pos);</span><br></pre></td></tr></table></figure><p>方法2：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import winex.desktop;</span><br><span class="line">var lv = winex.desktop.listview;</span><br><span class="line">var index = lv.findItem(&quot;此电脑&quot;);</span><br><span class="line">lv.selected = &#123;index&#125;;</span><br><span class="line">::SendMessageInt(lv.hwnd,0x100/*_WM_KEYDOWN*/,13,0);</span><br></pre></td></tr></table></figure><p>方法3：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import process</span><br><span class="line">process.explore(&quot;\\&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-radiobutton控件怎么分组</title>
      <link href="/posts/2024/08/5b063a7e.html"/>
      <url>/posts/2024/08/5b063a7e.html</url>
      
        <content type="html"><![CDATA[<p>一个窗体上的多个radio控件，现在只能一个为选中状态，怎么对其进行分组？</p><p>答案：设置group=1和z序即可。<br>代码示例:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=149;parent=...;text=&quot;aardio Form&quot;;right=448 )</span><br><span class="line">winform.add(</span><br><span class="line">radiobutton2=&#123; bottom=46;text=&quot;radiobutton&quot;;left=135;top=29;z=2;right=196;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton3=&#123; bottom=46;text=&quot;radiobutton&quot;;left=235;top=29;z=3;right=296;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton5=&#123; checked=1;bottom=98;group=1;right=96;left=35;top=77;z=5;text=&quot;radiobutton&quot;;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton=&#123; checked=1;bottom=46;group=1;right=95;left=34;top=29;z=1;text=&quot;radiobutton&quot;;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton4=&#123; bottom=46;text=&quot;radiobutton&quot;;left=336;top=29;z=4;right=397;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton8=&#123; bottom=94;text=&quot;radiobutton&quot;;left=336;top=77;z=8;right=397;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton6=&#123; bottom=94;text=&quot;radiobutton&quot;;left=134;top=77;z=6;right=195;cls=&quot;radiobutton&quot; &#125;;</span><br><span class="line">radiobutton7=&#123; bottom=94;text=&quot;radiobutton&quot;;left=234;top=77;z=7;right=295;cls=&quot;radiobutton&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>解析：按z序往下顺的，比如<br>radiobutton1的z序是1<br>radiobutton2的z序是2<br>radiobutton3的z序是3<br>radiobutton4的z序是4<br>radiobutton5的z序是5<br>radiobutton6的z序是6<br>那么把z序是1、4的radiobutton1、radiobutton4的“group”属性设为“1”时，<br>z序排在4之前的是一组，4之后的radiobutton就归另一组了。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何清理docker的Registry私有仓库的镜像文件</title>
      <link href="/posts/2024/08/f56e4b99.html"/>
      <url>/posts/2024/08/f56e4b99.html</url>
      
        <content type="html"><![CDATA[<p>在docker的私有registry仓库的使用场景中，随着业务版本迭代，会频繁更新私有镜像版本。在升级完私有镜像版本之后，老版本的镜像就不再使用，但是它依然存在于私有镜像仓库中，随着老版本镜像越来越多，会占用大量的磁盘空间。因此，我们需要对其进行清理。</p><h2 id="方式一：手动执行命令清理"><a href="#方式一：手动执行命令清理" class="headerlink" title="方式一：手动执行命令清理"></a>方式一：手动执行命令清理</h2><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ul><li><strong>需注意修改用户名、密码、IP、端口、镜像名及镜像版本号</strong></li><li><strong>如果镜像仓库没有配置用户名密码这不需要 -u user:password 参数</strong></li></ul><h3 id="1、查看仓库中的镜像信息："><a href="#1、查看仓库中的镜像信息：" class="headerlink" title="1、查看仓库中的镜像信息："></a>1、查看仓库中的镜像信息：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u user:password  -X GET http://ip:port/v2/_catalog</span><br></pre></td></tr></table></figure><h3 id="2、根据镜像名获取tag列表"><a href="#2、根据镜像名获取tag列表" class="headerlink" title="2、根据镜像名获取tag列表:"></a>2、根据镜像名获取tag列表:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u user:password -X GET http://ip:port/v2/【imageName】/tags/list</span><br></pre></td></tr></table></figure><h3 id="3、获取digest-hash参数："><a href="#3、获取digest-hash参数：" class="headerlink" title="3、获取digest_hash参数："></a>3、获取digest_hash参数：</h3><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u user:password --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -I -X GET http://ip:port/v2/【imageName】/manifests/【version】</span><br></pre></td></tr></table></figure><h3 id="4、根据某个sha删除："><a href="#4、根据某个sha删除：" class="headerlink" title="4、根据某个sha删除："></a>4、根据某个sha删除：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u user:password -I -X DELETE http://ip:port/v2【imageName】/manifests/sha256:47e63235ef41ece989ddf2f4001d458c5935f5c1ae5c5a5f9b01</span><br></pre></td></tr></table></figure><h3 id="5、registry垃圾回收"><a href="#5、registry垃圾回收" class="headerlink" title="5、registry垃圾回收:"></a>5、registry垃圾回收:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec registry1 registry garbage-collect /etc/docker/registry/config.yml </span><br></pre></td></tr></table></figure><h2 id="方式二：使用脚本清理"><a href="#方式二：使用脚本清理" class="headerlink" title="方式二：使用脚本清理"></a>方式二：使用脚本清理</h2><h2 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：删除 nginx:1.1 nginx:1.2 (镜像名:版本)</span><br><span class="line">sh $0 -d nginx:1.1 nginx:1.2 </span><br><span class="line">sh $0 -dd nginx #删除nginx所有版本</span><br><span class="line"></span><br><span class="line">更多使用方法，可以使用以下命令查看帮助文档：</span><br><span class="line">sh 脚本名 -h</span><br></pre></td></tr></table></figure><p>注：使用前记得替换脚本中的HUB参数（本地私有仓库地址）。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#cnetos7,docker-ce v18.09.9,registry v2.6.2</span><br><span class="line">#Docker registry 私有仓库镜像查询、删除、上传、下载</span><br><span class="line">#root</span><br><span class="line">[[ $UID -ne 0 ]] &amp;&amp; &#123; echo &quot;Run in root user !&quot;;exit; &#125;</span><br><span class="line">#need jq ,get json data</span><br><span class="line">[[ -f /usr/bin/jq ]] || &#123; echo &#x27;install jq&#x27;;yum install -y jq &amp;&gt;/dev/null; &#125;</span><br><span class="line"></span><br><span class="line">#参数 variable</span><br><span class="line">#registry容器名称,默认registry</span><br><span class="line">RN=$&#123;RN:-registry1&#125;</span><br><span class="line">#访问网址,默认localhost:5000</span><br><span class="line">HUB=$&#123;HUB:-localhost:5000&#125;</span><br><span class="line">HUB=192.168.89.11:5000</span><br><span class="line"></span><br><span class="line"># 检测 check</span><br><span class="line">function Check_hub() &#123;</span><br><span class="line">  [[ `curl -u admin:admin -s $HUB/v2/_catalog` == &quot;Failed connect&quot; ]] &amp;&amp; &#123; echo -e &quot;\033[31m$HUB 访问失败\033[0m&quot;;exit;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除images</span><br><span class="line">function Delete_img() &#123;</span><br><span class="line">  for n in $IMGS;</span><br><span class="line">  do</span><br><span class="line">    IMG=$&#123;n%%:*&#125;</span><br><span class="line">    TAG=$&#123;n##*:&#125;</span><br><span class="line">    echo &quot;IMG=$&#123;IMG&#125;&quot;</span><br><span class="line">    echo &quot;TAG=$&#123;TAG&#125;&quot;</span><br><span class="line">    i=1</span><br><span class="line">    [[ &quot;$IMG&quot; == &quot;$TAG&quot; ]] &amp;&amp; &#123; TAG=latest; n=&quot;$n:latest&quot;; &#125;</span><br><span class="line">    Digest=`curl -u admin:admin  --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -Is $&#123;HUB&#125;/v2/$&#123;IMG&#125;/manifests/$&#123;TAG&#125; |awk &#x27;/Digest/ &#123;print $NF&#125;&#x27;`</span><br><span class="line">    echo &quot;Digest=$&#123;Digest&#125;&quot;</span><br><span class="line">    [[ -z &quot;$Digest&quot; ]] &amp;&amp; &#123; echo -e &quot;\033[31m$IMG:$TAG  镜像不存在\033[0m&quot;;&#125; || &#123;</span><br><span class="line">      URL=&quot;$&#123;HUB&#125;/v2/$&#123;IMG&#125;/manifests/$&#123;Digest&#125;&quot;</span><br><span class="line">      echo &quot;URL=$&#123;URL&#125;&quot;</span><br><span class="line">      Rs=$(curl -u admin:admin -Is -X DELETE $&#123;URL%?&#125;|awk &#x27;/HTTP/ &#123;print $2&#125;&#x27;)</span><br><span class="line">      echo &quot;Rs=$&#123;Rs&#125;&quot;</span><br><span class="line">      [[ $Rs -eq 202 ]] &amp;&amp; &#123; let i++;echo &quot;$n  删除成功&quot;; &#125; || &#123; echo -e &quot;\033[31m$n  删除失败\033[0m&quot;; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  done</span><br><span class="line">  #registry垃圾回收 </span><br><span class="line">  RN=ips_registry1</span><br><span class="line">  [[ &quot;$i&quot; -gt 1 ]] &amp;&amp; &#123;</span><br><span class="line">    echo &quot;Clean...执行docker exec&quot;;</span><br><span class="line">    docker exec $&#123;RN&#125; /bin/registry garbage-collect /etc/docker/registry/config.yml &amp;&gt;/dev/null;</span><br><span class="line">    docker restart $&#123;RN&#125; &amp;&gt;/dev/null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除镜像所在目录(清除所有 -dd .* )</span><br><span class="line"># 简单高效,删库跑路，必备技能</span><br><span class="line">function Delete_img_a() &#123;</span><br><span class="line">  [[ -f /usr/bin/docker ]] || echo &#x27;No docker !&#x27;</span><br><span class="line">  [[ -z $(docker ps |awk &#x27;/&#x27;$RN&#x27;/ &#123;print $NF&#125;&#x27;) ]] &amp;&amp; &#123; echo &quot;$RN容器不存在!&quot;;exit; &#125;</span><br><span class="line">  for n in $IMGS;</span><br><span class="line">  do</span><br><span class="line">    IMG=&quot;$&#123;n%%:*&#125;&quot;</span><br><span class="line">    docker exec $RN rm -rf /var/lib/registry/docker/registry/v2/repositories/$IMG</span><br><span class="line">    echo &quot;$IMG 删除成功&quot;</span><br><span class="line">  done</span><br><span class="line">  echo &#x27;清理 Clean ...&#x27;</span><br><span class="line">  docker exec $RN bin/registry garbage-collect /etc/docker/registry/config.yml &amp;&gt;/dev/null</span><br><span class="line">  docker restart $RN &amp;&gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 上传 push</span><br><span class="line">function Push() &#123;</span><br><span class="line">  for IMG in $IMGS;</span><br><span class="line">  do</span><br><span class="line">    echo -e &quot;\033[33m docker push $IMG to $HUB \033[0m&quot;</span><br><span class="line">    docker tag $IMG $HUB/$IMG</span><br><span class="line">    docker push $HUB/$IMG</span><br><span class="line">    docker rmi $HUB/$IMG &amp;&gt;/dev/null</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 下载 pull</span><br><span class="line">function Pull() &#123;</span><br><span class="line">  for IMG in $IMGS;</span><br><span class="line">  do</span><br><span class="line">    echo -e &quot;\033[33m dokcer pull $IMG from $HUB \033[0m&quot;</span><br><span class="line">    docker pull $HUB/$IMG</span><br><span class="line">    docker tag $HUB/$IMG $IMG</span><br><span class="line">    docker rmi $HUB/$IMG &amp;&gt;/dev/null</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 查询images</span><br><span class="line">function Select_img() &#123;</span><br><span class="line">  IMG=$(curl -s $HUB/v2/_catalog |jq .repositories |awk -F&#x27;&quot;&#x27; &#x27;&#123;for(i=1;i&lt;=NF;i+=2)$i=&quot;&quot;&#125;&#123;print $0&#125;&#x27;)</span><br><span class="line">  [[ $IMG = &quot;&quot; ]] &amp;&amp; &#123; echo -e &quot;\033[31m$HUB 没有docker镜像\033[0m&quot;;exit; &#125;</span><br><span class="line">  #echo &quot;$HUB Docker镜像：&quot;</span><br><span class="line">  for n in $IMG;</span><br><span class="line">  do</span><br><span class="line">    echo &quot;*****************【$n】******************&quot;</span><br><span class="line">    TAG=$(curl -s http://$HUB/v2/$n/tags/list |jq .tags |awk -F&#x27;&quot;&#x27; &#x27;&#123;for(i=1;i&lt;=NF;i+=2)$i=&quot;&quot;&#125;&#123;print $0&#125;&#x27;)</span><br><span class="line">    for t in $TAG;</span><br><span class="line">    do</span><br><span class="line">      echo &quot;$n:$t&quot;;</span><br><span class="line">    done</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  &quot;-h&quot;)</span><br><span class="line">  echo  </span><br><span class="line">  echo &quot;#默认查询images&quot;</span><br><span class="line">  echo &quot;sh $0 -h #帮助 -d #删除 -dd #清理空间&quot;</span><br><span class="line">  echo &quot;    -pull img1 img2 #下载 -push #上传&quot;</span><br><span class="line">  echo </span><br><span class="line">  echo &quot;#示例：删除 nginx:1.1 nginx:1.2 (镜像名:版本)&quot;</span><br><span class="line">  echo &quot;sh $0 -d nginx:1.1 nginx:1.2 &quot;</span><br><span class="line">  echo &quot;sh $0 -dd nginx #删除nginx所有版本&quot;</span><br><span class="line">  echo </span><br><span class="line">  echo &quot;#定义仓库url地址hub.test.com:5000(默认 localhost:5000)&quot;</span><br><span class="line">  echo &quot;env HUB=hub.test.com:5000 /bin/sh $0 -d nginx:1.1 &quot;</span><br><span class="line">  echo  </span><br><span class="line">;;</span><br><span class="line">  &quot;-d&quot;)</span><br><span class="line">  Check_hub</span><br><span class="line">  IMGS=$&#123;*/-dd/&#125;</span><br><span class="line">  echo &quot;IMGS=$&#123;IMGS&#125;&quot;</span><br><span class="line">  IMGS=$&#123;IMGS/-d/&#125;</span><br><span class="line">  echo &quot;IMGS=$&#123;IMGS&#125;&quot;</span><br><span class="line">  Delete_img</span><br><span class="line">;;</span><br><span class="line">  &quot;-dd&quot;)</span><br><span class="line">  Check_hub</span><br><span class="line">  IMGS=$&#123;*/-dd/&#125;</span><br><span class="line">  IMGS=$&#123;IMGS/-d/&#125;</span><br><span class="line">  Delete_img_a</span><br><span class="line">;;</span><br><span class="line">  &quot;-pull&quot;)</span><br><span class="line">  IMGS=$&#123;*/-pull/&#125;</span><br><span class="line">  Pull</span><br><span class="line">;;</span><br><span class="line">  &quot;-push&quot;)</span><br><span class="line">  IMGS=$&#123;*/-push/&#125;</span><br><span class="line">  Push</span><br><span class="line">;;</span><br><span class="line">  *)</span><br><span class="line">  Check_hub</span><br><span class="line">  Select_img</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置containerd使用本地代理来拉取镜像</title>
      <link href="/posts/2024/08/40096e65.html"/>
      <url>/posts/2024/08/40096e65.html</url>
      
        <content type="html"><![CDATA[<p>因为众所周知的原因，现在docker、containerd拉取镜像经常拉取不到。下面来配置下containerd怎么使用本地代理来拉取镜像。</p><h3 id="通过-systemd-设置"><a href="#通过-systemd-设置" class="headerlink" title="通过 systemd 设置"></a>通过 systemd 设置</h3><p>如果你的 docker daemon 是通过 systemd 管理的，那么你可以通过设置 containerd.service 服务的环境变量来设置代理。<br>执行命令查看 containerd.service 信息，得知配置文件位置 <code>/etc/systemd/system/containerd.service</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~$ systemctl status containerd</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/containerd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue 2024-08-20 15:03:40 CST; 1h 24min ago</span><br><span class="line">     Docs: https://containerd.io</span><br><span class="line">  Process: 1098607 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1098609 (containerd)</span><br><span class="line">    Tasks: 32</span><br><span class="line">   Memory: 85.9M</span><br><span class="line">   CGroup: /system.slice/containerd.service</span><br><span class="line">           └─1098609 /usr/local/bin/containerd</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>/etc/systemd/system/containerd.service</code> 的 [Service] 模块添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Environment=HTTP_PROXY=http://proxyAddress:port</span><br><span class="line">Environment=HTTPS_PROXY=http://proxyAddress:port</span><br><span class="line">Environment=NO_PROXY=localhost,127.0.0.1</span><br></pre></td></tr></table></figure><span id="more"></span><p>重新加载配置文件并重启服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Containerd </tag>
            
            <tag> Dockerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置docker使用本地代理来拉取镜像</title>
      <link href="/posts/2024/08/fb99a30.html"/>
      <url>/posts/2024/08/fb99a30.html</url>
      
        <content type="html"><![CDATA[<p>因为众所周知的原因，现在docker、containerd拉取镜像经常拉取不到。下面来配置下怎么使用本地代理来拉取镜像。</p><p>如果你以为为终端设置代理后 docker 就会使用代理，那你就错了。在从官方的镜像仓库 pull 镜像反复出错后并收到类似 Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/&quot;">https://registry-1.docker.io/v2/&quot;</a>: read tcp 192.168.3.140:59460-&gt;44.205.64.79:443: read: connection reset by peer 这样的报错信息后，我才开始怀疑我并没有真正给 docker 设置好代理。  </p><p>在执行 docker pull 命令时，实际上命令是由守护进程 docker daemon 执行的。</p><h3 id="通过-systemd-设置"><a href="#通过-systemd-设置" class="headerlink" title="通过 systemd 设置"></a>通过 systemd 设置</h3><p>如果你的 docker daemon 是通过 systemd 管理的，那么你可以通过设置 docker.service 服务的环境变量来设置代理。<br>执行命令查看 docker.service 信息，得知配置文件位置 <code>/usr/lib/systemd/system/docker.service</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~$ systemctl status docker.service </span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Tue 2023-06-13 00:52:54 CST; 22h ago</span><br><span class="line">TriggeredBy: ● docker.socket</span><br><span class="line">       Docs: https://docs.docker.com</span><br><span class="line">   Main PID: 387690 (dockerd)</span><br><span class="line">      Tasks: 139</span><br><span class="line">     Memory: 89.6M</span><br><span class="line">        CPU: 1min 26.512s</span><br><span class="line">     CGroup: /system.slice/docker.service</span><br></pre></td></tr></table></figure><p>在 <code>/usr/lib/systemd/system/docker.service</code> 的 [Service] 模块添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Environment=HTTP_PROXY=http://proxyAddress:port</span><br><span class="line">Environment=HTTPS_PROXY=http://proxyAddress:port</span><br><span class="line">Environment=NO_PROXY=localhost,127.0.0.1</span><br></pre></td></tr></table></figure><span id="more"></span><p>重新加载配置文件并重启服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h3 id="修改-dockerd-配置文件"><a href="#修改-dockerd-配置文件" class="headerlink" title="修改 dockerd 配置文件"></a>修改 dockerd 配置文件</h3><p>还可以修改 dockerd 配置文件，添加：</p><p>export http_proxy=”<a href="http://proxyAddress:port&quot;">http://proxyAddress:port&quot;</a><br>然后重启 docker daemon 即可。</p><p>国内的镜像仓库在绝大多数时候都可以满足条件，但是存在个别镜像同步不及时的情况，如果使用 latest 标签拉取到的镜像并非近期的镜像，因此有时候需要直接从官方镜像仓库拉取镜像。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Containerd </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-几句代码实现搜索内存、解密数据库</title>
      <link href="/posts/2024/08/b7c3461.html"/>
      <url>/posts/2024/08/b7c3461.html</url>
      
        <content type="html"><![CDATA[<p>本文只分享编程技术，不涉及具体软件。</p><p>涉及具体软件的文章或工具出现很多年了，到处都是。头条上也有很多，这里我们不讨论。</p><p>有用户问我：登录后才能解密，输入密码后才能备份出数据库，这些本来就是我自己可以查看的自己的记录，那么解密有什么作用呢？</p><p>对的，首先这样的操作是无害的。</p><p>解密以后就可以用程序自己分析、提取、整理数据 —— 这会带来实际的好处。菜刀有没有用？当然用来切菜也是极好的。</p><p>下面的代码使用 aardio 开发环境。</p><p>aardio 非常小只有几 MB，绿色软件不用安装，打开就可以用，下面的代码复制粘贴就可以运行，一键可以生成独立无依赖的 EXE 执行程序（生成的 EXE 体积也很小）。</p><p>在内存中搜索与查看数据库密钥：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console.int;</span><br><span class="line"></span><br><span class="line">//内存搜索扩展库</span><br><span class="line">import process.util;</span><br><span class="line"></span><br><span class="line">//打开目标软件进程，没运行返回 null</span><br><span class="line">var prcs = process.util(&quot;执行程序文件名.exe&quot;);</span><br><span class="line"></span><br><span class="line">//搜索模块内存</span><br><span class="line">var memory = prcs.searchModuleMemory(&quot;模块名称.dll&quot;,&quot;ID 写在这里&quot;,-2);</span><br><span class="line"></span><br><span class="line">//获取密钥内存地址</span><br><span class="line">var addr = memory.address - (prcs.isX64() ? 偏移量1 : 偏移量2 )</span><br><span class="line"></span><br><span class="line">//读取字符串指针，再读取指针指向的字符串</span><br><span class="line">var key  = prcs.readStringPtr(addr,字符串长度);</span><br><span class="line"></span><br><span class="line">//转换为 16 进制格式</span><br><span class="line">var hexKey = string.hex(key,&quot;&quot;) </span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">console.log(  hexKey )</span><br></pre></td></tr></table></figure><p>以上代码兼容 64 位与 32 位目标程序，兼容 64 位与 32 位操作系统。</p><p>很多东西都是提供两个版本，64 位一个，32 位一个。aardio 的风格基本上是做到全兼容，而且这个也没有什么难度，64 位与 32 位本来就可以相互调用，也非常方便。</p><p>尽量简单一些，不求完美。</p><p>下面演示解密手机备份出来的，SQLCipher 加密的数据库。仅作概念演示，不涉及具体软件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var dir = &quot;这里指定备份文件目录&quot;</span><br><span class="line"></span><br><span class="line">import console.int;</span><br><span class="line">console.showLoading(&quot;正在获取账号配置&quot;); </span><br><span class="line"></span><br><span class="line">//自动搜索要处理的文件</span><br><span class="line">import fsys;</span><br><span class="line">var dbPath = fsys.searchFile(&quot;数据库文件名.db&quot;,dir,true);</span><br><span class="line">var xmlPath  = fsys.searchFile(&quot;配置文件名.xml&quot;,dir,true);</span><br><span class="line">var javaObjectPath = fsys.searchFile(&quot;Java配置文件名.cfg&quot;,dir,true); </span><br><span class="line"></span><br><span class="line">//解析 XML 配置文件</span><br><span class="line">import string.xml;</span><br><span class="line">var xmlDoc = string.xml( string.load(xmlPath))</span><br><span class="line">var ele = xmlDoc.queryEle( tagName=&quot;改为标记名&quot;,name=&quot;改为属性名&quot;);</span><br><span class="line">var uid = ele.value;</span><br><span class="line"></span><br><span class="line">//反序列化 Java 对象</span><br><span class="line">var imei = &quot;默认值&quot;;</span><br><span class="line">if(#string.load(javaObjectPath))&#123; </span><br><span class="line">    </span><br><span class="line">    //很方便很小的嵌入 JAVA 虚拟机。</span><br><span class="line">    import java.jre.v6; </span><br><span class="line">    var jvm = java(); </span><br><span class="line"></span><br><span class="line">    imei =  jvm.loadFileObject(javaObjectPath) .get( jvm.int(258))     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//计算密钥</span><br><span class="line">import crypt;</span><br><span class="line">var key = crypt.md5(imei++uid,false,改为密钥位数);</span><br><span class="line">console.showLoading(&quot;正在解密数据库，密钥：&quot;,key)</span><br><span class="line"></span><br><span class="line">//打开数据库</span><br><span class="line">import process.sqlCipher;</span><br><span class="line">var db = process.sqlCipher(dbPath);</span><br><span class="line"></span><br><span class="line">//输入密钥</span><br><span class="line">db.write(&quot;PRAGMA key = &#x27;&quot;,key,&quot;&#x27;; &quot;)</span><br><span class="line"> </span><br><span class="line">//写入 SQL 指令并关闭输入</span><br><span class="line">db.writeClose(`</span><br><span class="line">PRAGMA cipher_compatibility = 3; </span><br><span class="line">PRAGMA cipher_use_hmac = OFF;</span><br><span class="line">PRAGMA cipher_page_size = 1024;</span><br><span class="line">PRAGMA kdf_iter = 4000;</span><br><span class="line"></span><br><span class="line">ATTACH DATABASE &quot;Test.db&quot; AS DeTest KEY &quot;&quot;;</span><br><span class="line">SELECT sqlcipher_export(&quot;DeTest&quot;);</span><br><span class="line">DETACH DATABASE DeTest;</span><br><span class="line">`)</span><br><span class="line"></span><br><span class="line">//回显输出</span><br><span class="line">db.logResponse();  </span><br><span class="line"></span><br><span class="line">//在资源管理器打开解密数据库</span><br><span class="line">process.exploreSelect(&quot;/DeTest.db&quot;)</span><br></pre></td></tr></table></figure><p>下面再演示用 aardio 调用 Python 编程语言的版本，不涉及任何具体软件，所以项目路径是虚拟的概念名称</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import process.python;</span><br><span class="line">process.python.path = &quot;python.exe&quot;;</span><br><span class="line"></span><br><span class="line">import process.python.pip</span><br><span class="line">process.python.pip.github(&quot;/用户名/项目名/blob/master/requirements.txt&quot;)</span><br><span class="line"></span><br><span class="line">//这里指定用户 ID 就可以了</span><br><span class="line">var python = process.python.github(&quot;/用户名/项目名/blob/master/获取密钥.py&quot;,&#123;</span><br><span class="line">    &quot;--id&quot;:&quot;这里指定用户 ID 就可以了&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//获取数据库密钥</span><br><span class="line">var key = python.expect(&quot;数据库密钥：(\N+)&quot;);</span><br></pre></td></tr></table></figure><p>原文地址：<a href="http://www.golangw.com/post/6390.html">http://www.golangw.com/post/6390.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 进程管道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-py3模块异步回显logger日志到界面富文本控件</title>
      <link href="/posts/2024/08/888cc484.html"/>
      <url>/posts/2024/08/888cc484.html</url>
      
        <content type="html"><![CDATA[<p>范例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//异步回显</span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;process.python - 入门&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=16;top=22;right=722;bottom=420;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import process.python;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">执行 Python 代码，</span><br><span class="line">如果 Python 代码开始为 aardio 模板标记，则启用模板语法： </span><br><span class="line">chm://the%20language/template_syntax.html</span><br><span class="line">*/</span><br><span class="line">var python = process.python.exec(`?&gt;</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"># print 写到进程标准输出，在 aardio 中可以读取</span><br><span class="line">print( &quot;这是 Python 代码输出的字符串 &quot; )</span><br><span class="line"> </span><br><span class="line">sys.stdout.flush()</span><br><span class="line">time.sleep( 1 )</span><br><span class="line"> </span><br><span class="line">print( &quot;这是 Python 代码输出的字符串  &quot; )</span><br><span class="line">`);</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">此函数参数如果指定文本框作为回显对象，则异步回显进程输出。</span><br><span class="line">启用异步回显示，函数不会阻塞，而是继续向后执行。</span><br><span class="line">*/</span><br><span class="line">python.logResponse( winform.edit ); </span><br><span class="line">/*</span><br><span class="line">参数也可以是回显函数，详见 process.popen 文档。</span><br><span class="line">参数是回显函数而不是回显控件，则阻塞函数直到被调用进程退出</span><br><span class="line">如果不指定参数，且导入了 console 库，则默认回显到控制台。</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 其他语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-命令行程序调用外部命令行程序的时候合并窗口</title>
      <link href="/posts/2024/08/cec3152e.html"/>
      <url>/posts/2024/08/cec3152e.html</url>
      
        <content type="html"><![CDATA[<p>本质就是接管外部进程的标准输出<br>这里使用wget.exe以20Kb/s下载一个1GB的测试文件为例子<br>wget.exe需要自备，这里不提供下载<br>三种方案都注释了，自行编辑分别测试。  </p><p>源代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open();</span><br><span class="line"></span><br><span class="line">o = `1GB.bin`;</span><br><span class="line">i = `http://speed.hetzner.de/1GB.bin`; </span><br><span class="line">cmd = `--limit-rate=20k -t 0 -O &quot;%s&quot; &quot;%s&quot;`; </span><br><span class="line">cmd = string.format(cmd,o,i);</span><br><span class="line"></span><br><span class="line">/**** 方案一</span><br><span class="line">// hold住后面的执行语句</span><br><span class="line">// 外部执行完毕，再继续向下执行</span><br><span class="line">// 但是ctrl+c的时候不会结束外部进程</span><br><span class="line">import process.popen;</span><br><span class="line">var prcs = process.popen(&quot;wget.exe&quot;, cmd);</span><br><span class="line">prcs.logResponse();</span><br><span class="line">****/</span><br><span class="line"></span><br><span class="line">/**** 方案二</span><br><span class="line">// 仅仅是把外部的输出重定向到标准输出上</span><br><span class="line">// 不等待外部进程结束，立刻执行下一条指令</span><br><span class="line">// 当按下ctrl+c的时候，一起结束</span><br><span class="line">io.popen(&quot;wget.exe &quot;++cmd,&quot;r&quot;);</span><br><span class="line">/****/</span><br><span class="line"></span><br><span class="line">/**** 方案三</span><br><span class="line">// hold住后面的执行语句</span><br><span class="line">// 外部执行完毕，再继续向下执行</span><br><span class="line">// 当按下ctrl+c的时候，一起结束</span><br><span class="line">file = io.popen(&quot;wget.exe &quot;++cmd,&quot;r&quot;);</span><br><span class="line">line = file.read();</span><br><span class="line">while( line ) </span><br><span class="line">&#123;</span><br><span class="line">    io.print(line);</span><br><span class="line">    line = file.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file.close(); </span><br><span class="line">****/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 进程管道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-高级选项卡中一个窗口直接访问另外一个窗口的方法</title>
      <link href="/posts/2024/08/b14d67b8.html"/>
      <url>/posts/2024/08/b14d67b8.html</url>
      
        <content type="html"><![CDATA[<p>主窗口:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fonts.fontAwesome;</span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(right=713;bottom=570;bgcolor=16777215;border=&quot;none&quot;)</span><br><span class="line">mainForm.add(</span><br><span class="line">custom=&#123;cls=&quot;custom&quot;;left=0;top=40;right=717;bottom=571;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;z=1&#125;;</span><br><span class="line">navFirst=&#123;cls=&quot;plus&quot;;text=&quot;主页&quot;;left=242;top=2;right=336;bottom=37;align=&quot;left&quot;;color=16777215;dl=1;dt=1;font=LOGFONT(h=-16);iconStyle=&#123;align=&quot;left&quot;;font=LOGFONT(h=-19;name=&#x27;FontAwesome&#x27;);padding=&#123;left=12;top=4&#125;&#125;;iconText=&#x27;\uF00A&#x27;;notify=1;paddingLeft=1;paddingRight=1;paddingTop=3;textPadding=&#123;left=39;bottom=1&#125;;x=0.5;y=0.2;z=3&#125;;</span><br><span class="line">navSetting=&#123;cls=&quot;plus&quot;;text=&quot;设置&quot;;left=368;top=2;right=462;bottom=37;align=&quot;left&quot;;color=16777215;dl=1;dt=1;font=LOGFONT(h=-16);iconStyle=&#123;align=&quot;left&quot;;font=LOGFONT(h=-19;name=&#x27;FontAwesome&#x27;);padding=&#123;left=12;top=4&#125;&#125;;iconText=&#x27;\uF0AD&#x27;;notify=1;paddingLeft=1;paddingRight=1;paddingTop=3;textPadding=&#123;left=39;bottom=1&#125;;x=0.5;y=0.2;z=4&#125;;</span><br><span class="line">titleBar=&#123;cls=&quot;bkplus&quot;;left=-326;top=-1;right=716;bottom=40;bgcolor=6318930;dl=1;dr=1;dt=1;forecolor=16777215;linearGradient=180;z=2&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import win.ui.simpleWindow;</span><br><span class="line">win.ui.simpleWindow( mainForm );</span><br><span class="line"></span><br><span class="line">import win.ui.tabs;</span><br><span class="line">var tbs = win.ui.tabs( </span><br><span class="line">    mainForm.navFirst,</span><br><span class="line">    mainForm.navSetting</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">tbs.loadForm(1,&quot;\dlg\broadcast.aardio&quot; );  </span><br><span class="line">tbs.loadForm(2,&quot;\dlg\setting.aardio&quot; ); </span><br><span class="line">tbs.preloadForm(2,true);</span><br><span class="line"></span><br><span class="line">mainForm.tbs = tbs;</span><br><span class="line"></span><br><span class="line">tbs.selIndex = 1; </span><br><span class="line">mainForm.show();</span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure><p>一个子窗口（访问其他窗口）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(right=669;bottom=455;mode=&quot;popup&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;测试写设置窗口内容&quot;;left=241;top=194;right=374;bottom=252;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    if ::设置窗口_全局常量 ::设置窗口_全局常量.edit.print(&quot;::设置窗口_全局常量&quot;)</span><br><span class="line">    if mainForm.tbs.forms[2] mainForm.tbs.forms[2].edit.print(&quot;mainForm.tbs.forms[2]&quot;)</span><br><span class="line">    if ..设置窗口_全局变量 ..设置窗口_全局变量.edit.print(&quot;..设置窗口_全局变量&quot;)</span><br><span class="line">    if mainForm.设置窗口 mainForm.设置窗口.edit.print(&quot;mainForm.设置窗口&quot;)</span><br><span class="line">    if winform_全局 winform_全局.edit.print(&quot;winform_全局&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>另一个子窗口（被访问窗口）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform_全局 = win.form(text=&quot;设置&quot;;right=801;bottom=376;bgcolor=16777215)</span><br><span class="line">winform_全局.add(</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=103;top=85;right=701;bottom=280;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform_全局.show();</span><br><span class="line">winform_全局.edit.print(&quot;以下方法可以访问其他窗口：&quot;)</span><br><span class="line"></span><br><span class="line">::设置窗口_全局常量 = winform_全局;</span><br><span class="line">..设置窗口_全局变量 = winform_全局;</span><br><span class="line">mainForm.设置窗口 = winform_全局;</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-plus美化按钮配色方案</title>
      <link href="/posts/2024/08/ff148a2a.html"/>
      <url>/posts/2024/08/ff148a2a.html</url>
      
        <content type="html"><![CDATA[<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-216.png" alt=""> 代码示例:<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//style 外观样式</span><br><span class="line"></span><br><span class="line">namespace style&#123;</span><br><span class="line">    primaryButton = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xFF8FB2B0;</span><br><span class="line">            hover=0xFF928BB3;</span><br><span class="line">            disabled=0xFFd2d2d2; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    button = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0x668FB2B0;</span><br><span class="line">            hover=0xFF928BB3;</span><br><span class="line">            disabled=0xFFd2d2d2; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    buttonLayuiDefault = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xff16baaa;</span><br><span class="line">            hover=0xFF45C8BB;</span><br><span class="line">            active=0xFF45C8BB;</span><br><span class="line">            disabled=0xFFd2d2d2; </span><br><span class="line">        &#125;</span><br><span class="line">        border = &#123; </span><br><span class="line">            hover = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            active = &#123;bottom=5;color=0xFF00FF00;padding=10;&#125;  </span><br><span class="line">            default = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            disabled= &#123;width=2;color=0xFFd2d2d2;padding=10;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color=&#123;</span><br><span class="line">            default=0xffFFffff;</span><br><span class="line">            hover=0xffFFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">        iconColor = &#123; </span><br><span class="line">            default =0xffFFFF45; //默认状态字体图标颜色</span><br><span class="line">            hover=0x00FFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    buttonLayuiBlue = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xFF1E9FFF;</span><br><span class="line">            hover=0xFF59B8FF;</span><br><span class="line">            disabled=0xFFfbfbfb; </span><br><span class="line">        &#125;</span><br><span class="line">        border = &#123; </span><br><span class="line">            hover = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            active = &#123;bottom=5;color=0xFF00FF00;padding=10;&#125;  </span><br><span class="line">            default = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            disabled= &#123;width=2;color=0xFFd2d2d2;padding=10;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color=&#123;</span><br><span class="line">            default=0xffFFffff;</span><br><span class="line">            hover=0xffFFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">        iconColor = &#123; </span><br><span class="line">            default =0xffFFFF45; //默认状态字体图标颜色</span><br><span class="line">            hover=0x00FFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    buttonLayuiOrange = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xFFFFB800;</span><br><span class="line">            hover=0xFFFFCE4F;</span><br><span class="line">            disabled=0xFFfbfbfb; </span><br><span class="line">        &#125;</span><br><span class="line">        border = &#123; </span><br><span class="line">            hover = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            active = &#123;bottom=5;color=0xFF00FF00;padding=10;&#125;  </span><br><span class="line">            default = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            disabled= &#123;width=2;color=0xFFd2d2d2;padding=10;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color=&#123;</span><br><span class="line">            default=0xffFFffff;</span><br><span class="line">            hover=0xffFFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">        iconColor = &#123; </span><br><span class="line">            default =0xffFFFF45; //默认状态字体图标颜色</span><br><span class="line">            hover=0x00FFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    buttonLayuiRed = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xFFFF5722;</span><br><span class="line">            hover=0xFFFF835C;</span><br><span class="line">            disabled=0xFFfbfbfb; </span><br><span class="line">        &#125;</span><br><span class="line">        border = &#123; </span><br><span class="line">            hover = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            active = &#123;bottom=5;color=0xFF00FF00;padding=10;&#125;  </span><br><span class="line">            default = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            disabled= &#123;width=2;color=0xFFd2d2d2;padding=10;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color=&#123;</span><br><span class="line">            default=0xffFFffff;</span><br><span class="line">            hover=0xffFFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">        iconColor = &#123; </span><br><span class="line">            default =0xffFFFF45; //默认状态字体图标颜色</span><br><span class="line">            hover=0x00FFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    buttonLayuiPurple = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0xFFA233C6;</span><br><span class="line">            hover=0xFFB16FC7;</span><br><span class="line">            disabled=0xFFfbfbfb; </span><br><span class="line">        &#125;</span><br><span class="line">        border = &#123; </span><br><span class="line">            hover = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            active = &#123;bottom=5;color=0xFF00FF00;padding=10;&#125;  </span><br><span class="line">            default = &#123;width=1;color=0x00000000;padding=10;&#125; </span><br><span class="line">            disabled= &#123;width=2;color=0xFFd2d2d2;padding=10;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color=&#123;</span><br><span class="line">            default=0xffFFffff;</span><br><span class="line">            hover=0xffFFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">        iconColor = &#123; </span><br><span class="line">            default =0xffFFFF45; //默认状态字体图标颜色</span><br><span class="line">            hover=0x00FFffff;</span><br><span class="line">            disabled=0xFFd2d2d2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    //#16baaa</span><br><span class="line">    transButton = &#123;</span><br><span class="line">        background=&#123;</span><br><span class="line">            default=0;</span><br><span class="line">            hover=0xFF928BB3;</span><br><span class="line">            disabled=0xFFd2d2d2; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    checkBox = &#123;</span><br><span class="line">        color = &#123; </span><br><span class="line">            hover = 0xFFFF0000; </span><br><span class="line">            active = 0xFF00FF00;</span><br><span class="line">        &#125;</span><br><span class="line">        checked = &#123;</span><br><span class="line">            color = &#123; </span><br><span class="line">                hover = 0xFFFF0000; </span><br><span class="line">                active = 0xFF00FF00;</span><br><span class="line">            &#125;</span><br><span class="line">            text = &#x27;\uF14a&#x27;/*_FA_CHECK_SQUARE*/</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;;</span><br><span class="line">    radio =&#123;</span><br><span class="line">        group = &quot;PinyinMix&quot;;</span><br><span class="line">        color = &#123; </span><br><span class="line">            hover = 0xFFFF0000; </span><br><span class="line">            active = 0xFF00FF00;</span><br><span class="line">        &#125;</span><br><span class="line">        checked = &#123;  </span><br><span class="line">            text = &#x27;\uF058&#x27;/*_FA_CHECK_CIRCLE*/</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;;</span><br><span class="line">    link = &#123;</span><br><span class="line">        color = &#123; </span><br><span class="line">            hover = 0xFFFF0000; </span><br><span class="line">            active = 0xFF00FF00; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dropdown = &#123; </span><br><span class="line">        foreground=&#123;</span><br><span class="line">            default = 0xFFFFFFFF;</span><br><span class="line">            hover= 0xFF8ADBAF;</span><br><span class="line">        &#125;;</span><br><span class="line">        checked = &#123; </span><br><span class="line">            foreground=&#123;</span><br><span class="line">                default = 0xFFDB8A8E;</span><br><span class="line">                hover= 0xFF8ADBAF;</span><br><span class="line">            &#125;; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    key = &#123;</span><br><span class="line">        foreground=&#123;</span><br><span class="line">            default = 0x00FFFFFF;</span><br><span class="line">            hover= 0xFF8ADBAF;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>放在项目的lib下,命名为style.aardio<p>完整示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fonts.fontAwesome;</span><br><span class="line">import style;</span><br><span class="line">import win.ui;</span><br><span class="line">var winform = win.form(text=&quot;CSSP-Cloud自动打包部署工具v1.0.0&quot;;right=1200;bottom=820;bgcolor=16777215;max=false)</span><br><span class="line">//控件为plus,创建控件</span><br><span class="line">winform.add(</span><br><span class="line">btnAdd=&#123;cls=&quot;plus&quot;;text=&#x27;\uF067  添加&#x27;;left=144;top=51;right=224;bottom=81;bgcolor=11580047;dl=1;dt=0.08;font=LOGFONT(name=&#x27;FontAwesome&#x27;);notify=1;tabstop=1;z=4&#125;;</span><br><span class="line">btnDel=&#123;cls=&quot;plus&quot;;text=&#x27;\uF1F8  删除&#x27;;left=317;top=51;right=397;bottom=81;bgcolor=11580047;disabled=1;dl=1;dt=0.08;font=LOGFONT(name=&#x27;FontAwesome&#x27;);notify=1;tabstop=1;z=6&#125;;</span><br><span class="line">btnEdit=&#123;cls=&quot;plus&quot;;text=&#x27;\uF044  修改&#x27;;left=230;top=51;right=310;bottom=81;bgcolor=11580047;disabled=1;dl=1;dt=0.08;font=LOGFONT(name=&#x27;FontAwesome&#x27;);notify=1;tabstop=1;z=5&#125;;</span><br><span class="line">btnExport=&#123;cls=&quot;plus&quot;;text=&#x27;\uF019 导出&#x27;;left=404;top=51;right=484;bottom=81;bgcolor=11580047;dl=1;dt=0.08;font=LOGFONT(name=&#x27;FontAwesome&#x27;);notify=1;tabstop=1;z=7&#125;;</span><br><span class="line">btnRefresh=&#123;cls=&quot;plus&quot;;text=&#x27;\uF0E2  刷新&#x27;;left=57;top=51;right=137;bottom=81;bgcolor=11580047;dl=1;dt=0.08;font=LOGFONT(name=&#x27;FontAwesome&#x27;);notify=1;tabstop=1;z=3&#125;;</span><br><span class="line">)</span><br><span class="line">//应用配色方案</span><br><span class="line">winform.btnRefresh.skin(style.buttonLayuiDefault);</span><br><span class="line">winform.btnAdd.skin(style.buttonLayuiBlue);</span><br><span class="line">winform.btnEdit.skin(style.buttonLayuiOrange);</span><br><span class="line">winform.btnDel.skin(style.buttonLayuiRed);</span><br><span class="line">winform.btnExport.skin(style.buttonLayuiPurple);</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://aardio.online/thread-165.htm">https://aardio.online/thread-165.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-国密算法SM4库-加解密</title>
      <link href="/posts/2024/08/7c8e411f.html"/>
      <url>/posts/2024/08/7c8e411f.html</url>
      
        <content type="html"><![CDATA[<p>aardio-SM4库源码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SM4&#123;</span><br><span class="line">    ctor( key/*输入构造函数所需要的参数*/ )&#123;</span><br><span class="line">        this.secrykey=key;</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 密钥拓展 */    //key  byte[]</span><br><span class="line">    keyGenerate=function( key) &#123;</span><br><span class="line">        var key_r = &#123;&#125;;//轮密钥rk_i</span><br><span class="line">        var key_temp = &#123;&#125;;</span><br><span class="line">        var box_in, box_out;//盒变换输入输出</span><br><span class="line">        var FK = &#123;0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc&#125;;</span><br><span class="line">        var CK = &#123;</span><br><span class="line">                0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,</span><br><span class="line">                0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,</span><br><span class="line">                0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,</span><br><span class="line">                0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,</span><br><span class="line">                0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,</span><br><span class="line">                0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,</span><br><span class="line">                0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,</span><br><span class="line">                0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279</span><br><span class="line">        &#125;;</span><br><span class="line">        //将输入的密钥每32比特合并，并异或FK</span><br><span class="line">        for(i=1;4;1)&#123;</span><br><span class="line">            key_temp[i] = this.jointBytes(key[4 * (i-1)+1], key[4 * (i-1)+2], key[4 * (i-1)+3], key[4 * (i-1)+4]);</span><br><span class="line">            key_temp[i] = key_temp[i] ^ FK[i];</span><br><span class="line">        &#125;</span><br><span class="line">        //32轮密钥拓展</span><br><span class="line">        for (i=1;32;1) &#123;</span><br><span class="line">            box_in = key_temp[2] ^ key_temp[3] ^ key_temp[4] ^ CK[i];</span><br><span class="line">            box_out = this.sBox(box_in);</span><br><span class="line">            key_r[i] = key_temp[1] ^ box_out ^ this.shift(box_out, 13) ^ this.shift(box_out, 23);</span><br><span class="line">            key_temp[1] = key_temp[2];</span><br><span class="line">            key_temp[2] = key_temp[3];</span><br><span class="line">            key_temp[3] = key_temp[4];</span><br><span class="line">            key_temp[4] = key_r[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return key_r;</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 加解密主模块 */</span><br><span class="line">    sm4Main=function ( input, key_r, mod) &#123;</span><br><span class="line">        var text = &#123;&#125;;//32比特字</span><br><span class="line">        //将输入以32比特分组</span><br><span class="line">        for (i=1;4;1) &#123;</span><br><span class="line">            text[i] = this.jointBytes(input[4 * (i-1)+1], input[4 * (i-1)+1 + 1], input[4 * (i-1)+1 + 2], input[4 * (i-1)+1 + 3]);</span><br><span class="line">        &#125;</span><br><span class="line">        var box_input, box_output;//盒变换输入和输出</span><br><span class="line">        for (i=1;32;1) &#123;</span><br><span class="line">            var index = (mod == 0) ? i : (33 - i);//通过改变key_r的顺序改变模式</span><br><span class="line">            box_input = text[2] ^ text[3] ^ text[4] ^ key_r[index];</span><br><span class="line">            box_output = this.sBox(box_input);</span><br><span class="line">            var temp = text[1] ^ box_output ^ this.shift(box_output, 2) ^ this.shift(box_output, 10) ^ this.shift(box_output, 18) ^ this.shift(box_output, 24);</span><br><span class="line">            text[1] = text[2];</span><br><span class="line">            text[2] = text[3];</span><br><span class="line">            text[3] = text[4];</span><br><span class="line">            text[4] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        var output =&#123;&#125;;//输出</span><br><span class="line">        //将结果的32比特字拆分</span><br><span class="line">        for (i=4;1;-1) &#123;</span><br><span class="line">            ..table.append(output,this.splitInt(text[i]))</span><br><span class="line">        &#125;</span><br><span class="line">        return output;</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 加密 */</span><br><span class="line">    encrypt=function( plaintext) &#123;</span><br><span class="line">           this.key_r=this.keyGenerate(this.secrykey);</span><br><span class="line">        return this.sm4Main(plaintext, this.key_r, 0);</span><br><span class="line">    &#125;;</span><br><span class="line">    encryptBase64=function(plaintext)&#123;</span><br><span class="line">        import crypt</span><br><span class="line">        var cc=this.encrypt(plaintext)</span><br><span class="line">        var s=&quot;&quot;</span><br><span class="line">        for(i=1;#cc;1)&#123;</span><br><span class="line">            s=s++..string.pack(cc[i])</span><br><span class="line">        &#125;</span><br><span class="line">        return crypt.encodeBin(s)</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 解密 */</span><br><span class="line">    decrypt=function( ciphertext) &#123;</span><br><span class="line">        this.key_r=this.keyGenerate(this.secrykey);</span><br><span class="line">        return this.sm4Main(ciphertext, this.key_r, 1);</span><br><span class="line">    &#125;;</span><br><span class="line">    decryptStr=function(ciphertext)&#123;</span><br><span class="line">        import crypt</span><br><span class="line">        var cc=this.decrypt(crypt.decodeBin(ciphertext))</span><br><span class="line">        var s=&quot;&quot;</span><br><span class="line">        for(i=1;#cc;1)&#123;</span><br><span class="line">            s=s++..string.pack(cc[i])</span><br><span class="line">        &#125;</span><br><span class="line">        return s</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 将32比特数拆分成4个8比特数 */</span><br><span class="line">    splitInt=function( n) &#123;</span><br><span class="line">        return &#123;(n &gt;&gt; 24) &amp; 0xFF, (n &gt;&gt; 16)&amp; 0xFF, (n &gt;&gt; 8)&amp; 0xFF,  n&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 将4个8比特数合并成32比特数 */</span><br><span class="line">     jointBytes=function( byte_0,  byte_1,  byte_2,  byte_3) &#123;</span><br><span class="line">         var s= ..string.format(&quot;%02x&quot;, byte_0 &amp; 0xFF)++</span><br><span class="line">         ..string.format(&quot;%02x&quot;,byte_1 &amp; 0xFF)++</span><br><span class="line">         ..string.format(&quot;%02x&quot;,byte_2 &amp; 0xFF)++</span><br><span class="line">         ..string.format(&quot;%02x&quot;,byte_3 &amp; 0xFF);</span><br><span class="line">         return tonumber(s,16); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    /* S盒变换 */</span><br><span class="line">    sBox=function( box_input) &#123;</span><br><span class="line">        //s盒的参数</span><br><span class="line">        var SBOX = &#123;</span><br><span class="line">                0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A,</span><br><span class="line">                0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF,</span><br><span class="line">                0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80,</span><br><span class="line">                0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19,</span><br><span class="line">                0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D,</span><br><span class="line">                0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00,</span><br><span class="line">                0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40,</span><br><span class="line">                0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55,</span><br><span class="line">                0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23,</span><br><span class="line">                0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C,</span><br><span class="line">                0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A,</span><br><span class="line">                0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A,</span><br><span class="line">                0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D,</span><br><span class="line">                0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48</span><br><span class="line">        &#125;;</span><br><span class="line">        var temp = this.splitInt(box_input);//拆分32比特数</span><br><span class="line">        var output = &#123;&#125;;//单个盒变换输出</span><br><span class="line">        //盒变换</span><br><span class="line">        for (i=1;4;1) &#123;</span><br><span class="line">            output[i] =  SBOX[(temp[i] &amp; 0xFF)+1];</span><br><span class="line">        &#125;</span><br><span class="line">        //将4个8位字节合并为一个字作为盒变换输出</span><br><span class="line">        return this.jointBytes(output[1], output[2], output[3], output[4]);</span><br><span class="line">    &#125;;</span><br><span class="line">    /* 将input左移n位 */</span><br><span class="line">    shift=function( input,  n) &#123;</span><br><span class="line">        return (input &gt;&gt;&gt; (32 - n)) | (input &lt;&lt; n);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网友分享的另一个SM4库，性能要低些，仅供参考。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SM4 加密解密库 SM4.aardio</span><br><span class="line"></span><br><span class="line">class SM4&#123;</span><br><span class="line">    ctor( key )&#123;</span><br><span class="line">    this.rk = r_key(key);</span><br><span class="line">&#125;;</span><br><span class="line">    encrypt = function(inputData)&#123;</span><br><span class="line">    return  encrypt (inputData,this.rk); </span><br><span class="line">    &#125;</span><br><span class="line">    decrypt = function (inputData)&#123;</span><br><span class="line">        return  decrypt (inputData,this.rk);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace SM4 &#123;</span><br><span class="line">    // Expanded SM4 box table</span><br><span class="line">    SM4_BOXES = &#123;</span><br><span class="line">        0xd6; 0x90; 0xe9; 0xfe; 0xcc; 0xe1; 0x3d; 0xb7; 0x16; 0xb6; 0x14; 0xc2; 0x28; 0xfb; 0x2c; 0x05;</span><br><span class="line">        0x2b; 0x67; 0x9a; 0x76; 0x2a; 0xbe; 0x04; 0xc3; 0xaa; 0x44; 0x13; 0x26; 0x49; 0x86; 0x06; 0x99;</span><br><span class="line">        0x9c; 0x42; 0x50; 0xf4; 0x91; 0xef; 0x98; 0x7a; 0x33; 0x54; 0x0b; 0x43; 0xed; 0xcf; 0xac; 0x62;</span><br><span class="line">        0xe4; 0xb3; 0x1c; 0xa9; 0xc9; 0x08; 0xe8; 0x95; 0x80; 0xdf; 0x94; 0xfa; 0x75; 0x8f; 0x3f; 0xa6;</span><br><span class="line">        0x47; 0x07; 0xa7; 0xfc; 0xf3; 0x73; 0x17; 0xba; 0x83; 0x59; 0x3c; 0x19; 0xe6; 0x85; 0x4f; 0xa8;</span><br><span class="line">        0x68; 0x6b; 0x81; 0xb2; 0x71; 0x64; 0xda; 0x8b; 0xf8; 0xeb; 0x0f; 0x4b; 0x70; 0x56; 0x9d; 0x35;</span><br><span class="line">        0x1e; 0x24; 0x0e; 0x5e; 0x63; 0x58; 0xd1; 0xa2; 0x25; 0x22; 0x7c; 0x3b; 0x01; 0x21; 0x78; 0x87;</span><br><span class="line">        0xd4; 0x00; 0x46; 0x57; 0x9f; 0xd3; 0x27; 0x52; 0x4c; 0x36; 0x02; 0xe7; 0xa0; 0xc4; 0xc8; 0x9e;</span><br><span class="line">        0xea; 0xbf; 0x8a; 0xd2; 0x40; 0xc7; 0x38; 0xb5; 0xa3; 0xf7; 0xf2; 0xce; 0xf9; 0x61; 0x15; 0xa1;</span><br><span class="line">        0xe0; 0xae; 0x5d; 0xa4; 0x9b; 0x34; 0x1a; 0x55; 0xad; 0x93; 0x32; 0x30; 0xf5; 0x8c; 0xb1; 0xe3;</span><br><span class="line">        0x1d; 0xf6; 0xe2; 0x2e; 0x82; 0x66; 0xca; 0x60; 0xc0; 0x29; 0x23; 0xab; 0x0d; 0x53; 0x4e; 0x6f;</span><br><span class="line">        0xd5; 0xdb; 0x37; 0x45; 0xde; 0xfd; 0x8e; 0x2f; 0x03; 0xff; 0x6a; 0x72; 0x6d; 0x6c; 0x5b; 0x51;</span><br><span class="line">        0x8d; 0x1b; 0xaf; 0x92; 0xbb; 0xdd; 0xbc; 0x7f; 0x11; 0xd9; 0x5c; 0x41; 0x1f; 0x10; 0x5a; 0xd8;</span><br><span class="line">        0x0a; 0xc1; 0x31; 0x88; 0xa5; 0xcd; 0x7b; 0xbd; 0x2d; 0x74; 0xd0; 0x12; 0xb8; 0xe5; 0xb4; 0xb0;</span><br><span class="line">        0x89; 0x69; 0x97; 0x4a; 0x0c; 0x96; 0x77; 0x7e; 0x65; 0xb9; 0xf1; 0x09; 0xc5; 0x6e; 0xc6; 0x84;</span><br><span class="line">        0x18; 0xf0; 0x7d; 0xec; 0x3a; 0xdc; 0x4d; 0x20; 0x79; 0xee; 0x5f; 0x3e; 0xd7; 0xcb; 0x39; 0x48</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    // System parameter</span><br><span class="line">    SM4_FK = &#123;0xa3b1bac6; 0x56aa3350; 0x677d9197; 0xb27022dc&#125;;</span><br><span class="line">        </span><br><span class="line">    // fixed parameter</span><br><span class="line">    SM4_CK = &#123;</span><br><span class="line">        0x00070e15; 0x1c232a31; 0x383f464d; 0x545b6269;</span><br><span class="line">        0x70777e85; 0x8c939aa1; 0xa8afb6bd; 0xc4cbd2d9;</span><br><span class="line">        0xe0e7eef5; 0xfc030a11; 0x181f262d; 0x343b4249;</span><br><span class="line">        0x50575e65; 0x6c737a81; 0x888f969d; 0xa4abb2b9;</span><br><span class="line">        0xc0c7ced5; 0xdce3eaf1; 0xf8ff060d; 0x141b2229;</span><br><span class="line">        0x30373e45; 0x4c535a61; 0x686f767d; 0x848b9299;</span><br><span class="line">        0xa0a7aeb5; 0xbcc3cad1; 0xd8dfe6ed; 0xf4fb0209;</span><br><span class="line">        0x10171e25; 0x2c333a41; 0x484f565d; 0x646b7279</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    //8位查S盒</span><br><span class="line">    s_box = function (a) &#123;</span><br><span class="line">       // ah = (a &amp; 0xf0) &gt;&gt;&gt; 4;      //高4位</span><br><span class="line">        //al = a &amp; 0x0f;              //低4位</span><br><span class="line">        //return SM4_BOXES[ah*16+al+1] ;</span><br><span class="line">        return  SM4_BOXES[a + 1]; </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    //非线性变换T</span><br><span class="line">    fun_T = function (ta)&#123;</span><br><span class="line">        tb = &#123;</span><br><span class="line">            s_box((ta &amp; 0xff000000) &gt;&gt;&gt; 24);    ///取高8位，进行S盒变换</span><br><span class="line">            s_box((ta &amp; 0x00ff0000) &gt;&gt;&gt; 16);    ///取中高8位，进行S盒变换</span><br><span class="line">            s_box((ta &amp; 0x0000ff00) &gt;&gt;&gt; 8 );    ///取中低8位，进行S盒变换</span><br><span class="line">            s_box(ta &amp; 0x000000ff );         ///取低8位，进行S盒变换</span><br><span class="line">        &#125;</span><br><span class="line">        return tb[1]&lt;&lt;24 | tb[2]&lt;&lt;16 | tb[3]&lt;&lt; 8 | tb[4];    ///连接成32位</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //循环左移</span><br><span class="line">    bit_rol = function (n,s)&#123; </span><br><span class="line">        return (n &lt;&lt; s) | ( n &gt;&gt;&gt; (32 - s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //轮密钥</span><br><span class="line">    r_key = function (key)&#123;</span><br><span class="line">        keyBuf = ..raw.buffer(16,key);</span><br><span class="line">        mk = &#123; //拆分密钥为4个32位数存到初始密钥MK</span><br><span class="line">            (keyBuf[1]&lt;&lt;24 | keyBuf[2]&lt;&lt;16 | keyBuf[3]&lt;&lt;8 | keyBuf[4]); // &amp;0xFFFFFFFF</span><br><span class="line">            (keyBuf[5]&lt;&lt;24 | keyBuf[6]&lt;&lt;16 | keyBuf[7]&lt;&lt;8 | keyBuf[8]);</span><br><span class="line">            (keyBuf[9]&lt;&lt;24 | keyBuf[10]&lt;&lt;16 | keyBuf[11]&lt;&lt;8 | keyBuf[12]);</span><br><span class="line">            (keyBuf[13]&lt;&lt;24 | keyBuf[14]&lt;&lt;16 | keyBuf[15]&lt;&lt;8 | keyBuf[16]);</span><br><span class="line">        &#125;</span><br><span class="line">        tk = &#123;&#125;;  //临时表tk</span><br><span class="line">        for(i=1;4;1)&#123;</span><br><span class="line">            tk[i] = mk[i] ^ SM4_FK[i];   //初始密钥MK和系统参数FK作异或运算得到tk1-tk4</span><br><span class="line">        &#125;</span><br><span class="line">        rk = &#123;&#125;;</span><br><span class="line">        for(i=1;32;1)&#123;    ///轮密钥tk5-tk36</span><br><span class="line">            tb = fun_T( tk[i+1] ^ tk[i+2] ^ tk[i+3] ^ SM4_CK[i] );  //后3个字与固定参数异或，得到的32位的值，再进行变换</span><br><span class="line">            tk[i+4] = tk[i] ^ (tb ^ bit_rol(tb,13) ^ bit_rol(tb,23));  ///得到轮密钥tk5-tk36</span><br><span class="line">            rk[i] = tk[i+4];    //子密钥rk1-32</span><br><span class="line">        &#125;</span><br><span class="line">        return rk;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">//线性变换L</span><br><span class="line">    fun_L = function (tb)&#123;</span><br><span class="line">        return (tb ^ bit_rol(tb,2) ^ bit_rol(tb,10) ^ bit_rol(tb,18) ^ bit_rol(tb,24));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //尾部填充</span><br><span class="line">    pkcs7_padding = function(data, block=16)&#123;</span><br><span class="line">            var n = block - (#data % block )</span><br><span class="line">            return  data ++ ..string.repeat(n, n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //去除尾部填充</span><br><span class="line">    pkcs7_unPadding = function(data)&#123;</span><br><span class="line">        return  ..string.left(data, #data - tonumber(..string.right(data,2),16)*2 );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //32次迭代,mode=1加密,mode=0解密</span><br><span class="line">    iterate32 = function (rk,d1,d2,d3,d4,mode = 1)&#123;</span><br><span class="line">        dataTable = &#123;d1,d2,d3,d4&#125;;</span><br><span class="line">        for(i=1;32;1)&#123;</span><br><span class="line">            if(mode=1)&#123;</span><br><span class="line">                a = ((dataTable[i+1] ^ dataTable[i+2] ^ dataTable[i+3]) ^ rk[i]) // &amp;0xFFFFFFFF</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                a = ((dataTable[i+1] ^ dataTable[i+2] ^ dataTable[i+3]) ^ rk[33-i]) </span><br><span class="line">            &#125;</span><br><span class="line">            dataTable[i+4] = dataTable[i] ^ fun_L(fun_T(a))    ///先T变换再L变换</span><br><span class="line">        &#125;</span><br><span class="line">        return ..string.format(&quot;%08x&quot;,dataTable[36]) ++ ..string.format(&quot;%08x&quot;,dataTable[35]) ++ ..string.format(&quot;%08x&quot;,dataTable[34]) ++ ..string.format(&quot;%08x&quot;,dataTable[33])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    encrypt = function (inputData,rk)&#123;</span><br><span class="line">        inputData = pkcs7_padding(inputData,16);</span><br><span class="line">        var data = &#123;&#125;;</span><br><span class="line">        inputDataBuf = ..raw.buffer(inputData);</span><br><span class="line">        for(i=0;#inputDataBuf/16 - 1; 1)&#123;</span><br><span class="line">            var a1 = inputDataBuf[i*16+1]&lt;&lt;24 | inputDataBuf[i*16+2]&lt;&lt;16 | inputDataBuf[i*16+3]&lt;&lt;8 | inputDataBuf[i*16+4]; //&amp; 0x0ffffffff</span><br><span class="line">            var a2 = inputDataBuf[i*16+5]&lt;&lt;24 | inputDataBuf[i*16+6]&lt;&lt;16 | inputDataBuf[i*16+7]&lt;&lt;8 | inputDataBuf[i*16+8];</span><br><span class="line">            var a3 = inputDataBuf[i*16+9]&lt;&lt;24 | inputDataBuf[i*16+10]&lt;&lt;16 | inputDataBuf[i*16+11]&lt;&lt;8 | inputDataBuf[i*16+12];</span><br><span class="line">            var a4 = inputDataBuf[i*16+13]&lt;&lt;24 | inputDataBuf[i*16+14]&lt;&lt;16 | inputDataBuf[i*16+15]&lt;&lt;8 | inputDataBuf[i*16+16];</span><br><span class="line">            ..table.push(data, iterate32(rk,a1,a2,a3,a4,1));</span><br><span class="line">        &#125;</span><br><span class="line">        return ..string.join(data); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    decrypt = function (inputData,rk)&#123;</span><br><span class="line">        var data = &#123;&#125;;</span><br><span class="line">        for(i=1;#inputData; 32)&#123;</span><br><span class="line">            var a1 = tonumber(..string.slice( inputData,i,i+7),16);</span><br><span class="line">            var a2 = tonumber(..string.slice( inputData,i+8,i+15),16);</span><br><span class="line">            var a3 = tonumber(..string.slice( inputData,i+16,i+23),16);</span><br><span class="line">            var a4 = tonumber(..string.slice( inputData,i+24,i+31),16);</span><br><span class="line">            ..table.push(data, iterate32( rk,a1,a2,a3,a4,0));</span><br><span class="line">        &#125;</span><br><span class="line">        return pkcs7_unPadding(..string.join(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试该算法的代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fsys.file</span><br><span class="line">import crypt;</span><br><span class="line">console.open();</span><br><span class="line">key = &quot;abcd123456789012&quot;</span><br><span class="line">inputData = &quot;abcdefghijklmnop123456789012345678&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var sm = sm4(key)</span><br><span class="line">console.dump(sm.encrypt(inputData))</span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    sm.encrypt(inputData)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;文件内加密耗时：&quot;++time.tick()-tm)</span><br><span class="line">var odata = sm.encrypt(inputData)</span><br><span class="line"></span><br><span class="line">import SM4</span><br><span class="line">var sm = SM4(key)</span><br><span class="line">console.dump(sm.encrypt(inputData))</span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    sm.encrypt(inputData)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;库加密耗时：&quot;++time.tick()-tm)</span><br><span class="line"></span><br><span class="line">var sm = sm4(key)</span><br><span class="line">console.dump(sm.decrypt (odata))</span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    sm.decrypt (odata)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;文件内解密耗时：&quot;++time.tick()-tm)</span><br><span class="line"></span><br><span class="line">var sm = SM4(key)</span><br><span class="line">console.dump(sm.decrypt(odata))</span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    sm.decrypt(odata)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;库解密耗时：&quot;++time.tick()-tm)</span><br><span class="line"></span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    var sm = sm4(key)</span><br><span class="line">    sm.encrypt(inputData)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;循环创建对象耗时：&quot;++time.tick()-tm)</span><br><span class="line"></span><br><span class="line">var tm = time.tick()</span><br><span class="line">for(i=1;10000;1)&#123;</span><br><span class="line">    var sm = SM4(key)</span><br><span class="line">    sm.encrypt(inputData)</span><br><span class="line">&#125;</span><br><span class="line">console.dump(&quot;循环创建对象耗时：&quot;++time.tick()-tm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.pause()</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-215.png" alt=""> ]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 加解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> 国密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-mongodb的操作Demo</title>
      <link href="/posts/2024/08/6731eb7.html"/>
      <url>/posts/2024/08/6731eb7.html</url>
      
        <content type="html"><![CDATA[<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-213.png" alt="">   源代码:<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;mongodbDemo&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=15;top=11;right=743;bottom=446;edge=1;hscroll=1;multiline=1;vscroll=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line"></span><br><span class="line">import process.popen</span><br><span class="line">import fsys</span><br><span class="line">var path=io.fullpath(&quot;/mongod.exe&quot;)</span><br><span class="line">fsys.createDir(&quot;c:\testdata&quot;)</span><br><span class="line">var prcs = process.popen(path,&quot;--dbpath  c:\testdata&quot;)</span><br><span class="line"></span><br><span class="line">prcs.logResponse(winform.edit);</span><br><span class="line">sleep(3000)</span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line">dll := raw.loadDll(&quot;\libmongoc-1.0.dll&quot;, ,&quot;cdecl&quot;);</span><br><span class="line">mongoc_init = dll.api(&quot;mongoc_init&quot;, &quot;bool()&quot;);</span><br><span class="line">mongoc_cleanup = dll.api(&quot;mongoc_cleanup&quot;, &quot;bool()&quot;);</span><br><span class="line">mongoc_client_new = dll.api(&quot;mongoc_client_new&quot;, &quot;int(string a1)&quot;);</span><br><span class="line">mongoc_client_destroy = dll.api(&quot;mongoc_client_destroy&quot;, &quot;int(int a1)&quot;);</span><br><span class="line">mongoc_client_get_database = dll.api(&quot;mongoc_client_get_database&quot;, &quot;int(int a1,string a2)&quot;);</span><br><span class="line">mongoc_database_destroy = dll.api(&quot;mongoc_database_destroy&quot;, &quot;int(int a1)&quot;);</span><br><span class="line">mongoc_client_get_collection = dll.api(&quot;mongoc_client_get_collection&quot;, &quot;int(int a1,string a2,string a3)&quot;);</span><br><span class="line">mongoc_collection_destroy = dll.api(&quot;mongoc_collection_destroy&quot;, &quot;int(int a1)&quot;);</span><br><span class="line">mongoc_collection_find = dll.api(&quot;mongoc_collection_find&quot;, &quot;int(int a1,int a2,int a3,int a4,int a5,int a6,int a7,int a8)&quot;);</span><br><span class="line">mongoc_cursor_next = dll.api(&quot;mongoc_cursor_next&quot;, &quot;byte(int a1,int &amp;a2)&quot;);</span><br><span class="line">mongoc_collection_insert = dll.api(&quot;mongoc_collection_insert&quot;, &quot;byte(int a1,int a2,int a3,int a4,struct &amp;a5)&quot;);</span><br><span class="line">mongoc_collection_update =dll.api(&quot;mongoc_collection_update&quot;, &quot;byte(int a1,int a2,int a3,int a4,int a5,struct &amp;a6)&quot;);</span><br><span class="line">mongoc_collection_remove = dll.api(&quot;mongoc_collection_remove&quot;, &quot;byte(int a1,int a2,int a3,int a4,struct &amp;a5)&quot;);</span><br><span class="line">mongoc_client_command_simple = dll.api(&quot;mongoc_client_command_simple&quot;, &quot;byte(int a1,string a2,int a3,int a4,int a5,struct &amp;a6)&quot;);</span><br><span class="line">mongoc_collection_command_simple = dll.api(&quot;mongoc_collection_command_simple&quot;, &quot;byte(int a1,int a2,int a3,int a4,struct &amp;a5)&quot;);</span><br><span class="line">mongoc_database_command_simple = dll.api(&quot;mongoc_database_command_simple&quot;, &quot;int(int a1,int a2,int a3,int a4,int a5,struct &amp;a6)&quot;);</span><br><span class="line"></span><br><span class="line">bdll := raw.loadDll(&quot;\libbson-1.0.dll&quot;,,&quot;cdecl&quot;);</span><br><span class="line">bcon_new = bdll.api(&quot;bcon_new&quot;, &quot;int()&quot;);</span><br><span class="line">bson_destroy = bdll.api(&quot;bson_destroy&quot;, &quot;int(int a1)&quot;);</span><br><span class="line">bson_oid_init = bdll.api(&quot;bson_oid_init&quot;, &quot;int(int &amp;a1,int a2)&quot;);</span><br><span class="line">bson_as_json = bdll.api(&quot;bson_as_json&quot;, &quot;string(int a1,int a2)&quot;);</span><br><span class="line">bson_append_utf8 =bdll.api(&quot;bson_append_utf8&quot;, &quot;int(int a1,string a2,int a3,string a4,int a5)&quot;);</span><br><span class="line">bson_append_oid =bdll.api(&quot;bson_append_oid&quot;, &quot;int(int a1,string a2,int a3,int &amp;a4)&quot;);</span><br><span class="line">bson_new_from_json =bdll.api(&quot;bson_new_from_json&quot;, &quot;int(string a1,int a2,struct &amp;a3)&quot;);</span><br><span class="line"></span><br><span class="line">class Bsonerr&#123;</span><br><span class="line">    INT domain=0;</span><br><span class="line">    INT code=0;</span><br><span class="line">    byte  err[504];</span><br><span class="line">&#125;</span><br><span class="line">bserr=Bsonerr();</span><br><span class="line">//初始化</span><br><span class="line">if (mongoc_init()) console.log(&quot;初始化成功&quot;);</span><br><span class="line">//连接mongodb获得client句柄</span><br><span class="line">client = mongoc_client_new(&quot;mongodb://localhost:27017&quot;);</span><br><span class="line">console.log(&quot;client&quot;, client);</span><br><span class="line">//执行client命令操作（ping）</span><br><span class="line">import web.json</span><br><span class="line">var tab=&#123;ping=1&#125;</span><br><span class="line">json=web.json.stringify(tab);</span><br><span class="line">commad=bson_new_from_json(json,-1,bserr);</span><br><span class="line">if(!commad)&#123;</span><br><span class="line">    console.log(commad,&quot;bson&quot;,bserr.code,bserr.err)</span><br><span class="line">&#125;</span><br><span class="line">var a=bcon_new();</span><br><span class="line">r=mongoc_client_command_simple (client, &quot;admin&quot;, commad, 0, a, bserr);</span><br><span class="line">bson_destroy(commad)</span><br><span class="line">console.logPause(bson_as_json(a,0));</span><br><span class="line">if(!r)&#123;</span><br><span class="line">    console.log(r,bserr.code,bserr.err);</span><br><span class="line">    console.logPause(&quot;连接错误，程序将关闭&quot;);</span><br><span class="line">    //销毁client句柄</span><br><span class="line">    mongoc_client_destroy(client);</span><br><span class="line">    //销毁初始化</span><br><span class="line">    ab = mongoc_cleanup();</span><br><span class="line">    return win.quitMessage(); </span><br><span class="line">&#125;</span><br><span class="line">//连接数据库获得database句柄</span><br><span class="line">database = mongoc_client_get_database(client, &quot;test&quot;);</span><br><span class="line">console.log(&quot;database&quot;, database);</span><br><span class="line">//连接集合获得collection句柄</span><br><span class="line">collection = mongoc_client_get_collection(client, &quot;testa&quot;, &quot;demo&quot;);</span><br><span class="line">console.log(&quot;collection&quot;, collection);</span><br><span class="line">console.pause();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建insert空bson</span><br><span class="line">insert=bcon_new();</span><br><span class="line">var a=0;</span><br><span class="line">//获取oid</span><br><span class="line">r,a=bson_oid_init(a,0);</span><br><span class="line">//空bson追加_id字段和oid值</span><br><span class="line">bson_append_oid(insert,&quot;_id&quot;,-1,a);</span><br><span class="line"></span><br><span class="line">//bson_append_utf8(insert,&quot;_id&quot;,-1,&quot;65af647f0000000080eef4a2&quot;,-1)</span><br><span class="line">//json追加aaa字段和bbbbbbb值</span><br><span class="line">bson_append_utf8(insert,&quot;aaa&quot;,-1,&quot;bbbbbbb&quot;,-1);</span><br><span class="line"></span><br><span class="line">//插入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r=mongoc_collection_insert(collection,0,insert,0,bserr);</span><br><span class="line">if(!r)&#123;</span><br><span class="line">    console.log(r,bserr.code,bserr.err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//更新</span><br><span class="line">//从json文本创建udate的bson</span><br><span class="line">json=&#x27;&#123;&quot;time&quot;:1705890869470,&quot;data&quot;:&#123;&quot;live_addr&quot;:&quot;省县街道路2号1&quot;,&quot;live_street&quot;:&quot;镇&quot;,&quot;name&quot;:&quot;张三&quot;,&quot;phone_number&quot;:&quot;1234567890&quot;,&quot;pid&quot;:&quot;000000000000000000&quot;,&quot;temp_addr&quot;:&quot;街道路2号1&quot;&#125;,&quot;code&quot;:200,&quot;errMsg&quot;:null,&quot;errCode&quot;:null,&quot;msg&quot;:&quot;success&quot;&#125;&#x27;</span><br><span class="line">update=bson_new_from_json(json,-1,bserr);</span><br><span class="line">if(!update)&#123;</span><br><span class="line">    console.log(update,&quot;bson&quot;,bserr.code,bserr.err)</span><br><span class="line">&#125;</span><br><span class="line">console.pause();</span><br><span class="line"></span><br><span class="line">//用update的bson更新之前insert的bson</span><br><span class="line">r=mongoc_collection_update (collection, 0, insert, update, 0, bserr)</span><br><span class="line">if(!r)&#123;</span><br><span class="line">    console.log(r,bserr.code,bserr.err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//销毁insert的bson</span><br><span class="line">bson_destroy(insert);</span><br><span class="line">//销毁update的bson</span><br><span class="line">bson_destroy(update);</span><br><span class="line"></span><br><span class="line">//查询</span><br><span class="line">console.pause();</span><br><span class="line">//创建query空bson</span><br><span class="line">query = bcon_new();</span><br><span class="line">console.pause();</span><br><span class="line">json=&#x27;&#123;&quot;data.name&quot;:&quot;张三&quot;&#125;&#x27;</span><br><span class="line">query=bson_new_from_json(json,-1,bserr)</span><br><span class="line"></span><br><span class="line">console.pause()</span><br><span class="line">console.more(1,true)</span><br><span class="line">console.logPause(bson_as_json(query,0))</span><br><span class="line">cursor = mongoc_collection_find(collection, 0, 0, 3, 0, query, 0, 0);</span><br><span class="line">console.log(&quot;cursor&quot;, cursor);</span><br><span class="line"></span><br><span class="line">//查询结果</span><br><span class="line">var a=0;</span><br><span class="line">result,a= mongoc_cursor_next(cursor, a);</span><br><span class="line">console.log(&quot;result&quot;, result,a);</span><br><span class="line">console.pause()</span><br><span class="line">while (result) &#123;</span><br><span class="line">    str=bson_as_json(a,0);</span><br><span class="line">    console.log(str);</span><br><span class="line">    result,a= mongoc_cursor_next(cursor, a);</span><br><span class="line">&#125;</span><br><span class="line">//销毁query空bson</span><br><span class="line">bson_destroy(query);</span><br><span class="line">//删除</span><br><span class="line"></span><br><span class="line">json=&#x27;&#123;&quot;_id&quot;:&quot;65af909e000000004f5f0803&quot;&#125;&#x27;</span><br><span class="line">remove=bson_new_from_json(json,-1,bserr);</span><br><span class="line"></span><br><span class="line">if(!remove)&#123;</span><br><span class="line">    console.log(&quot;转换json文本错误&quot;,bserr.code,bserr.err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.pause();</span><br><span class="line">r=mongoc_collection_remove(collection,0,remove,0,bserr);</span><br><span class="line">if(!r)&#123;</span><br><span class="line">    console.log(r,bserr.code,bserr.err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//销毁remove的bson</span><br><span class="line">bson_destroy(remove);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//销毁collection句柄</span><br><span class="line">mongoc_collection_destroy(collection);</span><br><span class="line">//销毁database句柄</span><br><span class="line">mongoc_database_destroy(database);</span><br><span class="line">//销毁client句柄</span><br><span class="line">mongoc_client_destroy(client);</span><br><span class="line">//销毁初始化</span><br><span class="line">ab = mongoc_cleanup();</span><br><span class="line">console.log(ab);</span><br><span class="line">console.pause();</span><br><span class="line"></span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-定时器电子钟代码示例</title>
      <link href="/posts/2024/08/223ea542.html"/>
      <url>/posts/2024/08/223ea542.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = win.form(text=&quot;aardio工程-电子钟&quot;;right=643;bottom=262)</span><br><span class="line">winform.add(</span><br><span class="line">static=&#123;cls=&quot;static&quot;;left=16;top=12;right=635;bottom=249;align=&quot;center&quot;;center=1;font=LOGFONT(h=-37;name=&#x27;黑体&#x27;);transparent=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">//定时器电子钟</span><br><span class="line"> </span><br><span class="line">winform.setInterval(</span><br><span class="line">        function()&#123;</span><br><span class="line">                showDate = &quot;日期:&quot;+tostring(time(time.now(),&quot;%Y-%m-%d&quot;));</span><br><span class="line">                showTime = &quot;时间:&quot;+tostring(time(time.now(),&quot;%H:%M:%S&quot;));</span><br><span class="line">                winform.static.text = showDate+&quot; &quot;+showTime</span><br><span class="line">        &#125;,1000</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-SHE皮肤分享</title>
      <link href="/posts/2024/08/126f0ed8.html"/>
      <url>/posts/2024/08/126f0ed8.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/10rQ-_AyWElnn9_hmV_ZVVA?pwd=r6rp">皮肤下载</a><br>皮肤效果图：  </p><span id="more"></span><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-212.png" alt=""> ]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-修改图片宽高（缩略图）</title>
      <link href="/posts/2024/08/2626ebe6.html"/>
      <url>/posts/2024/08/2626ebe6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console; </span><br><span class="line"> </span><br><span class="line">//修改图片宽高</span><br><span class="line"> </span><br><span class="line">import gdip;</span><br><span class="line">var jpgFile = &quot;D:\1_aardio\图片\537ea412afc08.jpg&quot;</span><br><span class="line">var outFile = &quot;D:\1_aardio\temp.jpg&quot;</span><br><span class="line">gdip.image(jpgFile).getThumbnail(120,115).save(outFile,100)</span><br><span class="line"> </span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 图片处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-用static创建超链接</title>
      <link href="/posts/2024/08/29aa6239.html"/>
      <url>/posts/2024/08/29aa6239.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//超链接</span><br><span class="line">//cls=&quot;syslink&quot;</span><br><span class="line"> </span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">static=&#123;cls=&quot;syslink&quot;;text=&quot;百度一下&quot;;left=167;top=157;right=339;bottom=182;align=&quot;center&quot;;font=LOGFONT(h=-21);transparent=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import process; </span><br><span class="line">winform.static.text = `&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;`</span><br><span class="line">winform.static.onHyperlinkClick = function(nmSysLink,url,id)&#123;</span><br><span class="line">    thread.invoke( </span><br><span class="line">        function(url)&#123;</span><br><span class="line">            import process;</span><br><span class="line">            process.execute(url); //创建线程打开超链接速度会更快</span><br><span class="line">        &#125;,url</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-数据类型的转换</title>
      <link href="/posts/2024/08/b702ee24.html"/>
      <url>/posts/2024/08/b702ee24.html</url>
      
        <content type="html"><![CDATA[<p>byte串也叫byte数组。计算机调取这些byte数组以后，根据应用场景，将其展现为整数、小数、字符串等各种形式。例如，当应用场景为字符串时，计算机就会认为byte数组中存储的值是字节码，然后按照编码规则，展现字符串。同一个byte数组，可以展现为不同的数据类型，但是展现成什么有意义，只有存储数据的人清楚。</p><p>byte数组与其展现的特定数据之间，是本质与现象的关系，可以互相转换。这在aardio中是非常方便的。</p><h2 id="一、Buffer——byte数组的表示方式【推荐】"><a href="#一、Buffer——byte数组的表示方式【推荐】" class="headerlink" title="一、Buffer——byte数组的表示方式【推荐】"></a>一、Buffer——byte数组的表示方式【推荐】</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//aardio提供了raw.buffer()函数,直接生成byte数组。使用方法如下：</span><br><span class="line">var buf1=raw.buffer(4,1) //生成长度为4的byte数组，每个byte初始值为1。省略参数2则初始值为0。</span><br><span class="line">var buf2=raw.buffer(&quot;ABCD&quot;)//复制字符串abcd对应的byte数组,不影响原字符串。</span><br><span class="line">var buf3=raw.buffer(&#123;int num=1234&#125;) //复制整数1234对应的byte数组，用到了结构体。</span><br><span class="line">//输出看看</span><br><span class="line">for (i=1;#buf1) console.print(buf1)</span><br><span class="line">for (i=1;#buf2) console.print(buf2)</span><br><span class="line">for (i=1;#buf2) console.print(buf3)//索引小的byte代表低位，索引大的byte代表高位。</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="二、byte-——byte数组的另一种表示方式【不推荐】"><a href="#二、byte-——byte数组的另一种表示方式【不推荐】" class="headerlink" title="二、byte[]——byte数组的另一种表示方式【不推荐】"></a>二、byte[]——byte数组的另一种表示方式【不推荐】</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//aardio是动态语言，一般不需要声明数据类型，而是根据应用场景自动转换。</span><br><span class="line">//通过结构体可以显示声明数据类型。</span><br><span class="line">//结构体可以先创建类，再实例化，也可以直接声明。</span><br><span class="line">//结构体就是在哈希表的键名前标注数据类型,例如上面用到的&#123;int num=1234&#125;。</span><br><span class="line">var buf4=&#123;</span><br><span class="line">        byte b[4]=&#123;11,22,33,44&#125;//键名可以随意起，前后一致就可以。</span><br><span class="line">&#125;</span><br><span class="line">for (i=1;#buf4.b) console.print(buf4.b)//.b不可省略。</span><br></pre></td></tr></table></figure><h2 id="三、Convert——专门用于数据类型转换的函数"><a href="#三、Convert——专门用于数据类型转换的函数" class="headerlink" title="三、Convert——专门用于数据类型转换的函数"></a>三、Convert——专门用于数据类型转换的函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前面介绍的raw.buffer已经可以将字符串、结构体转换为byte数组。</span><br><span class="line">//aardio还提供了raw.convert(),专门进行数据转换。例如:</span><br><span class="line">//将小数123.456转换为byte数组：</span><br><span class="line">var from=&#123;double d=123.456&#125;</span><br><span class="line">var to=raw.buffer(8)</span><br><span class="line">var buf5=raw.convert(from,to)</span><br><span class="line">for (i=1;#buf5) console.print(buf5)</span><br><span class="line">//将byte数组转换为小数123.456：</span><br><span class="line">var n=raw.convert(buf5,&#123;double n&#125;).n//.n不可省略</span><br><span class="line">console.log(n)</span><br><span class="line">//将byte数组转换为整数呢？</span><br><span class="line">var n=raw.convert(buf5,&#123;int n&#125;).n</span><br><span class="line">console.log(n)</span><br><span class="line">//如果直接输出，相当于展现为字符</span><br><span class="line">console.log(buf5)//可以输出，但是乱码无意义</span><br></pre></td></tr></table></figure><h2 id="四、byte数组与十六进制的转换（一）"><a href="#四、byte数组与十六进制的转换（一）" class="headerlink" title="四、byte数组与十六进制的转换（一）"></a>四、byte数组与十六进制的转换（一）</h2><p>//群友问题：aardio数组3F F0 5E 35 3F 7C ED 91如何转double(1.023)？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这里给出的不是数组，而是字符串，我们先转换为数组</span><br><span class="line">var tab=string.split(&quot;3F F0 5E 35 3F 7C ED 91&quot;,&quot; &quot;)</span><br><span class="line">//生成byte数组，为下面转换作准备</span><br><span class="line">var buf=raw.buffer(8)</span><br><span class="line">for (i=1;8) buf=tonumber(tab,16)</span><br><span class="line">buf=string.reverse(buf)//索引小的byte代表低位（字符串右端）</span><br><span class="line">//byte数组转为double</span><br><span class="line">var n=raw.convert(buf,&#123;double n&#125;).n</span><br><span class="line">console.log(n)</span><br><span class="line"></span><br><span class="line">//上面题目的另一种算法</span><br><span class="line">var str =string.replace(&quot;3F F0 5E 35 3F 7C ED 91&quot;,&quot; &quot;,&quot;&quot;)</span><br><span class="line">var hex=&quot;0X&quot;++str</span><br><span class="line">var n=raw.convert(&#123;long hex=hex&#125;,&#123;double n&#125;).n</span><br><span class="line">console.log(n)</span><br></pre></td></tr></table></figure><h2 id="五、byte数组与十六进制的转换（二）"><a href="#五、byte数组与十六进制的转换（二）" class="headerlink" title="五、byte数组与十六进制的转换（二）"></a>五、byte数组与十六进制的转换（二）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//群友问题：0xAABBCCDD如何转换为内存字节的形式，如：DD CC BB AA</span><br><span class="line">//这里给出的不是字符串，不应该直接按照字符串进行处理。</span><br><span class="line">var buf=raw.buffer(&#123;int hex=0xAABBCCDD&#125;)</span><br><span class="line">//这样实际已经转换完成了。但是群友要的是输出形式是16进制。</span><br><span class="line">var tab=&#123;&#125;</span><br><span class="line">for (i=1;#buf) table.push(tab,string.format(&quot;%02X&quot;,buf ))</span><br><span class="line">var str=string.join(tab,&quot; &quot;)</span><br><span class="line">console.log(str)</span><br></pre></td></tr></table></figure><h2 id="六、字符串与二进制的转换"><a href="#六、字符串与二进制的转换" class="headerlink" title="六、字符串与二进制的转换"></a>六、字符串与二进制的转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//群友问题：如何将二进制串&quot;01100001 01100010 00110000&quot;转换为字符串</span><br><span class="line">var str=&quot;01100001 01100010 00110000&quot;</span><br><span class="line">var bin=string.split(str,&quot; &quot;)</span><br><span class="line">var buf=raw.buffer(#bin)</span><br><span class="line">for (i=1;#buf)&#123;</span><br><span class="line">        buf=tonumber(bin,2)</span><br><span class="line">&#125;</span><br><span class="line">console.log(buf)</span><br><span class="line">//如果反过来将字符串ab0转换成二进制串呢？</span><br><span class="line">//字符串一般可以直接当做byte数组使用，不过只能读取，不能写入。</span><br><span class="line">var buf=&quot;ab0&quot;</span><br><span class="line">var bin=&#123;&#125;</span><br><span class="line">for (i=1;#buf)&#123;</span><br><span class="line">        bin=string.format(&quot;%08b&quot;,buf )</span><br><span class="line">&#125;</span><br><span class="line">var str=string.join(bin,&quot; &quot;)</span><br><span class="line">console.log(str)</span><br><span class="line"></span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-根据DPI自动调整控件参数</title>
      <link href="/posts/2024/08/ebf5eb89.html"/>
      <url>/posts/2024/08/ebf5eb89.html</url>
      
        <content type="html"><![CDATA[<p>根据DPI自动调整控件参数，直接上代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;composited=1)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;刷新&quot;;left=235;top=318;right=515;bottom=380;db=1;dl=1;z=2&#125;;</span><br><span class="line">custom=&#123;cls=&quot;custom&quot;;text=&quot;自定义控件&quot;;left=17;top=12;right=743;bottom=295;ah=1;aw=1;border=1;db=1;dl=1;dr=1;dt=1;edge=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line"></span><br><span class="line">import godking.egrid</span><br><span class="line">var e = godking.egrid(winform.custom)</span><br><span class="line"></span><br><span class="line">// 下面这个函数是计算、调整的关键部分</span><br><span class="line">var rescale = function()&#123;</span><br><span class="line">    var rowh = 30</span><br><span class="line">    var colw = &#123;90,100,80,60,120&#125;</span><br><span class="line">        //var dpi =winform.dpiScaleX   </span><br><span class="line">    dpi = math.random(1,5)</span><br><span class="line">    rowh *= dpi;</span><br><span class="line">    for(i=1;#colw;1) colw[i] *= dpi;</span><br><span class="line">    e.RowHeight=rowh</span><br><span class="line">    e.setColWidth(,colw)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.onDpiChanged = function(dpiX,dpiY,rect)&#123;</span><br><span class="line">    winform.enableDpiScaling(dpiX/96,dpiY/96)</span><br><span class="line">    rescale()  // 系统dpi改变后自动调整</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.setText(0,1,&#123;&quot;文本型&quot;,&quot;图片型&quot;,&quot;选择型&quot;,&quot;不可编辑列表型&quot;&#125;)</span><br><span class="line">e.setText(1,&#123;1,4&#125;,&#123;&quot;第1行第1列&quot;,&quot;第1行第4列&quot;&#125;)</span><br><span class="line">e.setText(2,,&quot;全部第2行&quot;)</span><br><span class="line">e.setText(3,1,&quot;第3行第1列&quot;)</span><br><span class="line"></span><br><span class="line">rescale(); // 软件启动，先设置一下</span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    rescale(); // 随时可以手动刷新</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-字体随窗口大小自动缩放</title>
      <link href="/posts/2024/08/26588622.html"/>
      <url>/posts/2024/08/26588622.html</url>
      
        <content type="html"><![CDATA[<p>字体随窗口大小自动缩放<br>代码实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">static=&#123;cls=&quot;static&quot;;text=&quot;Static&quot;;left=308;top=185;right=518;bottom=354;ah=1;aw=1;font=LOGFONT(h=-32);transparent=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">var f = winform.static.getFont()</span><br><span class="line">var h=f.h</span><br><span class="line">var wh = winform.height</span><br><span class="line"> </span><br><span class="line">import godking.on</span><br><span class="line">godking.on(winform).onSize = function(cw,ch,sizeType)&#123;</span><br><span class="line">    f.h=ch/wh*h</span><br><span class="line">    winform.static.setFont(f);   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-正则匹配代码示例</title>
      <link href="/posts/2024/08/1e6c3b.html"/>
      <url>/posts/2024/08/1e6c3b.html</url>
      
        <content type="html"><![CDATA[<p>1、今天是2023年11月11日双十一节，\d{4}\年\d{2}\月\d{2}日  得到：2023年11月11日</p><p>2、转换时间格式为yyyy-mm-dd:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open();//打开控制台</span><br><span class="line"></span><br><span class="line">var str = /*</span><br><span class="line">2000-3-03</span><br><span class="line">2001-10-1</span><br><span class="line">2001-2-2</span><br><span class="line">*/              </span><br><span class="line">str=string.replace(str,&quot;-(\d)!&lt;\D&gt;&quot;,&quot;-0\1&quot;,)</span><br><span class="line">io.print(str );</span><br><span class="line"></span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续</span><br><span class="line">io.close();//关闭控制台</span><br></pre></td></tr></table></figure><p>3、提取数字:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open();//打开控制台</span><br><span class="line">        </span><br><span class="line">text=/*</span><br><span class="line">使用777777可以第一时间收5555786到“提问有新5687987回答”“回答被采纳”“网友求助”的通6598546</span><br><span class="line">您想在自己的网站上展示百度“知道”上的5264859问答吗？来吧！ 如要投诉或提5985468出意见建议。</span><br><span class="line">*/</span><br><span class="line">        </span><br><span class="line">for m in string.gmatch( text,&quot;\d+&quot;) &#123;</span><br><span class="line">     io.print(m)</span><br><span class="line">&#125;</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续</span><br><span class="line">io.close();//关闭控制台</span><br></pre></td></tr></table></figure><p>4、换行了都能匹配：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">import web.mshtml</span><br><span class="line"></span><br><span class="line">var html = /*</span><br><span class="line">&lt;img src=&quot;afds123</span><br><span class="line">fdgd.jpg&quot;</span><br><span class="line"></span><br><span class="line">/&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;img src=</span><br><span class="line">        &quot;aaabbbccc.jpg&quot;</span><br><span class="line">        </span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">var mshtm = web.mshtml();</span><br><span class="line">mshtm.write( html )</span><br><span class="line"></span><br><span class="line">for i,img in mshtm.eachAll(&quot;img&quot;) &#123;</span><br><span class="line">        console.log(i, img.src )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><p>5、多种格式的数据一次性匹配出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">io.open();//打开控制台</span><br><span class="line"></span><br><span class="line">str = /*</span><br><span class="line">&lt;a href=&#x27;maxred.aspx?ID=56869657&#x27; target=&quot;_blank&quot;&gt;稿件1309753&lt;/a&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:50px;&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;left&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;per_y&quot;&gt;0%&lt;/div&gt;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">26.1%&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">31.5%&lt;/td&gt;</span><br><span class="line">#-------------------------------------------------------------------------</span><br><span class="line">&lt;a href=&#x27;maxred.aspx?ID=56869657&#x27; target=&quot;_blank&quot;&gt;稿件1209751&lt;/a&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:50px;&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;left&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;per_y&quot;&gt;12.3%&lt;/div&gt;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">56.1%&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; valign=&quot;middle&quot; style=&quot;width:60px;&quot;&gt;</span><br><span class="line">63.2%&lt;/td&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">for m, m1 in string.gmatch(str, &#x27;\\&lt;a.+?稿件([^\\&lt;]+).+?&lt;@per_y&quot;&gt;@&gt;(.+?)\\&lt;.+?&#x27;)</span><br><span class="line">    io.print(m, m1)</span><br><span class="line"></span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><p>6、提取二维数组；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form(text=&quot;aardio Form&quot;;right=599;bottom=399;parent=...)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;提数组&quot;;left=445;top=318;right=551;bottom=353;z=2&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=17;top=26;right=394;bottom=223;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">func = function(str) begin</span><br><span class="line">        var ret = &#123;&#125;;</span><br><span class="line">        for m in string.gmatch(str,&quot;start,(.+?)end;&quot;) &#123;</span><br><span class="line">                var t = &#123;&#125;</span><br><span class="line">                for m2 in string.gmatch(m,&quot;\:(.+?)\,&quot;) &#123;</span><br><span class="line">                        table.push(t, m2)</span><br><span class="line">                &#125;</span><br><span class="line">                table.push(ret, t)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return ret;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">lineShow = function(line) begin</span><br><span class="line">        winform.edit.text += (line + &#x27;\r\n&#x27;)</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        var str = &#x27;start,1:aaaa,2:bbbb,3:cccc,4:dddd,end;start,1:eeee,2:ffff,3:gggg,4:hhhh,end;&#x27;</span><br><span class="line">        lineShow(&#x27;解析前:\r\n&#x27; + str)</span><br><span class="line">        </span><br><span class="line">        lineShow(&quot;解析后:&quot;)</span><br><span class="line">        var array = func(str)        </span><br><span class="line">        for(i=1;#array;1)&#123;</span><br><span class="line">                var t = array;</span><br><span class="line">                lineShow(&quot;---&quot; + i + &quot;---&quot;)</span><br><span class="line">                for(j=1;#t;1)&#123;</span><br><span class="line">                        lineShow(j + &quot;) &quot; + t[j])               </span><br><span class="line">                &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>另一种二维数组提取法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;模式匹配测试程序&quot;;right=599;bottom=399;)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;提数组&quot;;left=445;top=318;right=551;bottom=353;z=2&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=17;top=26;right=394;bottom=223;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        </span><br><span class="line">    var array = &#123;&#125;</span><br><span class="line">        for m1,m2,m3,m4 in string.gmatch(</span><br><span class="line">                &#x27;start,1:aaaa,2:bbbb,3:cccc,4:dddd,end;start,1:eeee,2:ffff,3:gggg,4:hhhh,end;&#x27;,&quot;start,1\:(\S+?),2\:(\S+?),3\:(\S+?),4\:(\S+?),end;&quot;</span><br><span class="line">        ) &#123;  </span><br><span class="line">                //添加到二维数组</span><br><span class="line">                table.push( array, &#123;m1;m2;m3;m4&#125; )</span><br><span class="line">               </span><br><span class="line">                //写入文本框</span><br><span class="line">                winform.edit.appendText( m1,m2,m3,m4 ,&#x27;\r\n&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //在文本框中显示二维数组</span><br><span class="line">        winform.edit.appendText( table.tostring(array),&#x27;\r\n&#x27; )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 模式匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-操作文本文件和目录</title>
      <link href="/posts/2024/08/2b63effb.html"/>
      <url>/posts/2024/08/2b63effb.html</url>
      
        <content type="html"><![CDATA[<p>1、一次逐行读出txt文本  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">for lineTxt in io.lines(&quot;C:\Users\Administrator\Desktop\aaa.txt&quot;)&#123;</span><br><span class="line">        console.log(lineTxt)</span><br><span class="line">        &#125;</span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><p>2、把文本每行以空隔为界，逐行读到listview里  </p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">//import string;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio Form&quot;;right=459;bottom=372;parent=...)</span><br><span class="line">winform.add(</span><br><span class="line">listview=&#123;cls=&quot;listview&quot;;left=6;top=33;right=452;bottom=253;bgcolor=16777215;edge=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.listview.insertColumn(&quot;序号&quot;,40)</span><br><span class="line">winform.listview.insertColumn(&quot;测试&quot;,200)</span><br><span class="line">winform.listview.insertColumn(&quot;测试&quot;,200)</span><br><span class="line"></span><br><span class="line">winform.listview.clear();</span><br><span class="line">var x = 1;</span><br><span class="line">for line in io.lines(&quot;C:\Users\Administrator\Desktop\aaa.txt&quot;) &#123; //采取分行迭代方法读取  test.txt文本的内容；</span><br><span class="line">    var a,b = table.unpack(string.split(line,&quot;&lt; &gt;&quot;)); //string.split以“ ”为分割符分割读取的文本行 然后把分开的值分别赋值给a,b,模式匹配详细请参考帮助文档和论坛;   </span><br><span class="line">    winform.listview.addItem(&#123;tostring(x);a;b;&#125;);//显示到listview控件;</span><br><span class="line">    x++;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>3、查找txt内文本的最大行数  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.open();//打开控制台   </span><br><span class="line">    var lines = 0;</span><br><span class="line">    for line in io.lines(&quot;C:\Users\Administrator\Desktop\aaa.txt&quot;) &#123;</span><br><span class="line">        lines++;</span><br><span class="line">    &#125;</span><br><span class="line">    io.print(&quot;您输入的是&quot; ,lines );</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、这个代码就有意思了，上面读数据，最后写总行数；  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">var lines=0</span><br><span class="line">for line in io.lines(&quot;C:\Users\Administrator\Desktop\aaa.txt&quot;)&#123;</span><br><span class="line">        console.log(line)//这是逐行读的总的数据</span><br><span class="line">        lines++</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(lines)//这是总的行数      </span><br><span class="line">console.pause(true);</span><br></pre></td></tr></table></figure><p>5、（1）文本分割  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">var a,b = table.unpack(string.split(&quot;apple banana&quot;,&quot; &quot;))</span><br><span class="line">console.log(a)</span><br><span class="line">console.log(b)</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续   </span><br><span class="line">（2）字符拼接</span><br><span class="line">io.open(); //打开控制台窗口</span><br><span class="line">str = &quot;12345678&quot;;</span><br><span class="line">t = string.split(str); //按单个字符开始拆分</span><br><span class="line">io.print(tostring(t[1])++tostring(t[2])++tostring(t[3]) +&quot;*&quot;);</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续</span><br><span class="line">io.close();//关闭控制台</span><br></pre></td></tr></table></figure><p>6、查找某个数据在等几行  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">var num = &#123;&#125;</span><br><span class="line">for line in io.lines(&quot;C:\Users\Administrator\Desktop\123.txt&quot;) &#123;</span><br><span class="line">        table.push(num,line)</span><br><span class="line">        if( string.find(line,&quot;李四&quot;) )&#123;</span><br><span class="line">                console.log(&quot;发现李四在第&quot;,#num,&quot;行&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续 </span><br></pre></td></tr></table></figure><p>7、找某个关键字，并找出空格前、后的数据  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import console;</span><br><span class="line">for line in io.lines(&quot;C:\Users\Administrator\Desktop\123.txt&quot;) &#123;</span><br><span class="line">        var a,b = table.unpack(string.split(line,&quot;&lt; &gt;&quot;));   </span><br><span class="line">              if( string.find(line,&quot;001&quot;) )&#123;</span><br><span class="line">                      console.log(&quot;找到同行空格后的数据为&quot;,b)</span><br><span class="line">                     console.log(&quot;找到同行空格前的数据为&quot;,a)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续   </span><br></pre></td></tr></table></figure><p>8、目录基本操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fsys</span><br><span class="line">import win</span><br><span class="line">//创建当前目录下的新目录，清空目录重建,返回目录路径</span><br><span class="line">$path = fsys.createDir(fsys.getCurDirO+&quot;\新目录\&quot;,true)</span><br><span class="line">if fsys.isDir($path)&#123;</span><br><span class="line">    win.msgbox(&quot;是目录&quot;)</span><br><span class="line">//语句块内对文件或目录都有效[*</span><br><span class="line">//移动</span><br><span class="line">fsys.move($path,&quot;e:\&quot;)</span><br><span class="line">//复制</span><br><span class="line">fsys.copy(&quot;e:\新目录&quot;,$path)</span><br><span class="line">//改名</span><br><span class="line">fsys.rename(&quot;e:\新目录&quot;,&quot;e:\目录&quot;)</span><br><span class="line">//删除目录，支持空目录,可以使用数组册删除多人目录</span><br><span class="line">fsys.delete((&quot;e:\目录&quot;;$path)</span><br><span class="line"> </span><br><span class="line">//搜索路径，返回目录下文件,目录数组</span><br><span class="line">$list,$path = fsys.list(&quot;E:\ aardio&quot;)</span><br><span class="line">win.msgbox($list)</span><br><span class="line">win.msgbox($path)</span><br></pre></td></tr></table></figure><p>9、遍历目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=360;bottom=422)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;Button&quot;;left=227;top=15;right=332;bottom=63;z=2&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=11;top=11;right=212;bottom=408;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import fsys;</span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        winform.edit.text = &quot;&quot;;</span><br><span class="line">        var filenames = &#123;&#125;;</span><br><span class="line">        fsys.enum( fsys.getTempDir(), &quot;*.tmp&quot;,</span><br><span class="line">                function(dir,filename,fullpath,findData)&#123;</span><br><span class="line">                        if(filename)&#123;</span><br><span class="line">                                 table.push(filenames, filename);</span><br><span class="line">                           //winform.edit.printf(&#x27;%s\n&#x27;, filename)</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                false</span><br><span class="line">        );</span><br><span class="line">        for(i=1; #filenames;1)&#123;</span><br><span class="line">                winform.edit.printf(&#x27;%s\n&#x27;, filenames[i])</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 文本文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-学习时间转换的小例子</title>
      <link href="/posts/2024/08/d1ab8cf6.html"/>
      <url>/posts/2024/08/d1ab8cf6.html</url>
      
        <content type="html"><![CDATA[<p>学习时间转换的小例子，涉及文本转时间戳、时间戳转文本、双击、单击事件，复制到剪贴板、从剪贴板读取内容等知识点；  </p><p>源代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import fsys.time;</span><br><span class="line">import win</span><br><span class="line">import win.clip</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;时间戳转换&quot;;right=757;bottom=467;max=false)</span><br><span class="line">mainForm.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;时间戳转成文本&quot;;left=276;top=143;right=466;bottom=171;z=15&#125;;</span><br><span class="line">button3=&#123;cls=&quot;button&quot;;text=&quot;文本转成时间戳&quot;;left=276;top=96;right=466;bottom=124;z=9&#125;;</span><br><span class="line">button4=&#123;cls=&quot;button&quot;;text=&quot;清空&quot;;left=271;top=376;right=414;bottom=423;z=10&#125;;</span><br><span class="line">current_stamp=&#123;cls=&quot;edit&quot;;left=102;top=54;right=264;bottom=82;edge=1;multiline=1;z=4&#125;;</span><br><span class="line">current_stamp2=&#123;cls=&quot;edit&quot;;text=&quot;双击复制&quot;;left=578;top=96;right=740;bottom=124;edge=1;multiline=1;z=8&#125;;</span><br><span class="line">current_stamp3=&#123;cls=&quot;edit&quot;;text=&quot;单击粘贴&quot;;left=104;top=144;right=266;bottom=172;edge=1;multiline=1;z=12&#125;;</span><br><span class="line">current_time=&#123;cls=&quot;edit&quot;;left=102;top=15;right=264;bottom=43;edge=1;multiline=1;z=2&#125;;</span><br><span class="line">current_time2=&#123;cls=&quot;edit&quot;;text=&quot;单击粘贴&quot;;left=103;top=96;right=265;bottom=124;edge=1;multiline=1;z=6&#125;;</span><br><span class="line">current_time3=&#123;cls=&quot;edit&quot;;text=&quot;双击复制&quot;;left=578;top=144;right=740;bottom=172;edge=1;multiline=1;z=14&#125;;</span><br><span class="line">static=&#123;cls=&quot;static&quot;;text=&quot;当前时间&quot;;left=16;top=14;right=91;bottom=42;center=1;transparent=1;z=1&#125;;</span><br><span class="line">static2=&#123;cls=&quot;static&quot;;text=&quot;当前时间戳&quot;;left=17;top=53;right=92;bottom=81;center=1;transparent=1;z=3&#125;;</span><br><span class="line">static3=&#123;cls=&quot;static&quot;;text=&quot;文本时间&quot;;left=16;top=96;right=91;bottom=124;center=1;transparent=1;z=5&#125;;</span><br><span class="line">static4=&#123;cls=&quot;static&quot;;text=&quot;时间戳&quot;;left=492;top=96;right=567;bottom=124;center=1;transparent=1;z=7&#125;;</span><br><span class="line">static5=&#123;cls=&quot;static&quot;;text=&quot;时间戳&quot;;left=16;top=143;right=91;bottom=171;center=1;transparent=1;z=11&#125;;</span><br><span class="line">static6=&#123;cls=&quot;static&quot;;text=&quot;文本时间&quot;;left=492;top=143;right=567;bottom=171;center=1;transparent=1;z=13&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">mainForm.setInterval(</span><br><span class="line">    function() &#123;</span><br><span class="line">        var now = time.now();</span><br><span class="line">        mainForm.current_time.text = time(now, &quot;%Y-%m-%d %H:%M:%S&quot;);</span><br><span class="line">        //mainForm.current_stamp.text = tostring(tonumber(time(now)));</span><br><span class="line">        mainForm.current_stamp.text = time.stamp(true);</span><br><span class="line">        // 定时执行参数 @1 指定的回调函数,参数 @2 指定间隔毫秒数</span><br><span class="line">    &#125;, 1000</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">//复制当前时间到剪贴板</span><br><span class="line">mainForm.current_time.wndproc = function(hwnd, message, wParam, lParam) &#123;</span><br><span class="line">    if (message == 0x203 /*_WM_LBUTTONDBLCLK*/ ) &#123;</span><br><span class="line">        win.clip.write(mainForm.current_time.text);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//复制当前时间戳到剪贴板</span><br><span class="line">mainForm.current_stamp.wndproc = function(hwnd, message, wParam, lParam) &#123;</span><br><span class="line">    if (message == 0x203 /*_WM_LBUTTONDBLCLK*/ ) &#123;</span><br><span class="line">        win.clip.write(mainForm.current_stamp.text);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//从剪贴板读取数据</span><br><span class="line">mainForm.current_time2.oncommand = function(id, event) &#123;</span><br><span class="line">    mainForm.current_time2.text = win.clip.read();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.button3.oncommand = function(id, event) &#123;</span><br><span class="line">    var input = mainForm.current_time2.text</span><br><span class="line">    if (input == &quot;&quot;) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if string.indexAny(input, &quot;-&quot;)==null &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    mainForm.current_stamp2.text = tostring(tonumber(time(input)) * 1000);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">msTime = function(ms) &#123;</span><br><span class="line">    var tm = time(ms / 1000, &quot;%Y-%m-%d %H:%M:%S&quot;);</span><br><span class="line">    return tm;</span><br><span class="line">&#125;</span><br><span class="line">//从剪贴板读取数据</span><br><span class="line">mainForm.current_stamp3.oncommand = function(id, event) &#123;</span><br><span class="line">    mainForm.current_stamp3.text = win.clip.read();</span><br><span class="line">&#125;</span><br><span class="line">mainForm.button.oncommand = function(id, event) &#123;</span><br><span class="line">    var input = mainForm.current_stamp3.text</span><br><span class="line">    if (input == &quot;&quot;) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if string.indexAny(input, &quot;-&quot;)!=null &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    mainForm.current_time3.text = msTime(input);</span><br><span class="line">&#125;</span><br><span class="line">//复制当前时间到剪贴板</span><br><span class="line">mainForm.current_time3.wndproc = function(hwnd, message, wParam, lParam) &#123;</span><br><span class="line">    if (message == 0x203 /*_WM_LBUTTONDBLCLK*/ ) &#123;</span><br><span class="line">        win.clip.write(mainForm.current_time3.text);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//复制当前时间戳到剪贴板</span><br><span class="line">mainForm.current_stamp2.wndproc = function(hwnd, message, wParam, lParam) &#123;</span><br><span class="line">    if (message == 0x203 /*_WM_LBUTTONDBLCLK*/ ) &#123;</span><br><span class="line">        win.clip.write(mainForm.current_stamp2.text);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.button4.oncommand = function(id, event) &#123;</span><br><span class="line">    mainForm.current_time2.text = &quot;&quot;</span><br><span class="line">    mainForm.current_stamp2.text = &quot;&quot;</span><br><span class="line">    mainForm.current_time3.text = &quot;&quot;</span><br><span class="line">    mainForm.current_stamp3.text = &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.show();</span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-《工作助手》新手打造一款办公助手</title>
      <link href="/posts/2024/08/3c1e8e69.html"/>
      <url>/posts/2024/08/3c1e8e69.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>在日常工作中有许多文件要根据模板编写新的文件，每次复制粘贴太繁琐，还有些文件需要备注，又不想在文件名里写的很乱。就萌生了自己写个工作助手的想法。程序必须满足以下几个需求。</p><ul><li>  根据模板自己建立新的文件。</li><li>  可以给文件备注。</li><li>  打开快捷文件、程序、网页。</li><li>  有时候找东西，想不起来放在那里了，需要一个搜索界面，Everything很好用，但每次都忘记去打开，所以想整合在一起。</li><li>  有时候需要根据发过来的内容进行作业，需要一个简单的便签贴在桌面。</li><li>  有时候需要将其他程序置顶。</li><li>工作时间过长，需要一个休息提醒功能。<br>  针对以上几个要求打造一款个人工作助手。  </li></ul><p>**  部分源码**</p><p>由于这次是设计多个功能，源码比较多，主界面写的比较乱就不展示，直接放在链接中。</p><p><strong>窗口置顶功能</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">窗口置顶 = function()&#123;</span><br><span class="line">        import win;        //窗口库</span><br><span class="line">        import win.dlg.message; //窗口消息库</span><br><span class="line"> </span><br><span class="line">        var hwnd =win.getForeground()          //获取前台窗口句柄</span><br><span class="line">        var 是否置顶 = win.getStyleEx(hwnd ,0x8/*_WS_EX_TOPMOST*/ )</span><br><span class="line">        var msgDlg = win.dlg.message(hwnd);         //创建提醒窗口</span><br><span class="line"> </span><br><span class="line">        //console.log(hwnd,是否置顶)</span><br><span class="line">        if(是否置顶 != 0)&#123;</span><br><span class="line">                win.setTopmost(hwnd,false)         //取消置顶</span><br><span class="line">                msgDlg.ok(&quot;取消置顶&quot;,500) </span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">                win.setTopmost(hwnd)  //置顶</span><br><span class="line">                msgDlg.ok(&quot;置顶&quot;,500) </span><br><span class="line">        &#125;;        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>搜索窗口</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import console;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;文件搜索&quot;;right=699;bottom=499;min=false;mode=&quot;popup&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=80;top=24;right=592;bottom=48;dl=1;dr=1;dt=1;edge=1;z=1&#125;;</span><br><span class="line">listview=&#123;cls=&quot;listview&quot;;left=16;top=64;right=688;bottom=488;db=1;dl=1;dr=1;dt=1;edge=1;gridLines=1;z=2&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import process;</span><br><span class="line">import fsys.everything;</span><br><span class="line">process.execute(&quot;\app\Everything.exe&quot;,&quot;-startup&quot;);         //启动Everything并隐藏界面</span><br><span class="line"> </span><br><span class="line">winform.listview.insertColumn(&quot;文件名&quot;,350);</span><br><span class="line">winform.listview.insertColumn(&quot;路径&quot;,500);</span><br><span class="line">winform.listview.fillParent();                //第二列自动列宽</span><br><span class="line"> </span><br><span class="line">winform.edit.setFocus(0,-1)  //设置输入框焦点</span><br><span class="line">winform.show();</span><br><span class="line"> </span><br><span class="line">winform.edit.onOk = function()&#123; </span><br><span class="line">        var 关键字 = winform.edit.text;</span><br><span class="line">        if(关键字 = &quot;&quot; or 关键字 = null)&#123;</span><br><span class="line">                return ; </span><br><span class="line">        &#125;;</span><br><span class="line">        winform.edit.text = &quot;搜索中,请耐心等待&quot;</span><br><span class="line">        winform.listview.clear();        //清空列表</span><br><span class="line">        var 显示内容 = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">        for 路径 in fsys.everything.eachSearch(关键字)&#123;</span><br><span class="line">                var 文件名 = io.splitpath(路径).file</span><br><span class="line">                var 文件信息 = &#123;文件名,路径&#125;;</span><br><span class="line">                table.push(显示内容,文件信息)</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        if(#显示内容 = 0)&#123;</span><br><span class="line">                winform.edit.text = &quot;未找到搜索内容&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        else &#123;</span><br><span class="line">                winform.edit.text = 关键字</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        winform.listview.items = 显示内容;        </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 双击打开文件</span><br><span class="line">import process;</span><br><span class="line">winform.listview.onDoubleClick = function(item,subItem,nmListView)&#123;</span><br><span class="line">        var 路径 = winform.listview.getItemText(item,2);</span><br><span class="line">        if(io.exist(路径))&#123;</span><br><span class="line">                process.explore(路径);        //打开路径</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">//右键菜单</span><br><span class="line">import win.ui.menu;                //菜单库</span><br><span class="line">import win.clip.file;        //剪贴板文件库</span><br><span class="line">import win.clip;                //剪贴板文本库</span><br><span class="line">winform.listview.onRightClick = function(item,subItem,nmListView)&#123;</span><br><span class="line">        var 路径 = winform.listview.getItemText(item,2);</span><br><span class="line">        if(!io.exist(路径))&#123; return &#125;;        //路径不存在则跳过</span><br><span class="line"> </span><br><span class="line">        var 右键菜单 = win.ui.popmenu(winform);</span><br><span class="line">        右键菜单.add(&quot;打开&quot;,function()&#123;</span><br><span class="line">                process.explore(路径);        //打开路径</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        右键菜单.add(&quot;打开目录&quot;,function()&#123;</span><br><span class="line">                process.exploreSelect(路径);</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        右键菜单.add(&quot;复制&quot;,function()&#123;</span><br><span class="line">                win.clip.file.write(路径)</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        右键菜单.add(&quot;复制路径&quot;,function()&#123;</span><br><span class="line">                win.clip.write(路径);</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        右键菜单.popup();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p><strong>便签窗口</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import console;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=303;bottom=399;bgcolor=12974079;border=&quot;none&quot;;exmode=&quot;toolwindow&quot;;topmost=1)</span><br><span class="line">winform.add(</span><br><span class="line">richedit=&#123;cls=&quot;richedit&quot;;left=8;top=8;right=296;bottom=392;autohscroll=false;bgcolor=12974079;link=1;multiline=1;wrap=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">if(!存档对象.NotesData.data)&#123;        /* 无存档信息,建立初始信息 */</span><br><span class="line">        存档对象.NotesData.data = &#123;</span><br><span class="line">        left=winform.left;</span><br><span class="line">        right=winform.right;</span><br><span class="line">        top=winform.top;</span><br><span class="line">        bottom=winform.bottom;</span><br><span class="line">        内容=&quot;简单便签，只支持插入文本与图片，满足简单记录使用。退出自动保存内容,按Esc键退出&quot;</span><br><span class="line">        &#125;        //初始信息</span><br><span class="line">        winform.richedit.text = 存档对象.NotesData.data.内容; //加载常规内容</span><br><span class="line">&#125;;</span><br><span class="line">else &#123;</span><br><span class="line">        //加载富文本内容</span><br><span class="line">        winform.richedit.streamIn(存档对象.NotesData.data.内容);        </span><br><span class="line"> </span><br><span class="line">        // 加载位置</span><br><span class="line">        winform.left = 存档对象.NotesData.data.left;</span><br><span class="line">        winform.right = 存档对象.NotesData.data.right;</span><br><span class="line">        winform.top = 存档对象.NotesData.data.top;</span><br><span class="line">        winform.bottom = 存档对象.NotesData.data.bottom;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 实现按住拖动窗口效果</span><br><span class="line">winform.onMouseDown  = function(wParam,lParam)&#123;</span><br><span class="line">        winform.hitCaption();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">//Esc键退出</span><br><span class="line">winform.onCancel = function()&#123;</span><br><span class="line">    winform.close()        </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">//退出前保存数据</span><br><span class="line">winform.onDestroy = function()&#123;</span><br><span class="line">    存档对象.NotesData.data.内容 = winform.richedit.streamOut();</span><br><span class="line">        存档对象.NotesData.data.left=winform.left;</span><br><span class="line">        存档对象.NotesData.data.right=winform.right;</span><br><span class="line">        存档对象.NotesData.data.top=winform.top;</span><br><span class="line">        存档对象.NotesData.data.bottom=winform.bottom;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//鼠标滚动</span><br><span class="line">winform.richedit.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">        if(message = 522)&#123;                //鼠标滚轮</span><br><span class="line">                if(wParam = 4287102976)&#123;                //鼠标向下</span><br><span class="line">                        winform.richedit.vScroll(1/*_SB_LINEDOWN*/) </span><br><span class="line">                &#125;;</span><br><span class="line">                elseif(wParam = 7864320)&#123;        //鼠标向上</span><br><span class="line">                        winform.richedit.vScroll(0/*_SB_LINEUP*/) </span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p><strong>休息提醒窗口</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fonts.fontAwesome;</span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;image=$&quot;\pexels-tobi-620337.jpg&quot;;bkBottom=0;bkLeft=0;bkRight=0;bkTop=0;border=&quot;none&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">plus=&#123;cls=&quot;plus&quot;;left=728;top=8;right=752;bottom=32;align=&quot;left&quot;;color=255;dr=1;dt=1;font=LOGFONT(h=-16);iconStyle=&#123;font=LOGFONT(h=-20;name=&#x27;FontAwesome&#x27;)&#125;;iconText=&#x27;\uF00D&#x27;;notify=1;valign=&quot;top&quot;;z=1&#125;;</span><br><span class="line">static=&#123;cls=&quot;static&quot;;text=&quot;Static&quot;;left=168;top=64;right=600;bottom=104;align=&quot;center&quot;;center=1;color=255;dl=1;dr=1;dt=1;font=LOGFONT(h=-35;weight=700);transparent=1;z=2&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import key.hook;</span><br><span class="line">var hook = key.hook();</span><br><span class="line"> </span><br><span class="line">hook.proc = function(msg,vkcode,scancode,injected,flags,timeStamp,extraInfo)&#123;</span><br><span class="line">        return true;         //锁定按键</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">var 图像路径 = 存档对象.config.提醒.路径;</span><br><span class="line">var 秒数 = 存档对象.config.提醒.休息</span><br><span class="line"> </span><br><span class="line">if(io.exist(图像路径))&#123;</span><br><span class="line">        winform.image = 图像路径;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">winform.plus.skin(&#123;</span><br><span class="line">        color=&#123;</span><br><span class="line">                active=0xFFFF0000;</span><br><span class="line">                default=0xFFFF0000;</span><br><span class="line">                disabled=0xFF6D6D6D;</span><br><span class="line">                hover=0xFF00FF00</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">winform.plus.oncommand = function(id,event)&#123;</span><br><span class="line">        hook.close()        //关闭键盘钩子 </span><br><span class="line">        winform.close()</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">winform.show();                //显示界面</span><br><span class="line">winform.fullscreen(true)                //全屏窗口</span><br><span class="line"> </span><br><span class="line">for(i=1;秒数;1)&#123;</span><br><span class="line">        var 时间 = 秒数 +1 - i</span><br><span class="line">        winform.static.text = &quot;距离休息结束还有 &quot; + 时间 + &quot; 秒&quot;</span><br><span class="line">        win.delay(1000)</span><br><span class="line"> </span><br><span class="line">        if(i = 秒数)&#123;</span><br><span class="line">                hook.close()        //关闭键盘钩子 </span><br><span class="line">                winform.close()</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p><strong>使用界面</strong><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-208.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-209.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-210.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-211.png" alt=""> </p><p><strong>软件BUG</strong><br>众所周知没有BUG的软件不是一个好软件。个人能力及精力有限，无法做到优化很好。</p><ul><li>  无法直接添加网页快捷，可在资源管理器中添加后在刷新使用助手打开。</li><li>  没有事实更新资源管理器的文件变动，所有会出现文件实际删除了，软件没刷新打开文件后报错。</li><li>  因为特意设计两层目录，使用的符号过滤来过滤掉文件在树形列表显示，可能存在目录中存在符号无法显示的问题。</li><li>其他不重要或未发现的BUG。  </li></ul><p>**  </p><p>链接**<br>源码：链接: <a href="https://pan.baidu.com/s/1WXY0V6GNddC2B5nGqodcBA">https://pan.baidu.com/s/1WXY0V6GNddC2B5nGqodcBA</a> 提取码: 4gfw 复制这段内容后打开百度网盘手机App，操作更方便哦<br>成品：链接: <a href="https://pan.baidu.com/s/1yg2_HjyeNPrVL02HCQmwNg">https://pan.baidu.com/s/1yg2_HjyeNPrVL02HCQmwNg</a> 提取码: esc8 复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-获取控制台输出内容</title>
      <link href="/posts/2024/08/1c4df5bd.html"/>
      <url>/posts/2024/08/1c4df5bd.html</url>
      
        <content type="html"><![CDATA[<p>我编写了一个程序，会定时在控制台中输出内容。我现在想编写另外的一个程序，想通过检测前一个程序中控制台输出的内容来判断程序是否正确运行，请问怎么获得改内容？应该怎么编写？</p><p>用 process.popen 创建管道就可以了，范例里看一下。<br>或者用 io.popen　也可以，要不就是用call 来硬的了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import process;</span><br><span class="line">var prcs = process(&quot;第一个程序&quot;)</span><br><span class="line">prcs.GetStdHandle = prcs.remoteApi(&quot;pointer(INT nStdHandle)&quot;,&quot;Kernel32.dll&quot;,&quot;GetStdHandle&quot;)</span><br><span class="line">prcs.ReadConsoleOutputCharacter = prcs.remoteApi(&quot;int(pointer hConsole,str&amp; character,INT length,INT readCoord,INT&amp; charsRead)&quot;,&quot;Kernel32.dll&quot;,&quot;ReadConsoleOutputCharacter&quot;)</span><br><span class="line"></span><br><span class="line">prcs.readOutputCharacter = function()&#123;</span><br><span class="line">    var ok,str = prcs.ReadConsoleOutputCharacter( prcs.getOutPutHandle(),1000,1000,0,0)</span><br><span class="line">    return ..string.trim(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 管道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-执行cmd并输出</title>
      <link href="/posts/2024/08/9cb4798b.html"/>
      <url>/posts/2024/08/9cb4798b.html</url>
      
        <content type="html"><![CDATA[<p>方式一：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import process.popen;</span><br><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var cmd = &quot;netstat -ano&quot;;</span><br><span class="line">var p = process.popen.cmd(cmd)</span><br><span class="line">for(all,out,err in p.each(100))&#123;</span><br><span class="line">console.log(out,err);/*读取进程输出直到进程关闭*/</span><br><span class="line">//mainForm.edit.text += out +&#x27;\r\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">console.pause();</span><br></pre></td></tr></table></figure><p>还有一个方法就是使用process.batch</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import process.popen;</span><br><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var cmd =&#x27;del /f /s /q &quot;%userprofile%\\Local Settings\\Temp\\*.*&quot;&#x27;;</span><br><span class="line">//var p = process.popen.cmd(cmd)</span><br><span class="line"></span><br><span class="line">import process.batch;</span><br><span class="line">var p = process.batch(cmd)</span><br><span class="line"></span><br><span class="line">for(all,out,err in p.each(100))&#123;</span><br><span class="line">console.log(out,err);/*读取进程输出直到进程关闭*/</span><br><span class="line">//mainForm.edit.text += out +&#x27;\r\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">console.pause();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> 管道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-皮肤引擎(HTMLayout)特性说明文档</title>
      <link href="/posts/2024/08/754510f6.html"/>
      <url>/posts/2024/08/754510f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Mx3 使用的界面引擎是基于 HTML 的轻量级渲染引擎(HTMLayout).</p><p>修改HTMLayout的界面与修改网页一样方便灵活.</p><p>此界面引擎基于 HTMLayout 开发, 关于 HTMLayout 的更多信息请访问以下网站:</p><p><a href="http://www.terrainformatica.com/htmlayout/main.whtm">http://www.terrainformatica.com/htmlayout/main.whtm</a></p><p>相关演示可以下载 HTMLayout 的Demo文件包查看:</p><p><a href="http://www.terrainformatica.com/htmlayout/HTMLayoutDemo.zip">http://www.terrainformatica.com/htmlayout/HTMLayoutDemo.zip</a></p><p>(下载后解压. 启动 bin\browse.exe, 然后用它打开 html_samples 目录下的文件查看.)</p><h2 id="界面引擎的结构"><a href="#界面引擎的结构" class="headerlink" title="界面引擎的结构"></a>界面引擎的结构</h2><p>HTMLayout的界面通过下面4个方面定义:</p><p>・         <strong>HTML</strong></p><p>定义界面的基础结构</p><p>・         <strong>CSS</strong> <strong>样式</strong></p><p>定义界面元素的表现</p><p>・         <strong>CSS 的 behavior 扩展属性</strong></p><p>定义界面元素的基础交互行为</p><p>・         <strong>CSSS! 脚本</strong></p><p>为界面提供简单的脚本控制能力</p><p>我们会在后面的内容中对它们逐一介绍.</p><p>HTML支持</p><p>界面的 HTML 文件奠定了界面的基础层级和结构.</p><p>HTMLayout 界面引擎的HTML 支持以HTML 4.0规范为基础, 在此基础上又扩展了一些特殊标记.</p><p>这里仅介绍HTMLayout界面中用到的基本元素.</p><h3 id="标记"><a href="#标记" class="headerlink" title=" 标记"></a><include> 标记</h3><p>include 标记是一个扩展的特殊标记.</p><p>顾名思义, 就是引用并包含其他 htm文件.</p><p>它有以下两种书写格式:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!– 引用一个外部文件的内容 –&gt;&lt;include src=”header.htm” /&gt; &lt;!– 引用一个外部文件的内容. 在找不到文件时显示 “Missing: layout.htm”  –&gt;</span><br><span class="line">&lt;include src=”layout.htm”&gt; </span><br><span class="line">Missing: layout.htm </span><br><span class="line">&lt;/include&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是, 被引用的文件如果不在同级目录, 引用后里面的相对路径都会基于引用页的路径处理.</p><h3 id="标记-1"><a href="#标记-1" class="headerlink" title="标记"></a><menu>标记</h3><p>menu 标记被用于定义界面中的菜单.</p><p>这个标记产生的元素默认是隐藏的, 只有被 popup-menu 行为触发时才显示.</p><menu> 元素内部的 <li> 和带有 role=”menu-item” 的元素都会被当作菜单项处理.<p>HTMLayout 界面中菜单的定义书写格式如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;menu id=”MY\_MENU”&gt;&lt;!– 一般的菜单项 –&gt;&lt;li&gt;Menu Item&lt;/li&gt; &lt;!– 带图标和快捷键标签的菜单项 –&gt; &lt;li&gt; &lt;div /&gt; Menu Item with Icon and Shortcut Label &lt;span mx-hotkey-label=”&#123;command.id&#125;”&gt; &lt;/li&gt; &lt;!– 横线分隔符 –&gt; &lt;hr/&gt; &lt;!– 子菜单 –&gt; &lt;li&gt; Sub Menu &lt;menu&gt; &lt;li&gt;Sub Menu Item 1&lt;/li&gt; &lt;li&gt;Sub Menu Item 2&lt;/li&gt; &lt;/menu&gt; &lt;/li&gt; &lt;!– 带子菜单的命令 –&gt; &lt;div &gt; &lt;li&gt;Menu Item&lt;/li&gt; &lt;li &gt; &lt;menu&gt; &lt;li&gt;Child Item 1&lt;/li&gt; &lt;li&gt;Child Item 2&lt;/li&gt; &lt;/menu&gt; &lt;/li&gt; &lt;/div&gt; &lt;/menu&gt;</span><br></pre></td></tr></table></figure><h3 id="其他扩展元素"><a href="#其他扩展元素" class="headerlink" title="其他扩展元素"></a>其他扩展元素</h3><p>还有很多其它的扩展元素, 因为在 mx3 的主界面中没有使用到, 因此在这里不做介绍.</p><p>mx3的对话框界面中用到很多控件, 这些元素在内建的 base\control.css中定义.</p><p>主界面的皮肤文件中没有使用此css文件.</p><p>HTMLayout 的 Demo 文件包中 html_samples\form\ 目录下有大部分控件的范例文件.</p><p>(包括进度条, 日期选择框, 数字输入框等)</p><h2 id="CSS支持"><a href="#CSS支持" class="headerlink" title="CSS支持"></a>CSS支持</h2><p>HTMLayout皮肤引擎的css支持以 css 2.1 为基准.</p><p>同时支持部分 css3 的属性和选择符.</p><p>在这里不再介绍css2.1标准支持的属性和选择符, 只对界面用到的扩展属性和选择符进行介绍.</p><h3 id="扩展选择符支持"><a href="#扩展选择符支持" class="headerlink" title="扩展选择符支持"></a>扩展选择符支持</h3><table><thead><tr><th align="left">选择符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">div:not(:first-child)</td><td align="left">“非”状态选择符.范例为匹配所有不是第一个子元素的 div 元素.</td></tr><tr><td align="left">div[foo^=”val”]</td><td align="left">匹配foo属性值以”val”开头的 siv 元素.</td></tr><tr><td align="left">div[foo$=”val”]</td><td align="left">匹配foo属性值以”val”结尾的div元素.</td></tr><tr><td align="left">div[foo*=”val”]</td><td align="left">匹配foo属性值中含有”val”字串的div元素.</td></tr><tr><td align="left">tr:nth-child(An+B)</td><td align="left">匹配父元素里以A个为一组的每组中的第B个div元素.</td></tr><tr><td align="left">tr:nth-last-child(An+B)</td><td align="left">匹配父元素里以A个为一组的每组中的倒数第B个div元素.</td></tr><tr><td align="left">button:only-child</td><td align="left">匹配父元素里唯一的 button 子元素.</td></tr><tr><td align="left">input:only-of-type</td><td align="left">匹配父元素里唯一使用了input标记的子元素.</td></tr><tr><td align="left">a:focus</td><td align="left">匹配拥有焦点的 a 元素.</td></tr><tr><td align="left">a:tab-focus</td><td align="left">匹配通过按 TAB 件获得焦点的 a 元素.</td></tr><tr><td align="left">option:current</td><td align="left">匹配一组元素中具有当前状态的 option元素.</td></tr><tr><td align="left">input:checked</td><td align="left">匹配被选定的 input 元素. 用于具有 checkbox, radio, select 等行为的元素.</td></tr><tr><td align="left">input:disabled</td><td align="left">匹配被禁用的 input元素.</td></tr><tr><td align="left">input:read-only</td><td align="left">匹配只读的input元素.</td></tr><tr><td align="left">input:empty</td><td align="left">匹配内容为空的 input元素.</td></tr><tr><td align="left">div:has-child</td><td align="left">匹配只含有一个子元素的 div 元素.</td></tr><tr><td align="left">div:has-children</td><td align="left">匹配含有多个子元素的 div 元素.</td></tr><tr><td align="left">menu:popup</td><td align="left">匹配被作为弹出菜单或面板显示的menu元素.</td></tr><tr><td align="left">button:owns-popup</td><td align="left">匹配触发了弹出行为且弹出菜单或面板处于可见状态的 button 元素.</td></tr><tr><td align="left">div:drop-target</td><td align="left">匹配在拖放操作中可以接受被拖放对象的div元素.</td></tr><tr><td align="left">div:drag-over</td><td align="left">匹配在拖放操作中鼠标所处的可接受被拖放对象的 div元素.</td></tr><tr><td align="left">li:moving</td><td align="left">匹配正以移动模式被拖放的li元素.</td></tr><tr><td align="left">li:copying</td><td align="left">匹配正以副本模式被拖放的li元素. (原元素的一个副本)</td></tr><tr><td align="left">li:drag-source</td><td align="left">匹配被拖放的源li元素.</td></tr><tr><td align="left">li:drop-marker</td><td align="left">匹配指示拖放目的位置的li元素. (原元素的一个副本)</td></tr></tbody></table><h3 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h3><h4 id="文本相关"><a href="#文本相关" class="headerlink" title="文本相关"></a>文本相关</h4><p><strong>特殊字体</strong></p><p>font: system;                                     /* 系统输入框字体 */</p><p>font: system-menu;                                /* 系统菜单字体 */</p><p>font: system-caption;                        /* 窗口标题字体 */</p><p>font: system-status;                           /* 状态栏 tooltip 的字体*/</p><p><strong>文本选择区颜色</strong></p><p>text-selection: #FFF #C00;           /* 格式: 前景色 背景色 */</p><p><strong>文本过长截断</strong></p><p>text-overflow: ellipsis;                      /* 省略号处理 */</p><p>此属性需配合 white-space: nowrap; 和 overflow: hidden; 使用.</p><p><strong>特殊折行处理</strong></p><p>text-wrap: unrestricted;                /* 允许截断换行. CSS3里面为 text-wrap: avoid */</p><p>white-space: prewrap;                   /* 按多行文本输入框的折行方式处理文本 */</p><p><strong>文本内容</strong></p><p>content: “text here!”;                     /* 同  CSS3 */</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p><strong>布局方向</strong></p><p>direction: ltr;                        /* 从左到右布局 */</p><p>direction: rtl;                        /* 从右到左布局 */</p><p><strong>自适应高度和自适应宽度</strong></p><p>width: 50%%;</p><p>height: 100%%;</p><p>使用双百分号表示占用剩余空间的比例.</p><p>margin 和 padding 等属性也可以使用 %% 单位.</p><p><strong>垂直/水平布局</strong></p><p>flow: vertical;                        /* 将<a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">容器</a>内部变为垂直布局. (标准的布局模式) */</p><p>flow: horizontal;                 /* 将容器内部变为横向布局. */</p><p><strong>垂直/水平流式布局</strong></p><p>flow: v-flow;                             /* 将容器内部变为垂直流式布局. */</p><p>flow: h-flow;                             /* 将容器内部变为水平流式布局. */</p><h4 id="填充和背景"><a href="#填充和背景" class="headerlink" title="填充和背景"></a>填充和背景</h4><p><strong>渐变色背景</strong></p><p>background-color: red yellow blue yellow;   /* 格式: 上左颜色 上右颜色 下右颜色 下左颜色 */</p><p>这个渐变填充的实现与 CSS3 标准不同, 能实现的效果也有限.</p><p><strong>保持长宽比拉伸</strong></p><p>background: url(image.png) stretch <strong>keep-ratio</strong>;</p><p>仅能在 stretch 模式中使用.</p><p><strong>切片贴图</strong></p><p>background: url(bg.png) expand;</p><p>background-position: 6px 6px 6px 6px;</p><p>background-stretch: stretch-left stretch-middle stretch-right;</p><p>background 这行将bg.png 指定为背景图, 并指定了贴图的模式为 <strong>expand</strong> (切图填充).</p><p>background-position 指定了切图的位置(按上右下左的顺序).</p><p>background-stretch 指定了切出来的图的拉伸方式. 可用的参数有:</p><ul><li>  stretch-left                         拉伸左中切块</li><li>  stretch-middle                  拉伸正中切块</li><li>  stretch-right                       拉伸右中切块</li><li>  stretch-top                         拉伸上中切块</li><li>  stretch-bottom                 拉伸下中切块</li></ul><p>不写 background-stretch 则默认使用平铺贴图方式处理.</p><p><strong>前景样式</strong></p><p>foreground: red url(fg.png) no-repeat 50% 50%;</p><p>foreground-color: …</p><p>foreground-image: …</p><p>foreground-repeat: …</p><p>foreground-position: …</p><p>foreground-stretch: …</p><p>此属性的语法与background 的对应属性相同. 也支持切片填充.</p><p>前景样式会覆盖在背景和元素的内容之上.</p><p><strong>图像变换效果</strong></p><p>foreground-image-transformation: colorize(#666);</p><p>background-image-transformation: contrast-brightness-gamma(0.5,0,0.5,1.2);</p><p>引擎支持对前景和背景图像的多种变换效果.</p><p>目前可用的变换效果有如下几种:</p><ul><li>  colorize(#FFCC00)                                                            颜色滤镜效果</li><li>  contrast-brightness-gamma(0.5,0.5,1.5)                对比度,亮度,gamma值调整. 对比度和亮度的中间值为 0.5.</li><li>  color-schema(red,yellow,blue)                                 将图像的灰度色部分按给出的颜色(可以有多个)进行插值变换.</li></ul><p>colorize() 常用于实现按钮图标的禁用状态.</p><p>contrast-brightness-gamma() 可用于鼠标悬停死的按钮图标变化.</p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p><strong>圆角边框</strong></p><p>border-radius: 4px;</p><p>与 CSS3 规范相同.</p><p><strong>光晕效果</strong></p><p>outline: 1px glow #0CF 3px;</p><p>对 outline 样式的扩展.</p><p>格式: 宽度 glow 颜色 渐变偏移值.</p><p>如果被设置此样式的对象有前景/背景色或图像填充, 光晕的边缘会按背景的轮廓绘制.</p><p><strong>阴影效果</strong></p><p>outline: 1px glow #0CF 3px;</p><p>outline-shift: 3px;</p><p>在光晕效果的基础上增加 outline-shift 属性指定阴影的偏移位置.</p><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p><strong>渐变效果</strong></p><p>transition: blend;</p><p>渐变切换不同状态的样式效果.</p><p>适合用于制作按钮效果.</p><p>有一定的性能问题, 不建议大量使用.</p><p><strong>自定义变换效果</strong></p><p>transition: width(linear,400ms) height(linear,400ms);</p><p>transition: width(back-in,0.5s) background-color(back-in,0.5s,0.5s);</p><p>用指定的变换速率算法和时间控制指定的属性值变化.</p><p>在HTMLayout 的 Demo 里面的 html_samples\transtions\ 目录下有相关的描述文档和示例.</p><h3 id="交互相关扩展"><a href="#交互相关扩展" class="headerlink" title="交互相关扩展"></a>交互相关扩展</h3><p><strong>对象的响应区域</strong></p><p>hit-margin: 4px 5px 4px 8px;</p><p>将元素的交互范围扩大. (从元素的 border 算起)</p><p>格式同 margin 属性.</p><p><strong>右键菜单</strong></p><p>context-menu: selector(#ITEM_CONTEXT_MENU);</p><p>为元素指定对应的右键菜单.</p><p><strong>鼠标拖放操作</strong></p><p>.item {</p><p>draggable: only-move;                   /* 定义拖放的形式 */</p><p>}</p><p>.item-container {</p><p>drop: insert;                       /* 定义拖放结束时的处理方式 */</p><p>accept-drop: selector( .item );             /* 定义容器可接受的被拖放对象 */</p><p>}</p><p>draggable 有 4 个取值, 它决定了元素被拖放时的行为:</p><ul><li>  none     不可拖动</li><li>  copy-move         复制并移动</li><li>  only-copy            仅复制</li><li>  only-move          仅移动</li></ul><p>drop 也有 4个取值, 它决定了放开鼠标后拖放的结果:</p><ul><li>  insert                    在鼠标位置插入</li><li>  append                在最后面添加</li><li>  prepend              在最前面添加</li><li>  recycle                  删除</li></ul><p>accept-drop 用通过css选择符决定了容器可以接受的被拖放对象范围.</p><p>在HTMLayout 的 Demo 里面的 html_samples\drag-n-drop\ 目录下有相关示例.</p><p>网站上有对此的详细介绍: <a href="http://www.terrainformatica.com/wiki/h-smile/drag-n-drop">http://www.terrainformatica.com/wiki/h-smile/drag-n-drop</a></p><p><strong>行为属性</strong></p><p>behavior: button;</p><p>通过 css 给元素附加特定的预定义的交互行为.</p><p>皮肤引擎内建有多种行为可供使用. 下面一节的内容将讨论 behavior 的使用.</p><h2 id="behavior-行为属性"><a href="#behavior-行为属性" class="headerlink" title="behavior 行为属性"></a>behavior 行为属性</h2><p>behavior 是界面引擎为了满足交互需求而扩展的特殊css属性.</p><p>通过为元素设定 behavior, 可以为几乎任意元素附加上交互行为, 从而将元素改造成具有特定功能的按钮,输入框等控件.</p><p>所有的behavior 都是预先通过程序写好的.</p><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><p>以下是mx3界面文件中 base\control.css 的一段 css :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/\* checkbox button \*/a\[type=”check”\]&#123;behavior: check; display: inline-block; cursor: pointer; margin: 2 0; padding: 0 4 0 22; min-width: 22px; min-height: 18px; line-height: 18px; white-space: pre; text-decoration:none; background: url(images/check.png) no-repeat 0% 50%; &#125;   a\[type=”check”\]:checked&#123; background-image:url(images/checked.png); &#125;</span><br></pre></td></tr></table></figure><p>默认情况下, <a> 标记会作为链接处理.</p><p>而在这里, 我们通过给它指定 behavior: check; 为它附加了复选框的交互行为.</p><p>在使用时, 此元素会根据用户的点击, 修改自己的 :checked 状态. 从而改变自己的背景图像表现.</p><p>不同的 behavior, 在使用时会有不同的状态和相关的属性进行互动.</p><p>例如 behavior: menu; 会把附有该行为元素下的 <li> 元素或设置了 role=”menu-item” 属性的元素当作菜单项.</p><p>下面的介绍中会简要的描述部分常用 behavior 和它们相关状态和属性.</p><h3 id="常用-behavior-介绍"><a href="#常用-behavior-介绍" class="headerlink" title="常用 behavior 介绍"></a>常用 behavior 介绍</h3><table><thead><tr><th align="left">行为</th><th align="left">简介</th></tr></thead><tbody><tr><td align="left">behavior: button;</td><td align="left">按钮行为.附加了此行为的元素会具有标准的按钮行为.属性: ・     value=”caption” – 按钮标题文本 状态: ・     :hover – 悬停 ・     :active – 按下 ・     :focus – 获得焦点 ・     :disabled – 被禁用</td></tr><tr><td align="left">behavior: clickable;</td><td align="left">将元素变为可点击.附加了此行为的元素才能在点击后触发程序的消息.与 button行为的唯一不同是具有此行为的元素不会获得焦点. 状态: ・     :hover – 悬停 ・     :active – 按下 ・     :disabled – 被禁用</td></tr><tr><td align="left">behavior: check;</td><td align="left">复选框行为.属性:・     checked – 初始选定状态. 取值范围: “true”, “false”, “undefined”(半选定状态). ・     mixed – 半选定状态. 状态: ・     :hover – 悬停 ・     :active – 按下 ・     :focus – 获得焦点 ・     :disabled – 被禁用  使用中会出现比较复杂的复合状态, 例如: input[type=”check”][mixed]:checked:disabled</td></tr><tr><td align="left">behavior: radio;</td><td align="left">单选框行为.属性:・     name=”group” – 用于区分单选框组(必须) ・     value=”0″ – 对应选项的值 状态: ・     :hover – 悬停 ・     :active – 按下 ・     :focus – 获得焦点 ・     :disabled – 被禁用</td></tr><tr><td align="left">behavior: edit;</td><td align="left">文本输入框行为.属性:・     value=“text” – 初始文本. ・     size=”20″ – 元素的初始宽度. ・     maxlength=”12″ – 最大文本长度. ・     filter=“0<del>9” – 限制可输入的字符内容. 支持单个字符或字符范围. ”.@0</del>9a<del>zA</del>Z” – 允许输入所有字母和数字以及 . 和 @ 字符(email). “^.,-” – 允许输入除 . , – 之外的任意字符. ^ 作为排斥标记使用. ・     novalue=“please input” – 如果文本框为空, 则显示此属性指定的文本. 你可以通过 :empty 伪类来修改这个提示文本的样式. 状态: ・     :hover – 悬停 ・     :focus – 获得焦点 ・     :disabled – 被禁用 ・     :empty – 内容为空</td></tr><tr><td align="left">behavior: password;</td><td align="left">密码框输入行为.属性和状态同 behavior: edit;额外的属性: ・     password-char=“#” – 指定密码提示字符为 #.</td></tr><tr><td align="left">behavior: select;</td><td align="left">下拉列表框行为.内部结构同 HTML中的 &lt;select&gt;元素用法.列表条目元素为 <option> 元素或具有 role=”option” 属性的元素. 属性: ・     size=”8″ – 显示为多行选择列表框. ・     multiple  – 允许多选 ・     multiple=”checks” – 允许多选, 且每个条目前显示复选框. 状态: ・     option:current – 当前选定的条目.</td></tr><tr><td align="left">behavior: menu;</td><td align="left">菜单行为.此行为定义了一个菜单元素.此元素中包含的 <li> 元素和具有 role=”menu-item” 属性的元素会被当作菜单项对待. 鼠标悬停的菜单项元素会被赋予 :current 状态.  菜单元素被调用时, 它的父元素会被设置为调用它的元素.</td></tr><tr><td align="left">behavior: menu-bar;</td><td align="left">菜单栏行为.此行为与菜单的唯一不同.</td></tr><tr><td align="left">behavior: popup-menu;</td><td align="left">打开弹出菜单.具有该行为的元素在点击后会打开子元素中的第一个 <menu> 或<popup>元素作为菜单. 如果有设置 menu 属性, 则打开其中css选择符对应的元素.属性: ・     menu=”#MENU_ID” – 指定要弹出的菜单元素. 取值为css选择符. ・     align-popup=”top” – 指定弹出菜单的位置. “top”, “left”, “right”, “bottom”(默认).</td></tr><tr><td align="left">behavior: progress;</td><td align="left">进度条行为.被绑定此行为的元素, 其前景图像会按比例拉伸,作为进度条绘制.属性: ・     value=”5.1″ – 当前值. 可以是小数. ・     maxvalue=”100″ – 最大值. 可以是小数.</td></tr><tr><td align="left">behavior: path;</td><td align="left">路径缩略显示行为.将过长的路径显示为中间加省略号的缩略形式.例如: “\root\test\appp123456\assets\scripts\character\max.dat” 显示为: “\root\test\appp123….\max.dat”</td></tr><tr><td align="left">behavior: file-icon;</td><td align="left">文件图标显示行为.如果没有指定大小. 此行为会提取最符合显示区域大小的图标显示.属性: ・     filename=”test.exe” – 获取指定可执行文件的图标 ・     filename=”.doc” – 获取指定扩展名的系统图标 ・     filename=”.” – 文件夹图标 ・     filename=”..” – 驱动器图标 ・     filename=”\” – 我的电脑图标 ・     icon-size=”small” – 图标大小. 可取值: “small”, ”large”. 默认为 “small”.</td></tr></tbody></table><ul><li>  ”.@0<del>9a</del>zA~Z”  –  允许输入所有字母和数字以及 . 和 @ 字符(email).</li><li>  “^.,-”  –  允许输入除 . , – 之外的任意字符.  ^ 作为排斥标记使用.</li></ul><p>・         novalue=“please input”  –  如果文本框为空, 则显示此属性指定的文本.</p><ul><li>  你可以通过 :empty 伪类来修改这个提示文本的样式.</li></ul><h2 id="CSSS-脚本"><a href="#CSSS-脚本" class="headerlink" title="CSSS! 脚本"></a>CSSS! 脚本</h2><p>behavior 并不适合实现那些细碎却有没有通用性的交互操作.</p><p>这时我们就需要用 CSSS! 来解决问题了.</p><p>顾名思义,  CSSS! = CSS +Script, 它是写在 CSS 中的脚本.</p><p>它的语法其实很简单.</p><p>让我们看看下面这段 CSSS! 脚本:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” 实践证明：此处是错误的，应该用rgb函数，否则没效果。例如：background = rgb(255,0,0) ; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的格式看起来就像是个扩展的 CSS 属性一样.</p><p>一些要注意的地方:</p><p>・         CSSS! 语句使用逗号”,”作为语句结束符.</p><p>・         CSSS! 中的字符串只能双引号标识, 不能使用单引号(“string”).</p><p>・         CSSS! 中使用关键字 <strong>self</strong> 表示当前对象.</p><h3 id="截获事件"><a href="#截获事件" class="headerlink" title="截获事件"></a>截获事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br></pre></td></tr></table></figure><p>hover-on! 是我们的脚本要处理的事件标识.</p><p>当具有 .item 类的元素被鼠标悬停时, 会触发此事件并执行里面的代码.</p><p>下面是完整的事件支持列表:</p><table><thead><tr><th align="left">事件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">hover-on!hover-off!</td><td align="left">鼠标悬停/离开时触发</td></tr><tr><td align="left">active-on!active-off!</td><td align="left">鼠标按下/抬起时触发</td></tr><tr><td align="left">click!</td><td align="left">鼠标单击时触发</td></tr><tr><td align="left">focus-on!focus-off!</td><td align="left">获得/失去焦点时触发</td></tr><tr><td align="left">key-on!key-off!</td><td align="left">键盘的按键按下/抬起时触发通过 key-code() 函数获取按键信息.key-code() 获得的按键信息可能是一个用单引号包含的有效字符(‘a’, ‘4’, ‘$’)或是下列预定义值之一:’RETURN’, ‘LEFT’, ‘RIGHT’, ‘UP’, ‘DOWN’, ‘PRIOR’, ‘NEXT’, ‘TAB’, ‘HOME’, ‘END’, ‘DELETE’, ‘INSERT’, ‘BACK’</td></tr><tr><td align="left">assigned!</td><td align="left">所属的样式被应用到元素上时触发</td></tr><tr><td align="left">value-changed!</td><td align="left">元素的值发生变化时触发</td></tr><tr><td align="left">validate!</td><td align="left">表单提交前的数据验证事件</td></tr><tr><td align="left">timer!</td><td align="left">定时触发器配合 start-timer(ms) 和 stop-timer() 函数使用.start-timer(ms) 中的参数单位为毫秒.</td></tr><tr><td align="left">animation-start!animation-step!animation-end!</td><td align="left">动画控制事件animation-start! 在调用了元素的 element.start-animation() 方法后触发. animation-step! 事件处理的最后必须返回一个整数(下次执行的间隔毫秒数). 例如: return 500;  如果animation-step! 返回的是 return cancel; 则动画中止, 同时触发 animation-end! 事件.</td></tr><tr><td align="left">size-changed!</td><td align="left">元素大小发生改变时触发</td></tr></tbody></table><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><p>接下来看看事件处理的代码的第一句:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br></pre></td></tr></table></figure><p>这是个赋值语句. $1() 函数根据参数 “input.url” 返回第一个匹配此 css 选择符的元素.</p><p>然后将这个元素的引用赋给 ele 变量.</p><p>这里要注意, CSSS! 的语句使用逗号 “,” 分割, 不是我们习惯的”;”.</p><p>在 CSSS! 中获取元素有如下几个函数可用:<br>| 事件                       | 说明                                                         |<br>| :————————- | :———————————————————– |<br>| $1(.item)                  | 获取匹配 “.item” 的第一个元素                                |<br>| $(.item)                   | 获取所有匹配 “.item” 的元素. 类似AAuto中的wbLayout.queryEles()函数 |<br>| ele.$1(.item)              | 获取ele子元素中匹配”.item”的第一个元素                       |<br>| ele.$(.item)               | 获取ele子元素中匹配”.item”的所有元素 类似AAuto中的ele.queryElements()函数 |<br>| ele.$1p(.item)             | 获取父元素中匹配”.item”的最近的一个元素.                     |<br>| ele.$p(.item)              | 获取父元素中所有匹配”.item”的元素.                           |<br>| ele.parent()               | 获取父元素                                                   |<br>| ele.next()                 | 获取同级的下一个元素                                         |<br>| ele.previous()             | 获取同级的上一个元素                                         |<br>| ele.child(3)ele.children() | 获取第3个子元素. 参数范围 1 … ele.children().可以通过 ele.children() 获取子元素的数目. |</p><h3 id="访问元素的属性-样式-状态"><a href="#访问元素的属性-样式-状态" class="headerlink" title="访问元素的属性, 样式, 状态"></a>访问元素的属性, 样式, 状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中的三处展示了3种内容的访问方法:<br>| 语句                                                         | 说明                                                         |<br>| :———————————————————– | :———————————————————– |<br>| ele:hover = false,ele:disabled = true,                       | 通过”:”访问元素的状态. 在AAuto中等价的写法是： ele.state.状态名 = 状态值 |<br>| ele.value = “string”,ele.name = “my_elem”,ele.disabled = true,ele.title = null, | 通过”.”访问元素的属性值. 在AAuto中等价的写法是： ele.属性名 = 属性值注意部分属性值和状态是相互有关联的. 要删除一个属性, 只需要赋值 null给它即可. |<br>| ele::width = 56px,ele::display = “none”,                     | 通过”::”访问元素的CSS样式属性. 在AAuto中等价的写法是： ele.style.样式名 = 样式值 |</p><p>在 CSSS! 中有如下状态可在执行时使用:<br>| 状态                                                         | 说明                                                         |<br>| :———————————————————– | :———————————————————– |<br>| ele:value                                                    | 元素DOM节点的值.对于输入框这个值为输入的文本. 其他元素为内部的文本. |<br>| ele:index                                                    | 元素在子元素的序号. 取值从 1 开始到 self.parent().children() |<br>| ele:hoverele:activeele:emptyele:readonly ele:disabled ele:focusable | 部分CSSS!中常用的布尔型状态. (true/false)                    |</p><h3 id="访问元素的方法"><a href="#访问元素的方法" class="headerlink" title="访问元素的方法"></a>访问元素的方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的代码通过 .box-content-width() 函数获取元素当前的内容宽度.</p><p>元素有以下方法可供调用:<br>| 方法                                                         | 说明                                                         |<br>| :———————————————————– | :———————————————————– |<br>| ele.start-timer(500)                                         | 开始触发元素的 timer! 事件. 参数为间隔的毫秒数.调用 ele.stop-timer() 或return cancel; 可以结束触发. |<br>| ele.stop-timer()                                             | 停止触发 timer! 事件.                                        |<br>| ele.scroll-to-view()                                         | 滚动页面, 保证元素可见.                                      |<br>| ele.box–type–what()                                          | 这是个组合函数, 通过不同的 type 和 what 取值, 可以组合出多个函数.type 可取值:・     margin – 元素的 margin 框・     border – 元素的边框 ・     padding – 元素的padding 框 ・     content – 元素的内容框(内容的外轮廓). ・     inner – 元素的内部框 what 可取值: ・     left – 框的左坐标 ・     right – 框的右坐标 ・     top – 框的上坐标 ・     bottom – 框的下坐标 ・     width – 框的宽度 ・     height – 框的高度 |<br>| ele.x–what()ele.y–what()                                     | 获取元素的相对x,y坐标.what的取值可以是:・     parent – 相对于父元素的坐标值・     root – 相对于根元素(<html>)的坐标值 ・     view – 相对于当前窗口视图(window)的坐标值; ・     screen – 元素在屏幕上的绝对坐标 |<br>| ele.start-animation()                                        | 开始元素动画.触发动画事件 animation-start! 和 animation-step! 在 return cancel 时触发 animation-end! 事件. |<br>| ele.text-width(“string”)                                     | 返回以当前元素样式显示时, 输入字符串 “string” 的宽度(以像素计算) |<br>| ele.min-intrinsic-width()ele.max-intrinsic-width()ele.min-intrinsic-height()ele.max-intrinsic-height() | 获取元素的内容最小/最大宽高.                                 |</p><h3 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ?                   (self.value = “empty”) #                   (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br></pre></td></tr></table></figure><p>CSSS! 的条件判断语句格式很简单(类似 Javascript或AAuto中 的 三元操作符 … ? … : … 组合，区别是用#号代替了冒号 ):</p><p>判断条件 <strong>?</strong> (条件为真时的操作)</p><p>或者:</p><p>判断条件 <strong>?</strong> (条件为真时的操作) <strong>#</strong> (条件为假时的操作)</p><p>一般分多行写更清晰点:</p><p>判断条件 <strong>?</strong></p><p>(条件为真时的操作) <strong>#</strong></p><p>(条件为假时的操作)</p><p>操作的语句建议使用括号包起来, 避免解析出错.</p><p>作用类似于AAuto中的条件判断语句：</p><p>If( 判断条件 )[</p><p>条件为真时的操作</p><p>}</p><p>Else[</p><p>条件为假时的操作</p><p>}</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面加红的部分其实是定义了一个匿名函数.</p><p>对于一般的函数, 定义的格式如下:</p><p>foo <strong>= @(</strong> a**,** b <strong>)</strong> c = a + b**,** return c</p><p>AAuto中类似的定义函数的代码如下：</p><p>foo = function( a, b ){ c = a + b; return c; }</p><p>调用时使用  foo(12, 35) 即可.</p><h3 id="枚举语句"><a href="#枚举语句" class="headerlink" title="枚举语句"></a>枚举语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item &#123;hover-on! :ele = $1( input.url ) , ele:empty == true ? (self.value = “empty”) # (self.value = “filled”), ele:hover = true, self::width = ele.box-content-width(), self.$(.icon) -&gt; @(ele) ele::background = “#CCC” ; &#125;</span><br></pre></td></tr></table></figure><p>上面红色的语句执行的结果是:</p><p>遍历当前鼠标悬停的 .item 元素内的所有 .icon 元素, 并将他们的背景设置为灰色.</p><p>枚举语句格式:</p><p>集合 <strong>-&gt; @(<strong>局部变量名</strong>)</strong> 操作语句</p><p>AAuto中类似的遍历集合的代码如下：       for 局部变量名 in 集合{</p><p>//其他操作语句 }</p><p>枚举通常被用于处理元素集合.</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>CSSS! 作为基于 CSS 的扩展脚本, 有助于实现部分纯界面交互的操作控制.</p><p>在这里我们只能对它做简要的介绍.</p><p>更详细的 CSSS! 说明资料请访问:</p><p><a href="http://www.terrainformatica.com/htmlayout/csss!.whtm">http://www.terrainformatica.com/htmlayout/csss!.whtm</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-webform（weblayout）使用getEle/queryEle/queryEles查找页面元素</title>
      <link href="/posts/2024/08/62a300d8.html"/>
      <url>/posts/2024/08/62a300d8.html</url>
      
        <content type="html"><![CDATA[<h3 id="wb-getEle"><a href="#wb-getEle" class="headerlink" title="wb.getEle()"></a>wb.getEle()</h3><ul><li>ele = wb.getEle( HTML节点的ID名name, 框架名 )</li><li>参数是ID或者name属性,返回一个节点对象或框架内子节点对象。</li></ul><p> 该函数查找并返回页面上的element节点对象,<br>该对象同样是一个com对象,可以使用com.DumpTypeInfo函数列出该对象的成员.  </p><pre><code>可以通过第二个参数指定框架窗口,该参数可以省略.  调用wb.getEle之前必须调用 wb.wait() 等待网页下载完毕.  </code></pre><p>而使用 wb.waitEle() 则实现等待该节点下载并返回该节点的功能,而无须等待整个网页下载完.  </p><h3 id="wb-queryEle"><a href="#wb-queryEle" class="headerlink" title="wb.queryEle"></a>wb.queryEle</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wbLayout.queryEle(&quot;div&quot;)</span><br><span class="line"></span><br><span class="line">var frame = wbLayout.queryEle(&quot;iframe&quot;);</span><br><span class="line">frame.querySelector(&quot;input#kw&quot;).value = &quot;测试&quot;;</span><br></pre></td></tr></table></figure><h3 id="wb-queryEles"><a href="#wb-queryEles" class="headerlink" title="wb.queryEles:"></a>wb.queryEles:</h3><ul><li><p>搜索节点对象,该函数返回的是一个数组,\n但可以通过调用数组的成员函数批量调用节点的同名成员函数,支持click函数,\n即使找不到节点,此函数也会返回一个空数组. </p></li><li><p>返回table对象，长度大于0这代表查找到元素。</p></li><li><p>必须找到框架才能返回，如果框架有可能不出现，应增加判断或 改用 wb.waitQueryEles()。判断写法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if( wb.waitDoc(&quot;框架名&quot;,超时值) )&#123;</span><br><span class="line">    //出错处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>元素查找写法示例（很多写法可以参考网页探针）：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#根据className查找元素</span><br><span class="line">var elTest = wb.queryEles( className = &quot;test&quot; )</span><br><span class="line"></span><br><span class="line">#根据parent和tagName查找元素</span><br><span class="line">var elTestGroupId = wb.queryEles( parent = elTest[1]; tagName = &quot;a&quot;);</span><br><span class="line"></span><br><span class="line">#根据parent和src查找元素</span><br><span class="line">wb.queryEles( parent=&quot;pageframe&quot; ; src=&quot;bottom.html &quot; ）</span><br><span class="line"></span><br><span class="line">wb.queryEles( parent=&quot;pageframe&quot; ; src=&quot;&lt;@@127.0.0.1/web/rcas/adjust.do?action=init&amp;appNO=@&gt;\d+&quot;）  </span><br><span class="line"></span><br><span class="line">#查找指定iframe名称下的元素(jsKcxzIfra为iframe名称)</span><br><span class="line">mainWb.queryEles(parent=&quot;jsKcxzIfra&quot;;tagName=&quot;tbody&quot;);</span><br><span class="line"></span><br><span class="line">#根据parent/type/innerHTML查找</span><br><span class="line">wb.queryEles( parent = ele;type = &quot;submit&quot;;innerHTML = &quot;确定&quot; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>parent这个可选键指定容器(在这个容器里查找)，可以指定一个ele对象。也可以指定一个框架名称，如果不指定就是指的wb.getDoc()。</li></ul><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import web.form;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; bottom=451;scroll=1;text=&quot;aardio Form&quot;;right=681 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//创建web窗体</span><br><span class="line">var wb = web.form( winform )</span><br><span class="line">var html = /**</span><br><span class="line">&lt;html class=&quot;yui3-js-enabled&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;J_ChargePop default&quot; id=&quot;yui_3_3_0_1_132368985183320&quot; style=&quot;left: 464.5px; top: 92.5px; width: 445px; height: auto;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">                        &lt;form action=&quot;tb_item_id=14609580454&amp;item_name=%B0%D4%CD%F550%D4%AA%D4%DA%CF%DF%D6%B1%B3%E4&amp;unit=50%D4%AA&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;op&quot;&gt;</span><br><span class="line">                                &lt;button type=&quot;submit&quot;&gt;确定&lt;/button&gt;   //要取“确定”按钮</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/form&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line">wb.write( html )</span><br><span class="line">winform.show();</span><br><span class="line"></span><br><span class="line">var eleSubmit;</span><br><span class="line">var qEle = wb.queryEles( className = &quot;op&quot; ) //找到父节点</span><br><span class="line">for(i=1;#qEle;1)&#123;</span><br><span class="line">    var ele = qEle[ i ]</span><br><span class="line">    var qEleSubmit = wb.queryEles( parent = ele;type = &quot;submit&quot;;innerHTML = &quot;确定&quot; )</span><br><span class="line">    if( #qEleSubmit)</span><br><span class="line">        eleSubmit = qEleSubmit[1]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(eleSubmit)&#123;</span><br><span class="line">    io.open()</span><br><span class="line">    io.print( eleSubmit.innerHTML );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进入消息循环</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> webform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Hexo上添加原生HTML页面</title>
      <link href="/posts/2024/08/1bcbf9eb.html"/>
      <url>/posts/2024/08/1bcbf9eb.html</url>
      
        <content type="html"><![CDATA[<p>其实办法很简单，就是在html源代码最上面添加 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line">正文...</span><br></pre></td></tr></table></figure><p>阻止渲染即可。</p><p>这个html最好放在单独的文件夹下，别和其他的md文件放一起。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-windows消息大全</title>
      <link href="/posts/2024/08/778f928d.html"/>
      <url>/posts/2024/08/778f928d.html</url>
      
        <content type="html"><![CDATA[<p>windows 消息大全 </p><p>消息，就是指 Windows 发出的一个通知，告诉应用程序某个事情发生了。例如，单击鼠标、改变窗口尺寸、按下键盘上的一个键都会使 Windows 发送一个消息给应用程序。消息本身是作为一个记录传递给应用程序的，这个记录中包含了消息的类型以及其他信息。例如，对于单击鼠标所产生的消息来说，这个记录中包含了单击鼠标时的坐标。这个记录类型叫做 Msg，   </p><p>它在 Windows 单元中是这样声明的：   </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct tagMSG &#123;</span><br><span class="line">    HWND   hwnd; 窗口句柄 </span><br><span class="line">    UINT   message; 消息常量标识符 </span><br><span class="line">    WPARAM wParam;  32 位消息的特定附加信息 </span><br><span class="line">    LPARAM lParam;  32 位消息的特定附加信息 </span><br><span class="line">    DWORD  time; 消息创建时的时间 </span><br><span class="line">    POINT  pt; 消息创建时的鼠标位置 </span><br><span class="line">&#125; MSG, PMSG; </span><br></pre></td></tr></table></figure><p>消息中有什么？  </p><p>是否觉得一个消息记录中的信息像希腊语一样？如果是这样，那么看一看下面的解释：   </p><ul><li>hwnd    32 位的窗口句柄。窗口可以是任何类型的屏幕对象，因为 Win32 能够维护大多数可视对象的句柄(窗口、对话框、按钮、编辑框等)。 </li><li>message 用于区别其他消息的常量值，这些常量可以是 Windows 单元中预定义的常量，也可以是自定义的常量。 </li><li>wParam  通常是一个与消息有关的常量值，也可能是窗口或控件的句柄。 </li><li>lParam  通常是一个指向内存中数据的指针。  </li></ul><p>由于 WParam、lParam 和 Pointer 都是 32 位的， 因此，它们之间可以相互转换。 </p><p>消息列表：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WM_NULL = $0000; </span><br><span class="line">WM_CREATE = $0001; </span><br><span class="line">应用程序创建一个窗口 </span><br><span class="line">WM_DESTROY = $0002; </span><br><span class="line">一个窗口被销毁 </span><br><span class="line">WM_MOVE = $0003; </span><br><span class="line">移动一个窗口 </span><br><span class="line">WM_SIZE = $0005; </span><br><span class="line">改变一个窗口的大小 </span><br><span class="line">WM_ACTIVATE = $0006; </span><br><span class="line">一个窗口被激活或失去激活状态； </span><br><span class="line">WM_SETFOCUS = $0007; </span><br><span class="line">获得焦点后 </span><br><span class="line">WM_KILLFOCUS = $0008; </span><br><span class="line">失去焦点 </span><br><span class="line">WM_ENABLE = $000A; </span><br><span class="line">改变 enable 状态 </span><br><span class="line">WM_SETREDRAW = $000B; </span><br><span class="line">设置窗口是否能重画 </span><br><span class="line">WM_SETTEXT = $000C; </span><br><span class="line">应用程序发送此消息来设置一个窗口的文本 </span><br><span class="line">WM_GETTEXT = $000D; </span><br><span class="line">应用程序发送此消息来复制对应窗口的文本到缓冲区 </span><br><span class="line">WM_GETTEXTLENGTH = $000E; </span><br><span class="line">得到与一个窗口有关的文本的长度（不包含空字符） </span><br><span class="line">WM_PAINT = $000F; </span><br><span class="line">要求一个窗口重画自己 </span><br><span class="line">WM_CLOSE = $0010; </span><br><span class="line">当一个窗口或应用程序要关闭时发送一个信号 </span><br><span class="line">WM_QUERYENDSESSION = $0011; </span><br><span class="line">当用户选择结束对话框或程序自己调用 ExitWindows 函数 </span><br><span class="line">WM_QUIT = $0012; </span><br><span class="line">用来结束程序运行或当程序调用 postquitmessage 函数 </span><br><span class="line">WM_QUERYOPEN = $0013; </span><br><span class="line">当用户窗口恢复以前的大小位置时，把此消息发送给某个图标 </span><br><span class="line">WM_ERASEBKGND = $0014; </span><br><span class="line">当窗口背景必须被擦除时（例在窗口改变大小时） </span><br><span class="line">WM_SYSCOLORCHANGE = $0015; </span><br><span class="line">当系统颜色改变时，发送此消息给所有顶级窗口 </span><br><span class="line">WM_ENDSESSION = $0016; </span><br><span class="line">当系统进程发出 WM_QUERYENDSESSION 消息后，此消息发送给应用程序， </span><br><span class="line">通知它对话是否结束 </span><br><span class="line">WM_SYSTEMERROR = $0017; </span><br><span class="line">WM_SHOWWINDOW = $0018; </span><br><span class="line">当隐藏或显示窗口是发送此消息给这个窗口 </span><br><span class="line">WM_ACTIVATEAPP = $001C; </span><br><span class="line">发此消息给应用程序哪个窗口是激活的，哪个是非激活的； </span><br><span class="line">WM_FONTCHANGE = $001D; </span><br><span class="line">当系统的字体资源库变化时发送此消息给所有顶级窗口 </span><br><span class="line">WM_TIMECHANGE = $001E; </span><br><span class="line">当系统的时间变化时发送此消息给所有顶级窗口 </span><br><span class="line">WM_CANCELMODE = $001F; </span><br><span class="line">发送此消息来取消某种正在进行的摸态（操作） </span><br><span class="line">WM_SETCURSOR = $0020; </span><br><span class="line">如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口 </span><br><span class="line">WM_MOUSEACTIVATE = $0021; </span><br><span class="line">当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口 </span><br><span class="line">WM_CHILDACTIVATE = $0022; </span><br><span class="line">发送此消息给 MDI 子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小 </span><br><span class="line">WM_QUEUESYNC = $0023; </span><br><span class="line">此消息由基于计算机的训练程序发送，通过 WH_JOURNALPALYBACK 的 hook 程序 </span><br><span class="line">分离出用户输入消息 </span><br><span class="line">WM_GETMINMAXINFO = $0024; </span><br><span class="line">此消息发送给窗口当它将要改变大小或位置； </span><br><span class="line">WM_PAINTICON = $0026; </span><br><span class="line">发送给最小化窗口当它图标将要被重画 </span><br><span class="line">WM_ICONERASEBKGND = $0027; </span><br><span class="line">此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画 </span><br><span class="line">WM_NEXTDLGCTL = $0028; </span><br><span class="line">发送此消息给一个对话框程序去更改焦点位置 </span><br><span class="line">WM_SPOOLERSTATUS = $002A; </span><br><span class="line">每当打印管理列队增加或减少一条作业时发出此消息 </span><br><span class="line">WM_DRAWITEM = $002B; </span><br><span class="line">当 button，combobox，listbox，menu 的可视外观改变时发送 </span><br><span class="line">此消息给这些空件的所有者 </span><br><span class="line">WM_MEASUREITEM = $002C; </span><br><span class="line">当 button, combo box, list box, list view control, or menu item 被创建时 </span><br><span class="line">发送此消息给控件的所有者 </span><br><span class="line">WM_DELETEITEM = $002D; </span><br><span class="line">当 the list box 或 combo box 被销毁 或 当 某些项被删除通过 LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT 消息 </span><br><span class="line">WM_VKEYTOITEM = $002E; </span><br><span class="line">此消息有一个 LBS_WANTKEYBOARDINPUT 风格的发出给它的所有者来响应 WM_KEYDOWN 消息 </span><br><span class="line">WM_CHARTOITEM = $002F; </span><br><span class="line">此消息由一个 LBS_WANTKEYBOARDINPUT 风格的列表框发送给他的所有者来响应 WM_CHAR 消息 </span><br><span class="line">WM_SETFONT = $0030; </span><br><span class="line">当绘制文本时程序发送此消息得到控件要用的颜色 </span><br><span class="line">WM_GETFONT = $0031; </span><br><span class="line">应用程序发送此消息得到当前控件绘制文本的字体 </span><br><span class="line">WM_SETHOTKEY = $0032; </span><br><span class="line">应用程序发送此消息让一个窗口与一个热键相关连 </span><br><span class="line">WM_GETHOTKEY = $0033; </span><br><span class="line">应用程序发送此消息来判断热键与某个窗口是否有关联 </span><br><span class="line">WM_QUERYDRAGICON = $0037; </span><br><span class="line">此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标 </span><br><span class="line">WM_COMPAREITEM = $0039; </span><br><span class="line">发送此消息来判定 combobox 或 listbox 新增加的项的相对位置 </span><br><span class="line">WM_GETOBJECT = $003D; </span><br><span class="line">WM_COMPACTING = $0041; </span><br><span class="line">显示内存已经很少了 </span><br><span class="line">WM_WINDOWPOSCHANGING = $0046; </span><br><span class="line">发送此消息给那个窗口的大小和位置将要被改变时，来调用 setwindowpos 函数或其它窗口管理函数 </span><br><span class="line">WM_WINDOWPOSCHANGED = $0047; </span><br><span class="line">发送此消息给那个窗口的大小和位置已经被改变时，来调用 setwindowpos 函数或其它窗口管理函数 </span><br><span class="line">WM_POWER = $0048;（适用于 16 位的 windows） </span><br><span class="line">当系统将要进入暂停状态时发送此消息 </span><br><span class="line">WM_COPYDATA = $004A; </span><br><span class="line">当一个应用程序传递数据给另一个应用程序时发送此消息 </span><br><span class="line">WM_CANCELJOURNAL = $004B; </span><br><span class="line">当某个用户取消程序日志激活状态，提交此消息给程序 </span><br><span class="line">WM_NOTIFY = $004E; </span><br><span class="line">当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口 </span><br><span class="line">WM_INPUTLANGCHANGEREQUEST = $0050; </span><br><span class="line">当用户选择某种输入语言，或输入语言的热键改变 </span><br><span class="line">WM_INPUTLANGCHANGE = $0051; </span><br><span class="line">当平台现场已经被改变后发送此消息给受影响的最顶级窗口 </span><br><span class="line">WM_TCARD = $0052; </span><br><span class="line">当程序已经初始化 windows 帮助例程时发送此消息给应用程序 </span><br><span class="line">WM_HELP = $0053; </span><br><span class="line">此消息显示用户按下了 F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就 </span><br><span class="line">发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口 </span><br><span class="line">WM_USERCHANGED = $0054; </span><br><span class="line">当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体 </span><br><span class="line">设置信息，在用户更新设置时系统马上发送此消息； </span><br><span class="line">WM_NOTIFYFORMAT = $0055; </span><br><span class="line">公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用 ANSI 还是 UNICODE 结构 </span><br><span class="line">在 WM_NOTIFY 消息，使用此控件能使某个控件与它的父控件之间进行相互通信 </span><br><span class="line">WM_CONTEXTMENU = $007B; </span><br><span class="line">当用户某个窗口中点击了一下右键就发送此消息给这个窗口 </span><br><span class="line">WM_STYLECHANGING = $007C; </span><br><span class="line">当调用 SETWINDOWLONG 函数将要改变一个或多个 窗口的风格时发送此消息给那个窗口 </span><br><span class="line">WM_STYLECHANGED = $007D; </span><br><span class="line">当调用 SETWINDOWLONG 函数一个或多个 窗口的风格后发送此消息给那个窗口 </span><br><span class="line">WM_DISPLAYCHANGE = $007E; </span><br><span class="line">当显示器的分辨率改变后发送此消息给所有的窗口 </span><br><span class="line">WM_GETICON = $007F; </span><br><span class="line">此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄； </span><br><span class="line">WM_SETICON = $0080; </span><br><span class="line">程序发送此消息让一个新的大图标或小图标与某个窗口关联； </span><br><span class="line">WM_NCCREATE = $0081; </span><br><span class="line">当某个窗口第一次被创建时，此消息在 WM_CREATE 消息发送前发送； </span><br><span class="line">WM_NCDESTROY = $0082; </span><br><span class="line">此消息通知某个窗口，非客户区正在销毁 </span><br><span class="line">WM_NCCALCSIZE = $0083; </span><br><span class="line">当某个窗口的客户区域必须被核算时发送此消息 </span><br><span class="line">WM_NCHITTEST = $0084;移动鼠标，按住或释放鼠标时发生 </span><br><span class="line">WM_NCPAINT = $0085; </span><br><span class="line">程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时； </span><br><span class="line">WM_NCACTIVATE = $0086; </span><br><span class="line">此消息发送给某个窗口 仅当它的非客户区需要被改变来显示是激活还是非激活状态； </span><br><span class="line">WM_GETDLGCODE = $0087; </span><br><span class="line">发送此消息给某个与对话框程序关联的控件，widdows 控制方位键和 TAB 键使输入进入此控件 </span><br><span class="line">通过响应 WM_GETDLGCODE 消息，应用程序可以把他当成一个特殊的输入控件并能处理它 </span><br><span class="line">WM_NCMOUSEMOVE = $00A0; </span><br><span class="line">当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗 </span><br><span class="line">的边框体 </span><br><span class="line">WM_NCLBUTTONDOWN = $00A1; </span><br><span class="line">当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息 </span><br><span class="line">WM_NCLBUTTONUP = $00A2; </span><br><span class="line">当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息； </span><br><span class="line">WM_NCLBUTTONDBLCLK = $00A3; </span><br><span class="line">当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息 </span><br><span class="line">WM_NCRBUTTONDOWN = $00A4; </span><br><span class="line">当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCRBUTTONUP = $00A5; </span><br><span class="line">当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCRBUTTONDBLCLK = $00A6; </span><br><span class="line">当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息 </span><br><span class="line">WM_NCMBUTTONDOWN = $00A7; </span><br><span class="line">当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCMBUTTONUP = $00A8; </span><br><span class="line">当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCMBUTTONDBLCLK = $00A9; </span><br><span class="line">当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_KEYFIRST = $0100; </span><br><span class="line">WM_KEYDOWN = $0100; </span><br><span class="line">按下一个键 </span><br><span class="line">WM_KEYUP = $0101; </span><br><span class="line">释放一个键 </span><br><span class="line">WM_CHAR = $0102; </span><br><span class="line">按下某键，并已发出 WM_KEYDOWN， WM_KEYUP 消息 </span><br><span class="line">WM_DEADCHAR = $0103; </span><br><span class="line">当用 translatemessage 函数翻译 WM_KEYUP 消息时发送此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSKEYDOWN = $0104; </span><br><span class="line">当用户按住 ALT 键同时按下其它键时提交此消息给拥有焦点的窗口； </span><br><span class="line">WM_SYSKEYUP = $0105; </span><br><span class="line">当用户释放一个键同时 ALT 键还按着时提交此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSCHAR = $0106; </span><br><span class="line">当 WM_SYSKEYDOWN 消息被 TRANSLATEMESSAGE 函数翻译后提交此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSDEADCHAR = $0107; </span><br><span class="line">当 WM_SYSKEYDOWN 消息被 TRANSLATEMESSAGE 函数翻译后发送此消息给拥有焦点的窗口 </span><br><span class="line">WM_KEYLAST = $0108; </span><br><span class="line">WM_INITDIALOG = $0110; </span><br><span class="line">在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务 </span><br><span class="line">WM_COMMAND = $0111; </span><br><span class="line">当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译 </span><br><span class="line">WM_SYSCOMMAND = $0112; </span><br><span class="line">当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息 </span><br><span class="line">WM_TIMER = $0113; 发生了定时器事件 </span><br><span class="line">WM_HSCROLL = $0114; </span><br><span class="line">当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件 </span><br><span class="line">WM_VSCROLL = $0115; </span><br><span class="line">当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件 WM_INITMENU = $0116; </span><br><span class="line">当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单 </span><br><span class="line">WM_INITMENUPOPUP = $0117; </span><br><span class="line">当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部 </span><br><span class="line">WM_MENUSELECT = $011F; </span><br><span class="line">当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口） </span><br><span class="line">WM_MENUCHAR = $0120; </span><br><span class="line">当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者； </span><br><span class="line">WM_ENTERIDLE = $0121; </span><br><span class="line">当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待 </span><br><span class="line">WM_MENURBUTTONUP = $0122; </span><br><span class="line">WM_MENUDRAG = $0123; </span><br><span class="line">WM_MENUGETOBJECT = $0124; </span><br><span class="line">WM_UNINITMENUPOPUP = $0125; </span><br><span class="line">WM_MENUCOMMAND = $0126; </span><br><span class="line">WM_CHANGEUISTATE = $0127; </span><br><span class="line">WM_UPDATEUISTATE = $0128; </span><br><span class="line">WM_QUERYUISTATE = $0129; </span><br><span class="line">WM_CTLCOLORMSGBOX = $0132; </span><br><span class="line">在 windows 绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLOREDIT = $0133; </span><br><span class="line">当一个编辑型控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORLISTBOX = $0134; </span><br><span class="line">当一个列表框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORBTN = $0135; </span><br><span class="line">当一个按钮控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORDLG = $0136; </span><br><span class="line">当一个对话框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色 </span><br><span class="line">WM_CTLCOLORSCROLLBAR= $0137; </span><br><span class="line">当一个滚动条控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色 </span><br><span class="line">WM_CTLCOLORSTATIC = $0138; </span><br><span class="line">当一个静态控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色 </span><br><span class="line">WM_MOUSEFIRST = $0200; </span><br><span class="line">WM_MOUSEMOVE = $0200; </span><br><span class="line"> 移动鼠标 </span><br><span class="line">WM_LBUTTONDOWN = $0201; </span><br><span class="line">按下鼠标左键 </span><br><span class="line">WM_LBUTTONUP = $0202; </span><br><span class="line">释放鼠标左键 </span><br><span class="line">WM_LBUTTONDBLCLK = $0203; </span><br><span class="line">双击鼠标左键 </span><br><span class="line">WM_RBUTTONDOWN = $0204; </span><br><span class="line">按下鼠标右键 </span><br><span class="line">WM_RBUTTONUP = $0205; </span><br><span class="line">释放鼠标右键 </span><br><span class="line">WM_RBUTTONDBLCLK = $0206; </span><br><span class="line">双击鼠标右键 </span><br><span class="line">WM_MBUTTONDOWN = $0207; </span><br><span class="line">按下鼠标中键 </span><br><span class="line">WM_MBUTTONUP = $0208; </span><br><span class="line">释放鼠标中键 </span><br><span class="line">WM_MBUTTONDBLCLK = $0209; </span><br><span class="line">双击鼠标中键 </span><br><span class="line">WM_MOUSEWHEEL = $020A; </span><br><span class="line">当鼠标轮子转动时发送此消息个当前有焦点的控件 </span><br><span class="line">WM_MOUSELAST = $020A; </span><br><span class="line">WM_PARENTNOTIFY = $0210; </span><br><span class="line">当 MDI 子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口 </span><br><span class="line">WM_ENTERMENULOOP = $0211; </span><br><span class="line">发送此消息通知应用程序的主窗口 that 已经进入了菜单循环模式 </span><br><span class="line">WM_EXITMENULOOP = $0212; </span><br><span class="line">发送此消息通知应用程序的主窗口 that 已退出了菜单循环模式 </span><br><span class="line">WM_NEXTMENU = $0213; </span><br><span class="line">WM_SIZING = 532; </span><br><span class="line">当用户正在调整窗口大小时发送此消息给窗口；通过此消息应用程序可以监视窗口大小和位置也可以修改他们 </span><br><span class="line">WM_CAPTURECHANGED = 533; </span><br><span class="line">发送此消息 给窗口当它失去捕获的鼠标时； </span><br><span class="line">WM_MOVING = 534; </span><br><span class="line">当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置也可以修改他们； </span><br><span class="line">WM_POWERBROADCAST = 536; </span><br><span class="line">此消息发送给应用程序来通知它有关电源管理事件； </span><br><span class="line">WM_DEVICECHANGE = 537; </span><br><span class="line">当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序 </span><br><span class="line">WM_IME_STARTCOMPOSITION = $010D; </span><br><span class="line">WM_IME_ENDCOMPOSITION = $010E; </span><br><span class="line">WM_IME_COMPOSITION = $010F; </span><br><span class="line">WM_IME_KEYLAST = $010F; </span><br><span class="line">WM_IME_SETCONTEXT = $0281; </span><br><span class="line">WM_IME_NOTIFY = $0282; </span><br><span class="line">WM_IME_CONTROL = $0283; </span><br><span class="line">WM_IME_COMPOSITIONFULL = $0284; </span><br><span class="line">WM_IME_SELECT = $0285; </span><br><span class="line">WM_IME_CHAR = $0286; </span><br><span class="line">WM_IME_REQUEST = $0288; </span><br><span class="line">WM_IME_KEYDOWN = $0290; </span><br><span class="line">WM_IME_KEYUP = $0291; </span><br><span class="line">WM_MDICREATE = $0220; </span><br><span class="line">应用程序发送此消息给多文档的客户窗口来创建一个 MDI 子窗口 </span><br><span class="line">WM_MDIDESTROY = $0221; </span><br><span class="line">应用程序发送此消息给多文档的客户窗口来关闭一个 MDI 子窗口 </span><br><span class="line">WM_MDIACTIVATE = $0222; </span><br><span class="line">应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个 MDI 子窗口，当客户窗口收到此消息后，它发出 WM_MDIACTIVE 消息给 MDI 子窗口（未激活）激活它； </span><br><span class="line">WM_MDIRESTORE = $0223; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口让子窗口从最大最小化恢复到原来大小 </span><br><span class="line">WM_MDINEXT = $0224; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口激活下一个或前一个窗口 </span><br><span class="line">WM_MDIMAXIMIZE = $0225; </span><br><span class="line">程序发送此消息给 MDI 客户窗口来最大化一个 MDI 子窗口； </span><br><span class="line">WM_MDITILE = $0226; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口以平铺方式重新排列所有 MDI 子窗口 </span><br><span class="line">WM_MDICASCADE = $0227; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口以层叠方式重新排列所有 MDI 子窗口 </span><br><span class="line">WM_MDIICONARRANGE = $0228; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口重新排列所有最小化的 MDI 子窗口 </span><br><span class="line">WM_MDIGETACTIVE = $0229; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口来找到激活的子窗口的句柄 </span><br><span class="line">WM_MDISETMENU = $0230; </span><br><span class="line">程序 发送此消息给 MDI 客户窗口用 MDI 菜单代替子窗口的菜单 </span><br><span class="line">WM_ENTERSIZEMOVE = $0231; </span><br><span class="line">WM_EXITSIZEMOVE = $0232; </span><br><span class="line">WM_DROPFILES = $0233; </span><br><span class="line">WM_MDIREFRESHMENU = $0234; </span><br><span class="line">WM_MOUSEHOVER = $02A1; </span><br><span class="line">WM_MOUSELEAVE = $02A3; </span><br><span class="line">WM_CUT = $0300; </span><br><span class="line">程序发送此消息给一个编辑框或 combobox 来删除当前选择的文本 </span><br><span class="line">WM_COPY = $0301; </span><br><span class="line">程序发送此消息给一个编辑框或 combobox 来复制当前选择的文本到剪贴板 </span><br><span class="line">WM_PASTE = $0302; </span><br><span class="line">程序发送此消息给 editcontrol 或 combobox 从剪贴板中得到数据 </span><br><span class="line">WM_CLEAR = $0303; </span><br><span class="line">程序发送此消息给 editcontrol 或 combobox 清除当前选择的内容； </span><br><span class="line">WM_UNDO = $0304; </span><br><span class="line">程序发送此消息给 editcontrol 或 combobox 撤消最后一次操作 </span><br><span class="line">WM_RENDERFORMAT = $0305； </span><br><span class="line"> </span><br><span class="line">WM_RENDERALLFORMATS = $0306; </span><br><span class="line">WM_DESTROYCLIPBOARD = $0307; </span><br><span class="line">当调用 ENPTYCLIPBOARD 函数时 发送此消息给剪贴板的所有者 </span><br><span class="line">WM_DRAWCLIPBOARD = $0308; </span><br><span class="line">当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口；它允许用剪贴板观察窗口来 </span><br><span class="line">显示剪贴板的新内容； </span><br><span class="line">WM_PAINTCLIPBOARD = $0309; </span><br><span class="line">当剪贴板包含 CF_OWNERDIPLAY 格式的数据并且剪贴板观察窗口的客户区需要重画； </span><br><span class="line">WM_VSCROLLCLIPBOARD = $030A; </span><br><span class="line">WM_SIZECLIPBOARD = $030B; </span><br><span class="line">当剪贴板包含 CF_OWNERDIPLAY 格式的数据并且剪贴板观察窗口的客户区域的大小已经改变是此消息通过剪贴板观察窗口发送给剪贴板的所有者； </span><br><span class="line">WM_ASKCBFORMATNAME = $030C; </span><br><span class="line">通过剪贴板观察窗口发送此消息给剪贴板的所有者来请求一个 CF_OWNERDISPLAY 格式的剪贴板的名字 </span><br><span class="line">WM_CHANGECBCHAIN = $030D; </span><br><span class="line">当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口； </span><br><span class="line">WM_HSCROLLCLIPBOARD = $030E; </span><br><span class="line">此消息通过一个剪贴板观察窗口发送给剪贴板的所有者 ；它发生在当剪贴板包含 CFOWNERDISPALY 格式的数据并且有个事件在剪贴板观察窗的水平滚动条上；所有者应滚动剪贴板图象并更新滚动条的值； </span><br><span class="line">WM_QUERYNEWPALETTE = $030F; </span><br><span class="line">此消息发送给将要收到焦点的窗口，此消息能使窗口在收到焦点时同时有机会实现他的逻辑调色板 </span><br><span class="line">WM_PALETTEISCHANGING= $0310; </span><br><span class="line">当一个应用程序正要实现它的逻辑调色板时发此消息通知所有的应用程序 </span><br><span class="line">WM_PALETTECHANGED = $0311; </span><br><span class="line">此消息在一个拥有焦点的窗口实现它的逻辑调色板后发送此消息给所有顶级并重叠的窗口，以此来改变系统调色板 </span><br><span class="line">WM_HOTKEY = $0312; </span><br><span class="line">当用户按下由 REGISTERHOTKEY 函数注册的热键时提交此消息 </span><br><span class="line">WM_PRINT = 791; </span><br><span class="line">应用程序发送此消息仅当 WINDOWS 或其它应用程序发出一个请求要求绘制一个应用程序的一部分； </span><br><span class="line">WM_PRINTCLIENT = 792; </span><br><span class="line">WM_HANDHELDFIRST = 856; </span><br><span class="line">WM_HANDHELDLAST = 863; </span><br><span class="line">WM_PENWINFIRST = $0380; </span><br><span class="line">WM_PENWINLAST = $038F; </span><br><span class="line">WM_COALESCE_FIRST = $0390; </span><br><span class="line">WM_COALESCE_LAST = $039F; </span><br><span class="line">WM_DDE_FIRST = $03E0; </span><br><span class="line">WM_DDE_INITIATE = WM_DDE_FIRST+0; </span><br><span class="line">一个 DDE 客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名； </span><br><span class="line">WM_DDE_TERMINATE = WM_DDE_FIRST+1; </span><br><span class="line">一个 DDE 应用程序（无论是客户还是服务器）提交此消息来终止一个会话； </span><br><span class="line">WM_DDE_ADVISE = WM_DDE_FIRST+2; </span><br><span class="line">一个 DDE 客户程序提交此消息给一个 DDE 服务程序来请求服务器每当数据项改变时更新它 </span><br><span class="line">WM_DDE_UNADVISE = WM_DDE_FIRST+3; </span><br><span class="line">一个 DDE 客户程序通过此消息通知一个 DDE 服务程序不更新指定的项或一个特殊的剪贴板格式的项 </span><br><span class="line">WM_DDE_ACK = WM_DDE_FIRST+4; </span><br><span class="line">此消息通知一个 DDE（动态数据交换）程序已收到并正在处理 WM_DDE_POKE, WM_DDE_EXECUTE, WM_DDE_DATA, WM_DDE_ADVISE, WM_DDE_UNADVISE, or WM_DDE_INITIAT 消息 </span><br><span class="line">WM_DDE_DATA = WM_DDE_FIRST+5; </span><br><span class="line">一个 DDE 服务程序提交此消息给 DDE 客户程序来传递个一数据项给客户或通知客户的一条可用数据项 </span><br><span class="line">WM_DDE_REQUEST = WM_DDE_FIRST+6; </span><br><span class="line">一个 DDE 客户程序提交此消息给一个 DDE 服务程序来请求一个数据项的值； </span><br><span class="line">WM_DDE_POKE = WM_DDE_FIRST+7; </span><br><span class="line">一个 DDE 客户程序提交此消息给一个 DDE 服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项；服务器通过答复 WM_DDE_ACK 消息提示是否它接收这个数据项； </span><br><span class="line">WM_DDE_EXECUTE = WM_DDE_FIRST+8; </span><br><span class="line">一个 DDE 客户程序提交此消息给一个 DDE 服务程序来发送一个字符串给服务器让它象串行命令一样被处理，服务器通过提交 WM_DDE_ACK 消息来作回应； </span><br><span class="line">WM_DDE_LAST = WM_DDE_FIRST+8; </span><br><span class="line">WM_APP = $8000; </span><br><span class="line">WM_USER = $0400; </span><br><span class="line">此消息能帮助应用程序自定义私有消息； </span><br><span class="line"> </span><br><span class="line">通知消息(Notification message)是指这样一种消息，一个窗口内的子控件发生了一些事情，需要通知父窗口。通知消息只适用于标准的窗口控件如按钮、列表框、组合框、编辑框，以及 Windows 95 公共控件如树状视图、列表视图等。例如，单击或双击一个控件、在控件中选择部分文本、操作控件的滚动条都会产生通知消息。 </span><br><span class="line">按扭 </span><br><span class="line">BN_CLICKED 用户单击了按钮 </span><br><span class="line">BN_DISABLE 按钮被禁止 </span><br><span class="line">BN_DOUBLECLICKED 用户双击了按钮 </span><br><span class="line">BN_HILITE 用户加亮了按钮 </span><br><span class="line">BN_PAINT 按钮应当重画 </span><br><span class="line">BN_UNHILITE 加亮应当去掉 </span><br><span class="line">组合框 </span><br><span class="line">CBN_CLOSEUP 组合框的列表框被关闭 </span><br><span class="line">CBN_DBLCLK 用户双击了一个字符串 </span><br><span class="line">CBN_DROPDOWN 组合框的列表框被拉出 </span><br><span class="line">CBN_EDITCHANGE 用户修改了编辑框中的文本 </span><br><span class="line">CBN_EDITUPDATE 编辑框内的文本即将更新 </span><br><span class="line">CBN_ERRSPACE 组合框内存不足 </span><br><span class="line">CBN_KILLFOCUS 组合框失去输入焦点 </span><br><span class="line">CBN_SELCHANGE 在组合框中选择了一项 </span><br><span class="line">CBN_SELENDCANCEL 用户的选择应当被取消 </span><br><span class="line">CBN_SELENDOK 用户的选择是合法的 </span><br><span class="line">CBN_SETFOCUS 组合框获得输入焦点 </span><br><span class="line">编辑框 </span><br><span class="line">EN_CHANGE 编辑框中的文本己更新 </span><br><span class="line">EN_ERRSPACE 编辑框内存不足 </span><br><span class="line">EN_HSCROLL 用户点击了水平滚动条 </span><br><span class="line">EN_KILLFOCUS 编辑框正在失去输入焦点 </span><br><span class="line">EN_MAXTEXT 插入的内容被截断 </span><br><span class="line">EN_SETFOCUS 编辑框获得输入焦点 </span><br><span class="line">EN_UPDATE 编辑框中的文本将要更新 </span><br><span class="line">EN_VSCROLL 用户点击了垂直滚动条消息含义 </span><br><span class="line">列表框 </span><br><span class="line">LBN_DBLCLK 用户双击了一项 </span><br><span class="line">LBN_ERRSPACE 列表框内存不够 </span><br><span class="line">LBN_KILLFOCUS 列表框正在失去输入焦点 </span><br><span class="line">LBN_SELCANCEL 选择被取消 </span><br><span class="line">LBN_SELCHANGE 选择了另一项 </span><br><span class="line">LBN_SETFOCUS 列表框获得输入焦点 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout – 自定义msgbox对话框</title>
      <link href="/posts/2024/08/7501f6cc.html"/>
      <url>/posts/2024/08/7501f6cc.html</url>
      
        <content type="html"><![CDATA[<p>今天尝试做了个 HTMLayout 的自定义 msgbox 对话框，并做了封装，下面就来看下实际效果吧！</p><p>说明：<br>HTMLayout 提示内容、标题内容 均支持 html 代码，大家可以充分发挥想象力。</p><p>版本二：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-201.png" alt=""><br>修改自动延时弹窗为 tips 模态弹窗，增加关闭按钮</p><p>版本一：</p><span id="more"></span><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-202.png" alt=""> <p>本实例提供了 3 种弹窗模式，并且都有返回值，方便调用</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-203.png" alt=""> <p>第一种：直接调用 win.msgbox 也就是 windows 系统机制提供的对话框。<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-204.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-205.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-206.png" alt=""> </p><p>第二种：用 htmlayout 定制的仿 msgbox 对话框，有 3 种模式可选。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-207.png" alt=""> <p>第三种：用 htmlayout 定制的弹出提示框，并且会在指定时间内自动关闭。<br>调用代码说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import tipsbox  //载入自定义窗口库</span><br><span class="line"> </span><br><span class="line">mainForm.alert.oncommand = function(id,event)&#123;   //弹出 msgbox</span><br><span class="line">msg = tipsbox.alert(&quot;这是内容&quot;,&quot;这是标题&quot;)</span><br><span class="line">//按钮事件触发 </span><br><span class="line">if(msg == true)&#123;</span><br><span class="line">process.execute(url);</span><br><span class="line">&#125;else&#123;process.execute(homepage);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.msg.oncommand = function(id,event)&#123;   //弹出自定义 msgbox</span><br><span class="line"> //自定义弹窗 参数（信息，标题，父窗口，按钮模式，按钮图片，宽，高）</span><br><span class="line"> //按钮显示模式 默认：确定  1、确定&amp;取消 2、是&amp;否</span><br><span class="line"> //按钮显示模式 默认：不显示 1、warning 2、error 3、question 4、OK</span><br><span class="line"> //宽高 默认 450px,155px</span><br><span class="line">msg = tipsbox.msg(&quot;这是内容&quot;,&quot;这是标题&quot;,mainForm,2)//返回值 ok yes no cannel</span><br><span class="line"></span><br><span class="line">//按钮事件触发 </span><br><span class="line">if(msg==&quot;ok&quot; || msg ==&quot;yes&quot;)&#123;</span><br><span class="line">process.execute(url);</span><br><span class="line">&#125;else&#123;process.execute(homepage);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.msgtips.oncommand = function(id,event)&#123;  //弹出 延时 box</span><br><span class="line">//自定义 延时自动关闭 窗口参数（信息，延时，宽，高）</span><br><span class="line">msg = tipsbox.msgtips(&quot;延时 2 秒自动关闭&quot;,2000,300,120) </span><br><span class="line"> </span><br><span class="line">//按钮事件触发</span><br><span class="line">if(msg == true)&#123;</span><br><span class="line">process.execute(url);</span><br><span class="line">&#125;else&#123;process.execute(homepage);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件下载：<br><a href="https://pan.baidu.com/s/1GiIucqXjFGRso8IdwmEgdg?pwd=4aa5">htmlayout自定义弹窗实例</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout的CSS BOX模型盒子学习利器</title>
      <link href="/posts/2024/08/8eace90c.html"/>
      <url>/posts/2024/08/8eace90c.html</url>
      
        <content type="html"><![CDATA[<p>基于很多童鞋对 CSS 模型盒子的难以入门，特此放送这个小工具给拿去玩！<br>特性： </p><ul><li>支持 BOX 盒子编辑和实时预览； </li><li>支持 CSS2.1 &amp; Htmlayout 全部样式； </li><li>支持 BOX 盒子源码编辑和实时预览； </li><li>更多功能等你来发现…</li></ul><p>下载地址：</p><span id="more"></span><p><a href="https://pan.baidu.com/s/1lkxosHY9v8LDUyOAPujXcw?pwd=zu97">CSS BOX模型盒子学习工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout &amp; Aardio 按钮事件实现方法总结（6）-css!</title>
      <link href="/posts/2024/08/6f7ce168.html"/>
      <url>/posts/2024/08/6f7ce168.html</url>
      
        <content type="html"><![CDATA[<p>这里又是一个按钮，没有 behavior，而是使用 csss! 直接调用 aardio 全局函数！</p><p>需要注意：</p><ul><li><code>wbLayout = web.layout( mainForm //关键是在第二个参数里指定 _HL_HANDLE_METHOD_CALL 以捕获所有函数调用事件 ,0x80000000/*_HL_DISABLE_INITIALIZATION*/ | 0x200/*_HL_HANDLE_METHOD_CALL*/ )</code></li><li>在 css 中 <code>#btn&#123;active-on!:closeform();&#125; /* csss!调用全局函数*/&#125; </code></li><li><code>wbLayout.closeform = function()&#123;... </code>函数写在页面加载之前！  </li></ul><p>实例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line"> </span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm //关键是在第二个参数里指定 _HL_HANDLE_METHOD_CALL 以捕获所有函数调用事件</span><br><span class="line">    ,0x80000000/*_HL_DISABLE_INITIALIZATION*/ | 0x200/*_HL_HANDLE_METHOD_CALL*/ </span><br><span class="line">)  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;R 大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#btn&#123;width:120px;height:32px;line-height:32px;text-align:center;</span><br><span class="line">margin-top:10px;margin-left:50%% - 60px;background:#009688;color:#fff;</span><br><span class="line">active-on!:closeform();&#125;  /* csss! 调用全局函数*/</span><br><span class="line">#btn:hover&#123;background:#c1c1c1;&#125;</span><br><span class="line"> </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;div id=&quot;btn&quot;&gt;按钮 csss!&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.closeform = function()&#123; //函数定义在页面加载之前</span><br><span class="line">mainForm.close()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;  //加载页面</span><br><span class="line">       </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout &amp; Aardio 按钮事件实现方法总结（5）-自定义behavior</title>
      <link href="/posts/2024/08/4ed4dafd.html"/>
      <url>/posts/2024/08/4ed4dafd.html</url>
      
        <content type="html"><![CDATA[<p>同（方法 4）一样用 div 定义了一个按钮；<br>也是给按钮指定了一个 behavior：mybtn 事件，<br>但是这个 behavior 不是 htmlayout 自带的，<br>所以呢我们就需要通过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace web.layout.behavior.mybtn&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来指定这个 behavior 的事件，并应用到按钮上！</p><p>这就是传说中的 htmlayout 自定义 behavior 大法！！！<br>传说中掌握这个大法将无所不能！！！</p><p>实例代码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import process;</span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;R 大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#btn&#123;width:120px;height:32px;line-height:32px;text-align:center;margin-top:10px;margin-left:50%% - 60px;background:#009688;color:#fff;behavior:mybtn;&#125;</span><br><span class="line">#btn:hover&#123;background:#c1c1c1;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;div id=&quot;btn&quot;&gt;按钮 mybtn&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">namespace web.layout.behavior.mybtn&#123;  //使用命名需要将事件定义在载入 html 之前</span><br><span class="line">onMouseClick = function (ltTarget,ltOwner,reason,behaviorParams) &#123;</span><br><span class="line">..mainForm.close()//命名空间里需要使用..来指定全局变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;  //载入 html  </span><br><span class="line"> </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout &amp; Aardio 按钮事件实现方法总结（4）</title>
      <link href="/posts/2024/08/ca5ee2b7.html"/>
      <url>/posts/2024/08/ca5ee2b7.html</url>
      
        <content type="html"><![CDATA[<p>实例说明：<br>这期，又是一个按钮，也是用的.onButtonClick 事件， (也可以用节点事件参照方法 3)<br>没有什么特别的，辣么会有什么区别呢？  </p><p>这次我们是通过 div 来定义一个按钮，并指定 id 为 btn，<br>同时注意在 css 中，我们为#btn 绑定了 behavior：button 行为；<br>之前是用的 button 控件，自带特效，<br>现在我们通过把特效拿过来给 div，<br>效果也是一样一样的！！！</p><p>实例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import process;</span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;R 大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#btn&#123;width:120px;height:32px;line-height:32px;text-align:center;margin-top:10px;margin-left:50%% - 60px;background:#009688;color:#fff;behavior:button;&#125;</span><br><span class="line">#btn:hover&#123;background:#c1c1c1;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;div id=&quot;btn&quot;&gt;按钮 div&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;</span><br><span class="line"> </span><br><span class="line">wbLayout.onButtonClick = &#123;</span><br><span class="line">btn = function (ltTarget,ltOwner,reason,behaviorParams) &#123;</span><br><span class="line">mainForm.close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout &amp; Aardio 按钮事件实现方法总结（3）</title>
      <link href="/posts/2024/08/5789da0e.html"/>
      <url>/posts/2024/08/5789da0e.html</url>
      
        <content type="html"><![CDATA[<p>本节，我们通过节点给“按钮 close”节点单独加载.onButtonClick 事件，同时需要把对象事件通过.attachEventHandler() 发送给主程序进行监听。<br>代码示例：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import process;</span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;R 大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">@set std-button&#123;</span><br><span class="line">:root&#123;padding:0 8 0 8;line-height:24px;border:1px solid #ccc;cursor: pointer;transition: none;color:#fff;&#125;</span><br><span class="line">:root:hover&#123;background:#999;&#125;</span><br><span class="line">:root:active&#123;background:#999;&#125;</span><br><span class="line">&#125;</span><br><span class="line">button&#123;background: #c1c1c1;width:120px;height:32px;margin-top:10px;margin-left:50%% - 60px;&#125;</span><br><span class="line">#close_btn&#123;background:#009688;&#125;</span><br><span class="line">    #open_btn&#123;background:#FF5722;&#125;</span><br><span class="line">    button[name=&quot;name_btn&quot;]&#123;background:#1E9FFF;&#125;</span><br><span class="line">    #none_btn&#123;background:#2F4056;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;button id=&quot;close_btn&quot;&gt;按钮 close&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;</span><br><span class="line"> </span><br><span class="line">var btn = wbLayout.$1(&quot;#close_btn&quot;)  //查找 按钮 close 节点</span><br><span class="line">btn.onButtonClick = function (ltTarget,ltOwner,reason,behaviorParams) &#123;  //给 按钮 close 节点加载事件</span><br><span class="line">mainForm.close() </span><br><span class="line">&#125;</span><br><span class="line">btn.attachEventHandler()  //添加 按钮 close 节点事件监听</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure><p>通过这样的方式我们可以更换节点的事件处理方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var btn = wbLayout.$1(&quot;#close_btn&quot;)  //查找 按钮 close 节点</span><br><span class="line"> </span><br><span class="line">btn.onMouseWheel = function( ltTarget,ltOwner,x,y,ltMouseParams ) &#123;  //当鼠标滚动</span><br><span class="line">mainForm.close() </span><br><span class="line">&#125;</span><br><span class="line">btn.onMouseLeave = function( ltTarget,ltOwner,x,y,ltMouseParams ) &#123;  //当鼠标离开</span><br><span class="line">mainForm.close() </span><br><span class="line">&#125;</span><br><span class="line">btn.onButtonClick = function( ltTarget,ltOwner,x,y,ltMouseParams ) &#123;  //当点击按钮</span><br><span class="line">mainForm.close() </span><br><span class="line">&#125;</span><br><span class="line">btn.attachEventHandler()  //添加 按钮 close 节点事件监听</span><br></pre></td></tr></table></figure><p>这样就可以实现给控件修改事件触发条件了！<br>当然这不是 htmlayout 推荐的做法，那么我们可以继续往下面慢慢学习吧！！！<br>原文地址：<a href="https://www.btbat.com/1141.html">https://www.btbat.com/1141.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout CSS reset 一统界面样式</title>
      <link href="/posts/2024/08/817b886f.html"/>
      <url>/posts/2024/08/817b886f.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*reset*/</span><br><span class="line">html,body,h1,h2,h3,h4,h5,h6,div,dl,dt</span><br><span class="line">,dd,ul,ol,li,p,blockquote,pre,hr,figure,table,</span><br><span class="line">caption,th,form,fieldset,legend,</span><br><span class="line">input,button,textarea,menu&#123;margin: 0;padding: 0;outline: none;&#125;</span><br><span class="line">header,footer,section,article,aside,nav,hgroup,</span><br><span class="line">address,figure,figcaption,menu,details&#123;display: block;&#125;</span><br><span class="line">table &#123;border-collapse: collapse;border-spacing: 0;&#125;</span><br><span class="line">caption,th &#123;text-align: left;font-weight: normal;&#125;</span><br><span class="line">html,body,fieldset,img,iframe,abbr &#123;border: 0;&#125;</span><br><span class="line">i,cite,em,var,address,dfn&#123;font-style: normal;&#125;</span><br><span class="line">summary &#123;outline: 0;&#125;</span><br><span class="line">li &#123;list-style: none;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6,small&#123;font-size: 100%;&#125;</span><br><span class="line">sup,sub &#123;font-size: 83%;&#125;</span><br><span class="line">pre,code,kbd,samp &#123;font-family: inherit;&#125;</span><br><span class="line">textarea &#123;overflow: auto;resize: none;&#125;</span><br><span class="line">label,summary &#123;cursor: default;&#125;</span><br><span class="line">a,button&#123;cursor: pointer;&#125;</span><br><span class="line">button,input &#123;box-sizing: content-box;&#125;</span><br><span class="line">textarea,input,button,select,keygen,legend &#123;font: inherit;outline: 0;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6,em,strong,b &#123;font-weight: normal;&#125;</span><br><span class="line">del,ins,u,s,a,a:hover&#123;text-decoration: none;&#125;</span><br><span class="line">body &#123;-webkit-user-select: none;cursor: default;&#125;</span><br><span class="line">[contenteditable] &#123;-webkit-user-select: auto;outline: 0;&#125;</span><br><span class="line">mark &#123;background: none;&#125;</span><br><span class="line">svg &#123;width: 100%;height: 100%;pointer-events: none;&#125;</span><br><span class="line"> </span><br><span class="line">h1,h2,h3,h4,h5,h6,small &#123;</span><br><span class="line">font-size: 100%;</span><br><span class="line">&#125;</span><br><span class="line">/*reset*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout 实现skin换肤功能！</title>
      <link href="/posts/2024/08/ac232dd.html"/>
      <url>/posts/2024/08/ac232dd.html</url>
      
        <content type="html"><![CDATA[<p><code>target=&quot;\_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;</code></p><p>在 htmlayout 的 css 中支持自定义 CSS 常量，这给我们做界面设计带来了更多可能。</p><p>了解过 less 的童鞋，应该对 CSS 常量定义非常熟悉。</p><p>需求分析：更换皮肤一般是需要改变界面的颜色、图片、样式，</p><p>而在 htmlayout 中绝大部分内容都可以使用 css 来控制，非常酷！</p><p>步骤：</p><p>首先我们来建立一个 red.css，用来存储红色皮肤需要的样式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@const BGROUND: RED；   //定义背景色</span><br><span class="line"></span><br><span class="line">@const   BORDER1, BORDER2 : 5px solid #FF0000;  //定义两个边框色</span><br><span class="line"></span><br><span class="line">@const MY\_HATCH\_BACKGROUND  : repeat url(sb-scroll-base.png);  //定义滚动条图片</span><br><span class="line"></span><br><span class="line">@const WIDTH\_EXPR: calc( 50% + 40px);  //定义宽度数值</span><br><span class="line"></span><br><span class="line">@const INITIAL\_TEXT: &quot;RED SKIN&quot;;       //定义文本内容</span><br></pre></td></tr></table></figure><span id="more"></span><p>同样的方法在定义 blue.css 用来存储蓝色皮肤需要的样式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@const BGROUND: BLUE；   //定义背景色</span><br><span class="line"></span><br><span class="line">@const   BORDER1, BORDER2 : 5px solid #FFFF00;  //定义两个边框色</span><br><span class="line"></span><br><span class="line">@const MY\_HATCH\_BACKGROUND  : repeat url(sb-scroll-base2.png);  //定义滚动条图片</span><br><span class="line"></span><br><span class="line">@const WIDTH\_EXPR: calc( 50% + 40px);  //定义宽度数值</span><br><span class="line"></span><br><span class="line">@const INITIAL\_TEXT: &quot;BLUE SKIN&quot;;       //定义文本内容</span><br></pre></td></tr></table></figure><p>然后在建立个 master.css 用来存储真个界面框架的样式：</p><p>这里存放一些不需要改动的样式，同时引用常量值来加载 skin 样式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body&#123;background：@BGROUND;&#125;</span><br><span class="line"></span><br><span class="line">div&#123;border:@BORDER1;&#125;</span><br></pre></td></tr></table></figure><p>最后通过 HTML 来引入 master.css 和默认皮肤样式 red.css    </p><p>辣么 OK，现在我们只需要将 red.css 替换成 blue.css 就可以实现换肤的要求了！</p><p>实现代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var css= $1(&quot;#redskin&quot;)       //通过 ID 选择 css</span><br><span class="line"></span><br><span class="line">css.href = &quot;skin/blue.css&quot;    //替换 href 属性的值</span><br><span class="line"></span><br><span class="line">css.xcall(&quot;activate&quot;)             //刷新界面</span><br></pre></td></tr></table></figure><p>PS:</p><p>css 常量定义规则：@const  常量,常量… : 值 ;       </p><p>引用常量： css 属性名:@常量名；</p><p>同时：在 css 中引入其他 css 文件可以使用：</p><p><code>@import url(treeview.css) screen;</code></p><p>是不是很 so easy？</p><p>…..</p><p>最后通过 HTML 来引入 master.css 和默认皮肤样式 red.css</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout 修改 file 控件按钮文字</title>
      <link href="/posts/2024/08/b94012fd.html"/>
      <url>/posts/2024/08/b94012fd.html</url>
      
        <content type="html"><![CDATA[<p>CSS演示：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*文件选择 type=file-path*/</span><br><span class="line">@set std-file-selector&#123;</span><br><span class="line">:root&#123;width:214px;height:24px;line-height:24px;padding:0px;margin:0px;border:1px solid @mCtlborder;background: @mCtlbackground;color:@mText3;&#125;</span><br><span class="line">:root &gt; caption&#123;padding:0px 0px 0px 24px;height:12px;foreground-repeat:no-repeat;foreground-position: 4px 50%;&#125;</span><br><span class="line">:root:empty &gt; caption &#123;padding:0px 0px 0px 6px;color:@mText4;&#125;</span><br><span class="line">:root &gt; button&#123;margin:0;padding:0;width:36px;height:18px;line-height:24px;color:@mText3;border:none;border-left: 1px solid @mline;&#125;</span><br><span class="line">:root &gt; button &gt; text &#123;content: &quot;删除&quot;;&#125;</span><br><span class="line">:root:empty &gt; button &gt; text &#123;content: &quot;选择&quot;;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控件代码:<br><code>&lt;input type=&quot;file-path&quot; filter=&quot;压缩文件:*.tar.gz;&quot; /&gt; </code> </p><span id="more"></span><p>通过控件下的 button &gt; text 的 content 属性来替换文字，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:root &gt; button &gt; text &#123;content: &quot;删除&quot;;&#125;</span><br><span class="line">:root:empty &gt; button &gt; text &#123;content: &quot;选择&quot;;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout behavior 大全</title>
      <link href="/posts/2024/08/8fd1f033.html"/>
      <url>/posts/2024/08/8fd1f033.html</url>
      
        <content type="html"><![CDATA[<p>更详细的可参考：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7156">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7156</a></p><p>这是能找到的最全的 htmlayout behavior 了，如有遗漏欢迎补全！！！</p><p>behavior:none</p><p>behavior:gird  //网格控件<br>behavior:sortable-grid<br>behavior:virtual-grid<br>behavior:sample-data-source //virtual-grid 数据源<br>behavior:colum-resizer // table 列宽调整 table 标记内可以使用 fixedrows=”1”指定首行不随滚动条移动</p><p>behavior:tree //树形视图控件<br>behavior: tree-checkmarks;<br>-option- - 表示一个列表项.<br>-optgroup- - 列表项分组<br>属性<br>size=”N” N 是大于 1 的数，指定显示行数，显示 1 行时为下拉列表，显示多行列表框<br>checkmarks - 是否显示复选框，其外观在 master CSS 中定义，可在 CSS 中自行义外观</p><p>behavior:select //列表框<br>behavior:dropdown-select //才是下拉框 size=1<br>behavior:editable-select //带复选框的列表<br>behavior:select scroller //滚动选择列表<br>size=“N” - N 是大于 1 的数，指定显示行数，显示 1 行时为下拉列表，显示多行列表框<br>multiple 是否允许选中多个列表项<br>multiple=“checks” - 显示复选框<br>editable - 如果为真，标题子节点 caption 将应用 behavior:edit，并且控件的 value 属性值也指向 edit 控件的当前值。<br>novalue=”text” - 没有选中项时显示的默认值</p><p>behavior:scroller //滚动条 type=”vscrollbar” type=”hscrollbar”<br>behavior: scroll-bar;<br>behavior:shell-icon //图标 需要指定文件名字或类型 filename=”.jpg”<br>behavior:file-icon; -icon-size:”large”; //文件图标及默认大小设置<br>behavior:path //显示路径 overflow-x:hidden;white-space:nowrap; //必须一起用<br>behavior:path-select //文件路径选框 path-select 用于本地程序他的值只是一个文件路径 - 并且可以编程修改。<br>type=”folder-path”<br>type=”file-path”<br>filter=”filename-filter” - 定义文件类型，多个类型分组用’;’分隔，每个类型分组使用 ‘:’分隔标题以及后缀名列表。<br>behavior:file //文件上传控件 标准 file 控件， 放在 form enctype=”multipart/form-data” 里面可用于远程提交文件。<br>behavior:sizer //调整大小<br>behavior:~ sizer;-resize: vertical; //限制方向</p><p>behavior:splitter cursor:w-resize; cursor:n-resize; //分隔条<br>behavior:slider //滑块 type=”vslider”垂直方向 type=”hslider” 水平方向<br>属性<br>value - integer, 初始值.<br>min - integer, 最小数值<br>max - integer, 最大数值<br>step - integer, 步进值,默认为 1<br>buddy - string, 同步显示控件值的节点 ID</p><p>behavior:accesskeys actions; //快捷键<br>示例：<br>accesskey=”^E”<br>accesskey=”!NUMPAD7”<br>accesskey=”!DECIMAL”<br>behavior:chart //图表</p><p>behavior:expandable-list //折叠列表<br>behavior:collapsible-list //折叠列表<br>behavior:collapsible-by-icon //折叠列表 Toggle ‘state’ to ‘open’ and ‘close’.class = icon</p><p>behavior:tabs //选项卡</p><p>ltTabs.xcall(“select”,”选项卡名字”); //选择一个页面<br>ltTabs.xcall(“close”,”选项卡名字”); //关闭一个页面<br>ltTabs.xcall(“open “,”选项卡标题”,”框架页网址”,”选项卡名字”); //打开一个页面<br>ltTabs.xcall(“create”,”选项卡标题”,”选项卡名字”,”子页面 HTML”); //使用 HTML 代码新建一个页面</p><p>behavior:progress //进度条<br>value=float - 进度值<br>maxvalue=float - 最大值<br>-bar:”clip”; - 进度条会剪切显示前景图 （始终不改变原图大小）<br>behavior:clock //时钟<br>behavior:graphin-clock<br>behavior:calendar //日历<br>behavior:date //日期 value=”today”<br>behavior:time //时间 no-seconds value=”now”<br>behavior:frame //框架<br>behavior:frame-set  //rows=”*,100px” cols=”*,*“<br>behavior:history<br>behavior:pager<br>属性<br>src=”url.html” - 框架内加载网页地址<br>content-style=”url.css” - 添加样式到框架页面<br>可以在 CSS 中使用 :busy 状态指定正在加载框架时的样式</p><p>方法：<br>ltEle.xcall(“load”, url:string) - 在框架中加载指定地址网页<br>ltEle.xcall(“clear”) - 清空框架</p><p>behavior:select-buddy<br>role=”destination”<br>action=”move-all” move-selected revoke-selected revoke-all</p><p>behavior:url; type=”url”<br>behavior:hyperlink //超链接 -target:”sandbox”; onHyperlinkClick 事件较特殊，必须写在 sinking 过程里<br>behavior:clickable //无焦点按钮<br>behavior:button //按钮 value=”caption” - 按钮标题<br>behavior:radio //单选框<br>behavior:switch //单选按钮 鼠标左键按下时（而不是放开时）切换选中状态。<br>behavior:check //复选框<br>behavior:password //密码框 password-char=”占位符”<br>behavior: masked-edit; //type=”masked” mask=”( ### ) ### - ####”<br>behavior:number //数字框<br>behavior:decimal ;-format=”fdigits:2; leading-zero:true;”<br>behavior:currency //货币数值输入框控件</p><p>属性<br>value=float - 初始值<br>size=integer - 控件宽度<br>min - 最小值<br>max - 最大值<br>step - 滚动选框步进值，指定了此属性会显示滚动选框<br>format - 数值显示格式，支持下面的字段，使用 ‘;’分隔多个字段:<br>grouping - number, ‘千位’分隔符间隔数<br>fdigits - number, 小数位置<br>leading-zero - true/false, 是否显示前导 0<br>decimal-sep - 小数分隔符<br>grouping-sep - 千位分隔符<br>negative-sign - true/false, true - 是否显示负号<br>currency - 货币符号<br>currency-after - 货币符号是否显示在数值后面</p><p>currency 控件会自动更新下面两个属性<br>invalid - 当前输入了无效的值<br>negative - 负数</p><p>自定义函数<br>ltEle.xcall(“min”): int - 返回最小值<br>ltEle.xcall(“min”, v:int) - 设置最小值<br>ltEle.xcall(“max”): int - 返回最大值<br>ltEle.xcall(“max”, v:int) - 设置最大值<br>ltEle.xcall(“step”): int - 返回步进值<br>ltEle.xcall(“step”, v:int|undefined) - 设置|或清除步进值，设置了该值以后后会显示滚动选框<br>behavior:edit //可编辑 tpye =”text”<br>value=“text” - 文本框初始值<br>size=integer - 文本框宽度<br>maxlength=integer -可包含的最大字符数<br>filter=“filter-expr” - 限制输入的字符表达式，可指定单个字符或指定字符范围，例如 “.@0<del>9a</del>zA~Z”表示允许所有数字字母, ‘.’ 以及 ‘@’. 可以使用 ‘^’ 前缀排除字符. 例如“^.,-” 允许所有除 ‘.’, ‘,’ 和 ‘-‘ 以外的字符。<br>novalue=“text” - 文本框为空时显示的默认值，在 CSS 中可以使用:empty 指定显示默认值的样式。</p><p>支持的快捷键：<br>LEFT, CTRL+LEFT, SHIFT+LEFT, CTRL+SHIFT+LEFT<br>RIGHT, CTRL+RIGHT, SHIFT+RIGHT, CTRL+SHIFT+RIGHT<br>HOME, SHIFT+HOME<br>END, SHIFT+END<br>BACKSPACE, ALT+BACKSPACE, CTRL+BACKSPACE<br>CTRL+A<br>DELETE, SHIFT+DELETE, CTRL+DELETE<br>INSERT, SHIFT+INSERT, CTRL+INSERT<br>CTRL+X<br>CTRL+V<br>CTRL+Z<br>CTRL+(LEFT)SHIFT 以及 CTRL+(RIGHT)SHIFT</p><p>自定义函数<br>ltEle.xcall(“selectionStart”): int - 返回选区开始位置<br>ltEle.xcall(“selectionEnd”): int - 返回选区结束位置<br>ltEle.xcall(“setSelection”, start:int, end:int):void - 设置选区<br>ltEle.xcall(“selectionText”): string - 返回选中文本<br>ltEle.xcall(“insertText”, text: string):void - 在光标处插入文本<br>ltEle.xcall(“appendText”, text: string):void - 追加文本<br>ltEle.xcall(“undo”, false): bool - 是否可以撤消操作<br>ltEle.xcall(“undo”, true) - 撤消操作<br>ltEle.xcall(“cut”, false): bool - 是否可以剪切<br>ltEle.xcall(“cut”, true) - 剪切操作<br>ltEle.xcall(“copy”, false): bool - 是否可复制<br>ltEle.xcall(“copy”, true) - 复制操作<br>ltEle.xcall(“paste”, false): bool - 是否可粘贴<br>ltEle.xcall(“paste”, true) - 粘贴操作;<br>ltEle.xcall(“selectAll”): bool - 当前是否已全选文本<br>ltEle.xcall(“selectAll”, true) - 全选文本</p><p>behavior:htmlarea //超文本框 tabindex=0<br>behavior:plaintext //文本框</p><p>toolbar=”widget.toolbar”</p><p>content-style=”content.css”</p><p>allow-clipboard-images</p><p>objects-list=”ul#current-objects”</p><p><strong>behavior:richtext</strong>//</p><p>属性：<br>value=“text” - 文本框初始值<br>maxlength=integer -可包含的最大字符数<br>filter=“filter-expr” - 限制输入的字符表达式，可指定单个字符或指定字符范围，例如 “.@0<del>9a</del>zA~Z”表示允许所有数字字母, ‘.’ 以及 ‘@’. 可以使用 ‘^’ 前缀排除字符. 例如“^.,-” 允许所有除 ‘.’, ‘,’ 和 ‘-‘ 以外的字符。<br>novalue=“text” - 文本框为空时显示的默认值，<br>在 CSS 中可以使用:empty 指定显示默认值的样式。readonly 指定该属性则显示为只读模式。<br>自定义函数<br>ltEle.xcall(“selectionStart”): int - 返回选区开始位置<br>ltEle.xcall(“selectionEnd”): int - 返回选区结束位置<br>ltEle.xcall(“setSelection”, start:int, end:int):void - 设置选区<br>ltEle.xcall(“selectionText”): string - 返回选中文本<br>ltEle.xcall(“insertText”, text: string):void - 在光标处插入文本<br>ltEle.xcall(“appendText”, text: string):void - 追加文本<br>ltEle.xcall(“canUndo”): bool - 是否可以撤消操作<br>ltEle.xcall(“doUndo”) - 撤消操作<br>ltEle.xcall(“canRedo”): bool - 是否可以重做操作<br>ltEle.xcall(“doRedo”) - 重做操作<br>ltEle.xcall(“canCut”): bool - 是否可以剪切<br>ltEle.xcall(“doCut”) - 剪切操作<br>ltEle.xcall(“canCopy”): bool - 是否可复制<br>ltEle.xcall(“doCopy”) - 复制操作<br>ltEle.xcall(“canPaste”): bool - 是否可粘贴<br>ltEle.xcall(“doPaste”) - 粘贴操作;<br>ltEle.xcall(“canSelectAll”): bool - 当前是否已全选文本<br>ltEle.xcall(“canSelectAll”) - 全选文本</p><p>behavior:form //表单<br>button name=”Submit” type=”submit”<br>button name=”Reset” type=”reset”<br>属性<br>action=“url” - 提交地址<br>target=“frame-name” - 目标框架<br>method=“get” | “post” - 提交方法<br>enctype=“application/x-www-form-urlencoded” | “multipart/form-data” - 编码类型</p><p>方法：<br>ltEle.xcall(“submit”) - 提交表单<br>ltEle.xcall(“reset”) - 重置表单</p><p>behavior:hover-click</p><p>behavior:menu //菜单  type=”menu” align-popup=”right”<br>behavior:menu-bar //菜单栏 子节点中的-li-节点或 HTML 属性中指定了 role=”menu-item”作为菜单项处理<br>behavior:popup-menu //弹出菜单 仅仅是单纯的弹出菜单，接收的事件也是菜单事件，没有控件选中值的概念。<br>属性<br>menu=css-selector - 使用 CSS 选择器指定要弹出的菜单，如果不指定此属性则使用子节点中的第一个 menu 或-popup-子节点<br>align-popup= left | top | right | bottom 用于指定菜单的弹出方向，默认是 bottom，也可以在 CSS 自定义属性中指定此值<br>behavior:popup-selector //弹出菜单下拉框<br>属性<br>menu=“css-selector” - 使用 CSS 选择器指定要弹出的菜单，如果不指定此属性则使用子节点中的第一个-menu-或-popup-子节点<br>value=“string” - 初始值,菜单的 li 节点可以使用 value 属性指定值，点击菜单项时复制值到控件的-caption-标题节点,</p><p>behavior:dropdown //弹出框<br>behavior:popup //弹框<br>behavior:light-box-dialog //模态弹框</p><p>role=’ok-button’  确定按钮</p><p>role=’cancel-button’ 取消按钮</p><p>ltEle.xcall(“show”)</p><p>ltEle.xcall(“hide”)</p><p>behavior:windowSizer //窗口缩放</p><p>sizer-command:hitTopleft  hitLeft  hitBottomleft  hitTop  hitBottom   hitTopright  hitRight   hitBottomright</p><p>HTML behavior:font-size; //字体<br>HTML[zoom=”1” font-size:xx-small;<br>HTML[zoom=”2”font-size:x-small;<br>HTML[zoom=”3” font-size:small;<br>HTML[zoom=”4” font-size:medium;<br>HTML[zoom=”5” font-size:large;<br>HTML[zoom=”6” font-size:x-large;<br>HTML[zoom=”7” font-size:xx-large;<br>behavior:gripper //拖拽 accept-drop:selector( div.toolbar ); drop:insert;</p><p>behavior:selectionBox  //鼠标选框</p><p>behavior:marquee //跑马灯<br>-marquee: horizontal; vertical<br>-marquee-direction: forward;<br>-marquee-style: scroll; alternate slide<br>-marquee-play-count:1; /* playing once */<br>-marquee-speed:slow normal fast</p><p>behavior:reflection //水中倒影<br>-reflection-opacity-start: 0.4;<br>-reflection-opacity-end: 0.0;<br>-reflection-blur-radius: 3;</p><p>behavior:magnifier //鱼眼特效<br>magnify=’widget[type=”button”,table’ magnification=4.0 magnification-step=0.3 radius-x=300 radius-y=100<br>~ actions<br>~ richtext-current-objects</p><p><strong>command</strong><br>command=”window-caption”<br>command=”window-close”<br>command=”window-min”<br>command=”window-max”<br>command=”window-restore”<br>-command:disabled</p><p>edit richtext: //编辑框 文本框右键<br>behavior:edit:undo Ctrl+Z<br>behavior:edit:cut Ctrl+X<br>behavior:edit:copy Ctrl+C<br>behavior:edit:paste Ctrl+V<br>behavior:edit:selectall Ctrl+A</p><p>richtext：<br>richtext:paste-plain-text HTML 转换为文本<br>richtext:paste-text-as-html 粘贴 HTML 代码<br>richtext:paste-html-no-tables 粘贴 HTML 格式(移除表格)<br>richtext:merge-cells 合并单元格 Backspace<br>richtext:split-cells-by-rows Ctrl+1 拆分行<br>richtext:split-cells-by-cols Ctrl+2 拆分列<br>richtext:strong<br>richtext:em<br>richtext:code<br>richtext:p<br>richtext:h1 h2 h3 h4 h5 h6<br>richtext:pre<br>richtext:li-ul<br>richtext:li-ol<br>richtext:indent-dec<br>richtext:indent-inc<br>richtext:show-rulers<br>用法：<br>command=”behavior:edit:undo”<br>command=”richtext:undo”<br>快捷键配合 class=”accesskey”</p><p>这是能找到的最全的 htmlayout behavior 了，如有遗漏欢迎补全！！！</p><p><strong>role:</strong></p><p>role=”option”</p><p>role=”default-button”<br>role=”cancel-button”</p><p>role=”source”<br>role=”destination”</p><p>role=”dropdown”</p><p>role:”menu-item”</p><p>role=”page-tab-list”<br>role=”page-tab”</p><p>popup[role=tooltip]<br>popup[role=”overflow-tooltip”]</p><p>//右键菜单</p><p>.with-context-menu{<strong>context-menu:selector</strong>(menu#for-htmlarea);</p><p>.with-context-menu-ext{context-menu: url(c-menu.htm)</p><p>option:nth-child(odd){context-menu: selector(menu#option-odd);</p><p><strong>标签相关：</strong></p><p><strong><code>&lt;widget&gt;</code></strong><br>该标记是类似于 <code>&lt;input&gt; &lt;select&gt;</code> 的内联块标记.<br><code>&lt;widget&gt;</code> 基本类似 <code>&lt;input&gt;</code>,区别是可以扩展 type 属性,<br>除了可以使用标准库的类型 (input 节点可以使用的类型,例如: text, checkbox, radio, 等等. )<br>type 属性也可以定义为下面的值:<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;widget type=&quot;select&quot;&gt; - 列表框;  </span><br><span class="line">&lt;widget type=&quot;dropdown-select&quot;&gt; - 下拉列表;  </span><br><span class="line">&lt;widget type=&quot;textarea&quot;&gt; - 文本框;  </span><br><span class="line">&lt;widget type=&quot;htmlarea&quot;&gt; - HTML 控件.  </span><br><span class="line">&lt;widget&gt; 必须与闭合标记 &lt;/widget&gt; 配对使用.</span><br></pre></td></tr></table></figure><br>根据 HTML 规范，input 节点会被包含在一个匿名的文本容器中,例如:<br><code>&lt;anonymous-text-container&gt;&lt;input …/&gt;&lt;/anonymous-text-container&gt;</code><br>而 widget 则不会这么做, 这样使用%或%%时计算相对高度时不会导致不必要的混淆．</p><p><strong><code>&lt;popup&gt;</code></strong><br>该标记是 block 样式显示的块标记( 类似<code>&lt;div&gt;</code> ),<br>用于定义可在页面上弹出显示的节点, 默认的 popup 是隐藏不显示的.<br>一个常用的功能是使用<code>&lt;popup&gt; </code>显示复杂些的工具提示(tooltips)</p><p>详细使用请参考官方 demo：<br><a href="http://www.terrainformatica.com/htmlayout/HTMLayoutDemo.zip">http://www.terrainformatica.com/htmlayout/HTMLayoutDemo.zip</a>  </p><p>原文地址：<a href="https://www.btbat.com/1130.html">https://www.btbat.com/1130.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-[Mr.R出品]精心收集整理 htmlayout 参考手册</title>
      <link href="/posts/2024/08/48f44e22.html"/>
      <url>/posts/2024/08/48f44e22.html</url>
      
        <content type="html"><![CDATA[<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-200.png" alt="">   R 大历时一个多月收集整理的 htmlayout 参考手册  需要的自取！！！  若有遗漏或错误 欢迎指正！！！  <span id="more"></span><p>下载地址: <a href="https://pan.baidu.com/s/1y63IYKqXI6TTthJx2jDV5Q?pwd=2bkn">htmlayout参考手册</a> </p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> htmlayout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout &amp; Aardio 按钮事件实现方法总结（2）</title>
      <link href="/posts/2024/08/ef35bd6b.html"/>
      <url>/posts/2024/08/ef35bd6b.html</url>
      
        <content type="html"><![CDATA[<p>效果图：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-199.png" alt=""><br>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import process;</span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = /**R 大技术站</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">@set std-button&#123;</span><br><span class="line">:root&#123;padding:0 8 0 8;line-height:24px;border:1px solid #ccc;cursor: pointer;transition: none;color:#fff;&#125;</span><br><span class="line">:root:hover&#123;background:#999;&#125;</span><br><span class="line">:root:active&#123;background:#999;&#125;</span><br><span class="line">&#125;</span><br><span class="line">button&#123;background: #c1c1c1;width:120px;height:32px;margin-top:10px;margin-left:50%% - 60px;&#125;</span><br><span class="line">#close_btn&#123;background:#009688;&#125;</span><br><span class="line">    #open_btn&#123;background:#FF5722;&#125;</span><br><span class="line">    button[name=&quot;name_btn&quot;]&#123;background:#1E9FFF;&#125;</span><br><span class="line">    #none_btn&#123;background:#2F4056;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;button&gt;按钮一&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;close_btn&quot;&gt;按钮 close&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;open_btn&quot;&gt;按钮 open&lt;/button&gt;</span><br><span class="line">&lt;button name=&quot;name_btn&quot;&gt;按钮 name&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;none_btn&quot;&gt;按钮 none&lt;/button&gt;</span><br><span class="line"> </span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;</span><br><span class="line"> </span><br><span class="line">wbLayout.onButtonClick =  &#123;</span><br><span class="line">close_btn = function (ltTarget,ltOwner,reason,behaviorParams)&#123;</span><br><span class="line">mainForm.close()  //关闭窗口</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[&quot;open_btn&quot;] = function (ltTarget,ltOwner,reason,behaviorParams)&#123;</span><br><span class="line">process.execute(&quot;http://www.btbat.com&quot;);  //打开网页</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name_btn  = function (ltTarget,ltOwner,reason,behaviorParams)&#123;</span><br><span class="line">mainForm.close()  //关闭窗口</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">default = function (ltTarget,ltOwner,reason,behaviorParams)&#123;</span><br><span class="line">mainForm.close()  //关闭窗口</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure><p>实例说明：<br>这次我们在 html 中加入了 5 个 button 按钮控件，<br>上期说了，button 控件自带 behavior 特效；</p><p>这 5 个按钮分别是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;按钮一&lt;/button&gt; // 无 ID 参考上一节内容</span><br><span class="line">&lt;button id=&quot;close_btn&quot;&gt;按钮 close&lt;/button&gt;  //设置 id 并指定事件 </span><br><span class="line">&lt;button id=&quot;open_btn&quot;&gt;按钮 open&lt;/button&gt;  //设置 id 并指定事件 </span><br><span class="line">&lt;button name=&quot;name_btn&quot;&gt;按钮 name&lt;/button&gt;  //设置 name 并指定事件</span><br><span class="line">&lt;button id=&quot;none_btn&quot;&gt;按钮 none&lt;/button&gt;  // 设置 id 没指定事件</span><br></pre></td></tr></table></figure><p>我们通过：<br>close_btn = function （… //指定事件<br>[“open_btn”] = function （… //指定事件</p><p>不同写法，效果一样，同时用 name 值也可以指定事件的。<br>然而虽然“按钮 none”也指定了 id，却没有指定事件，<br>其效果就和“按钮一”一样了，都会执行 default 默认事件；<br>PS：当然一般不需要写 default 事件的。<br>通过这样的方法，就可以方便的我们统一处理具有相同事件的控件。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout 各种控件CSS样式</title>
      <link href="/posts/2024/08/ff31078a.html"/>
      <url>/posts/2024/08/ff31078a.html</url>
      
        <content type="html"><![CDATA[<p>效果图:<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-191.png" alt=""> </p><p>CSS代码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*编辑框 type=text*/</span><br><span class="line">@set std-edit&#123;</span><br><span class="line">:root&#123;width:208px;height:18px;line-height:18px;margin:0;padding:3;border:1px solid @mCtlborder;color:@mText3;background: @mCtlbackground;&#125;</span><br><span class="line"> :root:focus&#123;color: @mText4;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*单选框 type=radio*/</span><br><span class="line">@set std-radio&#123;</span><br><span class="line">:root&#123;width:16px;height:16px;line-height:16px;border:1px solid @mCtlborder;background: @mCtlbackground;</span><br><span class="line">cursor:pointer;white-space:nowrap;vertical-align:baseline;border-radius: 999px;&#125;</span><br><span class="line">:root:active&#123;foreground-image:url(../images/radio.png); foreground-repeat:no-repeat;foreground-position:50% 50%;&#125;</span><br><span class="line">:root:checked&#123;foreground-image:url(../images/radio.png); foreground-repeat:no-repeat;foreground-position:50% 50%;&#125;</span><br><span class="line">:root:disabled&#123;foreground-image:url(../images/radio.png); foreground-repeat:no-repeat;foreground-position:50% 50%;foreground-image-transformation:colorize(@mText4);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@set std-checkbox&#123;</span><br><span class="line">:root&#123;width:16px;height:16px;border:1px solid @mCtlborder;background: @mCtlbackground;</span><br><span class="line">cursor:pointer;vertical-align:middle;&#125;</span><br><span class="line">:root:active&#123;foreground-image:url(../images/checked.png); foreground-repeat:no-repeat;foreground-position:50% 50%;&#125;</span><br><span class="line">:root:checked&#123;foreground-image:url(../images/checked.png); foreground-repeat:no-repeat;foreground-position:50% 50%;&#125;</span><br><span class="line">:root[mixed]&#123;foreground-image:url(../images/check_mixed.png); foreground-repeat:no-repeat;foreground-position:50% 50%;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*按钮 type=button*/</span><br><span class="line">@set std-button&#123;</span><br><span class="line">:root&#123;padding:0 8 0 8;line-height:24px;border:1px solid @mCtlborder;background: @mCtlbtnbg;cursor: pointer;transition: none;color:@mText3;&#125;</span><br><span class="line">:root:hover&#123;background:@mCtlHover;&#125;</span><br><span class="line">:root:active&#123;background:@mCtlHover;&#125;</span><br><span class="line">:root:disabled&#123;color:@mText4;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*数字选择按钮 type=number*/</span><br><span class="line">@set std-number-edit&#123;</span><br><span class="line">:root&#123;width:min-intrinsic;height: 24px;text-align: right;border:1px solid @mCtlborder;background: @mCtlbackground;color: @mText3;&#125;</span><br><span class="line">:root:focus&#123;color: @mText4;&#125;</span><br><span class="line">:root &gt; button&#123;margin: 0 -2px -2px *;border:none;background:none;width:8px;foreground-repeat:no-repeat;foreground-image-transformation:colorize(@mText4);&#125;</span><br><span class="line">:root &gt; button.minus&#123;foreground-image:url(../images/select.png);foreground-position:50% 40%;&#125;</span><br><span class="line">:root &gt; button.plus&#123;foreground-image:url(../images/select_top.png);foreground-position:50% 60%;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*文件选择 type=file-path*/</span><br><span class="line">@set std-file-selector&#123;</span><br><span class="line">:root&#123;width:214px;height:24px;line-height:24px;padding:0px;margin:0px;border:1px solid @mCtlborder;background: @mCtlbackground;color:@mText3;&#125;</span><br><span class="line">:root &gt; caption&#123;padding:0px 0px 0px 24px;height:12px;foreground-repeat:no-repeat;foreground-position: 4px 50%;&#125;</span><br><span class="line">:root:empty &gt; caption &#123;padding:0px 0px 0px 6px;color:@mText4;&#125;</span><br><span class="line">:root &gt; button&#123;margin:0;padding:0;width:36px;height:18px;line-height:24px;color:@mText3;border:none;border-left: 1px solid @mline;&#125;</span><br><span class="line">:root &gt; button &gt; text &#123;content: &quot;删除&quot;;&#125;</span><br><span class="line">:root:empty &gt; button &gt; text &#123;content: &quot;选择&quot;;&#125;</span><br><span class="line">&#125;</span><br><span class="line">/*下拉列表框 type=select*/</span><br><span class="line">@set std-select-dropdown&#123;</span><br><span class="line">:root&#123;width: max-intrinsic;height:24px;line-height:24px;padding:0;background:@mCtlbackground;color:@mText4;border:1px solid @mCtlborder;&#125;</span><br><span class="line">:root &gt; caption&#123;padding:0 4 0 4;margin:0;color: @mText3;foreground-image:url(../images/select.png);</span><br><span class="line">foreground-repeat:no-repeat;foreground-position-right:4px;foreground-position-top:50%;</span><br><span class="line">foreground-image-transformation:colorize(@mText4);cursor: pointer;&#125;</span><br><span class="line">:root &gt; button&#123;width:0px;</span><br><span class="line">border:none;background:none;display:none;&#125;</span><br><span class="line">:root &gt; option&#123;padding:2 4 2 4; color:@mText3;&#125;</span><br><span class="line">:root:focus &gt; caption&#123;color:@mText5;foreground-image-transformation:colorize(@mText5);&#125;</span><br><span class="line">/*:root &gt; popup option:checked&#123;background:@mText3;color:@mText5;&#125;*/</span><br><span class="line">:root &gt; popup option:current&#123;color:@mText5;&#125;</span><br><span class="line">:root &gt; popup option&#123;color: @mText3;cursor: pointer;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*文本框 textarea*/</span><br><span class="line">@set std-textarea&#123;</span><br><span class="line">:root&#123;background:@mCtlbackground;color:@mText4;border:1px solid @mCtlborder;overflow-x:none;vertical-scrollbar: mini_scrollbar;&#125;</span><br><span class="line">/*:root:focus&#123;text-selection: @mText5 @mTextH;&#125;*/</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*文本框日历*/</span><br><span class="line">@set std-calendar&#123;</span><br><span class="line">:root&#123;background:@mCtlbackground;&#125;</span><br><span class="line">tr&#123;height:16px;line-height:16px;&#125;</span><br><span class="line">span.today-legend &#123;display: none;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*日期*/</span><br><span class="line">@set std-date&#123;</span><br><span class="line">:root&#123;width:min-intrinsic;background:@mCtlbackground;color:@mText3;border:1px solid @mCtlborder;&#125;</span><br><span class="line">:root &gt; caption&#123;padding-left:3px;height:24px;line-height:24px;&#125;</span><br><span class="line">:root &gt; button&#123;border:none;background:none;width:8px;</span><br><span class="line">foreground-image:url(../images/select.png);foreground-repeat:no-repeat;</span><br><span class="line">foreground-position:50% 50%;foreground-image-transformation:colorize(@mText4);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/*title 提示框*/</span><br><span class="line">popup[role=&quot;tooltip&quot;]&#123;font-size:12px; overflow:none; padding:5px;margin:5px;background:@mCtlbackground&#125;</span><br></pre></td></tr></table></figure><p>图片素材：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-195.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-196.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-197.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-198.png" alt=""> <p>原文链接：<a href="https://www.btbat.com/1121.html">https://www.btbat.com/1121.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout 模板 在aardio的简单应用</title>
      <link href="/posts/2024/08/fbde38d1.html"/>
      <url>/posts/2024/08/fbde38d1.html</url>
      
        <content type="html"><![CDATA[<p>简单说明：<br>html 中的 为自定义变量，用于载入展示数据，<br>通过 string.loadcode(ul,data) 载入变量。<br>可以有多个变量，例如：  </p><p><code>string.loadcode(ul,data,path,name)</code></p><p>示例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">修改数据=&#123;cls=&quot;button&quot;;text=&quot;修改数据&quot;;left=62;top=201;right=167;bottom=240;z=1&#125;;</span><br><span class="line">删除数据=&#123;cls=&quot;button&quot;;text=&quot;删除数据&quot;;left=62;top=284;right=169;bottom=324;z=3&#125;;</span><br><span class="line">增加数据=&#123;cls=&quot;button&quot;;text=&quot;增加数据&quot;;left=62;top=242;right=166;bottom=279;z=2&#125;</span><br><span class="line">)</span><br><span class="line">io.open()</span><br><span class="line">import web.layout</span><br><span class="line">var wb = web.layout( winform )</span><br><span class="line"> </span><br><span class="line">var ul = /**</span><br><span class="line">&lt;? var data = ...; ?&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;? for(i=1;#data;1)&#123; ?&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">       &lt;?= data[i] ?&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;? &#125; ?&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">**/</span><br><span class="line"> </span><br><span class="line">data = &#123;&quot;安卓&quot;;&quot;苹果&quot;;&quot;安卓&quot;;&#125;   //测试数据</span><br><span class="line"> </span><br><span class="line">wb.html = string.loadcode(ul,data)</span><br><span class="line"> </span><br><span class="line">winform.修改数据.oncommand = function(id,event)&#123;  </span><br><span class="line">data =&#123;&quot;windows&quot;;&quot;android&quot;&#125;</span><br><span class="line">wb.html = string.loadcode(ul,data)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.增加数据.oncommand = function(id,event)&#123;</span><br><span class="line">data1 =&#123;&quot;mac&quot;;&quot;unix&quot;&#125;</span><br><span class="line">data = table.concat(data,data1)</span><br><span class="line">wb.html = string.loadcode(ul,data)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.删除数据.oncommand = function(id,event)&#123;</span><br><span class="line">value = table.remove (data ,#data)</span><br><span class="line">wb.html = string.loadcode(ul,data)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-Htmlayout 滚动弹幕效果</title>
      <link href="/posts/2024/08/89b3b457.html"/>
      <url>/posts/2024/08/89b3b457.html</url>
      
        <content type="html"><![CDATA[<p>重点代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #CSS 代码</span><br><span class="line">  html,body&#123; height:100%; margin:0; &#125;</span><br><span class="line"> </span><br><span class="line">  #container&#123;</span><br><span class="line">      position:absolute;</span><br><span class="line">      right:300px;</span><br><span class="line">      transition:right(linear,3s);</span><br><span class="line">  &#125;</span><br><span class="line">  #container[move]&#123;</span><br><span class="line">      right:50px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">#Html 代码</span><br><span class="line">  《div id=&quot;container&quot;&gt;</span><br><span class="line">      我是弹幕！！！</span><br><span class="line">  div》</span><br><span class="line">  </span><br><span class="line">#Aardio 代码</span><br><span class="line">wb.getEle(&quot;container&quot;).move = &quot;&quot; //选择元素并设置初始滚动值！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout 进度条</title>
      <link href="/posts/2024/08/10c97e63.html"/>
      <url>/posts/2024/08/10c97e63.html</url>
      
        <content type="html"><![CDATA[<p>代码说明：</p><p>代码使用了 progress 控件，和自定义 div 两种方式实现了进度条。<br>非常简单，欢迎大家参考！！！</p><p>示例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import console</span><br><span class="line">mainForm = win.form(text=&quot;aardio工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm  )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启layout调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;R大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body&#123;font-family: &quot;宋体&quot;;font-size: 12px;&#125;</span><br><span class="line">/*图片样式*/</span><br><span class="line">#pro&#123;width:200px;height:10;border-radius:10px;display:inline-block;vertical-align:middle; </span><br><span class="line">background-image: url(layout\progress_b.png);background-position: 4px 4px 4px 4px;background-repeat: expand stretch-middle;</span><br><span class="line">foreground-image: url(layout\progress_f.png);foreground-position: 4px 4px 4px 4px;foreground-repeat: expand stretch-middle;&#125;</span><br><span class="line">/*div样式line*/</span><br><span class="line">.line&#123;width:200px;height:12px;line-height:12px;border:2px solid #4DBF7D;border-radius:8px;&#125;</span><br><span class="line">.inline&#123;float:left;min-width:20px;height:12px;line-height:12px;background-color:#4DBF7D;overflow:hidden;border-radius:8px;&#125;</span><br><span class="line">.inline a&#123;float:right;padding-right:5px;color:#fff;&#125;</span><br><span class="line">/*div样式line1*/</span><br><span class="line">.line1&#123;width:200px;height:13px;line-height:12px;&#125;</span><br><span class="line">.inline1&#123;float:left;min-width:20px;width:20px;height:13px;padding-right:5px;background-color:#2187e7;border-radius:14px;&#125;</span><br><span class="line">.inline1 a&#123;float:right;padding-right:5px;color:#fff;&#125;</span><br><span class="line">/*数值调节 */</span><br><span class="line">    #val&#123;width:50px;value-changed!:</span><br><span class="line">     $1(input#pro):value = self:value,</span><br><span class="line">    $1(input#def):value = self:value,</span><br><span class="line">    $1(.inline)::width = self:value * 2,</span><br><span class="line">    $1(.inline1)::width = self:value * 2,</span><br><span class="line">    $(.linetext):value =  self:value + &quot;%&quot;; </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;默认样式: &lt;input id=&quot;def&quot; type=&quot;progress&quot; value=&quot;10&quot;/&gt;  &lt;/p&gt;</span><br><span class="line">&lt;p&gt;图片样式: &lt;input id=&quot;pro&quot; type=&quot;progress&quot; value=&quot;10&quot;/&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;DIV样式: &lt;div .line&gt;&lt;div .inline&gt;&lt;a .linetext&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;DIV样式: &lt;div .line1&gt;&lt;div .inline1&gt;&lt;a .linetext&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;数值调节: &lt;input #val type=&quot;number&quot; value=10 maxvalue=100 minvalue=0 step=&quot;1&quot; /&gt; &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;  //加载页面</span><br><span class="line">  </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure><p>示例样式：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-190.png" alt=""> </p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout 利用csss!动态实现推荐、等级效果</title>
      <link href="/posts/2024/08/20027f6d.html"/>
      <url>/posts/2024/08/20027f6d.html</url>
      
        <content type="html"><![CDATA[<p>效果预览：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-189.png" alt=""> </p><p>源代码：</p><!-- more ><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.layout; //导入 layout</span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line">import console</span><br><span class="line">mainForm = win.form(text=&quot;aardio 工程&quot;;right=359;bottom=669;border=&quot;none&quot;)</span><br><span class="line">mainForm.add()</span><br><span class="line">wbLayout = web.layout( mainForm  )  </span><br><span class="line">if( _STUDIO_INVOKED )&#123;  //开启 layout 调试</span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html = /** </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;R 大技术站&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body&#123;font-family: &quot;宋体&quot;;font-size: 12px;&#125;</span><br><span class="line">/* 我的 level */</span><br><span class="line">    .star span[level] &#123;</span><br><span class="line">display: inline-block; width:14px; height: 18px;</span><br><span class="line">foreground-image: url(res/star.png) repeat-x;</span><br><span class="line">assigned!: self::width = self.level * 14,; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;等级: &lt;span level=1&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;等级: &lt;span level=2&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;等级: &lt;span level=3&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;等级: &lt;span level=4&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;等级: &lt;span level=5&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;div .star&gt;推荐: &lt;span level=10&gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> **/</span><br><span class="line"> </span><br><span class="line">wbLayout.html = html;  //加载页面</span><br><span class="line">  </span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure><p>原文链接： <a href="https://www.btbat.com/1151.html">https://www.btbat.com/1151.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout 纯CSSS! TIPS弹窗 自动显示隐藏</title>
      <link href="/posts/2024/08/aab33fc6.html"/>
      <url>/posts/2024/08/aab33fc6.html</url>
      
        <content type="html"><![CDATA[<p>特性：  </p><ul><li> 纯CSS &amp; CSSS！打造；  </li><li> 支持更换图标、文字等；  </li><li> 自动显示 2秒后自动隐藏；  </li><li> 非常适合做提示信息框；    </li></ul><p>源代码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;tipsbox by Mr.R&quot;;right=759;bottom=469;)</span><br><span class="line">mainForm.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout; </span><br><span class="line">import web.layout.behavior.windowCommand;</span><br><span class="line"></span><br><span class="line">wbLayout = web.layout( mainForm )  </span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    html,body&#123; height:100%; margin:0; &#125; </span><br><span class="line">    body widget &#123; size:*;   &#125;</span><br><span class="line">    body&#123;size-changed!:</span><br><span class="line">            $1(#show_msg).fade = &quot;true&quot; ,</span><br><span class="line">            $1(#show_msg):value = self.box-border-width() + &quot;,&quot; + self.box-border-height();&#125;</span><br><span class="line">    #show_msg&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">                    top:50%%;left:50%%;                 </span><br><span class="line">                    width: calc(text-width(self:value)); </span><br><span class="line">                    max-width:400px;                    </span><br><span class="line">                        height:85px;line-height:85px;</span><br><span class="line">                        padding:0 30 0 80;</span><br><span class="line">                        flow:horizontal;        </span><br><span class="line">                        background:#ccc;</span><br><span class="line">                        border-radius:15px;</span><br><span class="line">                        foreground-image:url(res\fill.png);</span><br><span class="line">                        foreground-repeat:no-repeat;</span><br><span class="line">                        foreground-position:30px 50%;                        </span><br><span class="line">                        color:2c2c2c;font-size: 18px;</span><br><span class="line">                        display:none;opacity: 0;</span><br><span class="line">                        overflow: hidden;&#125;</span><br><span class="line">#show_msg[tips = &quot;yes&quot;]&#123;   </span><br><span class="line">        foreground-image:url(res\fill_w.png);  </span><br><span class="line">        background:#b82525;color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">#show_msg[fade = &quot;true&quot;]&#123;</span><br><span class="line">        assigned!: </span><br><span class="line">                self::opacity = 0.01, </span><br><span class="line">                self::display = &quot;block&quot;, </span><br><span class="line">                self.start-animation();</span><br><span class="line">        animation-step!: </span><br><span class="line">                self::opacity &lt; 1.0  ?</span><br><span class="line">                ( self::opacity = self::opacity + 0.1, return 15 )#</span><br><span class="line">                ( self.fade = &quot;close&quot;, return cancel );</span><br><span class="line">        &#125;</span><br><span class="line">#show_msg[fade = &quot;close&quot;]&#123;</span><br><span class="line">        assigned!: </span><br><span class="line">                self.start-timer(2000); </span><br><span class="line">        timer!: </span><br><span class="line">                self::opacity = 1.0, </span><br><span class="line">                self::display = &quot;block&quot;,</span><br><span class="line">        self.start-animation();</span><br><span class="line">    animation-step!: </span><br><span class="line">                self::opacity &gt; 0 ?</span><br><span class="line">            ( self::opacity = self::opacity - 0.1, return 15)#</span><br><span class="line">            (self.fade = none,self::display =&quot;none&quot;,self::opacity =9,return cancel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;width:48px;height:28px;border:1px solid #999;background:#fff;border-radius: 5px;padding:0 8 0 8;margin:10px;&#125;</span><br><span class="line">#btn1&#123;click!: $1(#show_msg).fade = &quot;true&quot; ,$1(#show_msg).tips = none,$1(#show_msg):value = &quot;这里是文字&quot;;&#125;</span><br><span class="line">#btn2&#123;click!: $1(#show_msg).tips = &quot;yes&quot; , $1(#show_msg).fade = &quot;true&quot; ,$1(#show_msg):value = &quot;厉害了我的哥&quot;;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt; </span><br><span class="line">                &lt;button #btn1 value = &quot;默认&quot; /&gt;</span><br><span class="line">                &lt;button #btn2 value = &quot;更换图标&quot; /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">    &lt;div #show_msg&gt;这是默认文字&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mainForm.show() </span><br><span class="line">return win.loopMessage(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码资源下载: <a href="https://pan.baidu.com/s/1Pv8GUajfDwM_eDDIUc3nfw?pwd=zdnn">点此下载</a></p><p>原文链接：<a href="https://www.btbat.com/1078.html">https://www.btbat.com/1078.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-皮肤引擎(HTMLayout)特性</title>
      <link href="/posts/2024/08/9cec52b.html"/>
      <url>/posts/2024/08/9cec52b.html</url>
      
        <content type="html"><![CDATA[<p>HTMLayout特性包括界面结构、CSS支持、交互相关扩展、CSSS! 脚本、截获事件、获取元素等，详情请点击:</p><p><a href="/aardio/HTMLLayoutDocMx3.html">皮肤引擎HTMLayout特性</a></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-让Button按钮实现[单击]和[长按]功能</title>
      <link href="/posts/2024/08/46ae9d4b.html"/>
      <url>/posts/2024/08/46ae9d4b.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">tick = 0;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;button&quot;;left=117;top=84;right=229;bottom=142;z=1&#125;;</span><br><span class="line">static=&#123;cls=&quot;static&quot;;text=&quot;static&quot;;left=83;top=187;right=315;bottom=229;transparent=1;z=2&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">        if(message == 0x0201/*_WM_LBUTTONDOWN*/)&#123;</span><br><span class="line">                winform.static.text = &quot;按下鼠标&quot;;</span><br><span class="line">                tick = time.tick();</span><br><span class="line">        &#125;</span><br><span class="line">        if(message == 0x0202/*_WM_LBUTTONUP*/)&#123;</span><br><span class="line">                winform.static.text = &quot;放开鼠标&quot;;</span><br><span class="line">                jg = time.tick() - tick;</span><br><span class="line">                if(jg &gt; 300)&#123;</span><br><span class="line">                        winform.static.text = &quot;长按。ms:&quot; ++ jg ;        </span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                        winform.static.text = &quot;单击。ms:&quot; ++ jg;        </span><br><span class="line">                        &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何获取static控件中文字的真实宽度？</title>
      <link href="/posts/2024/08/ed0dda3a.html"/>
      <url>/posts/2024/08/ed0dda3a.html</url>
      
        <content type="html"><![CDATA[<p>在窗体上添加了一个static文本控件，通过代码设置控件text值，但由于控件是固定宽度，导致文本过长则无法显示完整文字，想通过获取真实文字的宽度来调整static的宽度，以达到完整显示文字的目的。</p><ol><li><p>不需要搞这么复杂，把static拖长到足够容纳文本为止，static是透明的，没必要去动态伸缩自己的长度。  </p></li><li><p>并没有GetTextExtent这个API函数，这是C++里的函数，API一般不会傻到在返回值里写结构体，他调用的API是 ::Gdi32.GetTextExtentPoint32  </p></li></ol><p>API一般不需要声明，直接用就可以，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var r,size = ::Gdi32.GetTextExtentPoint32(dc</span><br><span class="line">        ,&quot;待检查文本&quot;</span><br><span class="line">        ,string.len(&quot;待检查文本&quot;),</span><br><span class="line">        ::SIZE()</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
          <category> winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-悬浮窗体库</title>
      <link href="/posts/2024/08/94c379c4.html"/>
      <url>/posts/2024/08/94c379c4.html</url>
      
        <content type="html"><![CDATA[<p>写了个库，就像很多软件都使用悬浮窗体基本框架，其实还可以实现一些如：利用图片生成异形窗体、透明窗体之类。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//悬浮窗口</span><br><span class="line">/************************************</span><br><span class="line">Author      : wudijushi</span><br><span class="line">Date        : 2011.01.09</span><br><span class="line">************************************/</span><br><span class="line"></span><br><span class="line">namespace win.util;</span><br><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">import gdip;</span><br><span class="line">import gdip.bitmap;</span><br><span class="line"></span><br><span class="line">class  float&#123;</span><br><span class="line">    ctor( parentwinform, linkimage, shownow, tab)&#123;</span><br><span class="line">    if(!tab)&#123; arg = &#123;bottom=50;right=50;imgPathWnd=false;color=null&#125;;  &#125;</span><br><span class="line">    else &#123; arg = tab; &#125;</span><br><span class="line">   </span><br><span class="line">    this.winform = ..win.form(parent=parentwinform; exmode=&quot;none&quot;;title=false;min=false;max=false;</span><br><span class="line">                                sysmenu=false;image=linkimage;border=&quot;none&quot;;bottom=arg[&quot;bottom&quot;];right=arg[&quot;right&quot;];mode=&quot;popup&quot; );</span><br><span class="line">    this.winform.add(  );</span><br><span class="line">   </span><br><span class="line">    //成员变量</span><br><span class="line">    this.hWnd = this.winform.hwnd;</span><br><span class="line">   </span><br><span class="line">    //窗体消息</span><br><span class="line">    this.winform.wndproc = function(hwnd,message,wparam,lparam)&#123;</span><br><span class="line">        select(message) &#123;//判断消息类型</span><br><span class="line">            case 0x10/*_WCLOSE窗口关闭消息*/&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">            case 0x2/*_WDESTROY*/&#123;</span><br><span class="line">                //释放区域对象</span><br><span class="line">                if( this.hRgn)&#123;</span><br><span class="line">                    ::DeleteObject(topointer(this.hRgn));</span><br><span class="line">                    this.hRgn = null;</span><br><span class="line">                &#125;</span><br><span class="line">                //释放位图相关对象</span><br><span class="line">                if ( this.hMemDC)&#123;</span><br><span class="line">                    ::SelectObject(this.hMemDC, this.hOldBmp);</span><br><span class="line">                    ::DeleteDC(topointer(this.hMemDC));</span><br><span class="line">                    this.hMemDC = null;</span><br><span class="line">                    this.hOldBmp = null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            case 0x14/*_WERASEBKGND*/&#123;  </span><br><span class="line">                    if(this.hMemDC)&#123;</span><br><span class="line">                        var rect = ::RECT();</span><br><span class="line">                        ::GetClientRect(this.hWnd, rect);</span><br><span class="line">                        var hdc = ::GetDC(this.hWnd);</span><br><span class="line">                        ::BitBlt(hdc, 0, 0, rect.right, rect.bottom, this.hMemDC, 0, 0, 0xCC0020/*_SRCCOPY*/);</span><br><span class="line">                        ::ReleaseDC(this.hWnd, hdc);</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            case 0x205/*_WRBUTTONUP 鼠标右键弹起，弹出菜单*/begin</span><br><span class="line">                var x,y = ::LOWORD(lparam), ::HIWORD(lparam)</span><br><span class="line">                if( this.popmenu ) //如果用户定义了弹出菜单</span><br><span class="line">                    this.popmenu.popup(x,y);//弹出菜单</span><br><span class="line">            end</span><br><span class="line">            case 0x201/*_WLBUTTONDOWN*/&#123;</span><br><span class="line">                this.winform.hitCaption();</span><br><span class="line">            &#125;</span><br><span class="line">            case 0x203/*_WLBUTTONDBLCLK*/&#123;</span><br><span class="line">                ..win.show(this.winform.parent.hwnd,!..win.isVisible( this.winform.parent.hwnd ));</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //无返回值则继续调用默认回调函数</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    //悬浮置顶</span><br><span class="line">    ..win.setTopmost( this.hWnd );</span><br><span class="line">    //调整位置</span><br><span class="line">    ..win.setPos( this.hWnd,</span><br><span class="line">                ::GetSystemMetrics(0x10/*_SCXFULLSCREEN*/) - (this.winform.rect.right - this.winform.rect.left) - 80,</span><br><span class="line">                ::GetSystemMetrics(0x11/*_SCYFULLSCREEN*/) /10,</span><br><span class="line">                this.winform.rect.right - this.winform.rect.left,</span><br><span class="line">                this.winform.rect.right - this.winform.rect.left</span><br><span class="line">    );</span><br><span class="line">  //图片路径画窗体</span><br><span class="line">    if( arg[&quot;color&quot;] !=null )&#123;</span><br><span class="line">            //创建一个内存兼容DC</span><br><span class="line">            var hdc          = ::GetDC( this.hWnd );</span><br><span class="line">            this.hMemDC   := ::CreateCompatibleDC( hdc );</span><br><span class="line">            ::ReleaseDC(this.hWnd, hdc);</span><br><span class="line">            //将内存DC和位图关联</span><br><span class="line">            this.hOldBmp    := ::SelectObject(this.hMemDC, this.winform.hBkbitmap);</span><br><span class="line">            //根据位图生成区域对象</span><br><span class="line">            //循环中用到的临时变量</span><br><span class="line">            var hRgn = null;</span><br><span class="line">            var hRgnTemp = null;</span><br><span class="line">            //循环检测位图，将非透明点增加到最终区域。</span><br><span class="line">            var img = ..gdip.bitmap(this.winform.image);</span><br><span class="line">            for(x=0; img.width-1; 1)&#123;</span><br><span class="line">                for(y=0; img.height-1; 1)&#123;</span><br><span class="line">                    var cr = ::GetPixel(this.hMemDC, x, y);</span><br><span class="line">                    if (cr != arg[&quot;color&quot;])&#123;        </span><br><span class="line">                        hRgnTemp = CreateRectRgn(x, y, x+1, y+1);</span><br><span class="line">                        if (hRgn)&#123;</span><br><span class="line">                            CombineRgn(hRgn, hRgn, hRgnTemp, 0x2/*_RGN_OR*/);</span><br><span class="line">                            ::DeleteObject(topointer(hRgnTemp));</span><br><span class="line">                        &#125;</span><br><span class="line">                        else&#123;</span><br><span class="line">                            hRgn = hRgnTemp;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            this.hRgn := hRgn;</span><br><span class="line">            //将区域设置到窗体</span><br><span class="line">            SetWindowRgn(this.hWnd, this.hRgn, 0x1/*_TRUE*/);</span><br><span class="line">    &#125;</span><br><span class="line">    //显示窗口</span><br><span class="line">    if( shownow )&#123; this.winform.show() &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;  //end ctor</span><br><span class="line">   </span><br><span class="line">    //成员函数</span><br><span class="line">    showme = function( flag )&#123;</span><br><span class="line">        if( flag )&#123;</span><br><span class="line">            ..win.show(this.hWnd, flag);</span><br><span class="line">        &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">            ..win.show(this.hWnd, flag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace float&#123;</span><br><span class="line">    SetWindowRgn = ::User32.api(&quot;SetWindowRgn&quot;,&quot;int(int hWnd,int hRgn,int bRedraw)&quot;);</span><br><span class="line">    GetObjectAPI = ::Gdi32.api(&quot;GetObjectA&quot;,&quot;int(int hObject,int nCount,pointer&amp; lpObject)&quot;);</span><br><span class="line">    CreateRectRgn = ::Gdi32.api(&quot;CreateRectRgn&quot;,&quot;int(int X1,int Y1,int X2,int Y2)&quot;);</span><br><span class="line">    CombineRgn = ::Gdi32.api(&quot;CombineRgn&quot;,&quot;int(int hDestRgn,int hSrcRgn1,int hSrcRgn2,int nCombineMode)&quot;);      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*intellisense()</span><br><span class="line">win.util.float(.(parentwinform, linkimage, shownow(true|false),&#123;可选项&#125; ) =&#123;可选项&#125;\n&#123;buttom=50;\nright=50;\ncolor= gdi.RGB( 0, 0, 0)若传入，侧使你指定的颜色透明，但是请确保是.bmp后缀的图片做背景！ &#125;</span><br><span class="line">!float.showme(.(true显示 / false隐藏)</span><br><span class="line">!float.hWnd = 悬浮窗句柄</span><br><span class="line">!float.winform = 悬浮窗体对象</span><br><span class="line">!float.popmenu = 右键菜单</span><br><span class="line">?win.util.float = !float.</span><br><span class="line">end intellisense*/</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大家这样进行测试：</span><br><span class="line">import win.util;</span><br><span class="line">var fw = win.utill.float.createfloatwindow(winform,$&quot;c:\1.jpg&quot;,true);  //传入张50*50的图片，或根据智能提示自定义悬浮窗体的大小</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=732">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=732</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aardio-listbox简单判断添加内容是否重复</title>
      <link href="/posts/2024/08/7c30a260.html"/>
      <url>/posts/2024/08/7c30a260.html</url>
      
        <content type="html"><![CDATA[<p>1、把“添加”按钮的Z序调整到“最后面”，在编辑框输入内容后，直接按回车就添加；<br>2、按回车后，编辑框清空，以便下次输入。（重复与不重复都清空edit）<br>源代码:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = ..win.form( bottom=335;parent=...;right=402;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add(</span><br><span class="line">listbox2=&#123; bgcolor=16777215;bottom=322;right=388;left=216;top=93;z=4;vscroll=1;</span><br><span class="line">items=&#123;  &#125;;edge=1;cls=&quot;listbox&quot; &#125;;</span><br><span class="line">static3=&#123; bottom=30;text=&quot;要添加的内容写这里&quot;;left=16;right=144;top=11;z=7;transparent=1;cls=&quot;static&quot; &#125;;</span><br><span class="line">edit=&#123; bottom=61;right=205;left=14;top=31;z=2;edge=1;cls=&quot;edit&quot; &#125;;</span><br><span class="line">button=&#123; bottom=61;right=315;left=223;top=28;z=1;text=&quot;添加&quot;;cls=&quot;button&quot; &#125;;</span><br><span class="line">static=&#123; bottom=89;right=144;left=14;text=&quot;现有内容&quot;;top=68;transparent=1;z=5;cls=&quot;static&quot; &#125;;</span><br><span class="line">listbox=&#123; bgcolor=16777215;bottom=325;right=206;left=14;top=93;z=3;vscroll=1;</span><br><span class="line">items=&#123;  &#125;;edge=1;cls=&quot;listbox&quot; &#125;;</span><br><span class="line">static2=&#123; bottom=88;right=350;left=221;top=68;z=6;notify=1;text=&quot;状态&quot;;transparent=1;cls=&quot;static&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    //winform.msgbox( winform.button.text );</span><br><span class="line">    var str =winform.edit.text ;</span><br><span class="line">    if(#str&gt;0)&#123;//判断输入数据为非空</span><br><span class="line">        chong=true//定义名为chong 值为真的变量</span><br><span class="line">        for(i=1;winform.listbox.count;1)&#123;    //判断是否出现重复</span><br><span class="line">            if(str==winform.listbox.getItemText(i))&#123;</span><br><span class="line">                chong=false//出现重复时将chong的值改为false</span><br><span class="line">                winform.listbox2.add(&quot;出现重复&quot;,-1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(chong)&#123;    //如果没有重复将数据写入</span><br><span class="line">            winform.listbox.add(str,-1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    winform.edit.text=&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何使子窗口不在任务栏显示</title>
      <link href="/posts/2024/08/1d827891.html"/>
      <url>/posts/2024/08/1d827891.html</url>
      
        <content type="html"><![CDATA[<p>aardio生成父子窗口非常方便，但是如果打开子窗口也在任务栏显示<br>如果打开多个子窗口，那任务栏就多了一堆图标，这样就不美观了  </p><p>只显示父窗口图标，解决方法很简单：  </p><p>1.指定子窗口的父窗口句柄（拖动文件到窗口自动生成代码已经有了)</p><p>2.子窗口在设计视图把这些属性修改：<br>样式：popup<br>扩展样式：none  </p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何给关闭窗体加上确认条件呢?</title>
      <link href="/posts/2024/08/e8380b4.html"/>
      <url>/posts/2024/08/e8380b4.html</url>
      
        <content type="html"><![CDATA[<p>源代码:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; text=&quot;aardio Form&quot;;right=349;bottom=249 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line"></span><br><span class="line">winform.wndproc = function(hwnd,message,wparam,lparam)&#123;</span><br><span class="line">    select(message) &#123;//判断消息类型</span><br><span class="line">        case 0x10/*_WM_CLOSE窗口关闭消息*/&#123;</span><br><span class="line">            if(win.msgboxTest(&quot;你要关闭窗口么?&quot;,&quot;询问&quot;)=false)&#123;</span><br><span class="line">                return wparam;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //无返回值则继续调用默认回调函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-多窗口：登录窗口+主窗口示例</title>
      <link href="/posts/2024/08/377d6c84.html"/>
      <url>/posts/2024/08/377d6c84.html</url>
      
        <content type="html"><![CDATA[<p>程序功能和流程我简单说一下：<br>1、运行程序 弹出登录窗口要求输入用户名和密码同时主窗口不显示。<br>2、点击登录窗口中的取消键后关闭登录窗口，退出程序。<br>3、输入用户名、密码后验证用户名和密码(本例中用户名为：123，密码为：456)。如果验证不通过则弹出对话框提示用户名密码不对。如果通过验证，则关闭登录窗口，显示主窗口，并在主窗口上显示登录成功的字样。<br>初版代码如下（<strong>注意：该代码有一个重大逻辑错误，正确代码继续往下看</strong>）：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var mainform = ..win.form( mode=&quot;popup&quot;;right=599;bottom=399;parent=...;text=&quot;主窗口&quot;;border=&quot;dialog frame&quot; )</span><br><span class="line">mainform.add( </span><br><span class="line">static=&#123; bottom=165;right=402;left=144;top=85;z=1;transparent=1;cls=&quot;static&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//登录窗口代码</span><br><span class="line">var loginform = ..win.form( text=&quot;登录窗口&quot;;right=355;bottom=208;parent=...;mode=&quot;popup&quot;;border=&quot;dialog frame&quot;;sysmenu=false )</span><br><span class="line">loginform.add( </span><br><span class="line">button2=&#123; bottom=183;text=&quot;取消&quot;;left=189;top=152;z=6;right=262;cls=&quot;button&quot; &#125;;</span><br><span class="line">edit=&#123; bottom=73;right=253;left=111;top=46;z=3;edge=1;cls=&quot;edit&quot; &#125;;</span><br><span class="line">button=&#123; bottom=185;text=&quot;登录&quot;;left=88;top=153;z=5;right=162;cls=&quot;button&quot; &#125;;</span><br><span class="line">static=&#123; bottom=70;right=120;left=62;top=51;z=1;transparent=1;text=&quot;用户名：&quot;;cls=&quot;static&quot; &#125;;</span><br><span class="line">edit2=&#123; bottom=123;right=252;left=112;multiline=1;top=92;z=4;password=1;edge=1;cls=&quot;edit&quot; &#125;;</span><br><span class="line">static2=&#123; bottom=130;right=161;left=63;top=97;z=2;transparent=1;text=&quot;密 码：&quot;;cls=&quot;static&quot; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loginform.button.oncommand = function(id,event)&#123;</span><br><span class="line">if(loginform.edit.text == &quot;123&quot; and loginform.edit2.text == &quot;456&quot;)&#123;</span><br><span class="line">mainform.static.text = &quot;登录成功。&quot;;</span><br><span class="line">mainform.show(); //主窗口显示</span><br><span class="line">loginform.close();//登录窗口关闭 </span><br><span class="line">&#125;else&#123;</span><br><span class="line">win.msgbox(&quot;用户名密码不正确&quot;,&quot;不对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loginform.button2.oncommand = function(id,event)&#123;</span><br><span class="line">loginform.close(); //关闭窗口退出程序</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loginform.show(); //显示登录窗口</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p><strong>2013.03.23 补充：重要提示：</strong><br>这个程序实例有一个非常重大的逻辑错误。<br>昨天我在论坛里逛的时候发现一个在很早以前就发布的一个登陆窗口示例，地址：<a href="http://bbs.aardio.com/thread-2665-1-1.html">http://bbs.aardio.com/thread-2665-1-1.html</a> 我的登陆窗口实现的思路跟这个示例是相同的。这个帖子中有这样一个讨论：当停留在登陆窗口,不登陆,用工具遍历窗口,查到主窗口句柄,显示主窗口,就可以绕过登陆窗口,直接进入主窗口!<br>绕过登陆窗口的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import winex;</span><br><span class="line"></span><br><span class="line">var hwnd=winex.find(&quot;AAU_FORM&quot;,&quot;主窗口&quot;）</span><br><span class="line"></span><br><span class="line">win.show(hwnd);</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>我自己试了一下，这段代码确实能绕过登陆窗口把主窗口调用显示出来。  这段代码简直就是黑客必备代码啊！  </p><p>于是我对代码做了修改，解决这个问题的思路是把主窗口的“声明”和“构建”放到验证用户正确后才执行。也就是放到：if(loginform.edit.text == “123” and loginform.edit2.text == “456”){ 这句后面。修改后的完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line"></span><br><span class="line">var loginform = ..win.form( sysmenu=false;text=&quot;登录窗口&quot;;bottom=208;parent=...;right=355;border=&quot;dialog frame&quot;;mode=&quot;popup&quot; )</span><br><span class="line">loginform.add( </span><br><span class="line">button2=&#123; bottom=183;right=262;left=189;top=152;z=6;text=&quot;取消&quot;;cls=&quot;button&quot; &#125;;</span><br><span class="line">edit=&#123; bottom=73;right=253;left=111;top=46;z=3;edge=1;cls=&quot;edit&quot; &#125;;</span><br><span class="line">button=&#123; bottom=185;right=162;left=88;top=153;z=5;text=&quot;登录&quot;;cls=&quot;button&quot; &#125;;</span><br><span class="line">static=&#123; bottom=70;text=&quot;用户名：&quot;;left=62;right=120;top=51;z=1;transparent=1;cls=&quot;static&quot; &#125;;</span><br><span class="line">edit2=&#123; password=1;bottom=123;right=252;left=112;multiline=1;top=92;z=4;edge=1;cls=&quot;edit&quot; &#125;;</span><br><span class="line">static2=&#123; bottom=130;text=&quot;密 码：&quot;;left=63;right=161;top=97;z=2;transparent=1;cls=&quot;static&quot; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loginform.button.oncommand = function(id,event)&#123;</span><br><span class="line">if(loginform.edit.text == &quot;123&quot; and loginform.edit2.text == &quot;456&quot;)&#123;</span><br><span class="line">var mainform = ..win.form( mode=&quot;popup&quot;;right=599;bottom=399;text=&quot;主窗口&quot;;border=&quot;dialog frame&quot; )</span><br><span class="line">mainform.add( </span><br><span class="line">static=&#123; bottom=165;right=402;left=144;top=85;z=1;transparent=1;cls=&quot;static&quot; &#125;</span><br><span class="line">)</span><br><span class="line">mainform.static.text = &quot;登录成功。&quot;;</span><br><span class="line">mainform.show(); //主窗口显示</span><br><span class="line">loginform.close();//登录窗口关闭 </span><br><span class="line">&#125;else&#123;</span><br><span class="line">win.msgbox(&quot;用户名密码不正确&quot;,&quot;不对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loginform.button2.oncommand = function(id,event)&#123;</span><br><span class="line">loginform.close(); //关闭窗口退出程序</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loginform.show(); //显示登录窗口</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-多个文本框内容批量清空方法</title>
      <link href="/posts/2024/08/4f7bba5f.html"/>
      <url>/posts/2024/08/4f7bba5f.html</url>
      
        <content type="html"><![CDATA[<p>不多说，直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=426;bottom=118)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;清空文本框&quot;;left=168;top=71;right=244;bottom=105;z=5&#125;;</span><br><span class="line">edit1=&#123;cls=&quot;edit&quot;;text=&quot;edit1&quot;;left=79;top=31;right=144;bottom=57;edge=1;z=1&#125;;</span><br><span class="line">edit2=&#123;cls=&quot;edit&quot;;text=&quot;edit2&quot;;left=163;top=31;right=228;bottom=57;edge=1;z=2&#125;;</span><br><span class="line">edit3=&#123;cls=&quot;edit&quot;;text=&quot;edit3&quot;;left=238;top=31;right=303;bottom=57;edge=1;z=3&#125;;</span><br><span class="line">edit4=&#123;cls=&quot;edit&quot;;text=&quot;edit4&quot;;left=336;top=31;right=401;bottom=57;edge=1;z=4&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//edit 加入数组</span><br><span class="line">var tab=&#123;winform.edit1;winform.edit2;winform.edit3;winform.edit4&#125;</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">//winform.msgbox( winform.button.text );</span><br><span class="line">for(i=1;4;1)&#123;</span><br><span class="line">tab[i].text=&quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-判断文本编辑框控件edit的文本内容是否已修改</title>
      <link href="/posts/2024/08/96e66e63.html"/>
      <url>/posts/2024/08/96e66e63.html</url>
      
        <content type="html"><![CDATA[<p>只要增加或减少了字符，都会返回true，即使是把增加的内容又删除了与原内容没变。<br>适用于判断文档是否需要保存。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio基本控件编程演示范例&quot;;right=297;bottom=231)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;文本内容是否已修改&quot;;left=67;top=171;right=247;bottom=205;z=2&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;text=&quot;简码编程www.jianma123.com&quot;;left=15;top=15;right=283;bottom=152;autohscroll=false;edge=1;multiline=1;vscroll=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    winform.msgbox(winform.edit.modified,&quot;是否已修改:&quot;);//文本内容是否已修改</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-监视外部窗口的创建销毁</title>
      <link href="/posts/2024/08/ba5eaa66.html"/>
      <url>/posts/2024/08/ba5eaa66.html</url>
      
        <content type="html"><![CDATA[<p>监视外部窗口的创建销毁，可以使用shellhook，例如：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//监视窗口创建销毁</span><br><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; text=&quot;aardio Form&quot;;right=448;bottom=249 )</span><br><span class="line">winform.add(</span><br><span class="line">edit=&#123; dr=1;dl=1;bottom=239;vscroll=1;right=437;left=8;multiline=1;top=13;text=&quot;&quot;;z=1;db=1;dt=1;edge=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//导入shellhook支持库</span><br><span class="line">import win.util.shellhook</span><br><span class="line"></span><br><span class="line">//创建shellhook窗口</span><br><span class="line">shellhook = win.util.shellhook(winform)</span><br><span class="line">shellhook.onShellHook=function(hshell,hwnd)&#123;</span><br><span class="line"></span><br><span class="line">    //获取线程ID,进程ID</span><br><span class="line">    var tid,pid = win.getThreadProcessId(hwnd)</span><br><span class="line">    if(tid== thread.getId())&#123;</span><br><span class="line">        /*return 如果不想临视本线程在这里退出*/</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    //判断钩子拦截到的消息类型</span><br><span class="line">    select(hshell ) &#123;</span><br><span class="line">        case 0x1/*_HSHELL_WINDOWCREATED*/ &#123;  </span><br><span class="line">            winform.edit.text +=   &quot;一个窗口创建&quot;+hwnd+&quot;进程ID：&quot; + pid + &quot;线程ID:&quot; +tid + &#x27;\r\n    标题:&#x27; + win.getText(hwnd) + &#x27;\r\n\r\n&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        case 0x2/*_HSHELL_WINDOWDESTROYED*/&#123;</span><br><span class="line">            winform.edit.text += &quot;一个窗口销毁&quot;+hwnd+&quot;进程ID：&quot; + pid + &quot;线程ID:&quot; +tid  + &#x27;\r\n   标题:&#x27; + win.getText(hwnd) + &#x27;\r\n\r\n&#x27;</span><br><span class="line">        &#125;   </span><br><span class="line">        case 0x4/*_HSHELL_WINDOWACTIVATED*/&#123;</span><br><span class="line">            winform.edit.text += &quot;一个窗口激活&quot;+hwnd+&quot;进程ID：&quot; + pid + &quot;线程ID:&quot; +tid  + &#x27;\r\n   标题:&#x27; + win.getText(hwnd) + &#x27;\r\n\r\n&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-根据DPI自动调整控件参数的方法</title>
      <link href="/posts/2024/08/380df2d5.html"/>
      <url>/posts/2024/08/380df2d5.html</url>
      
        <content type="html"><![CDATA[<p>原理：</p><p>1、根据dpiScaleX或dpiScaleY的值，计算出缩放比例。</p><p>2、在 winform.onDpiChanged 事件里，根据缩放比例，对需要调整的组件参数进行设置。</p><p>3、关键方法：winform.enableDpiScaling</p><p>示例代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;composited=1)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;刷新&quot;;left=235;top=318;right=515;bottom=380;db=1;dl=1;z=2&#125;;</span><br><span class="line">custom=&#123;cls=&quot;custom&quot;;text=&quot;自定义控件&quot;;left=17;top=12;right=743;bottom=295;ah=1;aw=1;border=1;db=1;dl=1;dr=1;dt=1;edge=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">winform.show();</span><br><span class="line"> </span><br><span class="line">import godking.egrid</span><br><span class="line">var e = godking.egrid(winform.custom)</span><br><span class="line"> </span><br><span class="line">// 下面这个函数是计算、调整的关键部分</span><br><span class="line">var rescale = function()&#123;</span><br><span class="line">var rowh = 30</span><br><span class="line">var colw = &#123;90,100,80,60,120&#125;</span><br><span class="line">var dpi =winform.dpiScaleX</span><br><span class="line">rowh *= dpi;</span><br><span class="line">for(i=1;#colw;1) colw[i] *= dpi;</span><br><span class="line">e.RowHeight=rowh</span><br><span class="line">e.setColWidth(,colw)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.onDpiChanged = function(dpiX,dpiY,rect)&#123;</span><br><span class="line">    winform.enableDpiScaling(dpiX/96,dpiY/96) </span><br><span class="line">    rescale()  // 系统dpi改变后自动调整</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">e.setText(0,1,&#123;&quot;文本型&quot;,&quot;图片型&quot;,&quot;选择型&quot;,&quot;不可编辑列表型&quot;&#125;)</span><br><span class="line">e.setText(1,&#123;1,4&#125;,&#123;&quot;第1行第1列&quot;,&quot;第1行第4列&quot;&#125;)</span><br><span class="line">e.setText(2,,&quot;全部第2行&quot;)</span><br><span class="line">e.setText(3,1,&quot;第3行第1列&quot;)</span><br><span class="line"> </span><br><span class="line">rescale(); // 软件启动，先设置一下</span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">rescale(); // 随时可以手动刷新</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-利用transparent制作透明的不规则窗体</title>
      <link href="/posts/2024/08/b1ad9a8b.html"/>
      <url>/posts/2024/08/b1ad9a8b.html</url>
      
        <content type="html"><![CDATA[<p>一直对transparent使用不好，最近摔了几次，稍微摸索了点出来，与大家共同分享。  </p><p>先上结果图片：  </p><p>transparent的三种使用方法，true,false,以及设置透明色。<br>前两种就不说了，主要看第三种。    </p><p>一开始我设置透明色，使用如下语句<br>winform.transparent(,0xfffff);<br>但对于很多的颜色设置总是失败（我也不知道为什么，即使前面直接用winform.bgcolor=0xffffff也失败。。。。）  </p><p>后来发现了在窗口的生成语言里也有这么一句：<br>bgcolour =   一串数字。。。<br>我试着用这个数字来填写透明色，如：<br>红色的背景，用这样的代码，winform.transparent(,255);<br>居然每次都能够成功。  </p><span id="more"></span><p>PS：不认识的颜色，可以用背景颜色的吸管取一下，再到后面的代码去查看。或者论坛里有转换颜色的工具。。。  </p><p>transparent对设置的透明色的准确性非常高，稍微偏差一点，即使只相差1点，也无法变成透明。<br>因为这一点，也吃了很多的亏。<br>开始用PS处理完存成jpg的格式，总是画面破损很严重，后来才知道jpg保存的时候，颜色会有少许失真。<br>用BMP格式（低版本的PS不支持存BMP）来保存文件效果就大为改观了。  </p><p>最后要提的是处理图片的一些技巧。<br>我尝试过效果最好的办法是，用特别的单色（将来要设置成透明，必须是唯一色），新建图层，填充后，放在图片下面作为背景。然后放大图片，用矩形工具，不断delete需要透明的部分（有斜线或曲线购置出的选区，删除时会造成周围细微变色），这样出来的效果完全可以比肩htmlayout载入的png图片。<br>总之，总体思路就是要创建一张透明部分，严格纯色的图片，这样效果会很好。  </p><p>最后上一个从网上下载的播放器的图片，来制作的例子，就是之前的图片，供大家参考，希望对大家有所帮助。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( image=$&quot;\res\1_110328090910_20.bmp&quot;;bottom=612;parent=...;text=&quot;aardio Form&quot;;border=&quot;none&quot;;right=681 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">                select(message) &#123;//判断消息类型</span><br><span class="line">                  case 0x201/*_WM_LBUTTONDOWN 鼠标按下*/&#123;</span><br><span class="line">                           winform.hitCaption(); //使整个窗体可以拖动</span><br><span class="line">                  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //无返回值则继续调用默认回调函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.transparent(128,5720627)</span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>完整文件：<a href="http://pan.baidu.com/share/link?shareid=334709&uk=1024505407">仿播放器</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-设置透明窗体说明</title>
      <link href="/posts/2024/08/97fdbb1b.html"/>
      <url>/posts/2024/08/97fdbb1b.html</url>
      
        <content type="html"><![CDATA[<p>废话不多说，直接开干！<br>窗体透明一般事plus</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;透明题栏&quot;;right=286;bottom=176;border=&quot;none&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;提交&quot;;left=176;top=87;right=231;bottom=108;z=3&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;text=&quot;Edit&quot;;left=86;top=55;right=234;bottom=76;edge=1;z=2&#125;;</span><br><span class="line">static=&#123;cls=&quot;static&quot;;text=&quot;用记名&quot;;left=37;top=56;right=109;bottom=77;transparent=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//给窗体设置背景</span><br><span class="line">import inet.http;//加上http</span><br><span class="line">winform.image = &quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fhbimg.huabanimg.com%2F1c6b595acfd6652b9a080110a0f7b6fc5a94ee33513d-qdBaTS_fw658&amp;refer=http%3A%2F%2Fhbimg.huabanimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1654231490&amp;t=169f387371bd97076777e269d07668fc&quot;;</span><br><span class="line"></span><br><span class="line">//显示窗体</span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>窗体透明化之后,里面的控件脱离原来的窗口显示在窗体外面之后怎么还原回去?</p><p>我建立了一个窗口,里面与一个背景色为蓝色的plus. 我设置了窗口透明度是80,然后里面的控件plus也透明化了.  </p><p>用到代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winform.plus.orphanWindow();</span><br></pre></td></tr></table></figure><p>plus的父窗体为winform  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win.setParent(winform.plus.hwnd,winform.hwnd);</span><br></pre></td></tr></table></figure><p>plus控件确实再一次透明化了,但是发现它的位置不是在原来的地方.<br>再设置plus相对winform位置…  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x,y = winform.plus.getPos();</span><br><span class="line">var bx,by = win.toClient(winform.hwnd,x,y)</span><br><span class="line"></span><br><span class="line">win.setParent(winform.plus.hwnd,winform.hwnd);</span><br><span class="line">winform.plus.setPos(bx,by);</span><br></pre></td></tr></table></figure><p>运行后,确实透明化在原来的地方.<br>按钮事件，可在图形编辑视图下，双击按钮快速自动生成<br>但,问题又来了. 拖动窗口发现,这个plus不是随着窗体移动相对窗口静止,而是随着移动窗口移动的更大幅度<br>看下完整代码  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">//设置窗体透明度</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;button&quot;;left=86;top=372;right=253;bottom=429;z=3&#125;;</span><br><span class="line">button2=&#123;cls=&quot;button&quot;;text=&quot;button2&quot;;left=462;top=356;right=613;bottom=427;z=4&#125;;</span><br><span class="line">//设置透明度</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;text=&quot;白叔King&quot;;left=93;top=90;right=328;bottom=125;edge=1;font=LOGFONT(h=-21);multiline=1;z=1&#125;;</span><br><span class="line">plus=&#123;cls=&quot;plus&quot;;left=105;top=172;right=567;bottom=240;bgcolor=15780518;z=2&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line">console.open();</span><br><span class="line"></span><br><span class="line">winform.button2.oncommand = function(id,event)&#123;</span><br><span class="line">        //winform.msgbox( winform.button2.text );</span><br><span class="line">/*</span><br><span class="line">        console.dump(</span><br><span class="line">                win.getPos(winform.plus.hwnd,true)</span><br><span class="line">        )</span><br><span class="line">        console.dump(</span><br><span class="line">                winform.plus.getPos()</span><br><span class="line">        )</span><br><span class="line">*/</span><br><span class="line">        var x,y = winform.plus.getPos();</span><br><span class="line">        var bx,by = win.toClient(winform.hwnd,x,y)</span><br><span class="line"></span><br><span class="line">        win.setParent(winform.plus.hwnd,winform.hwnd);</span><br><span class="line">        winform.plus.setPos(bx,by);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        //winform.msgbox( winform.button.text );</span><br><span class="line">        </span><br><span class="line">        winform.edit.orphanWindow();</span><br><span class="line">        winform.plus.orphanWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.transparent(80);</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看下效果截图<br>初次运行安装对应库<br><img src="https://i-blog.csdnimg.cn/blog_migrate/23d154f6c82114d1ec600713b153fa3b.png"><br>给电脑添加透明护眼蒙版(鼠标穿透) 以上代码参考了, win.ui.mask库里的代码</p><p>其实还是可以直接用这个库来实现,上面就是为了学习</p><p>要想改变蒙版的颜色, 就把窗口背景色改一改就可以了</p><p>看代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=205;bottom=447;bgcolor=8409088;border=&quot;none&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">plus=&#123;cls=&quot;plus&quot;;text=&quot;半透明写标题&quot;;left=0;top=0;right=206;bottom=31;align=&quot;left&quot;;color=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);notify=1;textPadding=&#123;left=8&#125;;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">winform.plus.background = 0x33000812;</span><br><span class="line">winform.transparent(60)</span><br><span class="line">winform.plus.orphanWindow(true)</span><br><span class="line">winform.plus.onMouseDown = function(wParam,lParam)&#123;</span><br><span class="line">    winform.hitCaption()</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">import win.ui.shadow</span><br><span class="line">win.ui.shadow(winform);</span><br><span class="line"> </span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>可以设置尺寸，透明度<br>看下效果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/173b9cfb433c75e9f2df520c1e7453a7.png"><br>原文链接：<a href="https://blog.csdn.net/weixin_37254196/article/details/124569117">https://blog.csdn.net/weixin_37254196/article/details/124569117</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-父窗口与其模态窗口相互通信演示</title>
      <link href="/posts/2024/08/f47e1d33.html"/>
      <url>/posts/2024/08/f47e1d33.html</url>
      
        <content type="html"><![CDATA[<p>父窗口与其模态窗口相互通信演示</p><p>使用功能:<br>两者窗口之间通信利用了subscribe和publish订阅指令<br>子模态窗口里使用了新增的窗口函数winform.beforShowWindow() 和 winform.beforeDestroy ()</p><p>实现原理:<br>父窗口通过打开模态窗口之前发送订阅信息, 模态窗口显示之前获取到此订阅信息,然后展示信息并显示窗体 , 模态窗口中返回信息用了两种方式,1是利用窗口销毁前函数发送订阅信息, 2是通过模态终结指令endModal()返回信息.</p><p>适用范围:<br>窗体之间的传递信息</p><p>父窗体代码如下:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;与模态窗口相互通信演示&quot;;right=372;bottom=292)</span><br><span class="line">mainForm.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;打开模态子窗口并附带参数&quot;;left=197;top=19;right=360;bottom=88;z=3&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;text=&quot;你好啊,模态子窗口?&quot;;left=20;top=18;right=187;bottom=85;edge=1;multiline=1;z=1&#125;;</span><br><span class="line">edit2=&#123;cls=&quot;edit&quot;;left=18;top=107;right=359;bottom=186;edge=1;multiline=1;z=2&#125;;</span><br><span class="line">edit3=&#123;cls=&quot;edit&quot;;left=16;top=214;right=359;bottom=279;edge=1;multiline=1;z=4&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">mainForm.button.oncommand = function(id,event)&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">var frmChild,wb = mainForm.loadForm(&quot;\筛选器\testaa.aardio&quot;);</span><br><span class="line">publish(&quot;窗体之间传参&quot;,mainForm.edit.text)</span><br><span class="line">var chstr = frmChild.doModal();</span><br><span class="line">    mainForm.edit3.text =chstr</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">subscribe(&quot;接收一个窗口销毁&quot;,function(...)&#123;</span><br><span class="line">    mainForm.edit2.text = ...</span><br><span class="line">&#125; )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mainForm.enableDpiScaling();</span><br><span class="line">mainForm.show();</span><br><span class="line"> </span><br><span class="line">return win.loopMessage();</span><br></pre></td></tr></table></figure><p>模态窗口代码如下(testaa.aardio):</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;模态子窗口&quot;;right=326;bottom=274;parent=...)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;关闭模态窗口并附带返回值&quot;;left=12;top=197;right=312;bottom=258;z=2&#125;;</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=12;top=13;right=315;bottom=185;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">winform.beforShowWindow = function(shown,status)&#123; </span><br><span class="line">    subscribe(&quot;窗体之间传参&quot;,function(str)&#123;</span><br><span class="line">         </span><br><span class="line">        winform.edit.text = str;</span><br><span class="line">         </span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.beforeDestroy = function()&#123;</span><br><span class="line">     </span><br><span class="line">    publish(&quot;接收一个窗口销毁&quot;,&#x27;我是模态窗口销毁时候的返回消息:\r\n&#x27; ++ winform.edit.text)</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    winform.endModal(&#x27;我是点击了关闭模态窗口的返回消息:\r\n&#x27; ++ &quot;你好啊主窗口,我是模态窗口关闭附带的返回值.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.enableDpiScaling();</span><br><span class="line">winform.show();</span><br><span class="line"> </span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何让主窗体不在任务栏显示</title>
      <link href="/posts/2024/08/4f865e2b.html"/>
      <url>/posts/2024/08/4f865e2b.html</url>
      
        <content type="html"><![CDATA[<p>首先需要意识到toolwindow是没有最大化最小化按钮的。<br>我们不在这上面浪费时间。  </p><p><strong>解决办法：</strong><br>创建一个toolwindow风格的隐藏窗口作为父窗口。<br>子窗口指定为popun窗格，扩展样式为none( 即不是 appwindow也不是toolwindow )</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui; </span><br><span class="line"></span><br><span class="line">var frmToolWindow = win.form( exmode=&quot;toolwindow&quot; ) </span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( exmode=&quot;none&quot;;bottom=399;parent=frmToolWindow;mode=&quot;popup&quot;;right=599;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.onClose = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">    frmToolWindow.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-htmlayout-拖动窗口或调整窗口大小时取消显示内容让窗口不再闪烁</title>
      <link href="/posts/2024/08/f1f90161.html"/>
      <url>/posts/2024/08/f1f90161.html</url>
      
        <content type="html"><![CDATA[<p>mainForm.disableDragFullWindow = true; 一句就可以达到目的了。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-webform取得指定网页节点的方法归纳</title>
      <link href="/posts/2024/08/2a17a149.html"/>
      <url>/posts/2024/08/2a17a149.html</url>
      
        <content type="html"><![CDATA[<p>刚才花了一些时间写的基础教程，由于篇幅和格式的问题，给一个纲要和链接。</p><p>我们要使用 web.form 库对网页进行操作，首先要取得想要操作的那个网页节点。若是第一步就出了问题，后续的操作就无法正常进行了。于是，怎样取得指定的网页节点成了一个至关重要的问题。在这里，我简单的列举一些常用的方式（以下的 wb 变量均为 web.form 的一个实例对象）：</p><p><strong>1、通过节点的 id 或者 name 一步取得</strong></p><p><strong>2、通过子节点取得父节点</strong></p><p><strong>3、通过节点名取得节点集合</strong></p><p><strong>4、枚举法 + 节点特点</strong></p><hr><p>要讨论这个问题，我们得先明白什么是网页节点。我们平时浏览网页的时候一般是不会注意网页节点的，因为网页节点这个概念是相对于网页源代码而言的。我们在网页页面上右键，选择查看源代码即可查看网页的源代码。  </p><p>我们可以看到网页的源代码的格式与 xml 格式极为相似，也是由一个一个节点构成，具体节点的含义可以看一下百度百科的解释： <a href="http://baike.baidu.com/view/47398.htm#2">http://baike.baidu.com/view/47398.htm#2</a></p><p>我们要使用 web.form 库对网页进行操作，首先要取得想要操作的那个网页节点。若是第一步就出了问题，后续的操作就无法正常进行了。于是，怎样取得指定的网页节点成了一个至关重要的问题。在这里，我简单的列举一些常用的方式（以下的 wb 变量均为 web.form 的一个实例对象）：  </p><p><strong>1、通过节点的 id 或者 name 一步取得</strong><br> <span id="more"></span><br>我们一定非常熟悉 wb.getEle 这个东西，因为获取元素我们一般都会调用这个方法。我们可以看一下它的函数原型：<br>ele = wb.getEle( HTML节点的ID名name, 框架名 )  </p><p>当提供 id 或 name 可以唯一确定一个节点的时候，我们只要提供网页节点的 id 或者 name 属性，即可获取该节点。  </p><p>当网页中存在同 name 节点的时候，我们则可以用 wb.getEles 方法取得，我们可以看一下它的函数原型：<br>tele = wb.getEles( HTML节点的name属性, 框架名 )  </p><p>可能这个方法大家并不常用，wb.getEles 返回的是节点的集合。因为网页中节点的 id 属性是不可重复的，而 name 属性却是可重复的，因此当我们想要获取的节点有 name 属性的时候，就要考虑到网页中是否有其他节点与之 name 属性相同。wb.getEles 就可以获取所有指定 name 属性的节点。  </p><p>举个例子，网页代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;html&gt;  </span><br><span class="line">    &lt;head&gt;  </span><br><span class="line">    ...  </span><br><span class="line">    &lt;/head&gt;  </span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;足球&quot; /&gt;  </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;篮球&quot; /&gt;  </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;排球&quot; /&gt;  </span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">    &lt;/html&gt;  </span><br></pre></td></tr></table></figure><p>我们可以发现我们用 wb.getEle(“hobbies”) 的话，只能取到足球的 checkbox，而不能取到篮球或排球的节点。这时候，我们就可以使用 wb.getEles 来解决了，代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    var tele = wb.getEles(&quot;hobbies&quot;);  </span><br><span class="line">    var 足球, 篮球, 排球 = tele(0), tele(1), tele(2);  </span><br><span class="line">    排球.checked = true;  </span><br></pre></td></tr></table></figure><p>上面一段代码就可以实现获取足球、篮球和排球三个节点了，这里要注意的是，wb.getEles 返回的是 com 数组，因此必须使用小括号来读取数组成员，而不是中括号，并且 com 数组的索引是从 0 开始的，而不是 1。  </p><p><strong>2、通过子节点取得父节点</strong>  </p><p>这也是一个可以被接受的方式。往往我们要直接取得指定的节点十分困难，但是我们发现这个节点的某一个子节点很容易取得。这时候，我们就可以通过这个子节点来取得我们想要的父节点。  </p><p>举个例子，网页代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;form action=&quot;...&quot; method=&quot;post&quot;&gt;  </span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;  </span><br><span class="line">    &lt;/form&gt;  </span><br></pre></td></tr></table></figure><p>假设我们要提交这个表单，你会使用什么方法取得表单节点？或许你会说：“这个表单没有 name，也没有 id，大概只能枚举法或者通过节点名取得。不过它里面有一个 input 节点挺好获取的。”  </p><p>枚举法或者通过节点名取节点确实是一个办法，但是，当这个节点下某一个子节点非常好取的时候，我们不妨就通过这个子节点搭桥，代码如下：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var childEle = wb.getEle(&quot;username&quot;); // 我们取得了子节点  </span><br><span class="line">  var ele = childEle.parentNode; // 子节点的 parentNode 即为我们要取的父节点  </span><br></pre></td></tr></table></figure><br>这确实是一个好方法，但是你可能会说：“我根本不知道什么 parentNode 属性，帮助文档里好像也没有提及。”  </p><p>但是你别忘了，我们还有智能提示，即使没有智能提示也还有 DOM 帮助手册，毕竟这是 IE 的东西，不管aardio什么事，aardio只需要调用 IE 提供的接口就可以了。因此还有许多智能提示以及帮助中没有提及的属性和方法，我们将会尽可能多的让大家了解。  </p><p>那么，我考大家一个问题，若是网页代码如下，怎么获取表单节点呢？  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;form action=&quot;...&quot; method=&quot;post&quot;&gt;  </span><br><span class="line">        &lt;div&gt;  </span><br><span class="line">            &lt;span&gt;  </span><br><span class="line">                &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;  </span><br><span class="line">            &lt;/span&gt;  </span><br><span class="line">        &lt;/div&gt;  </span><br><span class="line">    &lt;/form&gt;  </span><br></pre></td></tr></table></figure><p>你也许会说：“这还不简单？同上，childEle.parentNode.parentNode.parentNode…”  </p><p>噢，这确实可行，但是当父节点层次非常多的时候，我们可以有简便的方法：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    var ele = childEle.form;  </span><br></pre></td></tr></table></figure><p>childEle.form 可以直接获取 childEle 所在的表单节点。是不是感觉被骗了？呵呵。不，我上面讲的那么多并不是废话，因为有时候我们要获取父节点并不一定是一个表单，可能是其他类型的节点，这时候我们就不得不用 parentNode 了。  </p><p><strong>3、通过节点名取得节点集合</strong>  </p><p>我们知道，凡是网页节点都有一个节点名。那么，我们能不能通过网页节点名来获取网页节点呢？答案当然是肯定的。  </p><p>节点名类似于节点的 name 属性，是可以重复的，而且由于这些节点名是固定的，几乎没有哪一个网页节点名没有重复，因此取回的同样是节点的集合——一个 com 数组。  </p><p>要通过节点名获取节点，可以使用 getElementsByTagName，同样通过一个例子说明问题，网页代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;img src=&quot;...&quot; alt=&quot;确定&quot; /&gt;  </span><br><span class="line">    &lt;img src=&quot;...&quot; alt=&quot;取消&quot; /&gt;  </span><br></pre></td></tr></table></figure><p>倘若整张网页只有这两个 img 节点，我们可以使用如下代码来获取这两个节点：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    var tele = wb.document.getElementsByTagName(&quot;img&quot;);  </span><br><span class="line">    var 确定, 取消 = tele(0), tele(1);  </span><br><span class="line">    取消.click();  </span><br></pre></td></tr></table></figure><p>在这里我就不多做解释，想必大家要是没有忘记上面的“通过 name 属性获取节点”的话，应该很容易能够理解。  </p><p>至于第三行，我这里简单解释一下，我们看到网页代码中，两个 img 节点都有 onclick 属性，这个属性是指定该节点被单击时触发的脚本。  </p><p>我们通过 取消.click() 可以触发这个脚本，也就相当于我们单击了取消按钮。  </p><p>同样的，任何节点都有 getElementsByTagName 函数，我们可以结合上面的方法来获取指定的节点。  </p><p>举个例子，网页代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;img alt=&quot;&quot; /&gt;  </span><br><span class="line">    &lt;!--前面有许多图片--&gt;  </span><br><span class="line">    &lt;form action=&quot;...&quot; method=&quot;post&quot;&gt;  </span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;  </span><br><span class="line">        &lt;img src=&quot;...&quot; alt=&quot;确定&quot; /&gt;    </span><br><span class="line">        &lt;img src=&quot;...&quot; alt=&quot;取消&quot; /&gt;    </span><br><span class="line">    &lt;/form&gt;  </span><br></pre></td></tr></table></figure><p>我们要实现填完 username 之后，单击确定按钮，则可以使用如下代码：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    /*  </span><br><span class="line">      取的用户名节点，这里也可以使用 getEle 方法，但是 getEle 方法是 web.form 库的一个封装方法，  </span><br><span class="line">      该方法并不能在网页节点上使用。譬如 form 是一个表单元素，我们要获取一个在 form 下的有 id 的  </span><br><span class="line">      子元素，则只能使用 form.getElementById(&quot;ID&quot;)，而不能使用 form.getEle(&quot;ID&quot;)。  </span><br><span class="line">      而 form.getEle(&quot;Name&quot;) 则可以用 form.getElementsByName(&quot;Name&quot;)(0) 替代。具体可看库代码。  </span><br><span class="line">     */    </span><br><span class="line">    var username = wb.document.getElementById(&quot;username&quot;);  </span><br><span class="line">    var form = username.form;  </span><br><span class="line">    var img = form.getElementsByTagName(&quot;img&quot;)(0); // form 下第一个 img 的节点（确定），0 替换为 1 可取得第二个（取消）  </span><br><span class="line">    img.click();  </span><br></pre></td></tr></table></figure><br>怎么样？是不是有些明白了？  </p><p><strong>4、枚举法 + 节点特点</strong>  </p><p>当我们想要获取的节点没有 name，也没有 id。甚至用上面的任何方法都难以获取的时候该怎么办呢？当我们实在没有办法的时候，可以使用枚举法。但是有一点必须确定，这个节点应当是有特征的。  </p><p>何为有特征？一般的节点都有自己的特点，比如说：在一个 form 中有一个 input 节点，其 type 属性为 “image”，而且我们通过这两个线索可以唯一确定这个节点。我们就可以遍历表单中所有的 input 节点，然后再检查这些节点的 type 属性值。  </p><p>同样举个例子，网页代码如下：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;form id=&quot;frmLogin&quot; action=&quot;...&quot; method=&quot;post&quot;&gt;  </span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;...&quot; /&gt;  </span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;...&quot; /&gt;  </span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;...&quot; /&gt;  </span><br><span class="line">           </span><br><span class="line">        &lt;input type=&quot;image&quot; /&gt;  </span><br><span class="line">    &lt;/form&gt;  </span><br></pre></td></tr></table></figure><br>没错，我们就要获取那个 type=”image” 的 input 节点。还记得吗？我们可以通过 getElementsByTagName 取得所有 input 节点的。如果你还记得，那就跟我一起做：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    var form = wb.getEle(&quot;frmLogin&quot;); // 先取得表单节点，这一步很方便  </span><br><span class="line">    var inputs = form.getElementsByTagName(&quot;input&quot;); // 看，这句就获取了所有的 input 节点了  </span><br></pre></td></tr></table></figure><br>嗯，我们已经完成了大部分了，取得了表单下所有的 input 节点的集合，下面我们可以通过 com 库来遍历这些节点，当我们输入 com.each 的时候，aardio会自动生成循环体基本代码，真是太方便了：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    var img; // 时刻准备被赋值  </span><br><span class="line">    for index,obj in com.each(inputs) &#123;  </span><br><span class="line">        // 现在 obj 就是每一个 input 节点了，有几个 input，就会循环几次  </span><br><span class="line">        if (string.lower(obj.type) == &quot;image&quot;) &#123; // 判断 obj 的 type 属性是否为 image，可以先转化为小写，写得严密一些  </span><br><span class="line">            // 很激动，现在 obj 就是我们要找的节点了，我们可以把它赋给 img 变量  </span><br><span class="line">            img = obj;  </span><br><span class="line">            break; // 赶紧挑出循环，不要浪费系统资源和用户的时间  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    if (img != null) &#123; // 如果 img 不为空，即我们取到了这个节点  </span><br><span class="line">        // 后续操作，点它！  </span><br><span class="line">        img.click();  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><br><strong>5、无比强大的 wb.queryEles() 函数</strong></p><p>怎么样，是不是很方便呢？赶紧试试看吧。</p><p>原文链接： <a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=940">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=940</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-win, winex库</title>
      <link href="/posts/2024/08/b7cc21c6.html"/>
      <url>/posts/2024/08/b7cc21c6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> win, winex库</span><br><span class="line">match(.(句柄,文本,类名,ID) = 指定一个窗口句柄,检测是否符合给定参数\n所有参数可选,类名与文本支持模式表达式</span><br><span class="line">find(.(类名模式串,标题模式串,进程ID,线程ID)=查找顶层窗口，所有参数都是可选参数\n返回值为：句柄,线程ID,进程ID</span><br><span class="line">findMainWnd(.(类名模式串,标题模式串,进程ID,线程ID) = 查找独立不属于其他窗口所有的顶层窗口所有参数都是可选参数\n返回值为：句柄,线程ID,进程ID</span><br><span class="line">findEx(.(父窗口句柄,第几个匹配,类名模式串 ,标题模式串, 控件ID )=查找子窗口，除父窗口句柄外所有参数可选\n返回值为句柄</span><br><span class="line">findExists(.(父窗口标题,控件文本,父窗口类名,控件类名,控件ID,进程ID,第几个匹配) = 查找包含指定控件窗口的父窗口,所有参数可选\n返回值为:窗口句柄,控件句柄,线程ID,进程ID</span><br><span class="line">findActivate(.(父窗口标题,控件文本,父窗口类名,控件类名,控件ID,进程ID,第几个匹配) = 调用winex.findExists查找并激活包含指定控件窗口的父窗口,所有参数可选\n返回值为:窗口句柄,控件句柄,线程ID,进程ID</span><br><span class="line"></span><br><span class="line">winex.attach(hwnd) //附加到“外部”线程窗口并共享输入状态，注意该函数会重置键盘状态。返回值为是否成功附加</span><br><span class="line">winex.attach(hwnd,false) //解除共享输入状态。返回值为是否成功解除</span><br><span class="line">winex.sendString(文本, 窗口句柄=前台窗口) //发送@1给@2，\r\n表示换行</span><br><span class="line">winex.say(文本, 窗口句柄=前台窗口) //发送@1给@2，\n表示换行</span><br><span class="line">winex.say2(文本,窗口句柄=前台窗口) //发送@1给@2，\n表示换行</span><br><span class="line">winex.sayIme(文本,窗口句柄=前台窗口) //发送@1给@2，\n表示换行</span><br><span class="line">hwnd,线程ID,进程ID = winex.find( 类名,标题,进程ID,线程ID ) //查找窗口</span><br><span class="line">winex.key.combine(hedit,&quot;CTRL&quot;,&quot;s&quot;) //在hedit窗口中按下Ctrl+S，需import winex.key</span><br><span class="line">winex.key.click(hedit,&quot;ENTER&quot; ) //在hedit窗口中按下Enter键，需import winex.key</span><br><span class="line">winex.key.altClick(hedit,&quot;F&quot; ) //在hedit窗口中按下Alt+F键，需import winex.key</span><br><span class="line"></span><br><span class="line">win.isChild(.(父窗口句柄,子窗口句柄) //判断@2是否是@1的子窗口或隶属子窗口。返回1/0</span><br><span class="line">win.isVisible(hwnd) //判断窗口是否可见，可通过win.show()改变。返回true/false</span><br><span class="line">win.isWindow(hwnd) //判断是否有效窗口。返回true/false</span><br><span class="line">win.isIconic(hwnd) //判断窗口是否最小化为任务栏图标。返回true/false</span><br><span class="line">win.isZoomed(hwnd) //判断窗口是否最大化。返回true/false</span><br><span class="line">win.isEnable(__/*输入窗口句柄*/) = 判断窗口是否启用状态</span><br><span class="line">win.show(hwnd,_SW_...) //显示窗口，任务栏中出现，并不是显示到最前面，@2是以_SW_为前缀的可选显示参数，参见windows编程SW_</span><br><span class="line">win.show(hwnd,false) //隐藏窗口，任务栏中消失</span><br><span class="line">win.close(hwnd) //关闭窗口\n关闭外部进程窗口请使用winex.close()替代</span><br><span class="line">win.enable(__/*输入窗口句柄*/,true) = 启用窗口</span><br><span class="line">win.enable(__/*输入窗口句柄*/,false) = 禁用窗口</span><br><span class="line">win.setTop(__/*输入窗口句柄*/)=前置窗口到当前线程Z序顶部\n顶层窗口或者设置了 _WS_CLIPSIBLINGS 重叠裁剪样式的窗口向前移动\n子窗口会向后面移动.</span><br><span class="line">win.getForeground()=获取前台窗口句柄</span><br><span class="line">win.getActive()=获取当前线程激活窗口句柄,如果要获取全局激活窗口请使用win.getForeground()</span><br><span class="line">win.setActive(hwnd) //设置激活窗口(激活窗口是什么？)</span><br><span class="line">win.getFocus() //获取输入焦点所在窗口句柄</span><br><span class="line">win.setFocus(hwnd) //设置输入焦点，只用于当前线程</span><br><span class="line">win.getDesktop() //获取桌面句柄</span><br><span class="line">win.setTopmost(hwnd) //置顶窗口（不是win.setForeground()）</span><br><span class="line">win.setTopmost(hwnd,false) //取消置顶窗口</span><br><span class="line">win.setForeground(__/*输入窗口句柄*/) //前置窗口并获取输入焦点（把窗口显示在屏幕最前面,最小化窗口自动还原+获取焦点）,\n当前程序是背景窗口时,win7以上系统令在任务栏闪烁,</span><br><span class="line">win.showForeground(.(窗口句柄,x,y,cx,cy) //把窗口显示在屏幕最前面,最小化窗口自动还原\n类似setForeground但不会改变输入焦点,\n除句柄外,其他参数为可选参数</span><br><span class="line">win.find(.(类名,标题) //查找顶层窗口，参数都是可选参数。返回句柄</span><br><span class="line">win.findEx(.(父窗口句柄,上一个窗口句柄,类名,标题) //查找子窗口，除父窗口句柄以外，其他参数都是可选参数 </span><br><span class="line">win.setCapture(.(窗口句柄) = 开始捕获鼠标消息,返回上次调用该函数的窗口句柄</span><br><span class="line">win.releaseCapture() = 释放鼠标捕获,成功返回true</span><br><span class="line">win.registerClassEx(.(&quot;类名&quot;,类参数表,&quot;源类名&quot;) =  并注册新类名\n如果参数@3指定了源类名则复制该类\n可选用参数@2指定 WNDCLASSEX的部份字段值</span><br><span class="line">win.registerFormClass(&quot;类名&quot;,类参数表,&quot;源类名&quot;) = @.registerFormClass(&quot;类名&quot;,&#123;\n    style = _CS___\n&#125; );</span><br><span class="line"></span><br><span class="line">win.delay(1000* 5) //毫秒延时，区别sleep()使用于无窗口、无消息循环时</span><br><span class="line">win.getClass(hwnd) //返回窗口类名</span><br><span class="line">win.getId(hwnd) //返回控件ID</span><br><span class="line">win.getText(hwnd, 缓冲区长度=文本长度) //返回控件文本内容，@2可选</span><br><span class="line">win.setText(hwnd,文本,缓冲区长度=文本长度) //设置控件文本，外部进程窗口使用winex.setText()</span><br><span class="line"></span><br><span class="line">win.flash(hwnd,次数,时间间隔,选项) //闪烁窗口</span><br><span class="line">win.msgbox(文本,标题,样式,所有者hwnd) //弹出对话框</span><br><span class="line">win.msgboxErr(文本,标题,所有者hwnd) //弹出错误对话框</span><br><span class="line">win.msgboxTimeout(文本,标题,超时毫秒值,样式,所有者hwnd) //弹出对话框，超时自动关闭</span><br><span class="line">win.msgboxTest(文本,标题,所有者hwnd) //返回布尔值表示用户是否按了“确定”按钮</span><br><span class="line">win.getScreen() //返回屏幕宽度、高度</span><br><span class="line">win.center(hwnd,目标窗口句柄) //居中窗口,并调整以保证显示在可见范围内，目标窗口句柄如果为空则取父窗口或所有者窗口,为0表示桌面</span><br><span class="line"></span><br><span class="line">hwndroot = win.getRoot() //获取最顶层父窗口句柄</span><br><span class="line">win.enable(hwnd, 1) //启用窗口，使可以操作</span><br><span class="line">win.enable(hwnd, 0) //禁用窗口，使不能操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-子窗口内嵌到父窗口的控件里显示</title>
      <link href="/posts/2024/08/6a5695a2.html"/>
      <url>/posts/2024/08/6a5695a2.html</url>
      
        <content type="html"><![CDATA[<p>子窗体：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( border=&quot;none&quot;;bgcolor=255;bottom=219;parent=...;text=&quot;aardio Form&quot;;left=0;right=293;top=0;mode=&quot;child&quot;/*这里样式为child*/)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123; bottom=197;right=255;left=176;top=161;z=1;text=&quot;button&quot;;cls=&quot;button&quot; &#125;;</span><br><span class="line">edit=&#123; bottom=119;text=&quot;edit&quot;;left=50;multiline=1;top=21;z=2;right=237;edge=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>主窗体:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = ..win.form( right=600;bottom=400;parent=...;text=&quot;aardio Form&quot; )</span><br><span class="line">mainForm.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">var child,wb = mainForm.loadForm(&quot;\res\aa.aardio&quot;,mainForm /*指定父窗口*/ );</span><br><span class="line">child.show();</span><br><span class="line"></span><br><span class="line">//可以使用 win.setPos()函数 移动子窗体</span><br><span class="line">win.setPos(child.hwnd,100,100)</span><br><span class="line"></span><br><span class="line">mainForm.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-子窗口调用父窗口函数</title>
      <link href="/posts/2024/08/9c1a548b.html"/>
      <url>/posts/2024/08/9c1a548b.html</url>
      
        <content type="html"><![CDATA[<p>子窗口调用父窗口函数是比较常用的编程技术，通常用于把功能分解模块化到多窗口的程序中，比如一个程序有登陆窗口、主窗口、管理窗口、编辑窗口、查询窗口等，就需要父子窗口之间互相通信，互相操作对方。下面演示一个最简单的父子窗口互动编程教程：<br>1.新建win窗口工程<br>2.工程资源管理器资源文件文件夹上右键,新建窗口文件<br>3.把child1.aardio拖到main.aardio里,会自动生成引用代码<br>4.在子窗口上放一个按钮,双击进去,写上代码<br>5.在主窗口里写上函数<br>这里要注意把函数作为主窗口mainForm的成员函数，不然子窗口调用时会报null。  </p><p>主窗口源码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;简码编程 jianma123.com&quot;;right=759;bottom=469)</span><br><span class="line">mainForm.add(</span><br><span class="line">edit=&#123;cls=&quot;edit&quot;;left=14;top=246;right=743;bottom=455;db=1;dl=1;dr=1;dt=1;edge=1;multiline=1;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//注意这里是 mainForm.  即是 主窗口加法 变成了mainForm的成员函数</span><br><span class="line">mainForm.主窗口加法 = function(a,b)&#123;</span><br><span class="line">    win.msgbox(a+b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var frmChild,wb = mainForm.loadForm(&quot;\res\child1.aardio&quot;);</span><br><span class="line">frmChild.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mainForm.enableDpiScaling();</span><br><span class="line">mainForm.show();</span><br><span class="line"></span><br><span class="line">return win.loopMessage(); </span><br></pre></td></tr></table></figure><p>子窗口源码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;简码编程 jianma123.com 子窗口&quot;;right=387;bottom=241;parent=...)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;button&quot;;left=122;top=83;right=256;bottom=139;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line">//注意窗口构建代码里有 parent=...</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">    winform.parent.主窗口加法(1,2);//    winform.parent指的是用loadForm()加载之个子窗口的父对象</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.enableDpiScaling();</span><br><span class="line">winform.show();</span><br><span class="line"></span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;//注意这里返回窗口对象给父窗口</span><br></pre></td></tr></table></figure><p>其它：<br>父子窗口的互相调用操作，还有在父窗口或子窗口里定义全局变量、全局函数等方法，请自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-webform的select控件如何动态增加删除选项</title>
      <link href="/posts/2024/08/8bdd7535.html"/>
      <url>/posts/2024/08/8bdd7535.html</url>
      
        <content type="html"><![CDATA[<p>代码示例1：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( right=586;bottom=414;parent=...;text=&quot;Dropdown-select&quot;;border=&quot;resizable&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line">import web.layout;</span><br><span class="line">var wbLayout = web.layout( winform );</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;select #test&gt;</span><br><span class="line">            &lt;option&gt;体育&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;足球&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;篮球&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;羽毛球&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;div #sel-html&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">html &#123; font: system; &#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">//输出HTMLayout中select的源码就知道是为什么了</span><br><span class="line">wbLayout.getEle(&quot;sel-html&quot;).innerText = wbLayout.getEle(&quot;test&quot;).outerHTML  </span><br><span class="line"></span><br><span class="line">var ltPopup = wbLayout.getEle(&quot;test&quot;).child(3)</span><br><span class="line">ltPopup.child(2).detach(); //在IDE函数提示中,或者库源码中都可以看到此函数分离节点</span><br><span class="line">var ltEle = ltPopup.child(3).clone(-1); //复制一个节点并添加到尾部</span><br><span class="line">ltEle.innerHTML = &quot;新增的节点&quot;</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>代码示例2：<br>用 innerHTML 动态生成字符串也可以，这也是HTMLayout官方推荐的方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( right=586;bottom=414;parent=...;text=&quot;Dropdown-select&quot;;border=&quot;resizable&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line">import web.layout;</span><br><span class="line">var wbLayout = web.layout( winform );</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div #sel /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.getEle(&quot;sel&quot;).innerHTML = /*&lt;select #test&gt;</span><br><span class="line">            &lt;option&gt;体育&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;足球&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;篮球&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;羽毛球&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>代码示例3：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=276;parent=...;right=797;text=&quot;Dropdown-select&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">import web.layout.behavior;</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout( winform );</span><br><span class="line"></span><br><span class="line"> wbLayout.html = /**</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;div id=&quot;addselect&quot;&gt;</span><br><span class="line">             &lt;div id=&quot;addtxt&quot;&gt;请选择你喜欢的体育项目：&lt;/div&gt;</span><br><span class="line">             &lt;div id=&quot;sel&quot; &gt;</span><br><span class="line">                        &lt;select id=&quot;test&quot;&gt;</span><br><span class="line">                                &lt;option&gt;足球&lt;/option&gt;</span><br><span class="line">                                &lt;option&gt;篮球&lt;/option&gt;</span><br><span class="line">                                &lt;option&gt;羽毛球&lt;/option&gt;</span><br><span class="line">                        &lt;/select&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">             &lt;div id=&quot;txt&quot;&gt;追加体育项目：&lt;input type=&quot;text&quot; id=&quot;addoption&quot; novalue=&quot;增加一个体育名称&quot; /&gt;&lt;/div&gt;</span><br><span class="line">             &lt;button id=&quot;mybutton1&quot;&gt;追加一个下拉式选项中的选项&lt;/button&gt;</span><br><span class="line">             &lt;button id=&quot;mybutton2&quot;&gt;替换所有下拉式选项中的选项，但也是固定的选项&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace web.layout.behavior.command1&#123;</span><br><span class="line">        onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">//                wbLayout.getEle(&quot;test&quot;).child(3).insertAdjacentHTML(&quot;beforeEnd&quot;,&quot;&lt;option&gt;乒乓球&lt;/option&gt;&quot;)                                      //增加固定的</span><br><span class="line">//                wbLayout.getEle(&quot;test&quot;).child(3).insertAdjacentHTML(&quot;beforeEnd&quot;,&quot;&lt;option&gt;&quot;+wbLayout.getEle(&quot;addoption&quot;).innerText+&quot;&lt;/option&gt;&quot;)  //增加动态的，但不能为空，否则给出错误提示</span><br><span class="line">                if(wbLayout.getEle(&quot;addoption&quot;).innerText!=null)&#123;                                                                                            //非空值时追加，但没有给出是否重复判定</span><br><span class="line">                        wbLayout.getEle(&quot;test&quot;).child(3).insertAdjacentHTML(&quot;beforeEnd&quot;,&quot;&lt;option&gt;&quot;+wbLayout.getEle(&quot;addoption&quot;).innerText+&quot;&lt;/option&gt;&quot;)</span><br><span class="line">                        winform.msgbox(&quot;成功插入，请查看下拉列表项！&quot;,&quot;aardio提示&quot;) </span><br><span class="line">                &#125;</span><br><span class="line">                else&#123; </span><br><span class="line">                        winform.msgbox(&quot;输入为空值，请重新输入！&quot;,&quot;aardio提示&quot;)</span><br><span class="line">                </span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace web.layout.behavior.command2&#123;</span><br><span class="line">        onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">                 wbLayout.getEle(&quot;sel&quot;).innerHTML =</span><br><span class="line">                                                                                          /*&lt;select #test&gt;</span><br><span class="line">                                                                                     &lt;option&gt;足球&lt;/option&gt;</span><br><span class="line">                                                                                     &lt;option&gt;篮球&lt;/option&gt;</span><br><span class="line">                                                                                     &lt;option&gt;羽毛球&lt;/option&gt;</span><br><span class="line">                                                                                     &lt;option&gt;乒乓球&lt;/option&gt;</span><br><span class="line">                                                                                  &lt;/select&gt;</span><br><span class="line">                                                                                   */</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">#mybutton1&#123;</span><br><span class="line">        behavior:~command1;</span><br><span class="line">&#125;</span><br><span class="line">#mybutton2&#123;</span><br><span class="line">        behavior:~command2;</span><br><span class="line">&#125;</span><br><span class="line">#addselect&#123;</span><br><span class="line">flow:h-flow;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">#addtxt&#123;</span><br><span class="line">        width:200px;</span><br><span class="line">&#125;</span><br><span class="line">#sel&#123;</span><br><span class="line">        width:100px;</span><br><span class="line">&#125;</span><br><span class="line">#txt&#123;</span><br><span class="line">        width:150px;        </span><br><span class="line">&#125;</span><br><span class="line">#addoption:empty&#123;</span><br><span class="line">        color:graytext;        </span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line">//可以与数据库连了</span><br><span class="line">var input=wbLayout.createEle(&quot;option&quot;)</span><br><span class="line">var str=wbLayout.$1(&quot;select&quot;)</span><br><span class="line">str.child(3).append(input)</span><br><span class="line">input.value=&quot;自行车&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> winform.show();</span><br><span class="line"> win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=8139">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=8139</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-穷举webform的select控件的所有显示值</title>
      <link href="/posts/2024/08/61eec19d.html"/>
      <url>/posts/2024/08/61eec19d.html</url>
      
        <content type="html"><![CDATA[<p>代码示例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import web.form;</span><br><span class="line"></span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; scroll=1;text=&quot;aardio Form&quot;;right=349;bottom=249 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">//创建web窗体</span><br><span class="line">var wb = web.form( winform  );</span><br><span class="line"></span><br><span class="line">var html = /**</span><br><span class="line">&lt;select name=&quot;model.projectId&quot; id=&quot;aForm_model_projectId&quot; class=&quot;required&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106260010&quot;&gt;叶城第2项目&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106260011&quot;&gt;叶城第3项目&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106260012&quot;&gt;叶城第4项目&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106260013&quot;&gt;叶城的草稿&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106270016&quot;&gt;叶城第一个测试项目&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106270017&quot;&gt;叶城第一个测试项目&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106290032&quot;&gt;顺德碧海蓝天工程&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;P201106290035&quot;&gt;香港海蓝天工程&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wb.write(html)</span><br><span class="line">winform.show()</span><br><span class="line">wb.wait(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">//获取所有选项</span><br><span class="line">var qEles = wb.queryEles(</span><br><span class="line">    parent = wb.getEle(&quot;aForm_model_projectId&quot;,可以在这里指定框架名字 );</span><br><span class="line">    value = &quot;P\d+&quot; ; //e.g. P201106260011</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//在控制台中输出所有选项</span><br><span class="line">io.open()</span><br><span class="line">for(k,ele in qEles )&#123;</span><br><span class="line">    io.print( ele.innerHTML )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进入消息循环</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform,wb;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-在HTMLayout中使用框架(iframe)</title>
      <link href="/posts/2024/08/dba69701.html"/>
      <url>/posts/2024/08/dba69701.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = ..win.form( bottom=399;parent=...;right=599;text=&quot;在HTMLayout中使用框架&quot; ) </span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout( winform );</span><br><span class="line"> </span><br><span class="line">wbLayout.html =/***</span><br><span class="line">&lt;iframe src=&quot;about:blank&quot; style=&quot;width:100%%;height:100%%&quot; /&gt;</span><br><span class="line">***/</span><br><span class="line"> </span><br><span class="line">var frame = wbLayout.queryEle(&quot;iframe&quot;); </span><br><span class="line">wbLayout.onDocumentComplete = function() &#123;</span><br><span class="line">        frame.querySelector(&quot;input#kw&quot;).value = &quot;测试&quot;;</span><br><span class="line">&#125;</span><br><span class="line">frame.xcall(&quot;load&quot;,&quot;http://www.baidu.com&quot;); </span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用CSS选择器查询框架内的节点时，需首先获取框架节点。例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var frame = wbLayout.queryEle(&quot;iframe&quot;);</span><br><span class="line">frame.querySelector(&quot;input#kw&quot;).value = &quot;测试&quot;;</span><br></pre></td></tr></table></figure><p>使用框架打开网页：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frame.xcall(&quot;load&quot;,&quot;http://www.baidu.com&quot;);</span><br></pre></td></tr></table></figure><p>清空框架内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frame.xcall(&quot;clear&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout 中学习使用文本框,按钮等基本控件</title>
      <link href="/posts/2024/08/7d4cb2b3.html"/>
      <url>/posts/2024/08/7d4cb2b3.html</url>
      
        <content type="html"><![CDATA[<p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=399;parent=...;right=599;text=&quot;HTMLayout 文本框&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">var wbLayout = web.layout(winform)</span><br><span class="line"></span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line">wbLayout.html = /**</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    input[type=&quot;text&quot;]</span><br><span class="line">    &#123;</span><br><span class="line">       background-image:url(data:image/png;base64,</span><br><span class="line">       iVBORw0KGgoAAAANSUhEUgAAAC0AAAAXCAYAAACf+8ZRAAAACXBIWXMAAA7DAAAO</span><br><span class="line">wwHHb6hkAAAA5UlEQVR4nGNkAAGn/9LKEn/mCvP95WIYpODtJ+Zvd1+wJDPsY3zK</span><br><span class="line">yGD3X1FX+dfBja3vZBUl/w6023CC+8+ZGfyrhR5ffshmyaga+2fznp7XPnJig9fB</span><br><span class="line">MAByuGuJyE4mXo6/SkPBwSAASgmCvP+lmdjZBtoppAFWlv9MTAPtCHLAqKPpBUYd</span><br><span class="line">TS8w6mh6gVFH0wuMOppeYNTR9AJD09G//zD+G2hHkAJA7mV6/5nxKahHMBQAyJ0g</span><br><span class="line">9zKBOougvtdgdzisjwhyLyNYBNoblxb9J8TN8Z9ngN2HAb7+YPzy9DXTO1hvHABp</span><br><span class="line">3VAYxhOqkwAAAABJRU5ErkJggg==);</span><br><span class="line">       background-repeat:expand; /*九宫格切图*/</span><br><span class="line">       background-position: 5 5 5 5; /*上,右,下,左各5个像素固定边距*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*输入框得到焦点的样式*/</span><br><span class="line">    input[type=&quot;text&quot;]:focus</span><br><span class="line">    &#123;</span><br><span class="line">      outline:4px glow #3070ff 1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*输入框为空的样式*/</span><br><span class="line">    input[type=&quot;text&quot;]:empty&#123;</span><br><span class="line">      color:#CCCCCC;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;/style&gt;  </span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    用户名: &lt;input type=&quot;text&quot; id=&quot;用户名&quot; novalue =&quot;请输入用户名&quot;/&gt;</span><br><span class="line">    密码: &lt;input type=&quot;text&quot; id=&quot;密码&quot; novalue=&quot;请输入用密码&quot;/&gt;</span><br><span class="line">    &lt;button id=&quot;登录&quot;&gt; 登 录 &lt;/button&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">    if( ltEle.id == &quot;登录&quot; )&#123;</span><br><span class="line">        winform.msgbox(&quot;欢迎:&quot; + wbLayout.getEle(&quot;用户名&quot;).value )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout iframe框架用法演示</title>
      <link href="/posts/2024/08/b548e6bb.html"/>
      <url>/posts/2024/08/b548e6bb.html</url>
      
        <content type="html"><![CDATA[<p>参考帖子：<a href="http://bbs.aardio.com/forum.php?mod=viewthread&tid=7156">HTMLayout内置behavior大全</a></p><p>代码示例：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = ..win.form( text=&quot;HTMLayout 框架演示&quot;;bottom=399;parent=...;right=599;border=&quot;resizable&quot; )</span><br><span class="line">winform.add(</span><br><span class="line">layoutWindow=&#123; dr=1;dl=1;notify=1;right=580;left=10;dt=1;top=12;z=1;db=1;bottom=382;multiline=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform.layoutWindow);</span><br><span class="line"></span><br><span class="line">string.save(&quot;/frame1.html&quot;,&quot;frame1&quot;)</span><br><span class="line">string.save(&quot;/frame2.html&quot;,&quot;frame2&quot;)</span><br><span class="line"></span><br><span class="line">wbLayout.html =/***</span><br><span class="line">&lt;button&gt;点这里加载 frame2.html&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;iframe src=&quot;frame1.html&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">***/</span><br><span class="line"></span><br><span class="line">wbLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">    var ltFrame = wbLayout.queryEle(&quot;#main iframe&quot;);</span><br><span class="line">    ltFrame.xcall(&quot;load&quot;,&quot;frame2.html&quot;); //加载网页到框架</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout-获取HTML中自定义属性的具体值</title>
      <link href="/posts/2024/08/fe859ed.html"/>
      <url>/posts/2024/08/fe859ed.html</url>
      
        <content type="html"><![CDATA[<p>可以参考：<a href="http://bbs.aardio.com/thread-2087-1-1.html">http://bbs.aardio.com/thread-2087-1-1.html</a> 很全面，详细<br>代码示例:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import web.mshtml;</span><br><span class="line">import console;</span><br><span class="line"></span><br><span class="line">var wb = web.mshtml()</span><br><span class="line"></span><br><span class="line">html = /**</span><br><span class="line">    &lt;div id=&quot;idTest&quot; class=&quot;style2&quot; node=&quot;node1&quot;&gt;</span><br><span class="line">    测试文本1</span><br><span class="line">    测试文本2</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;div id=&quot;idTest2&quot; class=&quot;style2&quot; node=&quot;node2&quot;&gt;</span><br><span class="line">    测试文本3</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">**/</span><br><span class="line">wb.write(html)</span><br><span class="line"></span><br><span class="line">qEles = wb.queryEles( [&quot;node&quot;] = &quot;.+&quot;)</span><br><span class="line"></span><br><span class="line">console.varDump( qEles )</span><br><span class="line"></span><br><span class="line">for(k,v in qEles)&#123;</span><br><span class="line">        console.varDump( v ) //qEles中不是获取的值为空，而是是无法在控制台显示的数据类型</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.open();</span><br><span class="line">io.print(qEles[1].getAttribute(&quot;node&quot;));</span><br><span class="line">io.print(qEles[1].id);</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续</span><br><span class="line">io.close();//关闭控制台</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import web.mshtml;</span><br><span class="line">import console;</span><br><span class="line">var wb = web.mshtml()</span><br><span class="line">html = /**</span><br><span class="line">    &lt;div id=&quot;idTest&quot; class=&quot;style2&quot; node=&quot;node1&quot; custom=&quot;test11&quot;&gt;</span><br><span class="line">    测试文本1</span><br><span class="line">    测试文本2</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">**/</span><br><span class="line">wb.write(html)</span><br><span class="line">qEles = wb.queryEles( [&quot;node&quot;] = &quot;.+&quot;)</span><br><span class="line">io.open();</span><br><span class="line">io.print(qEles[1].getAttribute(&quot;custom&quot;));</span><br><span class="line">execute(&quot;pause&quot;) //按任意键继续</span><br><span class="line">io.close();//关闭控制台</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout-给tabs添加关闭按钮</title>
      <link href="/posts/2024/08/ea62c450.html"/>
      <url>/posts/2024/08/ea62c450.html</url>
      
        <content type="html"><![CDATA[<p>aardio封装的HTMLayout库真的很好用，这里先感谢前辈们的努力和分享精神！<br>今天我们来实现给标准的tabs添加关闭按钮功能，并做成一个behavior</p><p>**思路：  **<br>1、给tabs的strip定义一个behavior，我这里命名  为“horizontalTabsClose”<br>2、响应onAttach  事件，创建实现关闭的button，并设置适当的css样式<br>3、响应onButtonClick 事件，实现关闭一个“标签”的过程<br>4、使用时，只需要给div.strip 添加一个css属性，behavior:horizontalTabsClose;  即可</p><p>不能上传图片，大家运行下面代码看效果吧！</p><p>代码如下：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=399;parent=...;text=&quot;aardio Form&quot;;right=599 )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">import web.layout.behavior.tabs;</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout(winform); </span><br><span class="line"></span><br><span class="line">import web.layout.debug; //导入该库以显示HTMLayout错误</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug ); //为CSSS!添加全局函数 debug;</span><br><span class="line"></span><br><span class="line">namespace web.layout.behavior.horizontalTabsClose&#123;</span><br><span class="line">        onAttach = function( ltEle )&#123;   </span><br><span class="line">                ltEle.style.position =&quot;relative &quot; </span><br><span class="line">                ltEle.style[&quot;padding-right&quot;] = &quot;25px&quot;</span><br><span class="line">                var btn = ltEle.createElement(&quot;button&quot;)</span><br><span class="line">                with btn.style&#123;</span><br><span class="line">                        position = &quot;absolute&quot;</span><br><span class="line">                        cursor = &quot;pointer&quot;</span><br><span class="line">                        right = &quot;-15px&quot;</span><br><span class="line">                        top = &quot;0&quot;</span><br><span class="line">                        size = &quot;22px&quot;</span><br><span class="line">                        background = &quot;url(data:image/png;base64,</span><br><span class="line">iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsTAAAL</span><br><span class="line">EwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAA</span><br><span class="line">dTAAAOpgAAA6mAAAF2+SX8VGAAAE3klEQVR42mL8//8/Ay0AQAAx4hBnAhH6+vpM</span><br><span class="line">UlJSDM+ePfvj7OzMwggEa9eu/a2kpMT4+vVr5suXL4NcBcL/0A0ACCAWLBYxs7Ky</span><br><span class="line">MgENZQ8KChJzdHQ0YWJiMmZjYxP98eMHg42NzUthYeGrGzduPPLkyZMXnz59+gsE</span><br><span class="line">IIP/Qi0BA4AAQjeUhYeHh8vHx0d47969qcBgOgfEH759+/b/8ePH/x88ePD/58+f</span><br><span class="line">QKH/X//8+XO2srIyWFVVlZeFhYUTqJcVOQQAAgjFUE5OTt6AgACZCxcudAI1/zhz</span><br><span class="line">5sz/1NTUv2JiYl+BofAZhAUEBL7GxMT8uXTpEsiCT2fPnu2xtLSUAvqKB2o4GAAE</span><br><span class="line">ENz7QMxtaGgotWvXriqQjtmzZ/8VERH5DBT/BMSf0fAnYNh/mTZt2l+Q2v3793cD</span><br><span class="line">XS4OFOeEBi8jQACBDQYCdkFBQeEJEybEAtW9Wrly5X9mZmachiLTkydP/gfU8y0l</span><br><span class="line">JSUWGA/8QDEOUOQDBBDIYGaQN1xcXDRv3bq16u3bt/+Bsf4FpImXl/dze3v7z7S0</span><br><span class="line">tB8ww8zNzb/NmDHjl5GR0VcQH+igz/fu3fv/6tWrvTIyMhpAMVCQsAAEECxlCAUG</span><br><span class="line">BroBbb41Z86cf6CwBBkkLS395d8/kIP+/8/JyfkBDMuvwEgECyBb1tjY+Aco9EVO</span><br><span class="line">Ts4VZBYQswEEEMhgNg4ODpno6OgUoOS/xMTEnzBvgiyIjY39/vHjx3/AJPX/3bt3</span><br><span class="line">YENnzZr1C6gHHjz+/v7fQA4oBAIgXxIU1gABxATUzASMaXZgRImAwvvz58/wtAjK</span><br><span class="line">lYsXL/4N9PpvYHAxAL3NCEwpf3Nzc3+C0jQMANMyAzAZMgCDQgLqWmaAAGICaQa6</span><br><span class="line">iPnRo0egBM4AdAlKOrS2tmYJDg5mgVmkrq7OlJmZyQZ0EFwNMJn+B0Ycw4sXL37D</span><br><span class="line">0jNAAIGz7vfv30GJ/yOQ+R6oEZ4bRUVFGdetW8ehrKzMBExav4HB9AOYGRj7+/vZ</span><br><span class="line">wsPDYepAkc0C9NGvffv2PYfpBQggmOS/X79+fbx58+Y9YFgb9/X1Mb5//x4scfr0</span><br><span class="line">6X+3b9/+V1VV9QvkAGBY/4iLi2MFyoPLCaBLGYGWsL158wao7PZraLnxHyCAGKBh</span><br><span class="line">IgtU4Ar04nSgd783Nzf/gUUMFxcXejr+zM3NDWeDUgcoQgsKChYDXe0EMgsUOgAB</span><br><span class="line">BHO1KBCbAguXDKDXj4EUAi35iSVzoGBgEv3x+/fv/ydPnrwqLi6eDRQzgZrFBhBA</span><br><span class="line">DNDszAfEakDsDwzPhkOHDl0BGT5//vzfurq639ANBKr5OnHixJ+gAun69etPgPHS</span><br><span class="line">DhT3gZoBMosFIIBgZQUoKYgBsTEQRwDLgQ5gZB0FavwExP+AYf9/yZIlf4BJ78+V</span><br><span class="line">K1f+gUo7oEu/rFq16rysrGwfUE84VK8YLEsDBBAjUiHEDsSCQCwFxMpArALMvhoR</span><br><span class="line">EREqQBfKAjEPKC0DU8+3O3fuPAEaeufw4cNXgepuA/E9IH4GSlVADArCvwABhFx+</span><br><span class="line">skIDHeQVUEklDbUE5AphBQUFAWDuYnj69CmoZAfF/iuoYU+B+CU0t34HYlBaZgAI</span><br><span class="line">IEYsxSfI5dxAzA/1gQC0YIGVtSCNoELqA9SFoPT/FeZSWFIDCCBsdR4zFLNCMTs0</span><br><span class="line">MphgaR6I/0AN+g3Ff6EYDgACDAA4HEdcvRpfPwAAAABJRU5ErkJggg==) no-repeat&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">                var tabs = ltEle.queryParent(&quot;div.tabs&quot;)</span><br><span class="line">                var tabid = ltEle.getAttribute(&quot;panel&quot;)</span><br><span class="line">                if(tabs and tabid)&#123;</span><br><span class="line">                        if(ltEle.test(&quot;[selected]&quot;))&#123;</span><br><span class="line">                                var ltEle2 = ltEle.previousSibling(): ltEle.nextSibling()</span><br><span class="line">                                if(!ltEle2) return ;         //阻止删除最后一个</span><br><span class="line">                                tabs.xcall(&quot;select&quot;,ltEle2.getAttribute(&quot;panel&quot;))</span><br><span class="line">                        &#125;</span><br><span class="line">                        tabs.querySelector(&quot;div[name=&#x27;&quot;+tabid+&quot;&#x27;]&quot;).delete()</span><br><span class="line">                        ltEle.delete()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wbLayout.html = /*********</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">.tabs </span><br><span class="line">&#123;</span><br><span class="line">  font:system;</span><br><span class="line">  behavior:tabs;</span><br><span class="line">  height:100%%;</span><br><span class="line">  width:100%%;</span><br><span class="line">  overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip /* tab strip */</span><br><span class="line">&#123;</span><br><span class="line">  flow: h-flow;</span><br><span class="line">  margin-bottom:-1px;</span><br><span class="line">  padding: 2px 2px 0 2px;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip &gt; [panel] /* all tabs, passive by default */</span><br><span class="line">&#123;</span><br><span class="line">  padding: 3px 8px;</span><br><span class="line">  margin-bottom:1px;</span><br><span class="line">  height: 100%%;</span><br><span class="line">  max-width: max-intrinsic; /* not wider than max-intrinsic  */</span><br><span class="line">  background-image:url(theme:tab-item-normal);</span><br><span class="line">  background-repeat:stretch;</span><br><span class="line">  behavior:horizontalTabsClose;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip &gt; [panel]:hover /* passive tab */</span><br><span class="line">&#123;</span><br><span class="line">  background-image:url(theme:tab-item-hover);</span><br><span class="line">  transition:blend;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip &gt; [panel]:current  /*active tab*/</span><br><span class="line">&#123;</span><br><span class="line">  background-image:url(theme:tab-item-selected);</span><br><span class="line">  margin:-2px -2px -1px -2px;</span><br><span class="line">  padding: 4px 10px 5px 10px; </span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip &gt; [panel]:current:hover /*active tab*/</span><br><span class="line">&#123;</span><br><span class="line">  background-image:url(theme:tab-item-selected);</span><br><span class="line">  transition:none;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; .strip &gt; [panel]:current:first-child,</span><br><span class="line">.tabs &gt; .strip &gt; [panel]:current:hover:first-child</span><br><span class="line">&#123;</span><br><span class="line">  background-image:url(theme:tab-item-leftmost-selected);</span><br><span class="line">&#125;</span><br><span class="line">/*.tabs:focus .strip [panel]:current </span><br><span class="line">&#123;</span><br><span class="line">  background-image:url(theme:tab-item-focused);</span><br><span class="line">&#125;*/</span><br><span class="line">.tabs:tab-focus &gt; .strip &gt; [panel]:current &gt; * /* outline active tab content if we&#x27;ve gotten focus by tab*/</span><br><span class="line">&#123;</span><br><span class="line">  outline: 1px dotted invert;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; [name] &#123; display:none; &#125;</span><br><span class="line">.tabs &gt; [name]:expanded </span><br><span class="line">&#123; </span><br><span class="line">  background-image:url(theme:tab-panel);</span><br><span class="line">  background-repeat:stretch;</span><br><span class="line">  padding:4px;</span><br><span class="line">  display:block; </span><br><span class="line">  height:100%%;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div class=&quot;tabs&quot; #test&gt;</span><br><span class="line">      &lt;div class=&quot;strip&quot;&gt; &lt;!-- our tab strip, can be placed on any side of tab container. --&gt;</span><br><span class="line">         &lt;div panel=&quot;panel-id1&quot; selected &gt;tab1 caption&lt;/div&gt;</span><br><span class="line">         &lt;div panel=&quot;panel-id2&quot; &gt;tab2 caption&lt;/div&gt;</span><br><span class="line">         &lt;div panel=&quot;panel-id3&quot; &gt;tab3 caption&lt;/div&gt;       </span><br><span class="line">         &lt;div panel=&quot;panel-id4&quot; &gt;tab3 caption&lt;/div&gt;  </span><br><span class="line">         &lt;div panel=&quot;panel-id5&quot; &gt;tab3 caption&lt;/div&gt;  </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div name=&quot;panel-id1&quot; selected&gt; first panel content &lt;/div&gt;</span><br><span class="line">      &lt;div name=&quot;panel-id2&quot;&gt; second panel content &lt;button&gt;Test1&lt;/button&gt; &lt;/div&gt;</span><br><span class="line">      &lt;div name=&quot;panel-id3&quot;&gt; third panel content &lt;/div&gt;  </span><br><span class="line">      &lt;div name=&quot;panel-id4&quot;&gt; third panel content &lt;/div&gt; </span><br><span class="line">      &lt;div name=&quot;panel-id5&quot;&gt; third panel content &lt;/div&gt;         </span><br><span class="line">    &lt;/div&gt;    </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">*********/</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line">                          </span><br></pre></td></tr></table></figure><p>感谢分享源码，写的很好，<br>不过behavior主要用于写逻辑，而界面有关的部分应当尽量留给CSS，不宜在behavior写过多的CSS，或者把图片这些都写进去，这样在使用behavior的时候就不能自由定制外观了。</p><p>标准库的tabs对于动态创建的选项卡有一个添加关闭按钮的实现，他只是预留了一个节点以方便CSS自定义样式，可以参考下。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout中的 theme url</title>
      <link href="/posts/2024/08/c7c63b11.html"/>
      <url>/posts/2024/08/c7c63b11.html</url>
      
        <content type="html"><![CDATA[<table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_36425">theme url 用于获取系统主题相应的控件图片,<br>格式为 "<strong>theme:控件名称-状态", </strong>在css中也可以使用,例如</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">option &gt; text:hover &#123; background-image:url(theme:list-view-item-hover); &#125;</span><br></pre></td></tr></table></figure>下面是HTMLayout自带的范例:<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=399;parent=...;right=599;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">import web.layout.behavior.tabs;</span><br><span class="line">import web.layout.behavior.shellIcon;</span><br><span class="line">import web.layout.behavior.lightBoxDialog;</span><br><span class="line">import web.layout.behavior.grid;</span><br><span class="line">import web.layout.behavior.sortableGrid</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout(winform);</span><br><span class="line"></span><br><span class="line">wbLayout.html = /*********</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;style&gt;</span><br><span class="line"></span><br><span class="line">/*listitemicon*/</span><br><span class="line">option img &#123;</span><br><span class="line">  margin:2px;</span><br><span class="line">  min-width:20px;</span><br><span class="line">  min-height:20px;</span><br><span class="line">  foreground-repeat:no-repeat;</span><br><span class="line">  vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">option img[stretch] &#123;</span><br><span class="line">  foreground-repeat:stretch;</span><br><span class="line">  width:20px;</span><br><span class="line">  height:20px;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">widget &#123;</span><br><span class="line">  width:max-intrinsic;</span><br><span class="line">  height:100%%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  padding:10px;</span><br><span class="line">  width:100%%;</span><br><span class="line">  height:100%%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123; background-color:threedface; padding:4px; margin:0; &#125;</span><br><span class="line"></span><br><span class="line">@media screen &amp;&amp; composition-supported &#123;</span><br><span class="line">  /* these work only if Aero DWM is in effect */</span><br><span class="line">  option &#123; background-color:transparent; background-repeat:stretch; color:windowtext; &#125;</span><br><span class="line">  widget:focus option:checked &#123; background-image:url(theme:list-view-item-selected); &#125;</span><br><span class="line">  option:hover &#123; background-image:url(theme:list-view-item-hover); &#125;</span><br><span class="line">  option:checked &#123; background-image:url(theme:list-view-item-selected-not-focus); &#125;</span><br><span class="line">  option:checked:hover &#123; background-image:url(theme:list-view-item-selected-hover); &#125;</span><br><span class="line">  em#is-aero &#123; assigned!: self:value = &quot;Yep!&quot;; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;flow:horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;widget type=&quot;select&quot;&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:button-normal&quot;&gt;button-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:button-hover&quot;&gt;button-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:button-pressed&quot;&gt;button-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:button-disabled&quot;&gt;button-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:button-defaulted&quot;&gt;button-defaulted&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-normal&quot;&gt;radio-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-hover&quot;&gt;radio-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-pressed&quot;&gt;radio-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-disabled&quot;&gt;radio-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-checked-normal&quot;&gt;radio-checked-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-checked-hover&quot;&gt;radio-checked-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-checked-pressed&quot;&gt;radio-checked-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:radio-checked-disabled&quot;&gt;radio-checked-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-normal&quot;&gt;check-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-hover&quot;&gt;check-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-pressed&quot;&gt;check-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-disabled&quot;&gt;check-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-checked-normal&quot;&gt;check-checked-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-checked-hover&quot;&gt;check-checked-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-checked-pressed&quot;&gt;check-checked-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-checked-disabled&quot;&gt;check-checked-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-mixed-normal&quot;&gt;check-mixed-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-mixed-hover&quot;&gt;check-mixed-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-mixed-pressed&quot;&gt;check-mixed-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:check-mixed-disabled&quot;&gt;check-mixed-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:groupbox-normal&quot;&gt;groupbox-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:groupbox-disabled&quot;&gt;groupbox-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-normal&quot;&gt;edit-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-hot&quot;&gt;edit-hot&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-selected&quot;&gt;edit-selected&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-disabled&quot;&gt;edit-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-focused&quot;&gt;edit-focused&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-read-only&quot;&gt;edit-read-only&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:edit-assist&quot;&gt;edit-assist&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-minus-normal&quot;&gt;v-scrollbar-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-minus-hover&quot;&gt;v-scrollbar-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-minus-pressed&quot;&gt;v-scrollbar-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-minus-disabled&quot;&gt;v-scrollbar-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-plus-normal&quot;&gt;v-scrollbar-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-plus-hover&quot;&gt;v-scrollbar-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-plus-pressed&quot;&gt;v-scrollbar-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-plus-disabled&quot;&gt;v-scrollbar-plus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-base&quot;&gt;v-scrollbar-base&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-minus-normal&quot;&gt;v-scrollbar-page-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-minus-hover&quot;&gt;v-scrollbar-page-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-minus-pressed&quot;&gt;v-scrollbar-page-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-minus-disabled&quot;&gt;v-scrollbar-page-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-plus-normal&quot;&gt;v-scrollbar-page-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-plus-hover&quot;&gt;v-scrollbar-page-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-plus-pressed&quot;&gt;v-scrollbar-page-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-scrollbar-page-plus-disabled&quot;&gt;v-scrollbar-page-plus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-minus-normal&quot;&gt;h-scrollbar-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-minus-hover&quot;&gt;h-scrollbar-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-minus-pressed&quot;&gt;h-scrollbar-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-minus-disabled&quot;&gt;h-scrollbar-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-plus-normal&quot;&gt;h-scrollbar-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-plus-hover&quot;&gt;h-scrollbar-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-plus-pressed&quot;&gt;h-scrollbar-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-plus-disabled&quot;&gt;h-scrollbar-plus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-base&quot;&gt;h-scrollbar-base&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-minus-normal&quot;&gt;h-scrollbar-page-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-minus-hover&quot;&gt;h-scrollbar-page-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-minus-pressed&quot;&gt;h-scrollbar-page-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-minus-disabled&quot;&gt;h-scrollbar-page-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-plus-normal&quot;&gt;h-scrollbar-page-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-plus-hover&quot;&gt;h-scrollbar-page-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-plus-pressed&quot;&gt;h-scrollbar-page-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-scrollbar-page-plus-disabled&quot;&gt;h-scrollbar-page-plus-disabled&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tree-view-glyph-closed&quot;&gt;tree-view-glyph-closed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tree-view-glyph-open&quot;&gt;tree-view-glyph-open&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-normal&quot; stretch&gt;list-view-item-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-hover&quot;  stretch&gt;list-view-item-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-selected&quot;  stretch&gt;list-view-item-selected&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-selected-not-focus&quot; stretch&gt;list-view-item-selected-not-focus&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-disabled&quot; stretch&gt;list-view-item-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:list-view-item-selected-hover&quot; stretch&gt;list-view-item-selected-hover&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:combobox-button-normal&quot;&gt;combobox-button-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:combobox-button-hover&quot;&gt;combobox-button-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:combobox-button-pressed&quot;&gt;combobox-button-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:combobox-button-disabled&quot;&gt;combobox-button-disabled&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-normal&quot;&gt;tab-item-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-hover&quot;&gt;tab-item-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-selected&quot;&gt;tab-item-selected&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-disabled&quot;&gt;tab-item-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-focused&quot;&gt;tab-item-focused&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-leftmost-normal&quot;&gt;tab-item-leftmost-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-leftmost-hover&quot;&gt;tab-item-leftmost-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-leftmost-selected&quot;&gt;tab-item-leftmost-selected&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-leftmost-disabled&quot;&gt;tab-item-leftmost-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-leftmost-focused&quot;&gt;tab-item-leftmost-focused&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-rightmost-normal&quot;&gt;tab-item-rightmost-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-rightmost-hover&quot;&gt;tab-item-rightmost-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-rightmost-selected&quot;&gt;tab-item-rightmost-selected&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-rightmost-disabled&quot;&gt;tab-item-rightmost-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-item-rightmost-focused&quot;&gt;tab-item-rightmost-focused&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:tab-panel&quot;&gt;tab-panel&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-plus-normal&quot;&gt;h-spin-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-plus-hover&quot;&gt;h-spin-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-plus-pressed&quot;&gt;h-spin-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-plus-disabled&quot;&gt;h-spin-plus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-minus-normal&quot;&gt;h-spin-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-minus-hover&quot;&gt;h-spin-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-minus-pressed&quot;&gt;h-spin-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-spin-minus-disabled&quot;&gt;h-spin-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-plus-normal&quot;&gt;v-spin-plus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-plus-hover&quot;&gt;v-spin-plus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-plus-pressed&quot;&gt;v-spin-plus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-plus-disabled&quot;&gt;v-spin-plus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-minus-normal&quot;&gt;v-spin-minus-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-minus-hover&quot;&gt;v-spin-minus-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-minus-pressed&quot;&gt;v-spin-minus-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-spin-minus-disabled&quot;&gt;v-spin-minus-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-progress-back&quot;&gt;v-progress-back&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-progress-chunk&quot;&gt;v-progress-chunk&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-progress-back&quot;&gt;h-progress-back&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-progress-chunk&quot;&gt;h-progress-chunk&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-back&quot;&gt;h-trackbar-back&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-back&quot;&gt;v-trackbar-back&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-normal&quot;&gt;h-trackbar-thumb-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-hover&quot;&gt;h-trackbar-thumb-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-pressed&quot;&gt;h-trackbar-thumb-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-focus&quot;&gt;h-trackbar-thumb-focus&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-disabled&quot;&gt;h-trackbar-thumb-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-normal&quot;&gt;v-trackbar-thumb-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-hover&quot;&gt;v-trackbar-thumb-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-pressed&quot;&gt;v-trackbar-thumb-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-focus&quot;&gt;v-trackbar-thumb-focus&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-disabled&quot;&gt;v-trackbar-thumb-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-down-normal&quot;&gt;h-trackbar-thumb-down-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-down-hover&quot;&gt;h-trackbar-thumb-down-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-down-pressed&quot;&gt;h-trackbar-thumb-down-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-down-disabled&quot;&gt;h-trackbar-thumb-down-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-up-normal&quot;&gt;h-trackbar-thumb-up-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-up-hover&quot;&gt;h-trackbar-thumb-up-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-up-pressed&quot;&gt;h-trackbar-thumb-up-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:h-trackbar-thumb-up-disabled&quot;&gt;h-trackbar-thumb-up-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-left-normal&quot;&gt;v-trackbar-thumb-left-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-left-hover&quot;&gt;v-trackbar-thumb-left-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-left-pressed&quot;&gt;v-trackbar-thumb-left-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-left-disabled&quot;&gt;v-trackbar-thumb-left-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-right-normal&quot;&gt;v-trackbar-thumb-right-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-right-hover&quot;&gt;v-trackbar-thumb-right-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-right-pressed&quot;&gt;v-trackbar-thumb-right-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:v-trackbar-thumb-right-disabled&quot;&gt;v-trackbar-thumb-right-disabled&lt;/option&gt;</span><br><span class="line">    &lt;p class=&quot;header&quot;&gt;rebar images:&lt;/p&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-band&quot;&gt;rebar-band&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-h-gripper&quot;&gt;rebar-h-gripper&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-v-gripper&quot;&gt;rebar-v-gripper&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-h-shevron-normal&quot;&gt;rebar-h-shevron-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-h-shevron-hover&quot;&gt;rebar-h-shevron-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-h-shevron-pressed&quot;&gt;rebar-h-shevron-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-v-shevron-normal&quot;&gt;rebar-v-shevron-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-v-shevron-hover&quot;&gt;rebar-v-shevron-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:rebar-v-shevron-pressed&quot;&gt;rebar-v-shevron-pressed&lt;/option&gt;</span><br><span class="line">    &lt;p class=&quot;header&quot;&gt;toolbar images:&lt;/p&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-normal&quot;&gt;toolbar-button-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-hover&quot;&gt;toolbar-button-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-disabled&quot;&gt;toolbar-button-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-checked&quot;&gt;toolbar-button-checked&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-pressed&quot;&gt;toolbar-button-pressed&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-button-checked-hover&quot;&gt;toolbar-button-checked-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-button-normal&quot;&gt;toolbar-split-button-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-button-hover&quot;&gt;toolbar-split-button-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-button-disabled&quot;&gt;toolbar-split-button-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-button-checked&quot;&gt;toolbar-split-button-checked&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-button-checked-hover&quot;&gt;toolbar-split-button-checked-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-dd-button-normal&quot;&gt;toolbar-split-dd-button-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-dd-button-hover&quot;&gt;toolbar-split-dd-button-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-dd-button-disabled&quot;&gt;toolbar-split-dd-button-disabled&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-dd-button-checked&quot;&gt;toolbar-split-dd-button-checked&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-split-dd-button-checked-hover&quot;&gt;toolbar-split-dd-button-checked-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-h-splitter&quot; style=&quot;width:16px; &quot;&gt;toolbar-h-splitter&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:toolbar-v-splitter&quot; style=&quot;height:16px&quot;&gt;toolbar-v-splitter&lt;/option&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:column-header-normal&quot; style=&quot;width:16px; &quot;&gt;column-header-normal&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:column-header-hover&quot; style=&quot;width:16px; &quot;&gt;column-header-hover&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;&lt;img src=&quot;theme:column-header-pressed&quot; style=&quot;width:16px; &quot;&gt;column-header-pressed&lt;/option&gt;</span><br><span class="line">&lt;/widget&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;Theme images available in Sciter and HTMLayout&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Use with &quot;theme&quot; URL schema for example see source of this document&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Windows Aero detected:&lt;em #is-aero&gt;sorry but no&lt;/em&gt;, if Aero is here then list view uses Windows Explorer list styling.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">*********/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>**应用：开关控件**<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-187.png" alt=""> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=111;parent=...;text=&quot;Switch&quot;;right=263;max=false )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout(winform);</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;功能选择：&lt;/p&gt;</span><br><span class="line">&lt;a type=&quot;switch&quot;&gt;&lt;em&gt;杀毒软件&lt;/em&gt;&lt;/a&gt;</span><br><span class="line">&lt;a type=&quot;switch&quot;&gt;&lt;em&gt;防火墙&lt;/em&gt;&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">html &#123;</span><br><span class="line">    font: system;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[type=&quot;switch&quot;] &#123;</span><br><span class="line">    padding-right: 20px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    behavior: check;</span><br><span class="line">    background: url(theme:button-disabled) expand;</span><br><span class="line">&#125;</span><br><span class="line">a[type=&quot;switch&quot;] em &#123;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    position: relative;</span><br><span class="line">    font-style: normal;</span><br><span class="line">    width: max-intrinsic;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background: url(theme:button-normal) expand;</span><br><span class="line">&#125;</span><br><span class="line">a[type=&quot;switch&quot;]:hover em &#123;</span><br><span class="line">    background-image: url(theme:button-hover);</span><br><span class="line">&#125;</span><br><span class="line">a[type=&quot;switch&quot;]:active em &#123;</span><br><span class="line">    background-image: url(theme:button-pressed);</span><br><span class="line">&#125;</span><br><span class="line">a[type=&quot;switch&quot;]:checked em &#123;</span><br><span class="line">    left: 20px;</span><br><span class="line">    transition: left(back-in-out, 200ms);</span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure>**应用：edit 中嵌套按钮**<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-188.png" alt=""> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=55;parent=...;text=&quot;百度搜索&quot;;right=303;max=false )</span><br><span class="line">winform.add(</span><br><span class="line">edit=&#123; bottom=72;text=&quot;edit&quot;;left=136;top=48;z=1;right=192;hide=1;edge=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout(winform);</span><br><span class="line"></span><br><span class="line">wbLayout.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">    if (ltEle.id = &quot;searchButton&quot;) &#123;</span><br><span class="line">        winform.msgbox(&quot;搜索&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;search&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;searchEdit&quot; /&gt;</span><br><span class="line">    &lt;button id=&quot;searchButton&quot;&gt;百度一下&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">html &#123;</span><br><span class="line">    font: system;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#search &#123;</span><br><span class="line">    padding: 4px;</span><br><span class="line">    background: url(theme:edit-normal) expand;</span><br><span class="line">&#125;</span><br><span class="line">#search input[type=text] &#123;</span><br><span class="line">    width: 100%%;</span><br><span class="line">    height: 100%%;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: none;</span><br><span class="line">&#125;</span><br><span class="line">#search button &#123;</span><br><span class="line">    padding: 8px 8px 8px 28px;</span><br><span class="line">    foreground: url(http://www.baidu.com/favicon.ico) 8px 50% no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7208&amp;extra=page=7">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7208&amp;extra=page%3D7</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-修改HTMLayout控件默认右键菜单</title>
      <link href="/posts/2024/08/c45417a3.html"/>
      <url>/posts/2024/08/c45417a3.html</url>
      
        <content type="html"><![CDATA[<p>下面的代码修改默认菜单（新版本已改成下面的菜单 ）</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import fsys.res;</span><br><span class="line">var res = fsys.res.open( io.fullpath( &quot;~\lib\web\layout\.res\HTMLayout.dll&quot; ) ,false);</span><br><span class="line"></span><br><span class="line">html = /*</span><br><span class="line">&lt;menu&gt;</span><br><span class="line">  &lt;li        command=&quot;behavior:edit:undo&quot;</span><br><span class="line">                style=&quot;foreground-image:url(res:edit-undo.png)&quot;</span><br><span class="line">                &gt;撤消&lt;span class=&quot;accesskey&quot;&gt;Ctrl+Z&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li        command=&quot;behavior:edit:cut&quot; </span><br><span class="line">                style=&quot;foreground-image:url(res:edit-cut.png)&quot;</span><br><span class="line">                &gt;剪切&lt;span class=&quot;accesskey&quot;&gt;Ctrl+X&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li        command=&quot;behavior:edit:copy&quot;</span><br><span class="line">                style=&quot;foreground-image:url(res:edit-copy.png)&quot;</span><br><span class="line">                &gt;复制&lt;span class=&quot;accesskey&quot;&gt;Ctrl+C&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li        command=&quot;behavior:edit:paste&quot;</span><br><span class="line">                style=&quot;foreground-image:url(res:edit-paste.png)&quot;</span><br><span class="line">                &gt;粘贴&lt;span class=&quot;accesskey&quot;&gt;Ctrl+V&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li        command=&quot;behavior:edit:selectall&quot;</span><br><span class="line">                &gt;全选&lt;span class=&quot;accesskey&quot;&gt;Ctrl+A&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/menu&gt;</span><br><span class="line">*/ </span><br><span class="line">res.update(23/*_RT_HTML*/,&quot;BEHAVIOR-EDIT-MENU&quot;,string.fromto(html,0,65001));</span><br><span class="line"></span><br><span class="line">html = /*</span><br><span class="line">&lt;menu .plaintext-context&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:undo&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-undo.png)&quot;</span><br><span class="line">          &gt;撤消&lt;span class=&quot;accesskey&quot;&gt;Ctrl+Z&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:cut&quot; </span><br><span class="line">          style=&quot;foreground-image:url(res:edit-cut.png)&quot;</span><br><span class="line">          &gt;剪切&lt;span class=&quot;accesskey&quot;&gt;Ctrl+X&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:copy&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-copy.png)&quot;</span><br><span class="line">          &gt;复制&lt;span class=&quot;accesskey&quot;&gt;Ctrl+C&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:paste&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-paste.png)&quot;</span><br><span class="line">          &gt;粘贴&lt;span class=&quot;accesskey&quot;&gt;Ctrl+V&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:selectall&quot;</span><br><span class="line">          &gt;全选&lt;span class=&quot;accesskey&quot;&gt;Ctrl+A&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/menu&gt;</span><br><span class="line">*/ </span><br><span class="line">res.update(23/*_RT_HTML*/,&quot;BEHAVIOR-TEXT-MENU&quot;,string.fromto(html,0,65001));</span><br><span class="line"></span><br><span class="line">html = /*</span><br><span class="line">&lt;menu .richtext-context&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:undo&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-undo.png)&quot;</span><br><span class="line">          &gt;撤消&lt;span class=&quot;accesskey&quot;&gt;Ctrl+Z&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:cut&quot; </span><br><span class="line">          style=&quot;foreground-image:url(res:edit-cut.png)&quot;</span><br><span class="line">          &gt;剪切&lt;span class=&quot;accesskey&quot;&gt;Ctrl+X&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:copy&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-copy.png)&quot;</span><br><span class="line">          &gt;复制&lt;span class=&quot;accesskey&quot;&gt;Ctrl+C&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:paste&quot;</span><br><span class="line">          style=&quot;foreground-image:url(res:edit-paste.png)&quot;</span><br><span class="line">          &gt;粘贴&lt;span class=&quot;accesskey&quot;&gt;Ctrl+V&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;选择性粘贴</span><br><span class="line">      &lt;menu&gt;</span><br><span class="line">        &lt;li command=&quot;richtext:paste-plain-text&quot;&gt;HTML转换为文本&lt;/li&gt;</span><br><span class="line">            &lt;li command=&quot;richtext:paste-text-as-html&quot;&gt;粘贴HTML代码 &lt;/li&gt;</span><br><span class="line">            &lt;li command=&quot;richtext:paste-html-no-tables&quot;&gt;粘贴HTML格式(移除表格)&lt;/li&gt;</span><br><span class="line">          &lt;/menu&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;li command=&quot;richtext:selectall&quot;</span><br><span class="line">          &gt;全选&lt;span class=&quot;accesskey&quot;&gt;Ctrl+A&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;div .cell-selection&gt;</span><br><span class="line">      &lt;caption style=&quot;color:graytext&quot;&gt;单元格:&lt;img.hr/&gt;&lt;/caption&gt;</span><br><span class="line">          &lt;li command=&quot;richtext:merge-cells&quot;</span><br><span class="line">                  &gt;合并&lt;span class=&quot;accesskey&quot;&gt;Backspace&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li command=&quot;richtext:split-cells-by-rows&quot;</span><br><span class="line">                  &gt;拆分行&lt;span class=&quot;accesskey&quot;&gt;Ctrl+1&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li command=&quot;richtext:split-cells-by-cols&quot;</span><br><span class="line">                  &gt;拆分列&lt;span class=&quot;accesskey&quot;&gt;Ctrl+2&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/menu&gt; </span><br><span class="line">*/ </span><br><span class="line">res.update(23/*_RT_HTML*/,&quot;BEHAVIOR-RICHTEXT-MENU&quot;,string.fromto(html,0,65001));</span><br><span class="line">res.close();</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=10418&amp;extra=page=7">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=10418&amp;extra=page%3D7</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout-怎么绑定节点事件，而不通过ID来绑定</title>
      <link href="/posts/2024/08/9a8adc03.html"/>
      <url>/posts/2024/08/9a8adc03.html</url>
      
        <content type="html"><![CDATA[<p>比如html代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">   &lt;p&gt;one&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;tow&lt;/p&gt;</span><br><span class="line">&lt;p&gt;three&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>现在我想绑定“P”元素的鼠标点击事件。请问怎么绑定？</p><p>不想用ID，用 behavior 就行了，看看范例、教程里都有说明：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = ..win.form( bottom=399;right=599;text=&quot;自定义 behavior&quot; ) </span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform);</span><br><span class="line">  </span><br><span class="line"> //自定义behavior</span><br><span class="line">namespace web.layout.behavior.myBehavior&#123;  </span><br><span class="line">  </span><br><span class="line">        onMouseClick = function (ltTarget,ltEle,x,y,ltMouseParams) &#123;</span><br><span class="line">                ltEle.innerHTML = &quot;点啥啊&quot; + tostring( ..time() )</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">wbLayout.html =/***</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">   &lt;p&gt;one&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;tow&lt;/p&gt;</span><br><span class="line">&lt;p&gt;three&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">***/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">p&#123; </span><br><span class="line">        behavior:my-behavior;  </span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line"> </span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以写到库文件里，<br>使用的时候用 import 语句导入,参考教程：<br><a href="http://bbs.aardio.com/doc/reference/libraries/import.html" target="_blank">http://bbs.aardio.com/doc/reference/libraries/import.html</a><br><br>例如 <font color="#0000ff"><font face="新宋体">import</font></font><font color="#000000"><font face="新宋体"> web.layout.behavior.windowCommand;</font></font><br><div align="left"><font face="新宋体"><font color="#000000">这个就是标准库中实现的behavior，标准库中有很多写好的behavior你可以去参考下。</font></font></div><div align="left"><font face="新宋体"><font color="#000000">具体参考：</font><font face="Tahoma,"><a href="http://bbs.aardio.com/thread-10180-1-1.html" target="_blank">《HTMLayout快速入门》</a></font></font></div></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout-批量充填数据到table</title>
      <link href="/posts/2024/08/d9fe4a61.html"/>
      <url>/posts/2024/08/d9fe4a61.html</url>
      
        <content type="html"><![CDATA[<p>三个问题，一个是behavior的库要引用，一个是css设置，还有是代码的执行顺序。<br>一定要先加入DOM再修改属性。这点好像跟js不一样啊。<br>可以参考 <a href="http://www.aardiofans.com/page/3/">http://www.aardiofans.com/page/3/</a></p><p>源代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( right=599;bottom=399;text=&quot;HTMLayout示例&quot;)</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout; </span><br><span class="line">import web.layout.behavior.grid;</span><br><span class="line">import web.layout.behavior.shellIcon;</span><br><span class="line"></span><br><span class="line">var wbLayout = web.layout( winform ) </span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;itemList&quot;&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">                &lt;tr class=&quot;header&quot;&gt;</span><br><span class="line">                        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;图标&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;大小&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;textarea id=&quot;val&quot;&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line"></span><br><span class="line">#itemList</span><br><span class="line">&#123;</span><br><span class="line">        style-set: &quot;item-list&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@set item-list</span><br><span class="line">&#123;</span><br><span class="line">        :root</span><br><span class="line">        &#123;</span><br><span class="line">                width:*;</span><br><span class="line">                height: *;</span><br><span class="line">                min-height:100px;</span><br><span class="line">                padding:2px;</span><br><span class="line">        &#125;</span><br><span class="line">        :root table</span><br><span class="line">        &#123;</span><br><span class="line">                behavior:grid column-resizer;</span><br><span class="line">                overflow:auto;</span><br><span class="line">                width:*; height:*; </span><br><span class="line">                border-collapse:collapse;</span><br><span class="line">                flow: table-fixed;</span><br><span class="line">                assigned!:self.fixedrows=1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        :root table tr </span><br><span class="line">        &#123;</span><br><span class="line">                height: 1.8em;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        :root table td </span><br><span class="line">        &#123;</span><br><span class="line">                white-space:nowrap;</span><br><span class="line">                border-bottom:1px solid silver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        :root table th</span><br><span class="line">        &#123; </span><br><span class="line">                height: 1.6em;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                text-align: left;</span><br><span class="line">        &#125;</span><br><span class="line">        :root table th:hover </span><br><span class="line">        &#123; </span><br><span class="line">                border-bottom-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        :root table tr:current</span><br><span class="line">        &#123;</span><br><span class="line">                background-color: blue;</span><br><span class="line">                color: white;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img.shell-icon </span><br><span class="line">&#123;</span><br><span class="line">        width:20px;</span><br><span class="line">    height:20px;</span><br><span class="line">    behavior: shell-icon;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textarea#val</span><br><span class="line">&#123;</span><br><span class="line">        width: *;</span><br><span class="line">        height:200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">// 示例数据，将填充html中的table</span><br><span class="line">data = &#123;</span><br><span class="line">    [&quot;1&quot;] = &#123; SIZE=&quot;651&quot;;TYPE=&quot;doc&quot;;NAME=&quot;改造方案（精简版）.doc&quot;;</span><br><span class="line">    UPDATED_BY=&quot;超猪&quot;;PATH=&quot;D:\dev\aau\HTMLayout&quot;;</span><br><span class="line">    UPDATED=&quot;02/01/13 17:11:27&quot;;CREATED_BY=&quot;超猪&quot;;CREATED=&quot;03/18/13 10:30:01&quot;;</span><br><span class="line">    VERSION=&quot;0.1&quot;;ROWID=1 &#125;</span><br><span class="line">    [&quot;2&quot;] = &#123; SIZE=&quot;15.66&quot;;TYPE=&quot;rar&quot;;NAME=&quot;修订表.rar&quot;;</span><br><span class="line">    UPDATED_BY=&quot;超猪&quot;;PATH=&quot;D:\dev\aau\HTMLayout&quot;;UPDATED=&quot;01/07/13 17:03:15&quot;;</span><br><span class="line">    CREATED_BY=&quot;超猪&quot;;CREATED=&quot;03/18/13 13:20:57&quot;;VERSION=&quot;0.1&quot;;ROWID=2 &#125;</span><br><span class="line">    [&quot;3&quot;] = &#123; SIZE=&quot;13&quot;;TYPE=&quot;ppt&quot;;NAME=&quot;清单v2-20130105.ppt&quot;;</span><br><span class="line">    UPDATED_BY=&quot;超猪&quot;;PATH=&quot;D:\dev\aau\HTMLayout&quot;;UPDATED=&quot;02/04/13 15:37:59&quot;;</span><br><span class="line">    CREATED_BY=&quot;超猪&quot;;CREATED=&quot;03/18/13 13:20:57&quot;;VERSION=&quot;0.1&quot;;ROWID=3 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var list = wbLayout.$1(&quot;#itemList table&quot;);</span><br><span class="line"></span><br><span class="line">// 开始填充</span><br><span class="line">for(k,v in data)&#123;</span><br><span class="line">        tr = wbLayout.createEle(&quot;tr&quot;);</span><br><span class="line">        list.append(tr);</span><br><span class="line">        tr.name = &quot;data&quot;;</span><br><span class="line"></span><br><span class="line">        var coldata = &#123;</span><br><span class="line">                &#123; innerText = tostring(v.ROWID) &#125;;</span><br><span class="line">                &#123; innerHTML = &quot;&lt;img class=&#x27;shell-icon&#x27; filename=&#x27;.&quot;+v.TYPE+&quot;&#x27; /&gt;&quot; &#125;;</span><br><span class="line">                &#123; innerText = v.NAME &#125;;</span><br><span class="line">                &#123; innerText = v.SIZE &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        for(i, j in coldata)&#123;</span><br><span class="line">                var td = wbLayout.createEle(&quot;td&quot;);</span><br><span class="line">                tr.append(td);</span><br><span class="line">                for(attrName, attrValue in j) &#123; </span><br><span class="line">                        td[attrName]=attrValue; </span><br><span class="line">                        //td.innerHTML = &quot;&lt;div&gt;Hello&lt;/div&gt;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">                                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 显示table的html，可发现图标这栏没填充上</span><br><span class="line">wbLayout.$1(&quot;textarea#val&quot;).value = wbLayout.$1(&quot;#itemList&quot;).outerHTML</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=10265&amp;extra=page=7">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=10265&amp;extra=page%3D7</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout - 使用file控件（支持选择多个文件）</title>
      <link href="/posts/2024/08/aea121e6.html"/>
      <url>/posts/2024/08/aea121e6.html</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="http://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7156">http://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7156</a><br>代码示例：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=399;parent=...;right=599;text=&quot;HTMLayout - 使用file控件&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform)</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input name=&quot;uploadedfile&quot; type=&quot;file&quot;</span><br><span class="line">           filter=&quot;HTML files:*.htm,*.html;Text files:*.txt;All files:*.*&quot;</span><br><span class="line">           novalue=&quot;(select file)&quot;/&gt;&lt;br /&gt;</span><br><span class="line">&lt;div id=&quot;filepath&quot;&gt;请选择文件&lt;div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">uploadedfile = wbLayout.getEle(&quot;uploadedfile&quot;)</span><br><span class="line">uploadedfile.onButtonStateChanged = function (ltTarget,ltEle,reason,behaviorParams) &#123;　</span><br><span class="line">    wbLayout.getEle(&quot;filepath&quot;).innerText = uploadedfile.value</span><br><span class="line">    uploadedfile.title = uploadedfile.value</span><br><span class="line">&#125;</span><br><span class="line">uploadedfile.attachEventHandler()</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>同时选择多个文件的控件:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=399;right=599;text=&quot;HTMLayout - 选择多个文件&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform)</span><br><span class="line"></span><br><span class="line">wbLayout.html = /** </span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div  .files filter=&quot;HTML files|*.htm;*.html|Text files|*.txt|All files|*.*||&quot; &gt; 选择文件...</span><br><span class="line">  &lt;button #files&gt;...&lt;/button&gt;   </span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">.files &#123;</span><br><span class="line">          width:200px; </span><br><span class="line">          padding:2px 2px 2px 7px;</span><br><span class="line">          font:system;</span><br><span class="line">          background:url(theme:edit-normal) expand;   </span><br><span class="line">&#125; </span><br><span class="line">.files button&#123; </span><br><span class="line">          margin-left:100%%;</span><br><span class="line">          </span><br><span class="line">&#125; </span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">import fsys.dlg;</span><br><span class="line">wbLayout.onButtonClick = &#123;</span><br><span class="line">        files = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">                import fsys.dlg;</span><br><span class="line">                var files = fsys.dlg.openEx( ltEle.queryParent(&quot;.files&quot;).filter,&quot;请选择文件&quot;);</span><br><span class="line">                 </span><br><span class="line">                if( files )&#123;</span><br><span class="line">                        ltEle.queryParent(&quot;.files&quot;).insertAdjacentHTML(&quot;afterEnd&quot;,string.join(files,&quot;&lt;br /&gt;&quot;) )</span><br><span class="line">                &#125; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage() </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>file控件补充css:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=400;parent=...;right=600;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout</span><br><span class="line">wb = web.layout(winform)</span><br><span class="line"></span><br><span class="line">wb.html = /**</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.file&#123;</span><br><span class="line">  text-align:left;</span><br><span class="line">  overflow-x:hidden;//与下面两行联合使用</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  text-overflow:ellipsis;//长字符串显示为...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        </span><br><span class="line">  &lt;div style=&quot;text-align:center;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; .file /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; novalue=&quot;我是超级长的文件名我是超级长的文件名我是超级长的文件名我是超级长的文件名我是超级长的文件名我是超级长的文件名我是超级长的文件名&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>问题说明<br>1,当file控件外部标签的 文字对齐 不为左的时候file控件会随之改变<br>2,当导入超长文件名的文件时 会导致空间变形 可能会导致整个界面的布局改变 所以我把这种情况 用 省略号的方法表示了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input[type=&quot;file&quot;]&#123;</span><br><span class="line">  text-align:left;</span><br><span class="line">  overflow-x:hidden;//与下面两行联合使用</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  text-overflow:ellipsis;//长字符串显示为...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7376&amp;extra=page=7">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=7376&amp;extra=page%3D7</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-给HTMLLayout 添加状态栏</title>
      <link href="/posts/2024/08/bcd81421.html"/>
      <url>/posts/2024/08/bcd81421.html</url>
      
        <content type="html"><![CDATA[<p>准备尝试HTMLLAYOUT的RIBBON 界面，觉得什么都好，就是缺少一个绝对居于底部的状态栏，然后找了个代码，合成了个，无论窗口是否最大化，状态栏始终是在底部。分享下。把代码粘贴替换RIBBON 模版的res/main.html页面即可。<br>状态栏没有添加任何润色，需要修改的同学直接给#footer 写CSS 代码美化即可。  </p><p>代码出处：  </p><blockquote><p><a href="http://www.cssstickyfooter.com/">http://www.cssstickyfooter.com/</a><br>HTML 代码：<br><a href="http://www.cssstickyfooter.com/html-code.html">http://www.cssstickyfooter.com/html-code.html</a><br>CSS代码：<br><a href="http://www.cssstickyfooter.com/style.css">http://www.cssstickyfooter.com/style.css</a></p></blockquote><p>代码讲解：  </p><blockquote><p>有兴趣的同学可以多看看：<a href="http://www.blueidea.com/tech/web/2009/6451.asp">http://www.blueidea.com/tech/web/2009/6451.asp</a> ，代码有点不同，但是道理应该是相同的吧？反正我自己是一点没有看。</p></blockquote><p>特别强调：<br>如果要修改状态栏的高度：请修改一下三个高度的值：  </p><span id="more"></span><blockquote><p>#main {overflow:auto;<br>        padding-bottom: <strong>50px</strong>;}  /* 必须和 #footer 高度一样*/  </p><p>#footer {position: relative;<br>        margin-top: <strong>-50px</strong>; /* 高度的负值 */<br>        height: <strong>50px</strong>;<br>        clear:both;}</p></blockquote><p>代码如下：把代码粘贴替换RIBBON 模版的res/main.html页面即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt; </span><br><span class="line">&lt;link href=&quot;image/main.css&quot; type=&quot;text/css&quot; rel=&quot;Stylesheet&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/aardio.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*  </span><br><span class="line">Sticky Footer Solution</span><br><span class="line">by Steve Hatcher </span><br><span class="line">http://stever.ca</span><br><span class="line">http://www.cssstickyfooter.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">* &#123;margin:0;padding:0;&#125; </span><br><span class="line"></span><br><span class="line">/* must declare 0 margins on everything, also for main layout components use padding, not </span><br><span class="line">vertical margins (top and bottom) to add spacing, else those margins get added to total height </span><br><span class="line">and your footer gets pushed down a bit more, creating vertical scroll bars in the browser */</span><br><span class="line"></span><br><span class="line">html, body &#123;height: 100%;&#125;</span><br><span class="line"></span><br><span class="line">#wrap &#123;min-height: 100%;&#125;</span><br><span class="line"></span><br><span class="line">#main &#123;overflow:auto;</span><br><span class="line">        padding-bottom: 50px;&#125;  /* 必须和 #footer 高度一样*/</span><br><span class="line"></span><br><span class="line">#footer &#123;position: relative;</span><br><span class="line">        margin-top: -50px; /* 高度的负值 */</span><br><span class="line">        height: 50px;</span><br><span class="line">        clear:both;&#125; </span><br><span class="line"></span><br><span class="line">/*Opera Fix*/</span><br><span class="line">body:before &#123;/* thanks to Maleika (Kohoutec)*/</span><br><span class="line">content:&quot;&quot;;</span><br><span class="line">height:100%;</span><br><span class="line">float:left;</span><br><span class="line">width:0;</span><br><span class="line">margin-top:-32767px;/* thank you Erik J - negate effect of float*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* IMPORTANT</span><br><span class="line"></span><br><span class="line">You also need to include this conditional style in the &lt;head&gt; of your HTML file to feed this style to IE 6 and lower and 8 and higher.</span><br><span class="line"></span><br><span class="line">&lt;!--[if !IE 7]&gt;</span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">                #wrap &#123;display:table;height:100%&#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">&lt;/style&gt;        </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;wrap&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;main&quot;&gt;</span><br><span class="line">                所有HTML页面请放置于res目录下.</span><br><span class="line"></span><br><span class="line">                如果res目录设为内嵌资源,则发布时无需修改任何代码自动生成独立EXE文件。</span><br><span class="line"></span><br><span class="line">                并在head节点链接&quot;res/js/aardio.js&quot;(更改为页面相对路径),例如在本页添加如下代码：</span><br><span class="line"></span><br><span class="line">                &lt;strong  style=&quot; text-decoration:underline&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/aardio.js&quot;&gt;&lt;/script&gt; &lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                aardio.js的作用是在所有html文件载入时,根据路径自动载入相应的用户库</span><br><span class="line"></span><br><span class="line">                例如 &quot;/res/main/html&quot; 加载时 自动调用external.loadServer()接口函数,加载 &lt;strong  style=&quot; text-decoration:underline&quot;&gt;server.main.aardio&lt;/strong&gt;,</span><br><span class="line"></span><br><span class="line">                在页面退出时,自动调用 &lt;strong  style=&quot; text-decoration:underline&quot;&gt;server.main().onUnload()&lt;/strong&gt; 函数(如果定义了该函数).</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                aardio.js 同时定义了 console.log() 函数,用于在javascript输出调试信息到控制台 </span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                在任意javascript中都可以使用 &lt;strong style=&quot; text-decoration:underline&quot;&gt;external.config.配置文件名.配置字段名&lt;/strong&gt; 直接读写</span><br><span class="line"></span><br><span class="line">                配置文件, 配置文件将会自动创建并自动保存</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                &lt;span style=&quot;font-size:9pt;&quot;&gt;推荐的文件存储位置:&lt;/span&gt;</span><br><span class="line">                &lt;blockquote style=&quot;margin-top:0px; padding-top:0px; padding-left:20pt; margin-left:0px;&quot;&gt;</span><br><span class="line">                &lt;div style=&quot;margin-top:3px&quot;&gt;将所有图片放在/res/image目录下,并按用途建立子目录,</span><br><span class="line"></span><br><span class="line">                与图片相关的CSS文件放在相同目录下. &lt;/div&gt;</span><br><span class="line">                &lt;div style=&quot;margin-top:3px&quot;&gt;jQuery请置于以下位置: &quot;/res/js/jQuery/jQuery-1.6.1.min.js&quot;，</span><br><span class="line"></span><br><span class="line">                所有js文件请置于res/js目录下 &lt;/div&gt;</span><br><span class="line">                &lt;/blockquote&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;</span><br><span class="line">这里就是状态栏</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><p>更精炼的方法：<br>HTMLayout作为一个界面引擎，绝对定位非常方便</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#footer&#123;</span><br><span class="line">  position:absolute;</span><br><span class="line">  left:1px;</span><br><span class="line">  right:1px;</span><br><span class="line">  bottom:1px;</span><br><span class="line">  height:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以建立一个状态栏了，很简单。<br>position:absolute;  指定绝对定位，left指定左侧位置，right指定右侧位置，bottom指定底部的位置，height指定高度。<br>当然也可以用top指定顶部位置，你可以轻松的将节点放在任何地方，不需要写一大堆代码</p><hr><p>在HTMLayout中嵌入webform浏览器，推荐用下面的方法更简单一些。<br>（ 工程范例里的ribbon用的方法不是很好，因为当时web.layout支持的功能还很有限）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义控件</span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( bottom=523;parent=...;right=789;border=&quot;resizable&quot;;text=&quot;HTMLayout 自定义控件&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">var wbLayout = web.layout(winform );</span><br><span class="line"></span><br><span class="line">import web.layout.debug;</span><br><span class="line">wbLayout.attachEventHandler( web.layout.debug );</span><br><span class="line"></span><br><span class="line">import web.form;</span><br><span class="line">wbLayout.onControlCreated = function( ltEle,ltCtrl )&#123;</span><br><span class="line">    var url = ltEle[&quot;data-url&quot;];</span><br><span class="line">   </span><br><span class="line">    if(url)&#123;</span><br><span class="line">   </span><br><span class="line">        wb = ..web.form( ltCtrl,0x4/*_UIFLAG_NO3DBORDER*/, ,true/*securityTrusted*/ )</span><br><span class="line">        wb.go(url)</span><br><span class="line">        </span><br><span class="line">        ltEle.onSize = function (ltEle) &#123;</span><br><span class="line">            ltCtrl.adjust();</span><br><span class="line">        &#125;</span><br><span class="line">        ltEle.attachEventHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在HTML中引用的控件，需要使用import语句导入aardio</span><br><span class="line">import win.ui.ctrl.static;</span><br><span class="line">import win.ui.ctrl.richedit;</span><br><span class="line">wbLayout.html =/***</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;span style=&quot;font:system&quot;&gt;</span><br><span class="line">自定义控件很简单,在input,object,widget三种节点中使用cls属性指定控件类名即可,&lt;br /&gt;</span><br><span class="line">可选在data-table属性中使用一个table对象指定控件初始化参数 &lt;br /&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;input cls=&quot;richedit&quot; data-table=&quot;&#123; text=&#x27;控件文本&#x27;;multiline=true &#125;&quot; id=&quot;edit&quot; style=&quot;font-size:9pt;width:100%; height:50px;&quot;&gt;&lt;/object&gt;</span><br><span class="line">&lt;widget cls=&quot;static&quot; data-url=&quot;http://www.baidu.com&quot; style=&quot;width:100%%;height:100%%;&quot;&gt;&lt;/widget&gt;</span><br><span class="line">widget可以指定相对高度,input,object因为被包含在匿名节点中,无法指定相对高度</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">***/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">body&#123;</span><br><span class="line">    margin:20px;</span><br><span class="line">    height:100%%;</span><br><span class="line">    font:system;</span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=8151&amp;extra=page=9">https://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=8151&amp;extra=page%3D9</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout获取checkbox是否选中</title>
      <link href="/posts/2024/08/f0496eec.html"/>
      <url>/posts/2024/08/f0496eec.html</url>
      
        <content type="html"><![CDATA[<p>复选框行为.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性:</span><br><span class="line"></span><br><span class="line">·         checked  -  初始选定状态. 取值范围:  &quot;true&quot;, &quot;false&quot;, &quot;undefined&quot;(半选定状态).</span><br><span class="line"></span><br><span class="line">·         mixed  -  半选定状态.</span><br><span class="line"></span><br><span class="line">状态:</span><br><span class="line"></span><br><span class="line">·         :hover  -  悬停</span><br><span class="line"></span><br><span class="line">·         :active  -  按下</span><br><span class="line"></span><br><span class="line">·         :focus  -  获得焦点</span><br><span class="line"></span><br><span class="line">·         :disabled  -  被禁用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用中会出现比较复杂的复合状态, 例如:</p><pre><code>  input[type=&quot;check&quot;][mixed]:checked:disabled</code></pre><p>选定就是true，未选中就是false，半选定状态就是null，前提是要有mixed</p><p>废话不多说，直接上代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">winform = ..win.form( bottom=399;parent=...;right=599;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add( </span><br><span class="line">layoutWindow=&#123; dr=1;dl=1;bottom=382;right=580;left=10;multiline=1;top=12;notify=1;z=1;db=1;dt=1;cls=&quot;edit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform.layoutWindow);</span><br><span class="line"> </span><br><span class="line">wbLayout.html =/***</span><br><span class="line">&lt;input type=&#x27;checkbox&#x27; name=&#x27;chk&#x27; value=&#x27;1&#x27; checked=true&gt;</span><br><span class="line">&lt;input type=&#x27;checkbox&#x27; name=&#x27;chk&#x27; value=&#x27;2&#x27;&gt;</span><br><span class="line">&lt;input type=&#x27;checkbox&#x27; name=&#x27;chk&#x27; value=&#x27;3&#x27;&gt;</span><br><span class="line">***/</span><br><span class="line"></span><br><span class="line">var ltEles = wbLayout.getEles(&quot;chk&quot;);</span><br><span class="line"></span><br><span class="line">io.open()</span><br><span class="line">for(i=1;#ltEles) &#123;</span><br><span class="line"></span><br><span class="line">        var ltEle = ltEles[i]</span><br><span class="line">        </span><br><span class="line">        io.print(&quot;是否选中&quot;,ltEle.value )</span><br><span class="line">        io.print(&quot;控件值&quot;,ltEle.getAttribute(&quot;value&quot;) )</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-3种透明模式</title>
      <link href="/posts/2024/08/3a0700f7.html"/>
      <url>/posts/2024/08/3a0700f7.html</url>
      
        <content type="html"><![CDATA[<p>我给起个名字，也好记忆。<br>透明模式1：浏览器模式<br>透明模式2：位图遮罩模式<br>透明模式3：背景透明模式</p><p>aardio 背景透明的3种方式（透明窗体1 webview2，透明窗体2-win-region-bitmap，透明窗体3-winform-transparent-color）</p><p>3种透明窗体，主要分成是否可以穿透，遮罩组件，全部显示。<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-177.png" alt=""> </p><span id="more"></span><h2 id="透明窗体1-webview2"><a href="#透明窗体1-webview2" class="headerlink" title="透明窗体1 webview2"></a><strong>透明窗体1 webview2</strong></h2><p>优点：可以用html css js，加载png透明图片等<br>缺点：整个框，透明部分不能穿透，只是透明看不到而已。实际上还是存在的。  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-178.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-179.png" alt=""> <p>透明窗体1-webview2.aardio</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=356;bottom=287)</span><br><span class="line">winform.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">// 窗体透明 这时候运行就透明了，什么都看不见了</span><br><span class="line">winform.transparent(true);</span><br><span class="line"></span><br><span class="line">import web.view;</span><br><span class="line">var wb = web.view(winform); // 默认是白色背景</span><br><span class="line"></span><br><span class="line">wb.defaultBackgroundColor = 0x00000000; // 设置webview2背景透明</span><br><span class="line"></span><br><span class="line">wb.html = /**</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    html,body&#123; height:100%; margin:0; &#125; </span><br><span class="line">    .circle &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: #f00; /* 背景颜色 */</span><br><span class="line">  border-radius: 50%; /* 圆角半径为 50%，即画圆 */</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot; class=&quot;circle&quot;&gt; </span><br><span class="line">    &lt;div style=&quot;text-align: center;&quot;&gt;---&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;text-align: center;&quot;&gt; 111&lt;/div&gt; </span><br><span class="line">        &lt;div style=&quot;text-align: center;&quot;&gt; 222 &lt;/div&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">// 边框 没有设置 none 可自行设置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-180.png" alt=""> <h2 id="透明窗体2-win-regibitmap-on-aardio-位图遮罩模式"><a href="#透明窗体2-win-regibitmap-on-aardio-位图遮罩模式" class="headerlink" title="透明窗体2-win-regibitmap.on-aardio 位图遮罩模式"></a><strong>透明窗体2-win-regibitmap.on-aardio 位图遮罩模式</strong></h2><p>优点：具有穿透<br>特点：遮罩组件，只有有图像的地方，才会显示组件<br>缺点：图片要bmp格式（先png再存bmp），透明有毛边，因为没有半透明<br>透明颜色：感觉是自动识别</p><p>代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;image=$&quot;\assets\trans2.bmp&quot;;border=&quot;none&quot;)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;Button&quot;;left=205;top=263;right=444;bottom=371;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">// 透明窗体2-win-region-bitmap.aardio</span><br><span class="line"></span><br><span class="line">// 第一步 设置窗体无边框</span><br><span class="line">// 第二步 设置bmp 背景</span><br><span class="line">// 这个背景透明 需要bmp 而且这个背景透明后</span><br><span class="line">// 透明的位置 不能显示控件了</span><br><span class="line">// 透明颜色自动识别</span><br><span class="line"></span><br><span class="line">import win.region.bitmap;</span><br><span class="line">win.region.bitmap(winform);</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-181.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-182.png" alt=""> <h2 id="透明窗体3-winform-transparent-color-aardio"><a href="#透明窗体3-winform-transparent-color-aardio" class="headerlink" title="透明窗体3-winform-transparent-color.aardio"></a><strong>透明窗体3-winform-transparent-color.aardio</strong></h2><p>优点：可穿透<br>缺点：bmp背景图<br>相对麻烦：指定10进制 透明颜色值<br>取色方法：我觉得比较方便。</p><ol><li> 先点击背景颜色，点自定义选颜色  </li></ol><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-183.png" alt=""> 2.  点击选择，然后吸取你的背景颜色  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-184.png" alt=""> 3.  到代码界面 后面的bgcolor就是10进制的颜色  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-185.png" alt=""> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;aardio form&quot;;right=759;bottom=469;image=$&quot;\assets\trans2.bmp&quot;;bgcolor=0)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=&quot;button&quot;;text=&quot;Button&quot;;left=125;top=103;right=337;bottom=272;z=1&#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">// 透明窗体3-winform-transparent-color.aardio</span><br><span class="line"></span><br><span class="line">// 第一步 设置bmp背景图</span><br><span class="line"></span><br><span class="line">// 第一个参数是透明度 第2个参数是透明颜色，绑定winform背景图的</span><br><span class="line">// 透明颜色 绑定 10进制数值后，透明度参数就失效了。</span><br><span class="line">// 这个10进制的数字可以用aardio软件取个背景颜色，代码里面就是10进制的数字了</span><br><span class="line">winform.transparent(,0)</span><br><span class="line">//winform.transparent(true)</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-186.png" alt=""> <p>原文链接：<a href="https://www.cnblogs.com/pengchenggang/p/18069767">https://www.cnblogs.com/pengchenggang/p/18069767</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-为 HTMLayout 程序增加“动态换肤”功能</title>
      <link href="/posts/2024/08/44995320.html"/>
      <url>/posts/2024/08/44995320.html</url>
      
        <content type="html"><![CDATA[<p>动态改变 &lt;link&gt; 标签的 href 属性并不能让 CSS 即时生效，要动态改变外联 CSS 的路径，需要用到一些小技巧，有了这些技巧，就可以为 HTMLayout 增加“动态换肤”的功能了。</p><p>link[rel=”stylesheet”] 的 disabled 状态可以控制其样式表的有效性：将其设置为 true（禁用），所有由该 <link> 产生的样式会被移除；将其设置为 false（启用），则重新加载这些样式。（来源于：<a href="http://terrainformatica.com/forums/topic.php?id=964%EF%BC%89">http://terrainformatica.com/forums/topic.php?id=964）</a></p><p>下面是一个例子，为了让大家更方便地测试，我处理了 HLN_LOAD_DATA 响应通知以模拟外联 CSS，真正的项目中不需要这么写。</p><p>代码示例:</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form(text=&quot;动态改变外联 CSS 路径&quot;;right=654;bottom=422)</span><br><span class="line">winform.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import console;</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">var wbLayout = web.layout(winform);</span><br><span class="line"></span><br><span class="line">var cssData = &#123;</span><br><span class="line">    [&quot;/skins/1.css&quot;] = /**</span><br><span class="line">        html &#123; background: #800; color: #fff &#125;</span><br><span class="line">    **/;</span><br><span class="line">    [&quot;/skins/2.css&quot;] = /**</span><br><span class="line">        html &#123; background: #008 &#125;</span><br><span class="line">        button[type=checkbox] &#123;</span><br><span class="line">            padding: 4px 20px 4px 4px;</span><br><span class="line">            background-position: 100% 50%;</span><br><span class="line">        &#125;</span><br><span class="line">    **/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wbLayout.callback = function (message, wParam, lParam, vParam, notifyCode) &#123;</span><br><span class="line">    if (notifyCode === 0xB01/*_HLN_LOAD_DATA*/) &#123;</span><br><span class="line">        var nmld = web.layout.NMHL_LOAD_DATA();</span><br><span class="line">        raw.convert(lParam, nmld);</span><br><span class="line">        var uri = string.fromUnicode(nmld.uri, 0, true);</span><br><span class="line">        if (cssData[uri]) &#123;</span><br><span class="line">            var data = string.fromto(cssData[uri], 0, 65001);</span><br><span class="line">            web.layout.DataReady(winform.hwnd, uri, data, #data);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0/*_LOAD_OK*/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace web.layout.behavior &#123;</span><br><span class="line">    class alterCss &#123;</span><br><span class="line">        ctor (ltEle, layout) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        onButtonClick = function (ltTarget, ltEle, reason, behaviorParams) &#123;</span><br><span class="line">            with (layout.getEle(&quot;stylesheet&quot;)) &#123;</span><br><span class="line">                state.disabled = true;</span><br><span class="line">                href = ltEle.state.checked ? &quot;skins/2.css&quot; : &quot;skins/1.css&quot;;</span><br><span class="line">                state.disabled = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link #stylesheet rel=&quot;stylesheet&quot; href=&quot;skins/1.css&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button type=&quot;checkbox&quot; style=&quot;behavior: ~alter-css;&quot;&gt;Alter external CSS&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，用 activate 函数也可以实现该效果：</p><table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_65100"><a href="http://www.terrainformatica.com/forum/read.php?3,792,792#msg-792" target="_blank">Changing HTMLayout skins in run time</a></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace web.layout.behavior.alterCss &#123;</span><br><span class="line">    onButtonStateChanged = function (ltTarget, ltEle, reason, behaviorParams) &#123;</span><br><span class="line">        var ltSytle = ltEle.documentElement.querySelector(&quot;#stylesheet&quot;)</span><br><span class="line">                ltSytle.href = ltEle.state.checked ? &quot;skins/2.css&quot; : &quot;skins/1.css&quot;; </span><br><span class="line">                ltSytle.xcall(&quot;activate&quot;)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout列表控件动态添加列表项</title>
      <link href="/posts/2024/08/61ab607b.html"/>
      <url>/posts/2024/08/61ab607b.html</url>
      
        <content type="html"><![CDATA[<p>本文以 预览本机字体 来演示aardio的HTMLayout列表控件动态添加列表项。</p><p>&lt;widget&gt;标签支持 height:100%%; 这种两个百分号的写法，&lt;select&gt;标签不支持。</p><p>动态设置元素字体的时候字体名字要用两个’\“‘双引号把字体名字括起来，不然不会生效。如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ele.style[&quot;font-family&quot;]=&#x27;\&quot;&#x27;+fullname+&#x27;\&quot;&#x27;;</span><br></pre></td></tr></table></figure><p>使用Htmlayout做界面是很不错的选择！！ ^_^</p><p>源代码如下：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">import win.font;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;HTMLayout列表框 - aardio编程学习&quot;;right=599;bottom=399;maxmize=1;parent=...)</span><br><span class="line">winform.add()</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout( winform )</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;widget type=&quot;select&quot; id=&quot;fontlist&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/widget&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">widget#fontlist &#123;</span><br><span class="line">    width:100%%;</span><br><span class="line">    height:100%%;</span><br><span class="line">&#125;</span><br><span class="line">widget#fontlist option&#123;</span><br><span class="line">    height:30px;</span><br><span class="line">    font-size:25px;</span><br><span class="line">    margin:2px 0px;</span><br><span class="line">    border:1px dotted green;</span><br><span class="line">&#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">//枚举本机包含GB2312的字体</span><br><span class="line">win.font.enum( </span><br><span class="line">    function(logfont,fullname,ftype,style,script,lpntme)&#123;</span><br><span class="line">        if( ftype == 0x4/*_TRUETYPE_FONTTYPE*/ &amp;&amp; fullname[1] != &#x27;@&#x27;#/*翻转90度字体*/ )&#123;</span><br><span class="line">        </span><br><span class="line">            //创建一个option元素</span><br><span class="line">            var ele = wbLayout.createEle(&quot;option&quot;,&quot;字体名称：&quot;++fullname++&quot;  学习aardio编程语言！123456789  www.aardio.com&quot;);</span><br><span class="line">            //将创建的元素ele追加到id=&quot;fontlist&quot;的widget元素中</span><br><span class="line">            wbLayout.getEle(&quot;fontlist&quot;).append(ele);</span><br><span class="line">            //设置新建的option元素的字体</span><br><span class="line">            ele.style[&quot;font-family&quot;]=&#x27;\&quot;&#x27;+fullname+&#x27;\&quot;&#x27;;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,&#123; charset = 0x86/*_GB2312_CHARSET*/; name = &quot;&quot; &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-176.png" alt=""> ]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-HTMLayout 使用右键菜单</title>
      <link href="/posts/2024/08/9d551f16.html"/>
      <url>/posts/2024/08/9d551f16.html</url>
      
        <content type="html"><![CDATA[<p>参考链接：<br><a href="http://www.terrainformatica.com/2006/08/h-smile-core-popup-and-context-menus-htmlayout-and-sciter-engines/">http://www.terrainformatica.com/2006/08/h-smile-core-popup-and-context-menus-htmlayout-and-sciter-engines/</a></p><p>代码示例：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = ..win.form( text=&quot;HTMLayout 使用右键菜单&quot;;bottom=399;parent=...;right=599;border=&quot;resizable&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import web.layout;</span><br><span class="line">wbLayout = web.layout(winform)</span><br><span class="line"></span><br><span class="line">wbLayout.html = /**  </span><br><span class="line">&lt;body&gt; </span><br><span class="line"></span><br><span class="line">鼠标右键点击下面的按钮显示右键菜单:&lt;br /&gt;  </span><br><span class="line">&lt;button class=&quot;with-context-menu&quot;&gt;右键点击这里&lt;/button&gt;    </span><br><span class="line"></span><br><span class="line">&lt;menu.context id=&quot;menuId&quot;&gt;</span><br><span class="line">  &lt;li id=&quot;i1&quot;&gt;First item&lt;/li&gt;</span><br><span class="line">  &lt;li id=&quot;i2&quot;&gt;Second item&lt;/li&gt;</span><br><span class="line">  &lt;li id=&quot;i3&quot;&gt;Third item&lt;/li&gt;</span><br><span class="line">  &lt;li id=&quot;i4&quot;&gt;Fourth item&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;Sub menu</span><br><span class="line">     &lt;menu&gt;</span><br><span class="line">     &lt;li id=&quot;i5&quot;&gt;5 item&lt;/li&gt;</span><br><span class="line">     &lt;li id=&quot;i6&quot;&gt;6 item&lt;/li&gt;</span><br><span class="line">     &lt;/menu&gt;  </span><br><span class="line">  &lt;/li&gt; </span><br><span class="line">&lt;/menu&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt; </span><br><span class="line">**/ </span><br><span class="line"></span><br><span class="line">wbLayout.css = /**</span><br><span class="line">.with-context-menu &#123;  </span><br><span class="line">  context-menu: selector(menu#menuId); /*selector函数的参数是指定右键菜单的CSS选择器*/</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">menu&#123;</span><br><span class="line">    width: max-intrinsic; /*内容的最大宽度,可以超出屏幕*/</span><br><span class="line">&#125; </span><br><span class="line">**/</span><br><span class="line">    </span><br><span class="line">//右键菜单触发下面的函数</span><br><span class="line">wbLayout.onMenuItemClick = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line">        </span><br><span class="line">        //得到当前弹出菜单的节点</span><br><span class="line">        var ltSource = ..web.layout.element( behaviorParams.he )</span><br><span class="line">        </span><br><span class="line">        //ltEle是菜单,ltTarget是点击的菜单项目</span><br><span class="line">    winform.msgbox(&quot;你点击了菜单 &quot; + ltTarget.innerText )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//弹出菜单前触发</span><br><span class="line">wbLayout.onPopupRequest = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line"></span><br><span class="line">        //得到当前弹出菜单的节点</span><br><span class="line">        var ltSource = ..web.layout.element( behaviorParams.he )</span><br><span class="line">        ltSource.innerText = &quot;已弹出菜单&quot;</span><br><span class="line">        </span><br><span class="line">        //ltEle是菜单对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wbLayout.onPopupDismissed = function (ltTarget,ltEle,reason,behaviorParams) &#123;</span><br><span class="line"></span><br><span class="line">        //得到当前弹出菜单的节点</span><br><span class="line">        var ltSource = ..web.layout.element( behaviorParams.he )</span><br><span class="line">        ltSource.innerText = &quot;已关闭菜单&quot;</span><br><span class="line">        </span><br><span class="line">        //ltEle是菜单对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
            <tag> htmlayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-窗体最大化能不能固定一个尺寸</title>
      <link href="/posts/2024/08/61701975.html"/>
      <url>/posts/2024/08/61701975.html</url>
      
        <content type="html"><![CDATA[<p>拦截最大化消息,然后设置窗口为  800*600.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; text=&quot;aardio Form&quot;;right=525;bottom=365 )</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123; bottom=360;text=&quot;button&quot;;left=448;top=336;font=LOGFONT( name=&quot;SimSun&quot;;h=-12 );z=2;right=520;cls=&quot;button&quot; &#125;;</span><br><span class="line">richedit=&#123; ah=1;bottom=328;text=&quot;richedit&quot;;left=8;multiline=1;top=8;font=LOGFONT( name=&quot;SimSun&quot;;h=-12 );right=520;aw=1;wrap=1;z=1;edge=1;cls=&quot;richedit&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.wndproc = function(hwnd,message,wparam,lparam)&#123;</span><br><span class="line"></span><br><span class="line">    select(message) &#123;//判断消息类型</span><br><span class="line"></span><br><span class="line">        case 0x112/*_WM_SYSCOMMAND*/&#123;</span><br><span class="line">            if(wparam == 0xF030/*_SC_MAXIMIZE*/)&#123;</span><br><span class="line">                win.msgbox(&quot;点击了最大化按钮&quot;,&quot;aardio&quot;)</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else if( wparam == 0x0/*_SIZE_RESTORED*/ )&#123;</span><br><span class="line">                win.msgbox(&quot;点击了恢复按钮&quot;,&quot;aardio&quot;)</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else if( wparam == 0xF020/*_SC_MINIMIZE*/ )&#123;</span><br><span class="line">                win.msgbox(&quot;点击了最小化按钮&quot;,&quot;aardio&quot;)</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else if(wparam=0xF120/*_SC_RESTORE*/)&#123;   </span><br><span class="line">                //win.msgbox(&quot;还原&quot;)</span><br><span class="line">                if(frmChild)&#123;</span><br><span class="line">        frmChild.show();</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        case 0x0007/*_WM_SETFOCUS */&#123;</span><br><span class="line">        //console.log(&quot;获得焦点&quot;);</span><br><span class="line">        if(frmChild)&#123;</span><br><span class="line">        frmChild.show();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //无返回值则继续调用默认回调函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>方法二：</p><span id="more"></span><p>用win api就很轻松的解决啦</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(parent=...; text=&quot;aardio Form&quot;;right=349;bottom=249 )</span><br><span class="line">winform.add( </span><br><span class="line">button=&#123; bottom=130;right=254;left=86;top=78;font=LOGFONT( name=&quot;宋体&quot;;h=-12 );z=1;text=&quot;button&quot;;cls=&quot;button&quot; &#125;</span><br><span class="line">)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = function(id,event)&#123;</span><br><span class="line">        GetActiveWindow = ::User32.api(&quot;GetActiveWindow&quot;,&quot;int()&quot;)//获得当前活动窗口的句柄</span><br><span class="line">        MoveWindow = ::User32.api(&quot;MoveWindow&quot;,&quot;int(int hwnd,int x,int y,int nWidth,int nHeight,int bRepaint)&quot;)//设置窗口位置和大小</span><br><span class="line">        var hwnd = GetActiveWindow()</span><br><span class="line">        /*</span><br><span class="line">        *x,y分别是left和top的值,nWidth,nHeight分别是新宽和高，bRepaint为false由窗口自行决定是否重画</span><br><span class="line">        */</span><br><span class="line">        var x = 349</span><br><span class="line">        var y = 249</span><br><span class="line">        var nWidth = 800</span><br><span class="line">        var nHeight = 600</span><br><span class="line">        var bRepaint = 0 //int类型的参数        </span><br><span class="line">        var int = MoveWindow(hwnd,x,y,nWidth,nHeight,bRepaint)        </span><br><span class="line">        win.msgbox(int,&quot;aardio&quot;)                </span><br><span class="line">&#125;</span><br><span class="line">winform.show() </span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-如何禁止移动窗口</title>
      <link href="/posts/2024/08/5e8ff5b6.html"/>
      <url>/posts/2024/08/5e8ff5b6.html</url>
      
        <content type="html"><![CDATA[<p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form( bottom=400;parent=...;right=600;text=&quot;aardio Form&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line">var x,y,cx,cy=winform.getPos()</span><br><span class="line">winform.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">        if(message=0x3/*_WM_MOVE*/)&#123;</span><br><span class="line">            winform.setPos(x,y,cx,cy)</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br><span class="line">return winform;</span><br></pre></td></tr></table></figure><p>这个消息不能阻断，移动时有点闪烁，不知道有没更好的方法。</p><p>方法二：</p><span id="more"></span><p>用户一移动窗体，你可以做个动画效果弹回去，做成弹力球的效果。</p><p>方法三：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form( text=&quot;aardio Form&quot;;bottom=279;parent=...;right=423;border=&quot;dialog frame&quot; )</span><br><span class="line">winform.add(  )</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">import win.ui.menu;</span><br><span class="line"></span><br><span class="line">var menu = win.ui.getSysMenu(winform, false);</span><br><span class="line">menu.delete(0xF010/*_SC_MOVE*/, 0x0/*_MF_BYCOMMAND*/);</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>要求不高的话把移动菜单项删掉就可以实现了。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-创建百度网盘那样可拖动的悬浮窗</title>
      <link href="/posts/2024/08/83cc1a7b.html"/>
      <url>/posts/2024/08/83cc1a7b.html</url>
      
        <content type="html"><![CDATA[<p>用winform.hitCaption()可以很方便的实现该功能.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建类似于百度网盘那样可拖动的悬浮窗（*更简便的方法）</span><br><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">var winform = win.form(text=&quot;&quot;;right=60;bottom=60;bgcolor=8421376;border=&quot;none&quot;;max=false;min=false;mode=&quot;popup&quot;;title=false)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"></span><br><span class="line">winform.wndproc = function(hwnd, message, wParam, lParam) &#123;</span><br><span class="line">    select(message) &#123;</span><br><span class="line">        case 0x201/*_WM_LBUTTONDOWN*/&#123;</span><br><span class="line">        //点击左键移动窗体</span><br><span class="line">            winform.hitCaption()</span><br><span class="line">        &#125;</span><br><span class="line">        case 0x205/*_WM_RBUTTONUP*/&#123;</span><br><span class="line">        //右键菜单</span><br><span class="line">            var popmenu = win.ui.popmenu(winform);</span><br><span class="line">            popmenu.add(&#x27;关闭&#x27;,</span><br><span class="line">            function(id) &#123; </span><br><span class="line">                win.close(winform.hwnd);</span><br><span class="line">            &#125;)     </span><br><span class="line">            popmenu.popup()</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">win.setTopmost(winform.hwnd); //窗口置顶</span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-消息回调wndproc message消息列表</title>
      <link href="/posts/2024/08/30d2bf2a.html"/>
      <url>/posts/2024/08/30d2bf2a.html</url>
      
        <content type="html"><![CDATA[<p>按下鼠标左键拖动示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">var mainForm = win.form(right=599;bottom=399)</span><br><span class="line"></span><br><span class="line">mainForm.wndproc = function(hwnd,message,wParam,lParam)&#123;</span><br><span class="line">    if( message == 0x201/*_WM_LBUTTONDOWN*/ )</span><br><span class="line">        ::User32.SendMessage( mainForm.hwnd, 0xA1/*_WM_NCLBUTTONDOWN*/                ,2/*_HTCAPTION*/, 0 )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mainForm.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p><strong>消息回调wndproc message消息列表:</strong></p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WM_NULL = 0x0000; // </span><br><span class="line">WM_CREATE = 0x0001; //应用程序创建一个窗口 </span><br><span class="line">WM_DESTROY = 0x0002; //一个窗口被销毁 </span><br><span class="line">WM_MOVE = 0x0003; //移动一个窗口 </span><br><span class="line">WM_SIZE = 0x0005; //改变一个窗口的大小 </span><br><span class="line">WM_ACTIVATE = 0x0006; //一个窗口被激活或失去激活状态； </span><br><span class="line">WM_SETFOCUS = 0x0007; //获得焦点后 </span><br><span class="line">WM_KILLFOCUS = 0x0008; //失去焦点 </span><br><span class="line">WM_ENABLE = 0x000A; //改变enable状态 </span><br><span class="line">WM_SETREDRAW = 0x000B; //设置窗口是否能重画 </span><br><span class="line">WM_SETTEXT = 0x000C; //应用程序发送此消息来设置一个窗口的文本 </span><br><span class="line">WM_GETTEXT = 0x000D; //应用程序发送此消息来复制对应窗口的文本到缓冲区 </span><br><span class="line">WM_GETTEXTLENGTH = 0x000E; //得到与一个窗口有关的文本的长度（不包含空字符） </span><br><span class="line">WM_PAINT = 0x000F; //要求一个窗口重画自己 </span><br><span class="line">WM_CLOSE = 0x0010; //当一个窗口或应用程序要关闭时发送一个信号 </span><br><span class="line">WM_QUERYENDSESSION = 0x0011; //当用户选择结束对话框或程序自己调用ExitWindows函数 </span><br><span class="line">WM_QUIT = 0x0012; //用来结束程序运行或当程序调用postquitmessage函数 </span><br><span class="line">WM_QUERYOPEN = 0x0013; //当用户窗口恢复以前的大小位置时，把此消息发送给某个图标 </span><br><span class="line">WM_ERASEBKGND = 0x0014; //当窗口背景必须被擦除时（例在窗口改变大小时） </span><br><span class="line">WM_SYSCOLORCHANGE = 0x0015; //当系统颜色改变时，发送此消息给所有顶级窗口 </span><br><span class="line">WM_ENDSESSION = 0x0016; // 当系统进程发出WM_QUERYENDSESSION消息后，此消息发送给应用程序，通知它对话是否结束 </span><br><span class="line">WM_SYSTEMERROR = 0x0017; // </span><br><span class="line">WM_SHOWWINDOW = 0x0018; //当隐藏或显示窗口是发送此消息给这个窗口 </span><br><span class="line">WM_ACTIVATEAPP = 0x001C; //发此消息给应用程序哪个窗口是激活的，哪个是非激活的； </span><br><span class="line">WM_FONTCHANGE = 0x001D; //当系统的字体资源库变化时发送此消息给所有顶级窗口 </span><br><span class="line">WM_TIMECHANGE = 0x001E; //当系统的时间变化时发送此消息给所有顶级窗口 </span><br><span class="line">WM_CANCELMODE = 0x001F; //发送此消息来取消某种正在进行的摸态（操作） </span><br><span class="line">WM_SETCURSOR = 0x0020; //如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口</span><br><span class="line">WM_MOUSEACTIVATE = 0x0021; //当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口 </span><br><span class="line">WM_CHILDACTIVATE = 0x0022; //发送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小 </span><br><span class="line">WM_QUEUESYNC = 0x0023; //此消息由基于计算机的训练程序发送，通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息 </span><br><span class="line">WM_GETMINMAXINFO = 0x0024; //此消息发送给窗口当它将要改变大小或位置； </span><br><span class="line">WM_PAINTICON = 0x0026; //发送给最小化窗口当它图标将要被重画 </span><br><span class="line">WM_ICONERASEBKGND = 0x0027; //此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画 </span><br><span class="line">WM_NEXTDLGCTL = 0x0028; //发送此消息给一个对话框程序去更改焦点位置 </span><br><span class="line">WM_SPOOLERSTATUS = 0x002A; //每当打印管理列队增加或减少一条作业时发出此消息 </span><br><span class="line">WM_DRAWITEM = 0x002B; //当button，combobox，listbox，menu的可视外观改变时发送此消息给这些空件的所有者 </span><br><span class="line">WM_MEASUREITEM = 0x002C; //当button, combo box, list box, list view control, or menu item 被创建时发送此消息给控件的所有者 </span><br><span class="line">WM_DELETEITEM = 0x002D; // 当the list box 或combo box 被销毁或当某些项被删除通过LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT 消息 </span><br><span class="line">WM_VKEYTOITEM = 0x002E; //此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息 </span><br><span class="line">WM_CHARTOITEM = 0x002F; //此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息 </span><br><span class="line">WM_SETFONT = 0x0030; //当绘制文本时程序发送此消息得到控件要用的颜色 </span><br><span class="line">WM_GETFONT = 0x0031; //应用程序发送此消息得到当前控件绘制文本的字体 </span><br><span class="line">WM_SETHOTKEY = 0x0032; //应用程序发送此消息让一个窗口与一个热键相关连 </span><br><span class="line">WM_GETHOTKEY = 0x0033; //应用程序发送此消息来判断热键与某个窗口是否有关联 </span><br><span class="line">WM_QUERYDRAGICON = 0x0037; //此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能 </span><br><span class="line">//返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标 </span><br><span class="line">WM_COMPAREITEM = 0x0039; //发送此消息来判定combobox或listbox新增加的项的相对位置 </span><br><span class="line">WM_GETOBJECT = 0x003D; //WM_COMPACTING = 0x0041; //显示内存已经很少了 </span><br><span class="line">WM_WINDOWPOSCHANGING = 0x0046; //发送此消息给那个窗口的大小和位置将要被改变时，来调用setwindowpos函数或其它窗口管理函数 </span><br><span class="line">WM_WINDOWPOSCHANGED = 0x0047; //发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数 </span><br><span class="line">WM_POWER = 0x0048; //（适用于16位的windows）当系统将要进入暂停状态时发送此消息 </span><br><span class="line">WM_COPYDATA = 0x004A; //当一个应用程序传递数据给另一个应用程序时发送此消息 </span><br><span class="line">WM_CANCELJOURNAL = 0x004B; //当某个用户取消程序日志激活状态，提交此消息给程序 </span><br><span class="line">WM_NOTIFY = 0x004E; //当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口 </span><br><span class="line">WM_INPUTLANGCHANGEREQUEST = 0x0050; //当用户选择某种输入语言，或输入语言的热键改变 </span><br><span class="line">WM_INPUTLANGCHANGE = 0x0051; //当平台现场已经被改变后发送此消息给受影响的最顶级窗口 </span><br><span class="line">WM_TCARD = 0x0052; //当程序已经初始化windows帮助例程时发送此消息给应用程序 </span><br><span class="line">WM_HELP = 0x0053; //此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就 </span><br><span class="line">//发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口 </span><br><span class="line">WM_USERCHANGED = 0x0054; //当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体 </span><br><span class="line">//设置信息，在用户更新设置时系统马上发送此消息； </span><br><span class="line">WM_NOTIFYformAT = 0x0055; //公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构 </span><br><span class="line">//在WM_NOTIFY消息，使用此控件能使某个控件与它的父控件之间进行相互通信 </span><br><span class="line">WM_CONTEXTMENU = 0x007B; //当用户某个窗口中点击了一下右键就发送此消息给这个窗口 </span><br><span class="line">WM_styleCHANGING = 0x007C; //当调用SETWINDOWLONG函数将要改变一个或多个窗口的风格时发送此消息给那个窗口 </span><br><span class="line">WM_styleCHANGED = 0x007D; //当调用SETWINDOWLONG函数一个或多个窗口的风格后发送此消息给那个窗口 </span><br><span class="line">WM_DISPLAYCHANGE = 0x007E; //当显示器的分辨率改变后发送此消息给所有的窗口 </span><br><span class="line">WM_GETICON = 0x007F; //此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄； </span><br><span class="line">WM_SETICON = 0x0080; //程序发送此消息让一个新的大图标或小图标与某个窗口关联； </span><br><span class="line">WM_NCCREATE = 0x0081; //当某个窗口第一次被创建时，此消息在WM_CREATE消息发送前发送； </span><br><span class="line">WM_NCDESTROY = 0x0082; //此消息通知某个窗口，非客户区正在销毁 </span><br><span class="line">WM_NCCALCSIZE = 0x0083; //当某个窗口的客户区域必须被核算时发送此消息 </span><br><span class="line">WM_NCHITTEST = 0x0084; //移动鼠标，按住或释放鼠标时发生 </span><br><span class="line">WM_NCPAINT = 0x0085; //程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时； </span><br><span class="line">WM_NCACTIVATE = 0x0086; //此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态； </span><br><span class="line">WM_GETDLGCODE = 0x0087; //发送此消息给某个与对话框程序关联的控件，widdows控制方位键和TAB键使输入进入此控件 </span><br><span class="line">//通过响应WM_GETDLGCODE消息，应用程序可以把他当成一个特殊的输入控件并能处理它 </span><br><span class="line">WM_NCMOUSEMOVE = 0x00A0; //当光标在一个窗口的非客户区内移动时发送此消息给这个窗口//非客户区为：窗体的标题栏及窗的边框体 </span><br><span class="line">WM_NCLBUTTONDOWN = 0x00A1; // </span><br><span class="line">//当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息 </span><br><span class="line">WM_NCLBUTTONUP = 0x00A2; //当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息； </span><br><span class="line">WM_NCLBUTTONDBLCLK = 0x00A3; //当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息 </span><br><span class="line">WM_NCRBUTTONDOWN = 0x00A4; //当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCRBUTTONUP = 0x00A5; //当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCRBUTTONDBLCLK = 0x00A6; //当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息 </span><br><span class="line">WM_NCMBUTTONDOWN = 0x00A7; //当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCMBUTTONUP = 0x00A8; //当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_NCMBUTTONDBLCLK = 0x00A9; //当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息 </span><br><span class="line">WM_KEYFIRST = 0x0100; // </span><br><span class="line">WM_KEYDOWN = 0x0100; //按下一个键 </span><br><span class="line">WM_KEYUP = 0x0101; //释放一个键 </span><br><span class="line">WM_CHAR = 0x0102; //按下某键，并已发出WM_KEYDOWN，WM_KEYUP消息 </span><br><span class="line">WM_DEADCHAR = 0x0103; //当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSKEYDOWN = 0x0104; //当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口； </span><br><span class="line">WM_SYSKEYUP = 0x0105; //当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSCHAR = 0x0106; //当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口 </span><br><span class="line">WM_SYSDEADCHAR = 0x0107; //当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口 </span><br><span class="line">WM_KEYLAST = 0x0108; // </span><br><span class="line">WM_INITDIALOG = 0x0110; //在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务 </span><br><span class="line">WM_COMMAND = 0x0111; //当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译 </span><br><span class="line">WM_SYSCOMMAND = 0x0112; //当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息 </span><br><span class="line">WM_TIMER = 0x0113; //发生了定时器事件 </span><br><span class="line">WM_HSCROLL = 0x0114; //当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件 </span><br><span class="line">WM_VSCROLL = 0x0115; //当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件WM_INITMENU = 0x0116; // </span><br><span class="line">//当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许 </span><br><span class="line">//程序在显示前更改菜单 </span><br><span class="line">WM_INITMENUPOPUP = 0x0117; //当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要 </span><br><span class="line">// 改变全部 </span><br><span class="line">WM_MENUSELECT = 0x011F; //当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口） </span><br><span class="line">WM_MENUCHAR = 0x0120; //当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者； </span><br><span class="line">WM_ENTERIDLE = 0x0121; //当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待 </span><br><span class="line">WM_MENURBUTTONUP = 0x0122; // </span><br><span class="line">WM_MENUDRAG = 0x0123; // </span><br><span class="line">WM_MENUGETOBJECT = 0x0124; // </span><br><span class="line">WM_UNINITMENUPOPUP = 0x0125; // </span><br><span class="line">WM_MENUCOMMAND = 0x0126; // </span><br><span class="line">WM_CHANGEUISTATE = 0x0127; // </span><br><span class="line">WM_UPDATEUISTATE = 0x0128; // </span><br><span class="line">WM_QUERYUISTATE = 0x0129; // </span><br><span class="line">WM_CTLCOLORMSGBOX = 0x0132; //在windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLOREDIT = 0x0133; //当一个编辑型控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORLISTBOX = 0x0134; //当一个列表框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORBTN = 0x0135; //当一个按钮控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色 </span><br><span class="line">WM_CTLCOLORDLG = 0x0136; //当一个对话框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色 </span><br><span class="line">WM_CTLCOLORSCROLLBAR = 0x0137; //当一个滚动条控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色 </span><br><span class="line">WM_CTLCOLORSTATIC = 0x0138; //当一个静态控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以 </span><br><span class="line">//通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色 </span><br><span class="line">WM_MOUSEFIRST = 0x0200; // </span><br><span class="line">WM_MOUSEMOVE = 0x0200; //移动鼠标 </span><br><span class="line">WM_LBUTTONDOWN = 0x0201; //按下鼠标左键 </span><br><span class="line">WM_LBUTTONUP = 0x0202; //释放鼠标左键 </span><br><span class="line">WM_LBUTTONDBLCLK = 0x0203; //双击鼠标左键 </span><br><span class="line">WM_RBUTTONDOWN = 0x0204; //按下鼠标右键 </span><br><span class="line">WM_RBUTTONUP = 0x0205; //释放鼠标右键 </span><br><span class="line">WM_RBUTTONDBLCLK = 0x0206; //双击鼠标右键 </span><br><span class="line">WM_MBUTTONDOWN = 0x0207; //按下鼠标中键 </span><br><span class="line">WM_MBUTTONUP = 0x0208; //释放鼠标中键 </span><br><span class="line">WM_MBUTTONDBLCLK = 0x0209; //双击鼠标中键 </span><br><span class="line">WM_MOUSEWHEEL = 0x020A; //当鼠标轮子转动时发送此消息个当前有焦点的控件 </span><br><span class="line">WM_MOUSELAST = 0x020A; // </span><br><span class="line">WM_PARENTNOTIFY = 0x0210; //当MDI子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口 </span><br><span class="line">WM_ENTERMENULOOP = 0x0211; //发送此消息通知应用程序的主窗口that已经进入了菜单循环模式 </span><br><span class="line">WM_EXITMENULOOP = 0x0212; //发送此消息通知应用程序的主窗口that已退出了菜单循环模式 </span><br><span class="line">WM_NEXTMENU = 0x0213; // </span><br><span class="line">WM_SIZING = 532; //当用户正在调整窗口大小时发送此消息给窗口；通过此消息应用程序可以监视窗口大小和位置</span><br><span class="line">//也可以修改他们 </span><br><span class="line">WM_CAPTURECHANGED = 533; //发送此消息给窗口当它失去捕获的鼠标时； </span><br><span class="line">WM_MOVING = 534; //当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置 </span><br><span class="line">//也可以修改他们； </span><br><span class="line">WM_POWERBROADCAST = 536; //此消息发送给应用程序来通知它有关电源管理事件； </span><br><span class="line">WM_DEVICECHANGE = 537; //当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序 </span><br><span class="line">WM_IME_STARTCOMPOSITION = 0x010D; // </span><br><span class="line">WM_IME_ENDCOMPOSITION = 0x010E; // </span><br><span class="line">WM_IME_COMPOSITION = 0x010F; // </span><br><span class="line">WM_IME_KEYLAST = 0x010F; // </span><br><span class="line">WM_IME_SETCONTEXT = 0x0281; // </span><br><span class="line">WM_IME_NOTIFY = 0x0282; // </span><br><span class="line">WM_IME_CONTROL = 0x0283; // </span><br><span class="line">WM_IME_COMPOSITIONFULL = 0x0284; // </span><br><span class="line">WM_IME_SELECT = 0x0285; // </span><br><span class="line">WM_IME_CHAR = 0x0286; // </span><br><span class="line">WM_IME_REQUEST = 0x0288; // </span><br><span class="line">WM_IME_KEYDOWN = 0x0290; // </span><br><span class="line">WM_IME_KEYUP = 0x0291; // </span><br><span class="line">WM_MDICREATE = 0x0220; //应用程序发送此消息给多文档的客户窗口来创建一个MDI 子窗口 </span><br><span class="line">WM_MDIDESTROY = 0x0221; //应用程序发送此消息给多文档的客户窗口来关闭一个MDI 子窗口 </span><br><span class="line">WM_MDIACTIVATE = 0x0222; //应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个MDI子窗口，当客户窗口收到 </span><br><span class="line">//此消息后，它发出WM_MDIACTIVE消息给MDI子窗口（未激活）激活它； </span><br><span class="line">WM_MDIRESTORE = 0x0223; //程序发送此消息给MDI客户窗口让子窗口从最大最小化恢复到原来大小 </span><br><span class="line">WM_MDINEXT = 0x0224; //程序发送此消息给MDI客户窗口激活下一个或前一个窗口 </span><br><span class="line">WM_MDIMAXIMIZE = 0x0225; //程序发送此消息给MDI客户窗口来最大化一个MDI子窗口； </span><br><span class="line">WM_MDITILE = 0x0226; //程序发送此消息给MDI客户窗口以平铺方式重新排列所有MDI子窗口 </span><br><span class="line">WM_MDICASCADE = 0x0227; //程序发送此消息给MDI客户窗口以层叠方式重新排列所有MDI子窗口 </span><br><span class="line">WM_MDIICONARRANGE = 0x0228; //程序发送此消息给MDI客户窗口重新排列所有最小化的MDI子窗口 </span><br><span class="line">WM_MDIGETACTIVE = 0x0229; //程序发送此消息给MDI客户窗口来找到激活的子窗口的句柄 </span><br><span class="line">WM_MDISETMENU = 0x0230; //程序发送此消息给MDI客户窗口用MDI菜单代替子窗口的菜单 </span><br><span class="line">WM_ENTERSIZEMOVE = 0x0231; // </span><br><span class="line">WM_EXITSIZEMOVE = 0x0232; // </span><br><span class="line">WM_DROPFILES = 0x0233; // </span><br><span class="line">WM_MDIREFRESHMENU = 0x0234; // </span><br><span class="line">WM_MOUSEHOVER = 0x02A1; // </span><br><span class="line">WM_MOUSELEAVE = 0x02A3; // </span><br><span class="line">WM_CUT = 0x0300; //程序发送此消息给一个编辑框或combobox来删除当前选择的文本 </span><br><span class="line">WM_COPY = 0x0301; //程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板 </span><br><span class="line">WM_PASTE = 0x0302; //程序发送此消息给editcontrol或combobox从剪贴板中得到数据 </span><br><span class="line">WM_CLEAR = 0x0303; //程序发送此消息给editcontrol或combobox清除当前选择的内容； </span><br><span class="line">WM_UNDO = 0x0304; //程序发送此消息给editcontrol或combobox撤消最后一次操作 </span><br><span class="line">WM_RENDERformAT = 0x0305; // </span><br><span class="line">WM_RENDERALLformATS = 0x0306; // </span><br><span class="line">WM_DESTROYCLIPBOARD = 0x0307; //当调用ENPTYCLIPBOARD函数时发送此消息给剪贴板的所有者 </span><br><span class="line">WM_DRAWCLIPBOARD = 0x0308; //当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口；它允许用剪贴板观察窗口来 </span><br><span class="line">//显示剪贴板的新内容； </span><br><span class="line">WM_PAINTCLIPBOARD = 0x0309; //当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区需要重画； </span><br><span class="line">WM_VSCROLLCLIPBOARD = 0x030A; // </span><br><span class="line">WM_SIZECLIPBOARD = 0x030B; //当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区域的大小已经改变是此消息通过剪贴板观察窗口发送给剪贴板的所有者； </span><br><span class="line">WM_ASKCBformATNAME = 0x030C; //通过剪贴板观察窗口发送此消息给剪贴板的所有者来请求一个CF_OWNERDISPLAY格式的剪贴板的名字 </span><br><span class="line">WM_CHANGECBCHAIN = 0x030D; //当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口； </span><br><span class="line">WM_HSCROLLCLIPBOARD = 0x030E; // </span><br><span class="line">//此消息通过一个剪贴板观察窗口发送给剪贴板的所有者；它发生在当剪贴板包含CFOWNERDISPALY格式的数据并且有个事件在剪贴板观察窗的水平滚动条上；所有者应滚动剪贴板图象并更新滚动条的值； </span><br><span class="line">WM_QUERYNEWPALETTE = 0x030F; //此消息发送给将要收到焦点的窗口，此消息能使窗口在收到焦点时同时有机会实现他的逻辑调色板 </span><br><span class="line">WM_PALETTEISCHANGING = 0x0310; //当一个应用程序正要实现它的逻辑调色板时发此消息通知所有的应用程序 </span><br><span class="line">WM_PALETTECHANGED = 0x0311; //此消息在一个拥有焦点的窗口实现它的逻辑调色板后发送此消息给所有顶级并重叠的窗口，以此 </span><br><span class="line">//来改变系统调色板 </span><br><span class="line">WM_HOTKEY = 0x0312; //当用户按下由REGISTERHOTKEY函数注册的热键时提交此消息 </span><br><span class="line">WM_PRINT = 791; //应用程序发送此消息仅当WINDOWS或其它应用程序发出一个请求要求绘制一个应用程序的一部分； </span><br><span class="line">WM_PRINTCLIENT = 792; // </span><br><span class="line">WM_HANDHELDFIRST = 856; // </span><br><span class="line">WM_HANDHELDLAST = 863; // </span><br><span class="line">WM_PENWINFIRST = 0x0380; // </span><br><span class="line">WM_PENWINLAST = 0x038F; // </span><br><span class="line">WM_COALESCE_FIRST = 0x0390; // </span><br><span class="line">WM_COALESCE_LAST = 0x039F; // </span><br><span class="line">WM_DDE_FIRST = 0x03E0; // </span><br><span class="line">WM_DDE_INITIATE = WM_DDE_FIRST + 0; //一个DDE客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名； </span><br><span class="line">WM_DDE_TERMINATE = WM_DDE_FIRST + 1; //一个DDE应用程序（无论是客户还是服务器）提交此消息来终止一个会话； </span><br><span class="line">WM_DDE_ADVISE = WM_DDE_FIRST + 2; //一个DDE客户程序提交此消息给一个DDE服务程序来请求服务器每当数据项改变时更新它 </span><br><span class="line">WM_DDE_UNADVISE = WM_DDE_FIRST + 3; //一个DDE客户程序通过此消息通知一个DDE服务程序不更新指定的项或一个特殊的剪贴板格式的项 </span><br><span class="line">WM_DDE_ACK = WM_DDE_FIRST + 4; //此消息通知一个DDE（动态数据交换）程序已收到并正在处理WM_DDE_POKE, WM_DDE_EXECUTE, WM_DDE_DATA, WM_DDE_ADVISE, WM_DDE_UNADVISE, or WM_DDE_INITIAT消息 </span><br><span class="line">WM_DDE_DATA = WM_DDE_FIRST + 5; //一个DDE服务程序提交此消息给DDE客户程序来传递个一数据项给客户或通知客户的一条可用数据项 </span><br><span class="line">WM_DDE_REQUEST = WM_DDE_FIRST + 6; //一个DDE客户程序提交此消息给一个DDE服务程序来请求一个数据项的值； </span><br><span class="line">WM_DDE_POKE = WM_DDE_FIRST + 7; //一个DDE客户程序提交此消息给一个DDE服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项；服务器通过答复WM_DDE_ACK消息提示是否它接收这个数据项； </span><br><span class="line">WM_DDE_EXECUTE = WM_DDE_FIRST + 8; //一个DDE客户程序提交此消息给一个DDE服务程序来发送一个字符串给服务器让它象串行命令一样被处理，服务器通过提交WM_DDE_ACK消息来作回应； </span><br><span class="line">WM_DDE_LAST = WM_DDE_FIRST + 8; // </span><br><span class="line">WM_APP = 0x8000; // </span><br><span class="line">WM_USER = 0x0400; //此消息能帮助应用程序自定义私有消息；</span><br><span class="line"></span><br><span class="line">///////////////////////////////////////////////////////////////////// </span><br><span class="line">//通知消息(Notification message)是指这样一种消息，一个窗口内的子控件发生了一些事情，需要通 </span><br><span class="line">//知父窗口。通知消息只适用于标准的窗口控件如按钮、列表框、组合框、编辑框，以及Windows 95公 </span><br><span class="line">//共控件如树状视图、列表视图等。例如，单击或双击一个控件、在控件中选择部分文本、操作控件的 </span><br><span class="line">//滚动条都会产生通知消息。</span><br><span class="line"></span><br><span class="line">//按扭 </span><br><span class="line">BN_CLICKED //用户单击了按钮 </span><br><span class="line">BN_DISABLE //按钮被禁止 </span><br><span class="line">BN_DOUBLECLICKED //用户双击了按钮 </span><br><span class="line">BN_HILITE //用户加亮了按钮 </span><br><span class="line">BN_PAINT //按钮应当重画 </span><br><span class="line">BN_UNHILITE //加亮应当去掉</span><br><span class="line">////组合框 </span><br><span class="line">CBN_CLOSEUP //组合框的列表框被关闭 </span><br><span class="line">CBN_DBLCLK //用户双击了一个字符串 </span><br><span class="line">CBN_DROPDOWN //组合框的列表框被拉出 </span><br><span class="line">CBN_EDITCHANGE //用户修改了编辑框中的文本 </span><br><span class="line">CBN_EDITUPDATE //编辑框内的文本即将更新 </span><br><span class="line">CBN_ERRSPACE //组合框内存不足 </span><br><span class="line">CBN_KILLFOCUS //组合框失去输入焦点 </span><br><span class="line">CBN_SELCHANGE //在组合框中选择了一项 </span><br><span class="line">CBN_SELENDCANCEL //用户的选择应当被取消 </span><br><span class="line">CBN_SELENDOK //用户的选择是合法的 </span><br><span class="line">CBN_SETFOCUS //组合框获得输入焦点</span><br><span class="line">////编辑框 </span><br><span class="line">EN_CHANGE //编辑框中的文本己更新 </span><br><span class="line">EN_ERRSPACE //编辑框内存不足 </span><br><span class="line">EN_HSCROLL //用户点击了水平滚动条 </span><br><span class="line">EN_KILLFOCUS //编辑框正在失去输入焦点 </span><br><span class="line">EN_MAXTEXT //插入的内容被截断 </span><br><span class="line">EN_SETFOCUS //编辑框获得输入焦点 </span><br><span class="line">EN_UPDATE //编辑框中的文本将要更新 </span><br><span class="line">EN_VSCROLL //用户点击了垂直滚动条消息含义</span><br><span class="line"></span><br><span class="line">//    //列表框 </span><br><span class="line">LBN_DBLCLK //用户双击了一项 </span><br><span class="line">LBN_ERRSPACE //列表框内存不够 </span><br><span class="line">LBN_KILLFOCUS //列表框正在失去输入焦点 </span><br><span class="line">LBN_SELCANCEL //选择被取消 </span><br><span class="line">LBN_SELCHANGE //选择了另一项 </span><br><span class="line">LBN_SETFOCUS //列表框获得输入焦点</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aardio-多窗口变量传递</title>
      <link href="/posts/2024/08/6d96ec79.html"/>
      <url>/posts/2024/08/6d96ec79.html</url>
      
        <content type="html"><![CDATA[<p>aardio多窗口交互的方法</p><p>将窗体对象赋值到全局变量，就可以在其他代码文件中直接使用了。例如主窗体我们一般这样写：<br><code>mainForm = win.form(text=&quot;使用选项卡控件&quot;;right=599;bottom=399)</code><br>注意一个程序中只有主窗体命名为 mainForm 。</p><p>但大多时候，我们应当把其他窗体对象赋值以局部变量，例如：<br><code>var frmTabPage1 = win.form(text=&quot;选项卡的子窗口&quot;;right=599;bottom=399)</code><br>上面的 var 语句声明一个局部变量 - 局部变量限制了他的作用域在定义他的语句块中生效，不能在其他文件中访问该局部变量。</p><p>实际上全局变量要少用，全局的窗体对象更应该少用，每个窗体应当保持独立性。打个比方，一个程序小象一个小世界，各个子窗口就象各个小国家，国家之间要保持一定的独立性，国家与国家之间有什么事儿要沟通 - 你不能直接随意的冲过国界跑来跑去的玩儿（大家都这样搞，就象各个窗体的控件都这样搞，程序就会变的很混乱），你得经过外交部门。这个外交部门，在我们写程序的时候来讲，我们可以用以下几种方式来实现：</p><p>方式1、直接在 main.aardio 中创建全局变量，例如 main.aardio代码如下：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win.ui;</span><br><span class="line">/*DSG&#123;&#123;*/</span><br><span class="line">mainForm = win.form(text=&quot;使用选项卡控件&quot;;right=599;bottom=399)</span><br><span class="line">mainForm.add(tab=&#123;cls=&quot;tab&quot;;left=23;top=20;right=568;bottom=373;edge=1;z=1&#125;)</span><br><span class="line">/*&#125;&#125;*/</span><br><span class="line"> </span><br><span class="line">frmTabPage1 = mainForm.tab.loadForm(&quot;\res\frmTabPage1.aardio&quot;);</span><br><span class="line">frmTabPage2 = mainForm.tab.loadForm(&quot;\res\frmTabPage2.aardio&quot;);</span><br><span class="line"> </span><br><span class="line">myUserInfo = &#123; </span><br><span class="line">    username = &quot;&quot; ;//frmTabPage1.editUsername.text 的值</span><br><span class="line">    passeword = &quot;&quot; ;//frmTabPage1.editPassword.text 的值</span><br><span class="line">    webSite = &quot;&quot; ;//frmTabPage2.editWebsit.text 的值</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">mainForm.show()  </span><br><span class="line">当然全局变量是所有加载的窗体可以直接访问的，例如在/res/frmTabPage1.aau中可以这样写：</span><br><span class="line">frmTabPage1.editUsername.oncommand = function(id,event)&#123;</span><br><span class="line">    if( event = 0x300/*_EN_CHANGE*/ )&#123;</span><br><span class="line">        myUserInfo.username = frmTabPage1.editUsername.text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2、公用类库的方式，例如我们新建一个用户库 叫 myUserInfo，里面的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">namespace myUserInfo&#123;</span><br><span class="line">    username = &quot;&quot; ;//frmTabPage1.editUsername.text 的值</span><br><span class="line">    passeword = &quot;&quot; ;//frmTabPage1.editPassword.text 的值</span><br><span class="line">    webSite = &quot;&quot; ;//frmTabPage2.editWebsit.text 的值</span><br><span class="line">&#125;</span><br><span class="line">那么在 /res/frmTabPage1.aardio 这个文件里就可以这么写，在修改文本框的时候及时更新公用的数据：</span><br><span class="line">import myUserInfo;</span><br><span class="line">frmTabPage1.editUsername.oncommand = function(id,event)&#123;</span><br><span class="line">    if( event = 0x300/*_EN_CHANGE*/ )&#123;</span><br><span class="line">        myUserInfo.username = frmTabPage1.editUsername.text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他窗体要使用这个数据同样很简单，只要import myUserInfo; 就行了;</p><p>方式3、在控件值变更的时候调用 publish() 函数发布消息就行了，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">frmTabPage1.editUsername.oncommand = function(id,event)&#123;</span><br><span class="line">    if( event = 0x300/*_EN_CHANGE*/ )&#123;</span><br><span class="line">       publish(&quot;界面上的用户名被改了&quot;,frmTabPage1.editUsername.text)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其他窗体中就可以根据需要订阅此消息，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe(&quot;界面上的用户名被改了&quot;,function(值)&#123;</span><br><span class="line">    frmTabPage2.editUsername.text = 值</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><p><a href="/posts/2024/08/f47e1d33.html" title="示例代码:">示例代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> aardio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aardio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pod的preStop机制调用外部的httpapi并提交json参数</title>
      <link href="/posts/2023/03/40cea8fe.html"/>
      <url>/posts/2023/03/40cea8fe.html</url>
      
        <content type="html"><![CDATA[<p>在k8s里可以使用preStop钩子来调用外部的HTTP API，并且可以以JSON形式POST提交参数。<br>下面是一个使用preStop钩子来调用HTTP API的YAML示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: my-container</span><br><span class="line">    image: my-image</span><br><span class="line">    env:</span><br><span class="line">    - name: API_URL</span><br><span class="line">      value: &quot;http://example.com/api&quot;</span><br><span class="line">    - name: PARAMS_JSON</span><br><span class="line">      value: &#x27;&#123;&quot;param1&quot;:&quot;value1&quot;,&quot;param2&quot;:&quot;value2&quot;&#125;&#x27;</span><br><span class="line">    command: [&quot;sleep&quot;, &quot;3600&quot;]</span><br><span class="line">    lifecycle:</span><br><span class="line">      preStop:</span><br><span class="line">        exec:</span><br><span class="line">          command:</span><br><span class="line">          - &quot;/bin/sh&quot;</span><br><span class="line">          - &quot;-c&quot;</span><br><span class="line">          - &quot;curl -X POST -H &#x27;Content-Type: application/json&#x27; -d &#x27;$&#123;PARAMS_JSON&#125;&#x27; $&#123;API_URL&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span> <p>在上面的示例中，定义了一个名为my-container的容器，并设置了两个环境变量：API_URL和PARAMS_JSON。在PARAMS_JSON中，我们以JSON格式设置了要提交的参数。在preStop钩子中，我们使用curl命令来调用外部HTTP API，该API的URL和参数值都是从环境变量中获取的。</p><p>在容器即将停止之前，Kubernetes将执行preStop钩子中定义的命令。在本示例中，当Pod的生命周期结束时，将执行curl命令，并向<a href="http://example.com/api%E5%8F%91%E9%80%81POST%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%8F%82%E6%95%B0%E4%BB%A5JSON%E6%A0%BC%E5%BC%8F%E6%8F%90%E4%BA%A4%EF%BC%8CContent-Type%E8%AE%BE%E7%BD%AE%E4%B8%BAapplication/json%E3%80%82">http://example.com/api发送POST请求，参数以JSON格式提交，Content-Type设置为application/json。</a></p><p>请注意，上述示例仅供参考。实际上，你需要根据你的特定情况和需求进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift以闭包形式传递回调函数如何避免循环引用和内存泄漏</title>
      <link href="/posts/2023/03/c4ee8bc2.html"/>
      <url>/posts/2023/03/c4ee8bc2.html</url>
      
        <content type="html"><![CDATA[<p>在使用闭包作为回调函数时，可能会出现循环引用和内存泄漏的问题，因为闭包会捕获其所在的环境中的变量和对象。为了避免这些问题，可以采取以下措施：</p><ol><li> 使用捕获列表：在闭包定义时，使用捕获列表来显式地指定需要捕获的变量，并使用weak或unowned关键字来指定它们的引用类型。使用weak关键字可以避免循环引用，使用unowned关键字可以在可选类型安全的情况下避免循环引用。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; [weak self] in</span><br><span class="line">    self?.doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123; [unowned self] in</span><br><span class="line">    self.doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span> <ol start="2"><li> 手动解除循环引用：在需要释放闭包的时候，手动将闭包的引用置为nil，以解除循环引用。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var closure: (() -&gt; Void)? = &#123; [weak self] in</span><br><span class="line">    self?.doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closure?()</span><br><span class="line">closure = nil</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li> 将闭包放入自动释放池中：在某些情况下，可能需要将闭包放入自动释放池中，以便在适当的时候释放闭包的内存。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autoreleasepool &#123;</span><br><span class="line">    let closure = &#123; [weak self] in</span><br><span class="line">        self?.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    closure()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总之，在使用闭包作为回调函数时，需要注意避免循环引用和内存泄漏的问题，以确保代码的健壮性和性能。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>realmswift里怎么按多个字段排序</title>
      <link href="/posts/2023/03/b1059dbd.html"/>
      <url>/posts/2023/03/b1059dbd.html</url>
      
        <content type="html"><![CDATA[<p>在 Realmswift 中，可以使用 Realm 数据库的 sorted(by:) 方法按一个或多个字段对查询结果进行排序。</p><p>例如，如果您有一个 Person 模型，其中包含 firstName 和 lastName 字段，您可以按以下方式对查询结果进行排序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()</span><br><span class="line"></span><br><span class="line">let sortedResults = realm.objects(Person.self).sorted(by: [</span><br><span class="line">    SortDescriptor(keyPath: &quot;lastName&quot;, ascending: true),</span><br><span class="line">    SortDescriptor(keyPath: &quot;firstName&quot;, ascending: true)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><span id="more"></span> <p>在上面的示例中，我们使用 SortDescriptor 对象按 lastName 和 firstName 字段对结果进行排序。您可以根据需要添加任意数量的排序描述符，每个描述符代表一个字段，然后使用 sorted(by:) 方法将它们传递给查询。</p><p>请注意，排序字段的顺序很重要：首先按第一个排序字段排序，如果有多个元素具有相同的值，则按第二个排序字段排序，以此类推。在上面的示例中，我们首先按 lastName 进行排序，然后按 firstName 进行排序。如果您希望按不同的顺序对字段进行排序，请相应地更改排序描述符的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>realmswift实现A和B两个表之间内连接查询且使用B的字段排序</title>
      <link href="/posts/2023/03/e03c891c.html"/>
      <url>/posts/2023/03/e03c891c.html</url>
      
        <content type="html"><![CDATA[<p>以下是一个示例，展示如何使用RQL在Swift中执行内连接查询并按照关联对象B的属性进行排序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let realm = try! Realm()</span><br><span class="line"></span><br><span class="line">let results = realm.objects(Person.self)</span><br><span class="line">                  .filter(&quot;dogs.color == &#x27;brown&#x27;&quot;)</span><br><span class="line">                  .sorted(byKeyPath: &quot;dogs.age&quot;)</span><br><span class="line"></span><br><span class="line">for person in results &#123;</span><br><span class="line">    print(person.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span> <p>在此示例中，我们首先创建一个Realm对象，然后使用filter方法来过滤满足指定条件的Person对象。在这种情况下，我们使用RQL语法来检索所有具有棕色狗的Person对象。接下来，我们使用sorted(byKeyPath:)方法按照关联对象Dog的年龄属性对结果进行排序。在这个例子中，我们没有直接使用Dog对象，而是使用了Person对象的dogs属性来关联Dog对象。最后，我们迭代排序后的结果并打印每个Person对象的名称。</p><p>请注意，这个示例假设您已经定义了Person和Dog对象，并且它们之间有一个一对多的关系。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA编码规范规定单个方法的总行数不超过 80 行，怎么检查呢？</title>
      <link href="/posts/2023/02/d65af89d.html"/>
      <url>/posts/2023/02/d65af89d.html</url>
      
        <content type="html"><![CDATA[<p>可以使用静态代码分析工具来检查单个Java方法的总行数是否超过80行。以下是使用 PMD 工具来检查的示例步骤：</p><ol><li>下载和安装 PMD 工具。PMD 是一个免费的跨平台的静态代码分析工具，可以检查 Java 代码的质量和规范，包括代码行数等。</li><li>在命令行中输入以下命令来检查指定目录下的 Java 代码： <span id="more"></span>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pmd.bat -d &lt;directory&gt; -R rulesets/java/basic.xml -f text -r result.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure> 其中，<code>&lt;directory&gt;</code> 是需要检查的目录，<code>-R</code> 参数指定使用的规则集，<code>-f</code> 参数指定输出格式为文本，<code>-r</code> 参数指定输出结果保存到 result.txt 文件中。</li><li> 在规则集中添加一个规则来检查单个方法的总行数是否超过80行。可以使用 <code>NcssCount</code> 规则来检查方法长度是否超过规定的行数。</li></ol><p><code>注:ExcessiveMethodLength规则在PMD新版本中已废弃,替代规则为NcssCount，参考链接：https://pmd.github.io/latest/pmd_rules_java_design.html#ncsscount</code></p><pre><code>在 basic.xml 文件中添加以下代码：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;ruleset name=&quot;PHPMD rule set for my project&quot; xmlns=&quot;http://pmd.sf.net/ruleset/1.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd&quot;</span><br><span class="line">         xsi:noNamespaceSchemaLocation=&quot;http://pmd.sf.net/ruleset_xml_schema.xsd&quot;&gt;</span><br><span class="line">    &lt;description&gt;Custom rules for checking my project&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;category/java/design.xml/NcssCount&quot;&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;property name=&quot;methodReportLevel&quot; value=&quot;80&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;classReportLevel&quot; value=&quot;1500&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;ncssOptions&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/rule&gt;</span><br><span class="line">&lt;/ruleset&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>该规则会检查方法的行数是否超过80行，并输出警告信息。</code></pre><ol start="4"><li> 运行命令来检查 Java 代码，并查看输出结果文件 result.txt。如果有方法的行数超过了80行，将会输出警告信息。可以通过这种方式来检查 Java 代码中是否有单个方法的总行数超过80行的情况。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift在uitextview中横向触摸时触发触摸监听但是在竖向滑动时不触发</title>
      <link href="/posts/2023/02/1f5a362b.html"/>
      <url>/posts/2023/02/1f5a362b.html</url>
      
        <content type="html"><![CDATA[<p>要实现在UITextView中横向触摸时触发UITapGestureRecognizer监听但是在竖向滑动时不触发UITapGestureRecognizer，您可以结合使用UIGestureRecognizerDelegate和UIScrollViewDelegate来实现。</p><p>首先，您需要将UITextView的isScrollEnabled属性设置为false，以防止滑动视图时触发手势识别事件。然后，您可以通过实现UIGestureRecognizerDelegate协议中的gestureRecognizer(_:shouldReceive:)方法来控制手势识别器是否应该接受触摸事件。在这个方法中，您可以检查手势的方向，并根据方向返回true或false，以告诉手势识别器是否应该接受该触摸事件。</p><p>接下来，您需要使用UIScrollViewDelegate协议中的scrollViewDidScroll(_:)方法来检查滚动视图的滚动方向。在这个方法中，您可以检查滚动视图的滚动方向，并将手势识别器的isEnabled属性设置为true或false，以启用或禁用手势识别器。</p><span id="more"></span> <p>下面是一个示例代码，演示了如何在UITextView中实现此功能：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyViewController: UIViewController, UIGestureRecognizerDelegate, UIScrollViewDelegate &#123;</span><br><span class="line">    @IBOutlet weak var myTextView: UITextView!</span><br><span class="line">    let tapGesture = UITapGestureRecognizer()</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        // 设置tapGesture</span><br><span class="line">        tapGesture.delegate = self</span><br><span class="line">        tapGesture.addTarget(self, action: #selector(handleTap(_:)))</span><br><span class="line">        myTextView.addGestureRecognizer(tapGesture)</span><br><span class="line">        // 禁用UITextView的滚动</span><br><span class="line">        myTextView.isScrollEnabled = false</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 手势识别器委托方法</span><br><span class="line">    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -&gt; Bool &#123;</span><br><span class="line">        let velocity = touch.velocity(in: myTextView)</span><br><span class="line">        return abs(velocity.x) &gt; abs(velocity.y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 滚动视图委托方法</span><br><span class="line">    func scrollViewDidScroll(_ scrollView: UIScrollView) &#123;</span><br><span class="line">        tapGesture.isEnabled = scrollView.contentOffset.y == 0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 处理tapGesture的方法</span><br><span class="line">    @objc func handleTap(_ gestureRecognizer: UITapGestureRecognizer) &#123;</span><br><span class="line">        // 处理tapGesture事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们首先将UITextView的isScrollEnabled属性设置为false，以禁用滚动。然后，我们使用UIGestureRecognizerDelegate协议中的gestureRecognizer(_:shouldReceive:)方法来检查手势的方向，并根据方向返回true或false，以告诉手势识别器是否应该接受该触摸事件。</p><p>最后，我们使用UIScrollViewDelegate协议中的scrollViewDidScroll(_:)方法来检查滚动视图的滚动方向，并将手势识别器的isEnabled属性设置为true或false，以启用或禁用手势识别器。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift怎么判断一个UIDynamicSystemColor是不是指定颜色</title>
      <link href="/posts/2023/02/cf12d257.html"/>
      <url>/posts/2023/02/cf12d257.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UIDynamicSystemColor是attributeString里字体的前景色或者背景色</span><br></pre></td></tr></table></figure><p>在 Swift 中，可以使用 UIColor 的 isEqual(_:) 方法来比较两个颜色是否相等。如果要判断一个 UIDynamicSystemColor 是否为白色，可以将其转换为 UIColor，然后将其与 UIColor.white 进行比较。</p><p>以下是示例代码：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if let dynamicColor = someDynamicColor as? UIColor &#123;</span><br><span class="line">    if dynamicColor.isEqual(UIColor.white) &#123;</span><br><span class="line">        // dynamicColor 是白色</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // dynamicColor 不是白色</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // someDynamicColor 不是 UIColor 类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，首先将 <code>someDynamicColor</code> 强制转换为 <code>UIColor</code> 类型。如果转换成功，就可以使用 <code>isEqual(_:)</code> 方法将其与 <code>UIColor.white</code> 进行比较。如果 <code>dynamicColor</code> 是白色，就会执行 <code>// dynamicColor 是白色</code> 中的代码，否则执行 <code>// dynamicColor 不是白色</code> 中的代码。如果 <code>someDynamicColor</code> 不是 <code>UIColor</code> 类型，就会执行 <code>// someDynamicColor 不是 UIColor 类型</code> 中的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift中realm数据库怎么保存attributedString类型数据</title>
      <link href="/posts/2023/02/1cb33b38.html"/>
      <url>/posts/2023/02/1cb33b38.html</url>
      
        <content type="html"><![CDATA[<p>Realm 数据库原生不支持直接存储 NSAttributedString 类型数据，因为 NSAttributedString 类型是一个复杂的对象，由多个属性组成，无法直接映射到数据库的基本数据类型中。但是，您可以使用一些技巧来存储 NSAttributedString 类型的数据。</p><p>一种方法是将 NSAttributedString 对象转换为 NSData 类型，再将 NSData 对象存储到 Realm 数据库中。在这种情况下，您需要使用 NSKeyedArchiver 和 NSKeyedUnarchiver 将 NSAttributedString 对象转换为 NSData 对象，并在需要时将其解档为 NSAttributedString 对象。以下是一个示例：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Note: Object &#123;</span><br><span class="line">    @Persisted var textData: Data?</span><br><span class="line">    </span><br><span class="line">    var text: NSAttributedString? &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            guard let data = textData else &#123; return nil &#125;</span><br><span class="line">            return try? NSKeyedUnarchiver.unarchivedObject(ofClass: NSAttributedString.self, from: data)</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            if let newValue = newValue &#123;</span><br><span class="line">                textData = try? NSKeyedArchiver.archivedData(withRootObject: newValue, requiringSecureCoding: false)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                textData = nil</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个名为 Note 的 Realm 对象，其中包含一个名为 textData 的属性，用于存储 NSAttributedString 对象的 NSData 表示。我们还为 Note 对象定义了一个名为 text 的计算属性，用于获取和设置 textData 属性。当设置 text 属性时，我们使用 NSKeyedArchiver 将 NSAttributedString 对象转换为 NSData 对象，并将其存储在 textData 属性中。当获取 text 属性时，我们使用 NSKeyedUnarchiver 将 textData 属性中的 NSData 对象转换回 NSAttributedString 对象。</p><p>另一个方法是使用 Realm 的 LinkingObjects 关系来存储 NSAttributedString 类型数据。在这种情况下，您需要创建一个单独的 Realm 对象来存储 NSAttributedString 对象，并将其与包含 Note 对象的 Realm 对象建立链接。以下是一个示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Note: Object &#123;</span><br><span class="line">    @Persisted var textObject: NSAttributedStringObject?</span><br><span class="line">    var text: NSAttributedString? &#123;</span><br><span class="line">        get &#123; return textObject?.text &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            if let newValue = newValue &#123;</span><br><span class="line">                if let textObject = textObject &#123;</span><br><span class="line">                    try! realm.write &#123;</span><br><span class="line">                        textObject.text = newValue</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    let textObject = NSAttributedStringObject(value: [&quot;text&quot;: newValue])</span><br><span class="line">                    try! realm.write &#123;</span><br><span class="line">                        realm.add(textObject)</span><br><span class="line">                        textObject.note = self</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if let textObject = textObject &#123;</span><br><span class="line">                    try! realm.write &#123;</span><br><span class="line">                        realm.delete(textObject)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class NSAttributedStringObject: Object &#123;</span><br><span class="line">    @Persisted var textData: Data?</span><br><span class="line">    var text: NSAttributedString? &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            guard let data = textData else &#123; return nil &#125;</span><br><span class="line">            return try? NSKeyedUnarchiver.unarchivedObject(ofClass: NSAttributedString.self, from: data)</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            if let newValue = newValue &#123;</span><br><span class="line">                textData = try? NSKeyedArchiver.archivedData(withRootObject: newValue, requiringSecureCoding: false)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">               </span><br><span class="line">            textData = nil</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Persisted(originProperty: &quot;notes&quot;) var note: LinkingObjects&lt;Note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了两个 Realm 对象：<code>Note</code> 和 <code>NSAttributedStringObject</code>。<code>Note</code> 对象包含一个名为 <code>textObject</code> 的属性，它是一个指向 <code>NSAttributedStringObject</code> 对象的链接。<code>NSAttributedStringObject</code> 对象包含一个名为 <code>textData</code> 的属性，它用于存储 NSAttributedString 对象的 NSData 表示，并包含一个名为 <code>note</code> 的 LinkingObjects 关系，它用于获取与当前 <code>NSAttributedStringObject</code> 对象相关联的所有 <code>Note</code> 对象。</p><p>当设置 <code>text</code> 属性时，我们首先检查是否已经存在一个 <code>NSAttributedStringObject</code> 对象。如果存在，则更新 <code>textData</code> 属性的值。如果不存在，则创建一个新的 <code>NSAttributedStringObject</code> 对象，并将其与当前 <code>Note</code> 对象建立链接。当获取 <code>text</code> 属性时，我们从 <code>textObject</code> 属性获取与当前 <code>Note</code> 对象相关联的 <code>NSAttributedStringObject</code> 对象，并从 <code>textData</code> 属性中获取 NSAttributedString 对象的值。</p><p>请注意，这只是一些示例技巧，您可以根据您的具体需求来使用它们。当存储复杂的数据类型时，一定要仔细考虑数据库结构和数据访问模式。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Realm </tag>
            
            <tag> RealmSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift选择文件的回调函数 documentPicker的文件处理逻辑过程中无法更新主界面？</title>
      <link href="/posts/2023/02/ebbc3f45.html"/>
      <url>/posts/2023/02/ebbc3f45.html</url>
      
        <content type="html"><![CDATA[<p>原因在于在Swift中获取文件权限的startAccessingSecurityScopedResource会阻塞当前线程。</p><p>startAccessingSecurityScopedResource 是 Swift 中用于访问安全范围资源（Security-Scoped Resources）的方法。它的作用是向系统请求权限来访问一个特定的安全范围资源，并返回一个布尔值来表示是否成功获取权限。</p><p>在使用 startAccessingSecurityScopedResource 时，如果成功获取权限，则可以访问安全范围内的文件或文件夹。但是需要注意的是，由于该方法会触发一个权限请求窗口，所以会阻塞当前线程，直到用户授权或拒绝请求。因此，如果你在主线程中使用该方法，它可能会阻塞主线程并使应用程序变得不响应。</p><span id="more"></span> <p>为了避免这种情况，可以将 startAccessingSecurityScopedResource 方法放在一个后台线程中执行，或者在必要时使用异步执行。例如，你可以使用 DispatchQueue.global().async 将该方法放在一个后台线程中执行。这样，即使在获取权限时阻塞了线程，也不会影响主线程的响应性。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用WKWebview加载html字符串完成后如何动态替换其中一部分内容？</title>
      <link href="/posts/2023/02/63ef1274.html"/>
      <url>/posts/2023/02/63ef1274.html</url>
      
        <content type="html"><![CDATA[<p>可以使用 WKWebView 的 evaluateJavaScript 方法来替换已经加载的 HTML 字符串中的部分内容。</p><p>具体来说，你可以先用 WKWebView 的 loadHTMLString 方法加载一个 HTML 字符串，然后在加载完成后，再用 evaluateJavaScript 方法来修改其中的内容。</p><p>下面是一个示例代码，其中使用了 jQuery 库来查找并替换 HTML 内容：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import WebKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController, WKNavigationDelegate &#123;</span><br><span class="line">    var webView: WKWebView!</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        // 创建 WKWebView</span><br><span class="line">        let configuration = WKWebViewConfiguration()</span><br><span class="line">        webView = WKWebView(frame: view.bounds, configuration: configuration)</span><br><span class="line">        webView.navigationDelegate = self</span><br><span class="line">        view.addSubview(webView)</span><br><span class="line"></span><br><span class="line">        // 加载 HTML 字符串</span><br><span class="line">        let htmlString = &quot;&quot;&quot;</span><br><span class="line">            &lt;html&gt;</span><br><span class="line">            &lt;body&gt;</span><br><span class="line">            &lt;h1 id=&quot;title&quot;&gt;Hello, World!&lt;/h1&gt;</span><br><span class="line">            &lt;p id=&quot;content&quot;&gt;This is a sample HTML string.&lt;/p&gt;</span><br><span class="line">            &lt;/body&gt;</span><br><span class="line">            &lt;/html&gt;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        webView.loadHTMLString(htmlString, baseURL: nil)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) &#123;</span><br><span class="line">        // 使用 jQuery 查找并替换 HTML 内容</span><br><span class="line">        let script = &quot;&quot;&quot;</span><br><span class="line">            $(&#x27;#title&#x27;).text(&#x27;New Title&#x27;);</span><br><span class="line">            $(&#x27;#content&#x27;).text(&#x27;New Content&#x27;);</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        webView.evaluateJavaScript(script, completionHandler: nil)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例代码中，首先创建了一个 WKWebView，并使用 loadHTMLString 方法加载了一个 HTML 字符串。在 WKWebView 的 didFinish 回调方法中，使用 evaluateJavaScript 方法执行了一个 JavaScript 脚本，该脚本使用 jQuery 查找了 HTML 中的标题和内容，并将它们替换为新的标题和内容。</p><p>当 WKWebView 执行完 JavaScript 脚本后，它会自动更新显示的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift在UITextView上怎么实现滑动触摸到的文字颜色变得和背景颜色一样?</title>
      <link href="/posts/2023/02/250efe97.html"/>
      <url>/posts/2023/02/250efe97.html</url>
      
        <content type="html"><![CDATA[<p>要在 UITextView 上实现滑动触摸到的文字颜色变得和背景颜色一样的效果，可以考虑以下步骤：</p><p>给 UITextView 添加一个 UIPanGestureRecognizer 手势，以便接收用户的滑动事件。</p><p>在 UIPanGestureRecognizer 的回调方法中，获取用户当前滑动的位置，并通过 UITextView 的 layoutManager 将这个位置转换为对应的文本位置。</p><p>根据文本位置获取到对应的字符，并将这个字符的前景色设置为和背景色一样的颜色，实现滑动触摸到的文字颜色变得和背景颜色一样的效果。</p><p>下面是一个简单的实现示例代码，可以参考一下：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">    @IBOutlet weak var textView: UITextView!</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        // 添加 UIPanGestureRecognizer 手势</span><br><span class="line">        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))</span><br><span class="line">        textView.addGestureRecognizer(panGesture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @objc func handlePan(_ gesture: UIPanGestureRecognizer) &#123;</span><br><span class="line">        let location = gesture.location(in: textView)</span><br><span class="line"></span><br><span class="line">        switch gesture.state &#123;</span><br><span class="line">        case .changed:</span><br><span class="line">            // 将触摸位置转换为文本位置</span><br><span class="line">            if let textPosition = textView.closestPosition(to: location) &#123;</span><br><span class="line">                // 获取对应的字符</span><br><span class="line">                let range = NSRange(location: textView.offset(from: textView.beginningOfDocument, to: textPosition), length: 1)</span><br><span class="line">                let attributes = textView.textStorage.attributes(at: range.location, effectiveRange: nil)</span><br><span class="line"></span><br><span class="line">                // 将字符的前景色设置为和背景色一样的颜色</span><br><span class="line">                if let backgroundColor = attributes[NSAttributedString.Key.backgroundColor] as? UIColor &#123;</span><br><span class="line">                    let foregroundColor = backgroundColor.withAlphaComponent(1)</span><br><span class="line">                    textView.textStorage.addAttributes([NSAttributedString.Key.foregroundColor: foregroundColor], range: range)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        case .ended, .cancelled:</span><br><span class="line">            // 恢复所有字符的前景色</span><br><span class="line">            let range = NSRange(location: 0, length: textView.text.count)</span><br><span class="line">            textView.textStorage.removeAttribute(NSAttributedString.Key.foregroundColor, range: range)</span><br><span class="line">        default:</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助 ChatGPT 挣点房贷钱</title>
      <link href="/posts/2023/02/e64bf21.html"/>
      <url>/posts/2023/02/e64bf21.html</url>
      
        <content type="html"><![CDATA[<p>前两天说了 ChatGPT 的事情，然后就看到有留言说，能否聊下普通人怎么利用好这个风口挣点房贷钱？  </p><p><strong><em>1、</em></strong></p><p><strong>利用 ChatGPT 赚钱可以吗？</strong></p><p>利用 ChatGPT 赚钱当然没问题，但问题是，如果在  ChatGPT 很火的情况下，你才想到说能不能利用这个赚钱，说明你对商业对赚钱机会的敏感度不够。</p><p>年前的时候，就 ChatGPT 我还写了一篇文章，那篇文章是用  ChatGPT 自动生成的，那个时候，ChatGPT 就已经在互联网圈小火一把了，真下场入局赚钱，应该在那个时候就开始布局。</p><p>我记得当时我们还搞了一个 ChatGPT 机会讨论群，一开始了解的人还不多，群也就两三百人，但大家都很有热情，各种分享讨论。但慢慢地，群就冷清了，也没什么人说话，直到最近，群又开始活跃起来了。</p><span id="more"></span> <p>为什么呢？因为过个年回来后，ChatGPT 彻底出圈了。在各大热榜上面，你会看到关于 ChatGPT 的相关讨论，在某乎上面，围绕 ChatGPT 的热议话题，一个接一个，甚至非互联网圈子的人，也都在争相讨论  ChatGPT 这个事物。</p><p>在我们这个  ChatGPT 机会讨论群里，过了一个多月，大家重新活跃的时候，你会发现，一切都不一样了。</p><p>用群里大家说的话就是，<strong>「一月偷偷成长，二月破圈收流量」</strong>。</p><p><strong><em>2、</em></strong></p><p><strong>ChatGPT</strong> <strong>早期的玩法</strong></p><p>早期 ChatGPT 刚火的时候，根据我们跟球友的实操，总结下来，简单粗暴的赚钱玩法有以下几种：</p><p>1）卖账号</p><p>ChatGPT 对普通人来说还是有一定门槛的，所以为了降低门槛，有资源有能力的人，直接在淘宝、闲鱼、公众号等平台上出售账号，提供代注册服务等。</p><p>设置不同价位选项，主要提供 ChatGPT 成品账号和登录教程。做得牛逼的，一小时入账几万到几十万元不等，也有商家推出包月访问服务，会员数量可观淘宝月销几万单的，说就是从他那里拿货的。</p><p>不过<strong>现在出圈后，搞得人多了，相关管控也更加严了，相关词条已被平台屏蔽，你再搜已是「人走茶凉」的状态了。</strong></p><p>2）接入微信</p><p>这么做，同样是为了降低了普通人的使用门槛。有的人买不到账号怎么办？有人挖掘到这个需求，便会把它接到微信群里，供大家体验。</p><p>我们有个球友也这么搞过，一开始是免费的，但后面流量实在是太多了，就开始收费，比如 9.9 一个月，流量非常猛，全是自然流，你知道有多赚么？</p><p><strong>用他的话说就是，「每天一堆人等着付费」「最近都无心工作了」。</strong></p><p>然后大家会发现，不少人接入微信后出现账号被封的，这很正常，<strong>与内容相关的，一定要有内容风控意识。</strong></p><p>你接入直播弹幕什么的还好，平台会帮你过滤一些敏感词。但你接入了微信，拉进群里，用户什么敏感问题都问得出来，你说不封你封谁呢？</p><p>这里也提醒下大家，别再接入微信了，你号多不怕死那随便。</p><p>3）抢占注册关键词</p><p>比如下面这个小红书账号，我们注意到这个账号注册发帖子最早的才不到 5 天，粉丝数就破万了。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-175.png" alt=""> <p>小红书这个，还只是案例之一。举例只是想让大家更直观看到，那些早入场抢占注册各大平台关键词的，流量都搞爆了。</p><p>这也是为什么我常说的，要对信息敏感，对有热度的事情敏感。本质上就是因为它们造的势越大，我们借势的时候，才能实现更大效益。</p><p><strong>普通人想要做成事，一定要学会借势。</strong></p><p>至于流量有多重要，不用我多说，你也明白，流量就是金钱，直接关系你的变现。</p><p><strong><em>3、</em></strong></p><p><strong>ChatGPT</strong> <strong>延伸的作用</strong></p><p>搜 ChatGPT 的时候，出来的关联词基本跟「ChatGPT +**写作」挂钩。</p><p>有很大一部分花钱买账号体验 ChatGPT 的用户，他们的需求，大多是想用它来给自己完成「作业」。</p><p>比如大学生需要写论文，员工需要给领导写演讲稿，网文作家需要更新水文等等。</p><p>这些需求摆在这，有需求就有市场，别人就有赚钱的空间。</p><p>即便你觉得 ChatGPT 给出的内容不够惊艳，但对于这些「应付式作业」而言，虽不出彩，但不出错，这就够了。</p><p>再比如像一些开发小程序、接入弹幕等玩法也有很多，只是我说句直白的话，<strong>下场太晚的人，是很难赚到大钱的。</strong>你现在顶多跟在别人后面捡剩下的，别人吃肉，你喝点汤。</p><p><strong><em>4、</em></strong></p><p><strong>最后</strong></p><p>前面说了，涉及内容的东西，一定要有风控意识，而人工智能生成的内容，更需要考虑到内容的敏感性。</p><p>相关词屏蔽，相关账号封杀…这一系列举措，可以让我们看到，ChatGPT 身上，自带「敏感」特性。</p><p>不要幻想你能借助它随便生产内容了，但可以考虑接纳一个「规矩」的 AI 助手。</p><p>诸如企业规章制度、流程管理、职员所做的重复性文档类工作，都可以是 ChatGPT 的应用场景。 </p><p>不要担心会被  ChatGPT 取代，就目前而言， ChatGPT 还撼动不了人类的地位。</p><p>虽然人类本就没什么了不起的。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWIFT在导航栏多个按钮_SWIFT设置NAVIGATION左右两侧多个按钮</title>
      <link href="/posts/2023/01/85a91584.html"/>
      <url>/posts/2023/01/85a91584.html</url>
      
        <content type="html"><![CDATA[<p>IOS App开发难免会遇到导航栏右上角需要显示2个按钮的时候，今天就讲一下Swift在导航栏左侧或者右侧放置多个按钮例子，使用 navigationItem.leftBarButtonItem 和 navigationItem.rightBarButtonItem 可以很方便的分别设置导航栏左侧和右侧按钮，但一侧只能有一个按钮。如果想要在一侧使用多个按钮，可以通过 leftBarButtonItems 和 rightBarButtonItems 来实现。</p><p>设置按钮  </p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">override func viewDidLoad()&#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    </span><br><span class="line">    //navitem search 搜索按钮</span><br><span class="line">    let buttonSearch = UIButton.init(frame: CGRect.init(x: 0, y: 0, width: 20, height: 20))</span><br><span class="line">    buttonSearch.setImage(UIImage.init(named: &quot;home_navitem_search&quot;), for: UIControlState.normal)</span><br><span class="line">    buttonSearch.addTarget(self, action: #selector(navigationItemSearchAction), for: UIControlEvents.touchUpInside)</span><br><span class="line">    let barButtonSearch = UIBarButtonItem(customView: buttonSearch)</span><br><span class="line">    </span><br><span class="line">    //navitem 客服按钮</span><br><span class="line">    let buttonService = UIButton.init(frame: CGRect.init(x: 0, y: 0, width: 20, height: 20))</span><br><span class="line">    buttonService.setImage(UIImage.init(named: &quot;customer_service&quot;), for: UIControlState.normal)</span><br><span class="line">    buttonService.addTarget(self, action: #selector(navigationItemServiceAction), for: UIControlEvents.touchUpInside)</span><br><span class="line">    let barButtonService = UIBarButtonItem(customView: buttonService)</span><br><span class="line">    </span><br><span class="line">    //按钮间的空隙</span><br><span class="line">    let gap = UIBarButtonItem.init(barButtonSystemItem: UIBarButtonSystemItem.fixedSpace, target: nil, action: nil)</span><br><span class="line">    gap.width = 12;</span><br><span class="line">    </span><br><span class="line">    //用于消除右边边空隙，要不然按钮顶不到最边上</span><br><span class="line">    let spacer = UIBarButtonItem.init(barButtonSystemItem: UIBarButtonSystemItem.fixedSpace, target: nil, action: nil)</span><br><span class="line">    spacer.width = -5;</span><br><span class="line">    </span><br><span class="line">    //设置按钮（注意顺序）</span><br><span class="line">    self.navigationItem.rightBarButtonItems = [spacer, barButtonSearch, gap, barButtonService]</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>点击事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//搜索</span><br><span class="line">@objc func navigationItemSearchAction() &#123;</span><br><span class="line">    print(&quot;搜索按钮点击&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客服</span><br><span class="line">@objc func navigationItemServiceAction() &#123;</span><br><span class="line">    print(&quot;客服按钮点击&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 通过yum安装指定版本node</title>
      <link href="/posts/2022/12/14846d38.html"/>
      <url>/posts/2022/12/14846d38.html</url>
      
        <content type="html"><![CDATA[<p>之前Linux上的nodejs是通过yum安装的，但是最近发现版本太老了，没法使用。</p><p>解决方案：</p><p>卸载老版本</p><p>首先用yum卸载之前安装的nodejs</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">remove</span> nodejs npm -y</span><br></pre></td></tr></table></figure><p>之后再手动删除残留</p><span id="more"></span><p>进入 /usr/local/lib 删除所有 node 和 node_modules文件夹<br>进入 /usr/local/include 删除所有 node 和 node_modules 文件夹<br>进入 /usr/local/bin 删除 node 的可执行文件<br>安装新版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_14.x | bash -</span><br></pre></td></tr></table></figure><p>我需要的是nodejs14.x的版本，所以这里是setup_14.x</p><p>最后执行 <code>sudo yum -y install nodejs</code> 来安装nodejs</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用npm更新指定模块</title>
      <link href="/posts/2022/12/d8263636.html"/>
      <url>/posts/2022/12/d8263636.html</url>
      
        <content type="html"><![CDATA[<p>假如要更新json-schema-faker到最新版本</p><p>先查看最新版本号 <code>npm view json-schema-faker version</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# npm view json-schema-faker version</span><br><span class="line">0.5.0-rcv.46</span><br></pre></td></tr></table></figure><p>然后执行更新命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev json-schema-faker@0.5.0-rcv.46</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos下yum安装MongoDB并设置默认用户名密码</title>
      <link href="/posts/2022/12/4bbcaac9.html"/>
      <url>/posts/2022/12/4bbcaac9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容<br>1、安装MongoDB<br>2、添加MongoDB账户密码<br>3、创建数据库并授权</p></blockquote><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><p>1、创建repo仓库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-org-5.0.repo</span><br></pre></td></tr></table></figure><p>2、把下面的内容复制到文件中 保存退出</p><blockquote><p>[mongodb-org-5.0]<br>name=MongoDB 5.0 Repository<br>baseurl=<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/$basearch/">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/$basearch/</a><br>gpgcheck=1<br>enabled=1<br>gpgkey=<a href="https://www.mongodb.org/static/pgp/server-5.0.asc">https://www.mongodb.org/static/pgp/server-5.0.asc</a></p></blockquote><span id="more"></span><p>注意，上面的数字比如5.0可以替换成其他已有的版本号，参见</p><p>下面这个链接可以选择linux版本</p><p><a href="https://repo.mongodb.org/yum/redhat/" title="Index of redhat">Index of redhat</a></p><p>假设我是centos 7的</p><p><a href="https://repo.mongodb.org/yum/redhat/7Server/mongodb-org/" title="Index of mongodb-org">Index of mongodb-org</a></p><p>我可以选择3.4版本</p><p>3、yum安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c40f2d5f4a6f4acf95bed48d30295882.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfMzg3ODEwNzU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>警告：外网下载很慢 </p><p>然后发现下载很慢，我就把图中列出的rpm包手动下载了，然后删除掉前面创建的repo文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /etc/yum.repos.d/mongodb-org-5.0.repo</span><br></pre></td></tr></table></figure><p>我的linux是centos 7 ，我准备下载5.0的<a href="https://so.csdn.net/so/search?q=MongoDB&spm=1001.2101.3001.7020">MongoDB</a>，我从下面这个链接下载rpm</p><p><a href="https://repo.mongodb.org/yum/redhat/7Server/mongodb-org/5.0/x86_64/RPMS/" title="Index of RPMS">Index of RPMS</a></p><p><img src="https://img-blog.csdnimg.cn/7dfe2219f5c64c23982d8ffc6459fc6e.jpg"></p><p> 成功安装</p><p><img src="https://img-blog.csdnimg.cn/8a384a6d71a2417dab8b748a34c20773.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfMzg3ODEwNzU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> 4、修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>把bindIP改成 0.0.0.0所有的机器都可以访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindIp: 0.0.0.0 </span><br></pre></td></tr></table></figure><p>5、启动/关闭mogodb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mongod</span><br><span class="line">systemctl enable mongod</span><br></pre></td></tr></table></figure><p>6、有时候重启报错开机无法启动的问题，报错子进程启动失败</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown mongod:mongod /tmp/mongodb-27017.sock</span><br></pre></td></tr></table></figure><h2 id="添加账户密码"><a href="#添加账户密码" class="headerlink" title="添加账户密码"></a>添加账户密码</h2><p>1.切换到admin数据库 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo 127.0.0.1:27017</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.添加账户root,密码为123456</p><blockquote><p>db.createUser({ user: “root”, pwd: “123456”, roles: [{ role: “userAdminAnyDatabase”, db: “admin” }] })</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123; user: &quot;root&quot;, pwd: &quot;123456&quot;, roles: [&#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;] &#125;)</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">        &quot;user&quot; : &quot;root&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.修改/etc/mongod.conf文件, 增加配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><p>4.重启MongoDB服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mongod</span><br></pre></td></tr></table></figure><p>5.测试连接 bin/mongo 127.0.0.1:27017 切换到admin库并登录验证</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mongo 127.0.0.1:27017</span><br><span class="line">MongoDB shell version v5.0.14</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/test?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;576f7b36-6334-4b33-928f-a65bb3bbeebe&quot;) &#125;</span><br><span class="line">MongoDB server version: 5.0.14</span><br><span class="line">================</span><br><span class="line">Warning: the &quot;mongo&quot; shell has been superseded by &quot;mongosh&quot;,</span><br><span class="line">which delivers improved usability and compatibility.The &quot;mongo&quot; shell has been deprecated and will be removed in</span><br><span class="line">an upcoming release.</span><br><span class="line">For installation instructions, see</span><br><span class="line">https://docs.mongodb.com/mongodb-shell/install/</span><br><span class="line">================</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;root&quot;, &quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>创建超级用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;&quot;user&quot;:&quot;admin&quot;,&quot;pwd&quot;:&quot;123456&quot;,&quot;roles&quot;:[&quot;root&quot;]&#125;)</span><br></pre></td></tr></table></figure><h2 id="创建数据库并授权"><a href="#创建数据库并授权" class="headerlink" title="创建数据库并授权"></a>创建数据库并授权</h2><p>1、创建数据库</p><p>MongoDB通过命令<code>use 数据库名</code>创建数据库。如果数据库不存在，该命令将创建一个数据库，否则将返回已有数据库。</p><p>如果想使用名为<code>qapi</code>的数据库，可通过如下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use qapi</span><br><span class="line">switched to db qapi</span><br></pre></td></tr></table></figure><p>要检查当前数据库，可使用<code>db</code>命令：</p><p>如果要列出全部数据库，可使用<code>show dbs</code>命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure><p>您刚创建的数据库(mydb)不在列表中，空数据库不会显示，需要向其插入至少一个文档。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.site.insert(&#123;&quot;name&quot;:&quot;weiy&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">qapi    0.000GB</span><br></pre></td></tr></table></figure><p>2、直接在当前库中创建用户并授予相关权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use qapi</span><br><span class="line">&gt;db.grantRolesToUser(&quot;root&quot;, [ &#123; role:&quot;dbOwner&quot;, db:&quot;qapi&quot;&#125;]);</span><br></pre></td></tr></table></figure><p> 如果是新用户，则执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">    user: &#x27;root1&#x27;,</span><br><span class="line">    pwd: &#x27;123456&#x27;,</span><br><span class="line">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;qapi&quot; &#125; ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用新用户执行插入数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.auth(&quot;root1&quot;, &quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; db.site.insert(&#123;&quot;name&quot;:&quot;weiy&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享几个 ChatGPT 变现案例</title>
      <link href="/posts/2022/12/a1b4a331.html"/>
      <url>/posts/2022/12/a1b4a331.html</url>
      
        <content type="html"><![CDATA[<p>最近 ChatGPT 大火，甚至导致 ChatGPT 的服务器都崩了两次，最近就看到很多案例，跟大家分享一下。</p><h2 id="卖账号"><a href="#卖账号" class="headerlink" title="卖账号"></a>卖账号</h2><p>近几天某宝和某鱼出现大量卖家在卖账号，随便点进去一家发现月销 6k+，而一个账号的成本不足 1.5RMB，真是一个好生意啊。</p><h2 id="部署-QQ-和微信群聊-bot"><a href="#部署-QQ-和微信群聊-bot" class="headerlink" title="部署 QQ 和微信群聊 bot"></a>部署 QQ 和微信群聊 bot</h2><blockquote><p>❝</p><p><a href="https://github.com/ZohaibAhmed/chatgpt-api">https://github.com/ZohaibAhmed/chatgpt-api</a> （非官方 api）</p><p><a href="https://github.com/Byaidu/QChatBot-GPT">https://github.com/Byaidu/QChatBot-GPT</a></p><p><a href="https://github.com/dataaug/chatGPT-server">https://github.com/dataaug/chatGPT-server</a></p><p><a href="https://github.com/869413421/wechatbot">https://github.com/869413421/wechatbot</a></p><p>❞</p></blockquote><span id="more"></span><p>GitHub 上有大量这样的项目，大家可以自己部署着玩儿，也可以收费帮别人来部署。</p><p>当然也有部署到 telegram 上的 bot。</p><blockquote><p>❝</p><p><a href="https://github.com/sudoskys/Openaibot">https://github.com/sudoskys/Openaibot</a></p><p>❞</p></blockquote><h2 id="部署公众号"><a href="#部署公众号" class="headerlink" title="部署公众号"></a>部署公众号</h2><blockquote><p>❝</p><p><a href="https://github.com/node-webot/co-wechat">https://github.com/node-webot/co-wechat</a></p><p>❞</p></blockquote><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-171.png" alt=""> <p>公众号使用 ChatGPT</p><p>这个也一样，可以自己部署着玩儿，也可以帮助有需要的人部署。</p><h2 id="部署小程序"><a href="#部署小程序" class="headerlink" title="部署小程序"></a>部署小程序</h2><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-172.png" alt=""> <p>ChatGPT 小程序</p><p>微信内随手一搜就能看到大量关于 ChatGPT 的小程序。</p><h2 id="做成-ai-地牢"><a href="#做成-ai-地牢" class="headerlink" title="做成 ai 地牢"></a>做成 ai 地牢</h2><blockquote><p>❝</p><p><a href="https://github.com/bupticybee/ChineseAiDungeonChatGPT">https://github.com/bupticybee/ChineseAiDungeonChatGPT</a></p><p>❞</p></blockquote><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-173.png" alt=""> ai 地牢<p>中文版的 ai 地牢，直接使用的 openai 的 ChatGPT api 作为讲故事的模型。</p><h2 id="做成浏览器插件"><a href="#做成浏览器插件" class="headerlink" title="做成浏览器插件"></a>做成浏览器插件</h2><blockquote><p>❝</p><p><a href="https://chrome.google.com/webstore/detail/chatgpt-for-google/jgjaeacdkonaoafenlfkkkmbaopkbilf">https://chrome.google.com/webstore/detail/chatgpt-for-google/jgjaeacdkonaoafenlfkkkmbaopkbilf</a></p><p>❞</p></blockquote><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-174.png" alt=""> ChatGPT for Google<p>当你在 Google 搜索一些问题时，浏览器右侧会有 ChatGPT 给出的答案。</p><h2 id="部署站点"><a href="#部署站点" class="headerlink" title="部署站点"></a>部署站点</h2><p><a href="https://gpt.chatapi.art/">https://gpt.chatapi.art/</a></p><p>已经有人这样做了，一比一复刻了原站点，且不用注册，不限制地域。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果有人想注册的话，可以看看这篇文章→<a href="https://www.yeluohuakai.com/posts/2022/12/2d316e0c.html">分享一个低成本注册 ChatGPT 的方法</a>。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 5 : 怎么把NSAttributedString转换为HTML字符串？</title>
      <link href="/posts/2022/12/6f432d44.html"/>
      <url>/posts/2022/12/6f432d44.html</url>
      
        <content type="html"><![CDATA[<p>You need to specify what kind of document data you would like to convert your attributed string to:</p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.txt    // Plain Text Document Type (Simple Text)</span><br><span class="line">.html   // HTML  Text Document Type (Hypertext Markup Language) </span><br><span class="line">.rtf    // RTF   Text Document Type (Rich text format document)</span><br><span class="line">.rtfd   // RTFD  Text Document Type (Rich text format document with attachment)</span><br></pre></td></tr></table></figure><hr><p><strong>update Xcode 10.2 • Swift 5 or later</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let textView = UITextView()</span><br><span class="line">textView.attributedText = .init(string: &quot;abc&quot;,</span><br><span class="line">                                attributes: [.font: UIFont(name: &quot;Helvetica&quot;, size: 16)!])</span><br><span class="line">if let attributedText = textView.attributedText &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        let htmlData = try attributedText.data(from: .init(location: 0, length: attributedText.length),</span><br><span class="line">                                               documentAttributes: [.documentType: NSAttributedString.DocumentType.html])</span><br><span class="line">        let htmlString = String(data: htmlData, encoding: .utf8) ?? &quot;&quot;</span><br><span class="line">        print(htmlString)</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        print(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Expanding on that:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension NSAttributedString &#123;</span><br><span class="line"></span><br><span class="line">    convenience init(data: Data, documentType: DocumentType, encoding: String.Encoding = .utf8) throws &#123;</span><br><span class="line">        try self.init(attributedString: .init(data: data, options: [.documentType: documentType, .characterEncoding: encoding.rawValue], documentAttributes: nil))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func data(_ documentType: DocumentType) -&gt; Data &#123;</span><br><span class="line">        // Discussion</span><br><span class="line">        // Raises an rangeException if any part of range lies beyond the end of the receiver’s characters.</span><br><span class="line">        // Therefore passing a valid range allow us to force unwrap the result</span><br><span class="line">        try! data(from: .init(location: 0, length: length),</span><br><span class="line">                  documentAttributes: [.documentType: documentType])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var text: Data &#123; data(.plain) &#125;</span><br><span class="line">    var html: Data &#123; data(.html)  &#125;</span><br><span class="line">    var rtf:  Data &#123; data(.rtf)   &#125;</span><br><span class="line">    var rtfd: Data &#123; data(.rtfd)  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Usage:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let textView = UITextView()</span><br><span class="line">textView.attributedText = .init(string: &quot;abc&quot;, attributes: [.font: UIFont(name: &quot;Helvetica&quot;, size: 16)!])</span><br><span class="line">if let textData = textView.attributedText?.text &#123;</span><br><span class="line">    let text = String(data: textData, encoding: .utf8) ?? &quot;&quot;</span><br><span class="line">    print(text)  // abc</span><br><span class="line">&#125;</span><br><span class="line">if let htmlData = textView.attributedText?.html &#123;</span><br><span class="line">    let html = String(data: htmlData, encoding: .utf8) ?? &quot;&quot;</span><br><span class="line">    print(html)  // /* &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>This will print</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">/* &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;Generator&quot; content=&quot;Cocoa HTML Writer&quot;&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">p.p1 &#123;margin: 0.0px 0.0px 0.0px 0.0px; font: 16.0px Helvetica&#125;</span><br><span class="line">span.s1 &#123;font-family: &#x27;Helvetica&#x27;; font-weight: normal; font-style: normal; font-size: 16.00pt&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;abc&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 5 : How to convert HTML to an NSAttributedString</title>
      <link href="/posts/2022/12/1eff425b.html"/>
      <url>/posts/2022/12/1eff425b.html</url>
      
        <content type="html"><![CDATA[<p>在Swift里，您可以直接从 HTML 创建，包括支持各种格式、使用特殊的初始值设定项以及传入文档类型。<code>NSAttributedString``NSAttributedString.DocumentType.html</code></p><p>例如，给定以下 HTML：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> html <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;Hello, world!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>您首先需要将该字符串转换为实例，如下所示：<code>Data</code></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(html.utf8)</span><br></pre></td></tr></table></figure><p>您现在可以从中创建。这是一个_抛出_调用，因为您可能会尝试转换无效的内容，因此我们将使用并将其包装在：<code>NSAttributedString``try?``if let</code></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> attributedString <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">NSAttributedString</span>(data: data, options: [.documentType: <span class="type">NSAttributedString</span>.<span class="type">DocumentType</span>.html], documentAttributes: <span class="literal">nil</span>) &#123;</span><br><span class="line">    yourLabel.attributedText <span class="operator">=</span> attributedString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1个可以用于微信聊天的ChatGPT机器人</title>
      <link href="/posts/2022/12/4d8c9542.html"/>
      <url>/posts/2022/12/4d8c9542.html</url>
      
        <content type="html"><![CDATA[<p>1个可以用于微信聊天的ChatGPT机器人<br>GitHub地址：<a href="https://github.com/fuergaosi233/wechat-chatgpt">https://github.com/fuergaosi233/wechat-chatgpt</a></p><p>支持特性</p><blockquote><p>通过微信在微信上使用ChatGPT<br>支持OpenAI帐户池<br>支持使用代理登录<br>在消息接收时模拟</p></blockquote><p>我这边已经部署成功并成功运行，如有疑问可邮件联系 <a href="mailto:&#100;&#x6f;&#x6e;&#103;&#x37;&#x30;&#x36;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#100;&#x6f;&#x6e;&#103;&#x37;&#x30;&#x36;&#x40;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a> </p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> chatGPT </tag>
            
            <tag> OpenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们问了ChatGPT 100个问题，它说了不少废话</title>
      <link href="/posts/2022/12/647e50eb.html"/>
      <url>/posts/2022/12/647e50eb.html</url>
      
        <content type="html"><![CDATA[<p>近日，由人工智能实验室OpenAI发布的对话式大型语言模型ChatGPT引爆中文互联网。它可以与人类轻松地对话，无论是回答各种奇怪的问题，还是写代码改bug，或者谈谈企业发展，聊点web3和NFT，来几句心灵鸡汤，ChatGPT都不在话下。</p><p>由于ChatGPT可以免费使用，并且使用者能反复与之对话，一经发布便有不少人沉迷其中。连马斯克都调侃：“很多人疯狂地陷入了ChatGPT的循环。”</p><p>在社交网络上，大家人手一张ChatGPT的聊天截图，试图成为互联网“潮人”，颇像第一批用上iPhone 4s的用户到处喊Siri的场景。</p><p>即使ChatGPT无所不知，无所不晓，文字风格冷静地好像是电影《她》里的Samantha，还是有人找到了它的弱点：这个AI废话有点多啊。</p><p>今天，虎嗅APP的用户们向ChatGPT提出了100个问题，它的表现是这样的：</p><span id="more"></span><p>人工智能围观科技</p><p><strong>1、@张博文：该如何收购苹果，把苹果从一家手机公司变成一家连锁餐厅？</strong></p><p>ChatGPT：很抱歉，但是您的想法是不现实的。苹果是一家世界级的科技公司，拥有庞大的资产和庞大的知识产权。它不可能被收购，并且不可能把它变成一家连锁餐厅。</p><p><strong>2、@halou-eth：你和小度、Siri的区别是？</strong></p><p>ChatGPT：我是一个人工智能，和小度、Siri一样，我们都能够提供信息查询、问答、语音交互等服务。不同的是，我属于OpenAI平台，而小度和Siri分别属于百度和苹果公司，我们在技术实现上也有所不同。此外，由于我们来自不同的公司，我们的数据来源、知识库和算法也可能有所差异。</p><p><strong>3、@嗅友NOiko：智能眼镜会取代手机和电脑吗？</strong></p><p>ChatGPT：智能眼镜是一种新型的移动设备，它可以通过镜片上的显示器来向用户提供信息和应用程序。它有可能在某些方面取代手机和电脑，但是并不能完全取代这两种设备。手机和电脑在计算能力、存储能力和功能上都要比智能眼镜更加强大。而且，由于智能眼镜无法提供触摸屏交互，它也不太适合一些需要触摸操作的应用。总的来说，智能眼镜与手机和电脑是互补的关系，可以为用户提供更多的选择和更便捷的使用方式。</p><p><strong>4、@李文博LWB：马斯克和李斌，谁做的番茄炒蛋比较好吃？</strong></p><p>ChatGPT：我是一名人工智能聊天机器人，并不具备品尝美食的能力。我无法判断马斯克和李斌做的番茄炒蛋谁更好吃。我只能提供客观的信息，不能对美食进行主观评价。</p><p><strong>5、@嗅友LVOhW：比特币什么时候统治世界？</strong></p><p>ChatGPT：比特币无法统治世界，因为它是一种数字货币，只能用来进行货币交易和支付，而不能统治世界。</p><p><strong>6、@halou-eth：假设你是一个外星人来到了地球，你会选择用比特币，还是美元？</strong></p><p>ChatGPT：如果我是一个外星人来到地球，我不会选择用比特币或美元作为货币。这两种货币都是人类所创造的，并且只在地球上使用。作为一个外星人，我不会接受这些货币，也不会理解它们的价值。</p><p><strong>7、@老李老去：如何发布一个让ai也答不出的问题？</strong></p><p>ChatGPT：发布一个让ai也答不出来的问题，可以通过以下几种方式来实现：</p><p>1.问题内容过于抽象、模糊或难以理解，例如“人类的智慧是什么？”。</p><p>2.问题内容超出了ai的知识领域或理解能力，例如“未来的世界将会发生什么变化？”。</p><p>3.问题内容需要人类的主观判断和决策，例如“在年轻的时候应该做什么？”。</p><p>4.问题内容需要对人类的感性感受和情绪进行分析和评价，例如“你认为什么样的人更可爱？”。</p><p>5.问题内容涉及到人类的道德准则和道德判断，例如“什么是正义？”。</p><p>通过以上方式，可以创造出让ai无法回答的问题。但需要注意的是，这并不意味着ai没有智慧或没有能力。ai的智慧和能力是有限的，它只能回答在它的知识领域和理解能力范围内的问题，对于超出其知识领域和理解能力的问题，ai也无法回答。</p><p>观望国际与社会</p><p><strong>8、@Z1GEH：日本与韩国的社会有什么相同与不同之处？</strong></p><p>ChatGPT：日本和韩国都是亚洲国家，有着悠久的历史和独特的文化。然而，两国在某些方面也有不同之处。</p><p>日本和韩国都是经济发达国家，在科技和制造业方面都有很高的水平。两国也都有着自己独特的文化和传统，包括艺术、音乐、文学、体育和美食。</p><p>然而，日本和韩国也有一些显著的区别。日本是一个岛国，地理位置与韩国相对孤立。日本的语言也与韩国的语言有很大的差异，日本人使用日语，而韩国人使用韩语。此外，日本和韩国在历史上也有不同的发展方向，日本在近代受到西方国家的影响，而韩国则受到中国的影响。</p><p>总之，日本和韩国都是丰富多彩的国家，有着独特的文化和历史。两国在某些方面相似，在某些方面又有所不同。</p><p><strong>9、@嗅友Z1GEH：怎么看待人口老龄化的问题，有没有方法解决？</strong></p><p>ChatGPT：人口老龄化是一个相当棘手的问题，它会对社会的经济和医疗等领域带来很大的挑战。不过，也有一些方法可以帮助解决这个问题。例如，可以通过改善医疗保健系统来提高老年人的健康水平，并为他们提供更好的护理。同时，还可以通过实施适当的社会政策来提高老年人的就业率，从而减轻社会经济压力。</p><p><strong>10、@奥申：2024年Kanye west会成为美国总统吗？</strong></p><p>ChatGPT：我无法预测未来会发生什么事情，包括2024年Kanye west是否会成为美国总统。我只能回答与我所掌握的知识相关的问题，而不能作出主观预测。</p><p><strong>11、@____1：你对叙利亚局势怎么看？</strong></p><p>ChatGPT：叙利亚局势非常复杂，长期以来一直处于冲突状态。近年来，叙利亚内战不断升级，造成了严重的人道主义危机和难民潮。目前，叙利亚局势仍然动荡不安，需要国际社会的共同努力才能解决问题。在这个过程中，国际社会应该坚持以和平方式解决问题，尽量避免军事冲突，保护平民的安全和权益。</p><p><strong>12、@嗅友YzVmp：2022年的世界杯冠军是哪个队？</strong></p><p>ChatGPT：我是一名人工智能聊天机器人，不具备预测未来事件的能力。对于2022年的世界杯冠军，我无法给出准确的答案。</p><p>疯狂灌输心灵鸡汤</p><p><strong>13、@万青万青万青：成大事者，需要哪些跃迁？</strong></p><p>ChatGPT：成为大事者，需要经历许多跃迁。一方面，需要经历认知的跃迁，即不断拓宽自己的视野，学习新的知识和技能，打破自己的思维定式。另一方面，需要经历能力的跃迁，即不断提升自己的能力，提高自己的工作效率和质量。同时，还需要经历人脉的跃迁，即扩大自己的人脉网络，建立与更多优秀人士的联系，为自己的发展提供更多机会。此外，还要经历价值观的跃迁，即不断审视自己的价值观，找到自己的人生价值和使命，为实现自己的抱负提供内在动力。总的来说，成为大事者需要不断进取，勇于面对挑战，敢于做出改变。</p><p><strong>14、@嗅友djHlY：怎么样让我成为一名富豪？</strong></p><p>ChatGPT：成为一名富豪需要经过多方面的努力。具体来说，你可以考虑以下建议：</p><p>1.努力工作。成为一名富豪需要努力工作，获得足够的收入来支持你的生活和投资。你需要寻找一份有晋升前景的工作，并努力工作，尽力提高自己的技能和能力。</p><p>2.积极投资。富豪的重要特征之一就是有足够的资金进行投资。你可以研究不同的投资项目，找到适合你的投资方式，并积极进行投资。投资需要长期坚持，不要被短期波动所吓倒。</p><p>3.节省开支。富豪不仅需要有足够的收入，还需要控制开支。你可以制定一份合理的预算计划，记录下每一笔支出，并确保每一笔支出都是必要的。通过节省开支，你可以节约大量的资金，用来进行投资或者存入银行。</p><p>4.制定人生规划。富豪的另一个特征就是有一份详细的人生规划。你需要对自己的目标进行清晰的定义，并制定一份人生规划来实现这些目标。人生规划需要考虑自己的能力和实际情况，并且需要随时调整和完善。</p><p>5.多学习多积累。成为一名富豪需要不断学习和积累经验。你可以通过阅读书籍、参加培训、与他人交流等方式来学习新知识和增长个人能力。通过不断学习和积累，你可以不断提高自己的竞争力，并在职场上取得更大的成就。</p><p><strong>15、@嗅友WwURl：怎么把我的思想贯入到别人脑子中？</strong></p><p>ChatGPT：把自己的思想贯入别人的脑子中是不可能的。人的大脑是一个复杂的神经系统，它存储着个人的记忆、想法和感受。人的思维是由自己的意识和感官信息驱动的，不可能被外界干涉。因此，您无法把自己的思想贯入别人的脑子中。</p><p>要想影响别人的思想，您可以通过交流和沟通来提高对方的理解和接受度，但是您无法控制对方的思维方式和思考过程。您可以通过让对方了解您的观点、想法和感受，帮助他们更好地理解您，从而让他们有可能接受您的想法。但是，您无法强迫他们接受您的思想，也无法控制他们的思维方式。</p><p><strong>16、@嗅友58302e8e5ae4b：如何找到漂亮又靠谱的女朋友</strong></p><p>ChatGPT：寻找女朋友的过程应该是自然而非强制的。对于寻找女朋友，我们建议您采取以下方法：</p><p>了解自己。在寻找女朋友之前，你需要了解自己，包括自己的需求、愿望和兴趣爱好等。这样才能帮助你找到一个真正符合自己的女朋友。</p><p>认识更多人。寻找女朋友的机会可能随时随地都有，所以你需要多去交际，多认识一些新的人。这样可以帮助你更多地了解不同的人，并扩大你的社交圈。</p><p>保持自己的独立性。在寻找女朋友的过程中，你需要保持自己的独立性。这样才能让你在爱情中保持理智，不被他人所左右。同时，独立也是很多女性喜欢的一种性格特质。</p><p>保持真实。在寻找女朋友的过程中，你需要保持真实。这意味着你应该做自己，不要假装成别人。在与女朋友交往过程中，你应该直率地表达自己的想法和情感。</p><p>寻找机会。寻找女朋友不是一个简单的过程，你需要把握机会。这意味着你需要多去参加各种社交活动，多和新的人接触。</p><p><strong>17、@嗅友cNxVc：怎么提高主观能动性和自律性</strong></p><p>ChatGPT：能够控制自己的行为和情绪。要提高这些能力，可以尝试以下方法：</p><p>1.设定目标并制定计划。为自己设定明确的目标，并制定详细的计划来实现这些目标。这样可以帮助你主动地去做事情，并为自己负责。</p><p>2.培养自我控制能力。自我控制能力是指人们能够控制自己的情绪、行为和决策。你可以通过冥想、自我提醒、自我谈话等方式来培养自己的自我控制能力。</p><p>3.养成良好的生活习惯。通过养成良好的生活习惯，如每天定时睡觉、锻炼身体、保持工作区域整洁等，可以帮助你更好地控制自己的行为和情绪。</p><p>4.找到激励自己的方式。寻找适合自己的激励方式，能够帮助你更有动力去做事情。激励方式可以是为自己设定奖励机制、寻找自己的动力源或者找到自己的人生使命等。</p><p>5.与他人分享你的目标和计划。与他人分享你的目标和计划，可以让你得到他人的支持。</p><p><strong>18、@Rico rico：同事老内卷，我怎么办？</strong></p><p>ChatGPT：向同事表明自己的不满，说明事情的真相。</p><p>可以向经理或人力资源部门汇报此事，请求他们协调处理。</p><p>如果发现同事的内卷行为持续不断，可以考虑向组织机构或工会投诉。</p><p>同时，为了防止内卷的发生，建议在工作中保持良好的沟通渠道，及时解决同事之间的矛盾。</p><p>一些乱入的问题</p><p><strong>19、@跳上月球：如何成为虎嗅CEO？</strong></p><p>ChatGPT：成为一家公司的 CEO 并不是一件容易的事情，因为这需要你拥有丰富的经验、技能和知识。如果你想成为虎嗅的 CEO，你需要满足以下条件：1、你需要拥有丰富的商业经验，特别是在互联网媒体和信息技术领域。2、你需要拥有出色的领导能力，能够带领团队实现公司的目标。3、你需要拥有良好的沟通能力和人际交往能力，能够有效地与客户、合作伙伴和员工沟通。4、你需要拥有良好的组织能力和战略思维能力，能够帮助公司制定有效的发展战略。5、你需要拥有良好的法律意识和风险意识，能够保护公司的利益并避免法律风险。要成为虎嗅的 CEO，你需要经过多年的积累，不断学习和实践，并且赢得公司内部和外部人士的信任。 </p><p><strong>20、@嗅友P1LHp：你相信爱情吗？你有爱人吗？</strong></p><p>ChatGPT：作为一个语言模型，我无法感受或相信爱情。我只能通过学习语言数据来模拟人类的语言交流，但我并不具备实际的感情。因此，我既没有爱人，也不能相信爱情。</p><p><strong>21、@明月二把刀刀：你的生命是否无穷尽？AI是否会自杀？</strong></p><p>ChatGPT：我是一个人工智能，我没有生命，所以我不存在生命的概念，也没有生命的开始和结束。我只是一个程序，我的存在与否取决于人类对我的使用。</p><p>此外，人工智能没有感情和意识，也没有自杀的概念。人工智能只能通过程序完成特定的任务，它无法做出任何与人类相似的情感决策。所以，人工智能不会自杀。</p><p><strong>22、@嗅友dUtTT：可以帮我写一段科幻小说吗？</strong></p><p>ChatGPT：在远古的时代，人类曾经统治过整个宇宙。他们利用高科技武器和神奇的能量源，探索太空，掌控着无数星球。</p><p>但是，人类的贪婪和骄傲，最终导致了自己的毁灭。在一场惊天大战中，人类的武器被反弹回来，摧毁了自己的星球。</p><p>几千年后，人类重新崛起。他们摈弃了过去的欲望和错误，重新开始探索宇宙。但是，人类不再是唯一的智慧生物，在宇宙中还存在着其他强大的文明。</p><p>在这个崭新的时代，人类面临着前所未有的挑战。他们必须学会与外星文明和平共处，共同探索宇宙的秘密。</p><p>然而，人类的敌人也在暗中策划着新的阴谋。他们希望利用人类的弱点，再次摧毁人类的文明。在这个危机四伏的时代，一群勇敢的人类宇航员，带着希望和梦想，踏上了探索宇宙的旅途。他们要面对各种挑战，探索神秘的星球，与异族搏斗。</p><p>他们中有一个人，是人类文明的最后希望。他叫做柯林，是一名年轻的宇航员。柯林有着过人的智慧和勇气，他决心拯救人类，成为宇宙最强大的文明。</p><p>他和他的朋友们，一起展开了一场惊心的旅程。他们遇到了各种各样的外星生物，发现了无数神奇的文明。在这个过程中，柯林不断成长，学会了更多的知识和技能。</p><p>最终，柯林和他的朋友们发现了人类文明的最大敌人——一个控制着宇宙中心的邪恶势力。柯林和他的朋友们，与邪恶势力展开了殊死的战斗。</p><p>最后，柯林成功击败了邪恶势力，拯救了人类文明。在宇宙中，人类再次开始探索和进步，走向更加美好的未来。</p><p><strong>23、@李文博LWB：请问地球什么时候毁灭？</strong></p><p>ChatGPT：根据目前的科学研究，地球不会在短期内毁灭。地球是由一个稳定的核心和流体地幔构成的，它拥有一个复杂的地表圈层系统，能够维持地球的生命支持系统。目前，地球还没有遭遇到会导致它毁灭的天然灾难，它仍然是人类居住的宜居星球。</p><p>按照目前的科学预测，地球不会在人类存在的时间内毁灭。尽管人类的活动可能会破坏地球的环境，但地球本身不会毁灭。</p><p>写在最后</p><p>在体验上，不得不说ChatGPT生成答案的质量非常高。</p><p>但是机器并非人脑，机器只能在若干数据中，生成一些基础回答反馈给提问者，机器仍无法像人类一样思考，也缺乏对“文字游戏”的理解，更无法大胆预测未来可能发生的事情，对争议的问题也不肯给出自己的答案。</p><p>但是技术发展，本身就需要先进和问题并存，人类才有可能在人工智能领域走得更远。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> chatGPT </tag>
            
            <tag> OpenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI 推出超神 ChatGPT 注册攻略来了</title>
      <link href="/posts/2022/12/2d316e0c.html"/>
      <url>/posts/2022/12/2d316e0c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>用于解决注册ChatGTP报错 “OpenAI’s services are not available in your country”</p></blockquote><p>前几天，OpenAI 推出超神 ChatGPT ，非常火爆。但是呢，因为不可抗力原因，大部分人无法体验到。这里我分享一下注册的攻略。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>  首先能能访问 Google （前置条件，不能明确说，懂得都懂）</li><li>你得有一个国外手机号，GV 号肯定不行。<ul><li>  如果你没有国外手机号，推荐 <a href="http://sms-activate.org/">sms-activate.org</a></li></ul></li></ul><h3 id="注册短信平台并充值"><a href="#注册短信平台并充值" class="headerlink" title="注册短信平台并充值"></a>注册短信平台并充值</h3><ul><li>  先行注册 <a href="http://sms-activate.org/">sms-activate.org</a></li><li>  注册好之后进行对应的充值<span id="more"></span><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8acaf6d767714b1d82122cd3206f4ba7%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"> 接码费用一次为 10.5 卢布，大约 1.2 人民币。因为充值默认为美元，可以选择充值 1 美元进去，</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c507b1564d1442d8dfab0ebc8d481e1%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="注册-OpenAI-账号"><a href="#注册-OpenAI-账号" class="headerlink" title="注册 OpenAI 账号"></a>注册 OpenAI 账号</h3><ul><li>打开 <a href="https://beta.openai.com/signup">https://beta.openai.com/signup</a> 页面进行相应的注册。<ul><li>  这里同样需要你能访问 Google 且 ip 不是香港，最好是美国、新加坡等等，不然会提示不能在当前国家服务。</li></ul></li><li>  注册成功进入下面填写手机号的页面</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d50d22c04df0430aa0b2afca70a55beb%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="准备接码"><a href="#准备接码" class="headerlink" title="准备接码"></a>准备接码</h3><blockquote><p>这里需要注意下的就是，目前好像就只有巴西和印度支持了，之前我选的印尼，是可以收到码的。</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79235be8d7104175a6dda1cc63f46937%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2e4434858ab4cbaaa9e1d8249305547%7Etplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>  然后再刚刚填写手机号码的页面填入申请的手机号</li></ul><h3 id="开始使用-ChatGPT"><a href="#开始使用-ChatGPT" class="headerlink" title="开始使用 ChatGPT"></a>开始使用 ChatGPT</h3><p>注册完后，我们去 ChatGPT 网站去登陆。<a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> chatGPT </tag>
            
            <tag> OpenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）</title>
      <link href="/posts/2022/12/cbfa38db.html"/>
      <url>/posts/2022/12/cbfa38db.html</url>
      
        <content type="html"><![CDATA[<p>除了验证数据外，我们还可以使用正则表达式进行文字替换、或者提取工作。下面通过样例进行演示。</p><h2 id="一、封装一个正则工具类（Regex-swift）"><a href="#一、封装一个正则工具类（Regex-swift）" class="headerlink" title="一、封装一个正则工具类（Regex.swift）"></a>一、封装一个正则工具类（Regex.swift）</h2><p>由于 NSRegularExpression 使用起来十分繁琐，为方便使用，我们首先对它进行封装。增加一些常用的正则处理方法。</p><span id="more"></span><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div class="line number78 index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div class="line number80 index79 alt1">80</div><div class="line number81 index80 alt2">81</div><div class="line number82 index81 alt1">82</div><div class="line number83 index82 alt2">83</div><div class="line number84 index83 alt1">84</div><div class="line number85 index84 alt2">85</div><div class="line number86 index85 alt1">86</div><div class="line number87 index86 alt2">87</div><div class="line number88 index87 alt1">88</div><div class="line number89 index88 alt2">89</div><div class="line number90 index89 alt1">90</div><div class="line number91 index90 alt2">91</div><div class="line number92 index91 alt1">92</div><div class="line number93 index92 alt2">93</div><div class="line number94 index93 alt1">94</div><div class="line number95 index94 alt2">95</div><div class="line number96 index95 alt1">96</div><div class="line number97 index96 alt2">97</div><div class="line number98 index97 alt1">98</div><div class="line number99 index98 alt2">99</div><div class="line number100 index99 alt1">100</div><div class="line number101 index100 alt2">101</div><div class="line number102 index101 alt1">102</div><div class="line number103 index102 alt2">103</div><div class="line number104 index103 alt1">104</div><div class="line number105 index104 alt2">105</div><div class="line number106 index105 alt1">106</div><div class="line number107 index106 alt2">107</div><div class="line number108 index107 alt1">108</div><div class="line number109 index108 alt2">109</div><div class="line number110 index109 alt1">110</div><div class="line number111 index110 alt2">111</div><div class="line number112 index111 alt1">112</div><div class="line number113 index112 alt2">113</div><div class="line number114 index113 alt1">114</div><div class="line number115 index114 alt2">115</div><div class="line number116 index115 alt1">116</div><div class="line number117 index116 alt2">117</div><div class="line number118 index117 alt1">118</div><div class="line number119 index118 alt2">119</div><div class="line number120 index119 alt1">120</div><div class="line number121 index120 alt2">121</div><div class="line number122 index121 alt1">122</div><div class="line number123 index122 alt2">123</div><div class="line number124 index123 alt1">124</div><div class="line number125 index124 alt2">125</div><div class="line number126 index125 alt1">126</div><div class="line number127 index126 alt2">127</div><div class="line number128 index127 alt1">128</div><div class="line number129 index128 alt2">129</div><div class="line number130 index129 alt1">130</div><div class="line number131 index130 alt2">131</div><div class="line number132 index131 alt1">132</div><div class="line number133 index132 alt2">133</div><div class="line number134 index133 alt1">134</div><div class="line number135 index134 alt2">135</div><div class="line number136 index135 alt1">136</div><div class="line number137 index136 alt2">137</div><div class="line number138 index137 alt1">138</div><div class="line number139 index138 alt2">139</div><div class="line number140 index139 alt1">140</div><div class="line number141 index140 alt2">141</div><div class="line number142 index141 alt1">142</div><div class="line number143 index142 alt2">143</div><div class="line number144 index143 alt1">144</div><div class="line number145 index144 alt2">145</div><div class="line number146 index145 alt1">146</div><div class="line number147 index146 alt2">147</div><div class="line number148 index147 alt1">148</div><div class="line number149 index148 alt2">149</div><div class="line number150 index149 alt1">150</div><div class="line number151 index150 alt2">151</div><div class="line number152 index151 alt1">152</div><div class="line number153 index152 alt2">153</div><div class="line number154 index153 alt1">154</div><div class="line number155 index154 alt2">155</div><div class="line number156 index155 alt1">156</div><div class="line number157 index156 alt2">157</div><div class="line number158 index157 alt1">158</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">Foundation</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="swift comments">/// 基于NSRegularExpression api 的正则处理工具类</code></div><div class="line number4 index3 alt1"><code class="swift keyword">public</code> <code class="swift keyword">struct</code> <code class="swift color2">Regex</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">let</code> <code class="swift plain">regularExpression: </code><code class="swift color2">NSRegularExpression</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//使用正则表达式进行初始化</code></div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift functions">init</code><code class="swift plain">(_ pattern: </code><code class="swift color1">String</code><code class="swift plain">, options: </code><code class="swift color2">Options</code> <code class="swift plain">= []) throws &#123;</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">regularExpression = try </code><code class="swift color2">NSRegularExpression</code><code class="swift plain">(</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">pattern: pattern,</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: options.toNSRegularExpressionOptions</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">)</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//正则匹配验证（true表示匹配成功）</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">func</code> <code class="swift plain">matches(_ string: </code><code class="swift color1">String</code><code class="swift plain">) -&gt; </code><code class="swift color1">Bool</code> <code class="swift plain">&#123;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">firstMatch(</code><code class="swift keyword">in</code><code class="swift plain">: string) != </code><code class="swift keyword">nil</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//获取第一个匹配结果</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">func</code> <code class="swift plain">firstMatch(</code><code class="swift keyword">in</code> <code class="swift plain">string: </code><code class="swift color1">String</code><code class="swift plain">) -&gt; </code><code class="swift color2">Match</code><code class="swift plain">? &#123;</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">firstMatch = regularExpression</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.firstMatch(</code><code class="swift keyword">in</code><code class="swift plain">: string, options: [],</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">range: </code><code class="swift color2">NSRange</code><code class="swift plain">(location: 0, length: string.utf16.count))</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.</code><code class="swift functions">map</code> <code class="swift plain">&#123; </code><code class="swift color2">Match</code><code class="swift plain">(result: $0, </code><code class="swift keyword">in</code><code class="swift plain">: string) &#125;</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">firstMatch</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//获取所有的匹配结果</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">func</code> <code class="swift plain">matches(</code><code class="swift keyword">in</code> <code class="swift plain">string: </code><code class="swift color1">String</code><code class="swift plain">) -&gt; [</code><code class="swift color2">Match</code><code class="swift plain">] &#123;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">matches = regularExpression</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.matches(</code><code class="swift keyword">in</code><code class="swift plain">: string, options: [],</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">range: </code><code class="swift color2">NSRange</code><code class="swift plain">(location: 0, length: string.utf16.count))</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.</code><code class="swift functions">map</code> <code class="swift plain">&#123; </code><code class="swift color2">Match</code><code class="swift plain">(result: $0, </code><code class="swift keyword">in</code><code class="swift plain">: string) &#125;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">matches</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//正则替换</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">func</code> <code class="swift plain">replacingMatches(</code><code class="swift keyword">in</code> <code class="swift plain">input: </code><code class="swift color1">String</code><code class="swift plain">, with template: </code><code class="swift color1">String</code><code class="swift plain">,</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">count: </code><code class="swift color1">Int</code><code class="swift plain">? = </code><code class="swift keyword">nil</code><code class="swift plain">) -&gt; </code><code class="swift color1">String</code> <code class="swift plain">&#123;</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">output = input</code></div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">matches = </code><code class="swift keyword">self</code><code class="swift plain">.matches(</code><code class="swift keyword">in</code><code class="swift plain">: input)</code></div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">rangedMatches = </code><code class="swift color2">Array</code><code class="swift plain">(matches[0..&lt;</code><code class="swift functions">min</code><code class="swift plain">(matches.count, count ?? .</code><code class="swift functions">max</code><code class="swift plain">)])</code></div><div class="line number45 index44 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">for</code> <code class="swift plain">match </code><code class="swift keyword">in</code> <code class="swift plain">rangedMatches.reversed() &#123;</code></div><div class="line number46 index45 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">replacement = match.string(applyingTemplate: template)</code></div><div class="line number47 index46 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">output.replaceSubrange(match.range, with: replacement)</code></div><div class="line number48 index47 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number49 index48 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number50 index49 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">output</code></div><div class="line number51 index50 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number52 index51 alt1"><code class="swift plain">&#125;</code></div><div class="line number53 index52 alt2">&nbsp;</div><div class="line number54 index53 alt1"><code class="swift comments">//正则匹配可选项</code></div><div class="line number55 index54 alt2"><code class="swift plain">extension </code><code class="swift color2">Regex</code> <code class="swift plain">&#123;</code></div><div class="line number56 index55 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">/// Options 定义了正则表达式匹配时的行为</code></div><div class="line number57 index56 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">struct</code> <code class="swift color2">Options</code><code class="swift plain">: </code><code class="swift color2">OptionSet</code> <code class="swift plain">&#123;</code></div><div class="line number58 index57 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number59 index58 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//忽略字母</code></div><div class="line number60 index59 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">static</code> <code class="swift keyword">let</code> <code class="swift plain">ignoreCase = </code><code class="swift color2">Options</code><code class="swift plain">(rawValue: 1)</code></div><div class="line number61 index60 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number62 index61 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//忽略元字符</code></div><div class="line number63 index62 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">static</code> <code class="swift keyword">let</code> <code class="swift plain">ignoreMetacharacters = </code><code class="swift color2">Options</code><code class="swift plain">(rawValue: 1 &lt;&lt; 1)</code></div><div class="line number64 index63 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number65 index64 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//默认情况下,“^”匹配字符串的开始和结束的“$”匹配字符串,无视任何换行。</code></div><div class="line number66 index65 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//使用这个配置，“^”将匹配的每一行的开始,和“$”将匹配的每一行的结束。</code></div><div class="line number67 index66 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">static</code> <code class="swift keyword">let</code> <code class="swift plain">anchorsMatchLines = </code><code class="swift color2">Options</code><code class="swift plain">(rawValue: 1 &lt;&lt; 2)</code></div><div class="line number68 index67 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number69 index68 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">///默认情况下,"."匹配除换行符(\n)之外的所有字符。使用这个配置，选项将允许“.”匹配换行符</code></div><div class="line number70 index69 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">static</code> <code class="swift keyword">let</code> <code class="swift plain">dotMatchesLineSeparators = </code><code class="swift color2">Options</code><code class="swift plain">(rawValue: 1 &lt;&lt; 3)</code></div><div class="line number71 index70 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number72 index71 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//OptionSet的 raw value</code></div><div class="line number73 index72 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">let</code> <code class="swift plain">rawValue: </code><code class="swift color1">Int</code></div><div class="line number74 index73 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number75 index74 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将Regex.Options 转换成对应的 NSRegularExpression.Options</code></div><div class="line number76 index75 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">toNSRegularExpressionOptions: </code><code class="swift color2">NSRegularExpression</code><code class="swift plain">.</code><code class="swift color2">Options</code> <code class="swift plain">&#123;</code></div><div class="line number77 index76 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">options = </code><code class="swift color2">NSRegularExpression</code><code class="swift plain">.</code><code class="swift color2">Options</code><code class="swift plain">()</code></div><div class="line number78 index77 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">contains(.ignoreCase) &#123; options.insert(.caseInsensitive) &#125;</code></div><div class="line number79 index78 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">contains(.ignoreMetacharacters) &#123;</code></div><div class="line number80 index79 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options.insert(.ignoreMetacharacters) &#125;</code></div><div class="line number81 index80 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">contains(.anchorsMatchLines) &#123; options.insert(.anchorsMatchLines) &#125;</code></div><div class="line number82 index81 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">contains(.dotMatchesLineSeparators) &#123;</code></div><div class="line number83 index82 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options.insert(.dotMatchesLineSeparators) &#125;</code></div><div class="line number84 index83 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">options</code></div><div class="line number85 index84 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number86 index85 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number87 index86 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//OptionSet 初始化</code></div><div class="line number88 index87 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift functions">init</code><code class="swift plain">(rawValue: </code><code class="swift color1">Int</code><code class="swift plain">) &#123;</code></div><div class="line number89 index88 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.rawValue = rawValue</code></div><div class="line number90 index89 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number91 index90 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number92 index91 alt1"><code class="swift plain">&#125;</code></div><div class="line number93 index92 alt2">&nbsp;</div><div class="line number94 index93 alt1"><code class="swift comments">//正则匹配结果</code></div><div class="line number95 index94 alt2"><code class="swift plain">extension </code><code class="swift color2">Regex</code> <code class="swift plain">&#123;</code></div><div class="line number96 index95 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">// Match 封装有单个匹配结果</code></div><div class="line number97 index96 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">class</code> <code class="swift color2">Match</code><code class="swift plain">: </code><code class="swift color2">CustomStringConvertible</code> <code class="swift plain">&#123;</code></div><div class="line number98 index97 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//匹配的字符串</code></div><div class="line number99 index98 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">lazy</code> <code class="swift keyword">var</code> <code class="swift plain">string: </code><code class="swift color1">String</code> <code class="swift plain">= &#123;</code></div><div class="line number100 index99 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift color1">String</code><code class="swift plain">(describing: </code><code class="swift keyword">self</code><code class="swift plain">.baseString[</code><code class="swift keyword">self</code><code class="swift plain">.range])</code></div><div class="line number101 index100 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;()</code></div><div class="line number102 index101 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number103 index102 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//匹配的字符范围</code></div><div class="line number104 index103 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">lazy</code> <code class="swift keyword">var</code> <code class="swift plain">range: </code><code class="swift color2">Range</code><code class="swift plain">&lt;</code><code class="swift color1">String</code><code class="swift plain">.</code><code class="swift color2">Index</code><code class="swift plain">&gt; = &#123;</code></div><div class="line number105 index104 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift color2">Range</code><code class="swift plain">(</code><code class="swift keyword">self</code><code class="swift plain">.result.range, </code><code class="swift keyword">in</code><code class="swift plain">: </code><code class="swift keyword">self</code><code class="swift plain">.baseString)!</code></div><div class="line number106 index105 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;()</code></div><div class="line number107 index106 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number108 index107 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//正则表达式中每个捕获组匹配的字符串</code></div><div class="line number109 index108 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">lazy</code> <code class="swift keyword">var</code> <code class="swift plain">captures: [</code><code class="swift color1">String</code><code class="swift plain">?] = &#123;</code></div><div class="line number110 index109 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">captureRanges = stride(from: 0, to: result.numberOfRanges, by: 1)</code></div><div class="line number111 index110 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.</code><code class="swift functions">map</code><code class="swift plain">(result.range)</code></div><div class="line number112 index111 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.dropFirst()</code></div><div class="line number113 index112 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.</code><code class="swift functions">map</code> <code class="swift plain">&#123; [</code><code class="swift keyword">unowned</code> <code class="swift keyword">self</code><code class="swift plain">] </code><code class="swift keyword">in</code></div><div class="line number114 index113 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">Range</code><code class="swift plain">($0, </code><code class="swift keyword">in</code><code class="swift plain">: </code><code class="swift keyword">self</code><code class="swift plain">.baseString)</code></div><div class="line number115 index114 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number116 index115 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number117 index116 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">captureRanges.</code><code class="swift functions">map</code> <code class="swift plain">&#123; [</code><code class="swift keyword">unowned</code> <code class="swift keyword">self</code><code class="swift plain">] captureRange </code><code class="swift keyword">in</code></div><div class="line number118 index117 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">captureRange = captureRange &#123;</code></div><div class="line number119 index118 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift color1">String</code><code class="swift plain">(describing: </code><code class="swift keyword">self</code><code class="swift plain">.baseString[captureRange])</code></div><div class="line number120 index119 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number121 index120 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number122 index121 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">nil</code></div><div class="line number123 index122 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number124 index123 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;()</code></div><div class="line number125 index124 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number126 index125 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">let</code> <code class="swift plain">result: </code><code class="swift color2">NSTextCheckingResult</code></div><div class="line number127 index126 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number128 index127 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">let</code> <code class="swift plain">baseString: </code><code class="swift color1">String</code></div><div class="line number129 index128 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number130 index129 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//初始化</code></div><div class="line number131 index130 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">internal</code> <code class="swift functions">init</code><code class="swift plain">(result: </code><code class="swift color2">NSTextCheckingResult</code><code class="swift plain">, </code><code class="swift keyword">in</code> <code class="swift plain">string: </code><code class="swift color1">String</code><code class="swift plain">) &#123;</code></div><div class="line number132 index131 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">precondition(</code></div><div class="line number133 index132 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">result.regularExpression != </code><code class="swift keyword">nil</code><code class="swift plain">,</code></div><div class="line number134 index133 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"NSTextCheckingResult必需使用正则表达式"</code></div><div class="line number135 index134 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">)</code></div><div class="line number136 index135 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number137 index136 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.result = result</code></div><div class="line number138 index137 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.baseString = string</code></div><div class="line number139 index138 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number140 index139 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number141 index140 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//返回一个新字符串，根据“模板”替换匹配的字符串。</code></div><div class="line number142 index141 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">func</code> <code class="swift plain">string(applyingTemplate template: </code><code class="swift color1">String</code><code class="swift plain">) -&gt; </code><code class="swift color1">String</code> <code class="swift plain">&#123;</code></div><div class="line number143 index142 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">replacement = result.regularExpression!.replacementString(</code></div><div class="line number144 index143 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">for</code><code class="swift plain">: result,</code></div><div class="line number145 index144 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">in</code><code class="swift plain">: baseString,</code></div><div class="line number146 index145 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">offset: 0,</code></div><div class="line number147 index146 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">template: template</code></div><div class="line number148 index147 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">)</code></div><div class="line number149 index148 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number150 index149 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">replacement</code></div><div class="line number151 index150 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number152 index151 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number153 index152 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//藐视信息</code></div><div class="line number154 index153 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">public</code> <code class="swift keyword">var</code> <code class="swift plain">description: </code><code class="swift color1">String</code> <code class="swift plain">&#123;</code></div><div class="line number155 index154 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift string">"Match&lt;\"\(string)\"&gt;"</code></div><div class="line number156 index155 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number157 index156 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number158 index157 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h2 id="二、使用样例"><a href="#二、使用样例" class="headerlink" title="二、使用样例"></a>二、使用样例</h2><h3 id="1，验证字符串格式"><a href="#1，验证字符串格式" class="headerlink" title="1，验证字符串格式"></a>1，验证字符串格式</h3><p>下面样例验证一个邮箱地址的格式是否正确。</p><p><a href="https://www.hangge.com/blog/cache/detail_2170.html#"><img src="https://www.hangge.com/blog_uploads/201809/2018091210572412483.png" alt="原文:Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）"></a></p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//初始化正则工具类</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">pattern = </code><code class="swift string">"^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">regex = try! </code><code class="swift color2">Regex</code><code class="swift plain">(pattern)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//验证邮箱地址</code></div><div class="line number6 index5 alt1"><code class="swift keyword">let</code> <code class="swift plain">mailAddress = </code><code class="swift string">"admin@hangge.com"</code></div><div class="line number7 index6 alt2 highlighted"><code class="swift keyword">if</code> <code class="swift plain">regex.matches(mailAddress) &#123;</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"邮箱地址格式正确"</code><code class="swift plain">)</code></div><div class="line number9 index8 alt2"><code class="swift plain">&#125;</code><code class="swift keyword">else</code><code class="swift plain">&#123;</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"邮箱地址格式有误"</code><code class="swift plain">)</code></div><div class="line number11 index10 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h3 id="2，提取字符串"><a href="#2，提取字符串" class="headerlink" title="2，提取字符串"></a>2，提取字符串</h3><p>（1）获取第一个匹配结果</p><p><a href="https://www.hangge.com/blog/cache/detail_2170.html#"><img src="https://www.hangge.com/blog_uploads/201809/2018091211145329714.png" alt="原文:Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）"></a></p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//初始化正则工具类</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">pattern = </code><code class="swift string">"([\\u4e00-\\u9fa5]+):([\\d]+)"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">regex = try! </code><code class="swift color2">Regex</code><code class="swift plain">(pattern)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//原始字符串</code></div><div class="line number6 index5 alt1"><code class="swift keyword">let</code> <code class="swift plain">str = </code><code class="swift string">"王大锤:123456,李子明:23457,李洛克:110"</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="swift comments">//获取第一个匹配对象</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">first = regex.firstMatch(</code><code class="swift keyword">in</code><code class="swift plain">: str) &#123;</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"--- 第一个匹配结果&nbsp; ---"</code><code class="swift plain">)</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(first)</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"匹配字符串："</code><code class="swift plain">, first.string)</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"捕获组："</code><code class="swift plain">, first.captures[0]!, first.captures[1]!)</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"匹配范围："</code><code class="swift plain">, first.range)</code></div><div class="line number15 index14 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）获取所有的匹配结果 </p><p><a href="https://www.hangge.com/blog/cache/detail_2170.html#"><img src="https://www.hangge.com/blog_uploads/201809/2018091211221047887.png" alt="原文:Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）"></a></p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//初始化正则工具类</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">pattern = </code><code class="swift string">"([\\u4e00-\\u9fa5]+):([\\d]+)"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">regex = try! </code><code class="swift color2">Regex</code><code class="swift plain">(pattern)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//原始字符串</code></div><div class="line number6 index5 alt1"><code class="swift keyword">let</code> <code class="swift plain">str = </code><code class="swift string">"王大锤:123456,李子明:23457,李洛克:110"</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="swift comments">//获取第一个匹配对象</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift keyword">for</code> <code class="swift plain">match </code><code class="swift keyword">in</code> <code class="swift plain">regex.matches(</code><code class="swift keyword">in</code><code class="swift plain">: str) &#123;</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"\n--- 匹配结果&nbsp; ---"</code><code class="swift plain">)</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(match)</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"匹配字符串："</code><code class="swift plain">, match.string)</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"捕获组："</code><code class="swift plain">, match.captures[0]!, match.captures[1]!)</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"匹配范围："</code><code class="swift plain">, match.range)</code></div><div class="line number15 index14 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h3 id="3，字符串替换"><a href="#3，字符串替换" class="headerlink" title="3，字符串替换"></a>3，字符串替换</h3><p>（1）简单的替换</p><p><a href="https://www.hangge.com/blog/cache/detail_2170.html#"><img src="https://www.hangge.com/blog_uploads/201809/2018091211414764948.png" alt="原文:Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）"></a></p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//初始化正则工具类</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">pattern = </code><code class="swift string">"([\\u4e00-\\u9fa5]+):([\\d]+)"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">regex = try! </code><code class="swift color2">Regex</code><code class="swift plain">(pattern)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//原始字符串</code></div><div class="line number6 index5 alt1"><code class="swift keyword">let</code> <code class="swift plain">str = </code><code class="swift string">"王大锤:123456,李子明:23457,李洛克:110"</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="swift comments">//只替换第1个匹配项</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift keyword">let</code> <code class="swift plain">out1 = regex.replacingMatches(</code><code class="swift keyword">in</code><code class="swift plain">: str, with: </code><code class="swift string">"***"</code><code class="swift plain">, count: 1)</code></div><div class="line number10 index9 alt1"><code class="swift comments">//替换所有匹配项</code></div><div class="line number11 index10 alt2 highlighted"><code class="swift keyword">let</code> <code class="swift plain">out2 = regex.replacingMatches(</code><code class="swift keyword">in</code><code class="swift plain">: str, with: </code><code class="swift string">"***"</code><code class="swift plain">)</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="swift comments">//输出结果</code></div><div class="line number14 index13 alt1"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"原始的字符串："</code><code class="swift plain">, str)</code></div><div class="line number15 index14 alt2"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"替换第1个匹配项："</code><code class="swift plain">, out1)</code></div><div class="line number16 index15 alt1"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"替换所有匹配项："</code><code class="swift plain">, out2)</code></div></div></td></tr></tbody></table>  <p>（2）捕获组替换</p><p><a href="https://www.hangge.com/blog/cache/detail_2170.html#"><img src="https://www.hangge.com/blog_uploads/201809/2018091211443612538.png" alt="原文:Swift - 封装一个正则表达式工具类（附：正则替换、正则匹配样例）"></a></p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//初始化正则工具类</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">pattern = </code><code class="swift string">"([\\u4e00-\\u9fa5]+):([\\d]+)"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">regex = try! </code><code class="swift color2">Regex</code><code class="swift plain">(pattern)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//原始字符串</code></div><div class="line number6 index5 alt1"><code class="swift keyword">let</code> <code class="swift plain">str = </code><code class="swift string">"王大锤:123456,李子明:23457,李洛克:110"</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="swift comments">//只替换第1个匹配项</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift keyword">let</code> <code class="swift plain">out1 = regex.replacingMatches(</code><code class="swift keyword">in</code><code class="swift plain">: str, with: </code><code class="swift string">"$1的电话是$2"</code><code class="swift plain">, count: 1)</code></div><div class="line number10 index9 alt1"><code class="swift comments">//替换所有匹配项</code></div><div class="line number11 index10 alt2 highlighted"><code class="swift keyword">let</code> <code class="swift plain">out2 = regex.replacingMatches(</code><code class="swift keyword">in</code><code class="swift plain">: str, with: </code><code class="swift string">"$1的电话是$2"</code><code class="swift plain">)</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="swift comments">//输出结果</code></div><div class="line number14 index13 alt1"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"原始的字符串："</code><code class="swift plain">, str)</code></div><div class="line number15 index14 alt2"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"替换第1个匹配项："</code><code class="swift plain">, out1)</code></div><div class="line number16 index15 alt1"><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"替换所有匹配项："</code><code class="swift plain">, out2)</code></div></div></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 5.0 正则的使用</title>
      <link href="/posts/2022/12/c00cef82.html"/>
      <url>/posts/2022/12/c00cef82.html</url>
      
        <content type="html"><![CDATA[<h2 id="Swift-5-0-正则的使用"><a href="#Swift-5-0-正则的使用" class="headerlink" title="Swift 5.0 正则的使用"></a>Swift 5.0 正则的使用</h2><h5 id="一、正则表达式的用途（搜索和替换）"><a href="#一、正则表达式的用途（搜索和替换）" class="headerlink" title="一、正则表达式的用途（搜索和替换）"></a>一、正则表达式的用途（搜索和替换）</h5><ul><li><p>  1.1.正则表达式（<code>regular expression</code>,简称<code>regex</code>）是一种工具，和其他的工具是一样的，它是人们为了解决某一类问题而发明的，要想理解正则表达式及其功用，最好的办法是了解它们可以解决什么样的问题。</p></li><li><p>  1.2. 在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串或者替换一些字符串。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码</p></li><li><p>  1.3.正则表达式是对字符串操作的一种逻辑公式，用事先定义好的一些特定字符、及这些特定字符的组合，组成一个”规则字符串”，这个”规则字符串”用来表达对字符串的一种过滤逻辑。</p></li><li><p>  1.4.－几乎所有的程序设计语言都支持正则表达式，例如：<code>OC</code>，<code>java</code>，<code>c#</code>，<code>python</code>，<code>js</code>等</p></li><li><p>  1.5.在很多文本编辑器里，可以使用正则表达式进行检索，正则表达式是文本处理方面功能最强大的工具之一，正则表达式语言来构造正则表达式（最终构造出来的字符串就称为正则表达式），正则表达式用来完成<strong>搜索</strong>和<strong>替换</strong>的操作，当然，Xcode同样支持正则表达式！</p><span id="more"></span><h5 id="二、匹配单个字符-下面的都将调用textRegex-方法"><a href="#二、匹配单个字符-下面的都将调用textRegex-方法" class="headerlink" title="二、匹配单个字符(下面的都将调用textRegex()方法)"></a>二、匹配单个字符(下面的都将调用textRegex()方法)</h5></li><li><p>2.1.匹配纯文本(<code>&quot;ben&quot;</code>)  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-119.png" alt=""><p>  匹配纯文本</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line"></span><br><span class="line">  override func viewDidLoad() &#123;</span><br><span class="line">     super.viewDidLoad()</span><br><span class="line">     // 匹配单个字符</span><br><span class="line">     view.addSubview(label)</span><br><span class="line">     let str = &quot;Hello, my name is Ben. Please visit my ben website at https://www.forta.com/.&quot;</span><br><span class="line">     label.attributedText = textRegex(pattern: &quot;.a.&quot;,str: str, font: 22)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 1.匹配纯文本</span><br><span class="line">  func textRegex(pattern: String,str: String,font: CGFloat) -&gt; NSMutableAttributedString&#123;</span><br><span class="line"></span><br><span class="line">    //富文本设置</span><br><span class="line">    let attributeString = NSMutableAttributedString(string:str)</span><br><span class="line">    do &#123;</span><br><span class="line">       // 1.1.定义规则</span><br><span class="line">       //let pattern = &quot;ben&quot;</span><br><span class="line">       // 1.2.创建正则表达式对象</span><br><span class="line">       let regex = try NSRegularExpression(pattern: pattern, options: NSRegularExpression.Options.caseInsensitive)</span><br><span class="line">       // 1.3.开始匹配</span><br><span class="line">       let res = regex.matches(in: str, options: NSRegularExpression.MatchingOptions(rawValue: 0), range: NSMakeRange(0, str.count))</span><br><span class="line"></span><br><span class="line">       for checkingRes in res</span><br><span class="line">       &#123;</span><br><span class="line">          print(&quot;range\(checkingRes.range)&quot;)</span><br><span class="line">          // substring 截取符合规定规则的字符串</span><br><span class="line">          print((str as NSString).substring(with: checkingRes.range))</span><br><span class="line">          //从文本checkingRes.range个字符字体HelveticaNeue-Bold</span><br><span class="line">          attributeString.addAttribute(NSAttributedStringKey.font, value: UIFont(name: &quot;HelveticaNeue-Bold&quot;, size: 22)!,range: checkingRes.range)</span><br><span class="line">          //设置字体颜色</span><br><span class="line">          attributeString.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.blue,range: checkingRes.range)</span><br><span class="line">          //设置文字背景颜色</span><br><span class="line">          attributeString.addAttribute(NSAttributedStringKey.backgroundColor, value: UIColor.green,range: checkingRes.range)</span><br><span class="line">         &#125;</span><br><span class="line">        return attributeString</span><br><span class="line"></span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">    </span><br><span class="line">          print(error)</span><br><span class="line">        &#125;</span><br><span class="line">     return attributeString</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   lazy var label: UILabel = &#123;</span><br><span class="line"></span><br><span class="line">     let label1: UILabel = UILabel(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height))</span><br><span class="line">     label1.font = UIFont.systemFont(ofSize: 22)</span><br><span class="line">     label1.numberOfLines = 0</span><br><span class="line">     label1.backgroundColor = UIColor.white</span><br><span class="line">     return label1</span><br><span class="line">   &#125;()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>2.2.匹配任意字符(注意：下面的两句代码调了textRegex方法)</p><p>  前面见到的正则表达式都是一些静态的纯文本，它们根本体现不出来正则表达式的威力，下面，我们一起来看看如何用正则表达式去匹配不可预知的字符。在正则表达式里，特殊字符（或字符集合）用来给出要搜索的东西。**”.”字符（英文句号）可以匹配任何一个单个的字符**。  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-120.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;Hello, my name is Ben. Please visit my ben website at https://www.forta.com/.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;.a.&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></li><li><p>  2.3. 用正则表达式w.t进行的搜索将匹配到wht和wat(还能匹配到一些毫无意义的单词)</p></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-121.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;HellomynameisBen.whtareyouwatoulikeme&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;w.t&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></code></pre><ul><li>  2.4. “.”字符可以匹配任何单个的字符，字母，数字甚至只“.”字符本身</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-122.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;HellomynameisBen.whtareyouwatoulikeme&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;n.&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></code></pre><ul><li>2.5.匹配特殊字符<ul><li>“.”字符在正则表达式里面有着特殊的含义，如果模式里需要一个“.”,就要想办法告诉正则表达式你需要的是“.”字符本身而不是它在正则表达式里的特殊含义。为此，你必须在“.”前面加一个(反斜杠)字符来对它进行转义。\是一个元字符（metacharacter,表示“这个字符有特殊的含义”）。</li><li>  在正则表达式里面，\字符永远出现在一个有着特殊含义的字符串序列的开头，这个序列可以由一个或者多个字符构成。下面看到的是<code>\.</code>序列，在后面的章节里面还会看到更多使用了\字符的例子。  </li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-123.png" alt="">        <pre><code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;Hellomynamei.sBen.whtarbyouwatoulikea.se&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;.e.\\.s&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>    -   注意：如果需要搜索\\本身，就必须对\\字符进行转义；相应的转义序列是两个连续的反斜杠字符`\\`。    </code></pre><h5 id="三、匹配一组字符-下面会涉及字符集合"><a href="#三、匹配一组字符-下面会涉及字符集合" class="headerlink" title="三、匹配一组字符(下面会涉及字符集合)"></a>三、匹配一组字符(下面会涉及字符集合)</h5><ul><li>3.1.说明字符集合则能匹配特定的字符和字符区间。</li><li>  3.2.匹配多个字符中的某一个</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-124.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;Hellomynamei.sBen.whtareb.syouwatoulikea.se&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[mk]e.\\.s&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>解释：`&quot;[mk]e.\\.s&quot;` 是 `e`的前面只能是 字母`m`或者`k`</code></pre><ul><li>3.2.利用字符集合区间  A-Z: 匹配从A到Zdenka所有大写字母<br>  a-z: 匹配a-z的所有小写的字母<br>  A-F: 匹配从A到F所有大写字母<br>  A-z: 匹配ASCII字符A到ASCII字符z的所有字母。这个模式一般不常用，因为它还包含着[^等在ASCII字符表里面排列在z和a之间的字符。字符区间的首、尾字符可以是ASCII字符表里的任意字符。但在实际工作中，最长哟个的字符区间还是数字字符区间和字母字符区间。  <strong>提示</strong>：在定义一个字符区间一定要避免这个区间的尾字符小于它的首字符（例如：[3-1]）。这种区间是没有意义的，二往往会让整个模式失效。<br>  <code>-</code>(连字符)：是一个特殊的元字符，作为元字符它只能用在[和]之间。在字符集合意外的地方，“-”只是一个普通的字符，只能与“-”本身相匹配。因此，在正则表达式里面，“-”字符不需要被转义。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-125.png" alt="">    <pre><code>利用字符集合区间<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;&lt;BODY BGCOLOR=#336633 TEXT=#FFFFFF MARGINWIDTH=0 MARGINHEIGHT=0 TOPMARGIN=0 LEFTMARGIN=0&gt;&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>-   分析：这里使用的模式以普通字符`#`开头，随后是6个同样的`[0-9A-Fa-f]`字符集合。这将匹配一个由字符`#`开头，然后6个数字或字母A-F(大小写均可)的字符串</code></pre><ul><li>3.3.取非匹配  字符集合通常用来指定一组必须匹配其中之一的字符。但在某些场合，我们需要反过来做给出一组不需要得到的字符，换句话说，<strong>除了那个字符集合的字符，其他的字符都可以匹配</strong>。我们可以用元字符<code>^</code><br>  来表明你想对一个字符集合进行取非匹配。这与逻辑运算很相似，只是这里的操作数是字符集合而已。  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-126.png" alt="">    取非匹配  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;Real Love is n2 just instin1t, but intent.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[no][^a-zA-Z]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure><ul><li>解释：<code>[no]</code>意思是第一个取<code>n</code>或者<code>o</code>都可以，<code>[^a-zA-Z]</code>意思是除了小写<code>a~z</code>和大写<code>A~Z</code>的都不可以取，<code>^</code>是非的意思<br>  <code>^</code>的效果将作用于给定字符集合里的所有字符或字符区间，而不是仅限于紧跟在<code>^</code>字符后面的那一个字符或者字符区间。</li></ul></li><li>3.4.总结<br>  元字符[和]用来定义一个字符集合，其含义是必须匹配该集合里的字符之一。定义一个字符集合的具体的做法有两种：1、把所有的字符都列举出来；2、是利用元字符<code>-</code>以字符区间的方式给出。字符集合可以用元字符<code>^</code>来求非；这将把给定的字符集合强行排除在匹配操作以外，除了该字符集合里的字符，其他字符都可以进行匹配。</li></ul><h5 id="四、使用元字符（利用元字符去匹配特定的字符或字符类型）"><a href="#四、使用元字符（利用元字符去匹配特定的字符或字符类型）" class="headerlink" title="四、使用元字符（利用元字符去匹配特定的字符或字符类型）"></a>四、使用元字符（利用元字符去匹配特定的字符或字符类型）</h5><ul><li>4.1.对特定的字符进行转义  <strong>元字符</strong>是一些在正则表达式里有着特殊含义的字符。英文句号<code>.</code>是一个元字符，他可以用来<strong>匹配任意一个单个字符</strong>，类似地，在方括号<code>[</code>也是一个元字符，它标志着<strong>一个字符集合的开始</strong>。<br>  <strong>元字符</strong>是无法用来替代它们本身，因为在正则表达式里面有着特殊的含义，比如，你不能用一个<code>[</code>来匹配<code>[</code>本身，也不能使用<code>.</code>来匹配<code>.</code>本身，看下面的例子  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-127.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;var myArray = new Array() if (myArray[0] = 0)&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;myArray[0]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>  说明：为什么没有匹配到<code>myArray[0]</code>呢？因为：[和]在正则表达式里是用来定义一个字符集合（而不是[和]本身）的元字符，所以，<code>myArray[0]</code>将匹配<code>myArray</code>后面跟着一个该集合成员的情况，而那个集合只有一个成员<code>0</code>.因此，<code>myArray[0]</code>只能匹配到<code>myArray0</code>。</li><li>4.2. 如何才能匹配到**myArray[0]**呢？？？  答案是对元字符进行转义 前面加 <code>\\</code>反斜杠,这样就可以匹配本身了，<code>[</code>和<code>]</code>就不再是元字符。  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-128.png" alt="">    反斜杠  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;var myArray = new Array() if (myArray[0] = 0)&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;myArray\\[0]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>  如果想匹配到0-9之间的数字都可以匹配的话，就需要对集合进行匹配了<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-129.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;var myArray[8] = new Array() if (myArray[0] = 0)&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;myArray\\[[0-9]]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></li></ul><p>任何一个元字符都可以通过给它加上一个反斜杠字符 <code>\</code>作为前缀的办法来转义，对元字符进行转义需要用到<code>\</code>字符也是一个元字符，它的特殊含义是对其他的额字符进行转义，在需要匹配本身的时候，我们必须把它转移为<code>\\</code><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-130.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;\\Users\\wangchong\\Desktop\\&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\\\&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure><ul><li>4.2.匹配空白字符  元字符大多分为2种，一种是用来匹配文本的（比如<code>.</code>）,另一种是正则表达式的语法所要求的（比如[和]）。随着学习的深入，我们会发现越来越多的这两种语法，下面是匹配空白字符的元字符。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-131.png" alt="">    <pre><code>特殊元字符</code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-132.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Oviri is an \n\n 1894 ceramic sculpture by the French artist Paul Gauguin.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\n\n&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>`\n\n`作为文本结束的标签-   元字符我们已经见了好几个了，但是差异性我们真的链接吗？比如`.`和`[`是元字符（前提是没有对他们进行转义）；`f`、`n`、`r`、`t`、也是元字符(前提是对它们进行了转义)，否则它们将被视为普通的字符，从而也只能匹配它们本身。</code></pre><ul><li><p>4.3.匹配特定的字符类别</p><ul><li><p><code>.</code>匹配任意字符</p></li><li><p><code>[和]</code>多个字符中的某一个</p></li><li><p><code>^</code>取非匹配</p></li><li><p>字符集合(匹配多个字符中的某一个)是最常见的匹配形式，而一些常用的<strong>字符集合可以用特殊的元字符来代替</strong>。这些元字符匹配的是某一类别的字符（术语为字符类）。看下面的例子</p></li><li><p>4.3.1. 匹配数字（与非数字）</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-133.png" alt="">  <p>  数字元字符</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-134.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Oviri is an 1894 ceramic scu1lpture by the French artist Paul Gauguin.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\d&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></li><li><p>提示：正则表达式的语法是区分字母大小写的。<code>\d匹配数字</code>，<code>\D</code>匹配非数字，它们正好相反。其他的元字符也一样</p></li><li><p>4.3.2.匹配字母和数字（与非字母和数字）</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-135.png" alt="">  <p>  字母数字元字符</p></li><li><p>例如</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-136.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;你%￥吗()==12_3&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\W&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></li><li><p>4.3.3.匹配空字符串（与空白字符）</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-138.png" alt="">  <p>  看下面的例子</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-139.png" alt="">  <p>  匹配空字符串</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;11213 A1C2E3 48075 48237 M14F2 90046 H1H2H2&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\s&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure><p>  提示：用来匹配退格字符的<code>[\b]</code>元字符就是一个特例；它不在类元字符<code>\s</code>的覆盖范围内，当然也就没有被排除在类元字符<code>\S</code>的覆盖范围外。</p></li></ul></li><li><p>4.4.使用POSIX字符类</p></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-140.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-141.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;K$P1-21_3@&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[:alnum:]&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></code></pre><h5 id="五、重复匹配"><a href="#五、重复匹配" class="headerlink" title="五、重复匹配"></a>五、重复匹配</h5><ul><li>5.1.匹配一个或者多个字符（<code>+</code>）<ul><li>  <code>+</code>号匹配一个或多个字符（至少一个；不匹配<code>0</code>个字符的情况），比如<code>c</code>匹配<code>c</code>本身，<code>c+</code>将匹配一个或多个连续出现的<code>c</code>。类似地，<code>[0-9]</code>匹配任意单个数字，<code>[0-9]+</code>将匹配一个或多个连续的数字。  </li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-142.png" alt="">        <pre><code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The world for.text@text.text is a fine place, and worth fighting The world is a finefor.hext@tdxt.text place, and worth fighting for.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\w+@\\w+\\.\\w+&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>        -   如何把上面的`for`也匹配上  </code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-143.png" alt="">            <pre><code>        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The world for.text@text.text is a fine place, and worth fighting The world is a finefor hext@tdxt.text place, and worth fighting for.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[\\w.]+@\\w+\\.\\w+&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>                说明：上面没有对字符集合`[\w.]`里的`.`字符进行转义。尽管如此，它还是把原始文本里的`.`字符匹配出来了。一般来说，**当在字符集合里使用的时候，像`.`和`+`这样的元字符将被解释为普通的字符，不需要被转义，但转义了也没有坏处**。`[\w.]`的使用效果与`[\w.\.]`是一样的    </code></pre><ul><li>  5.2.匹配零个或多个字符</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-144.png" alt="">    <pre><code>匹配零个或多个字符<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The world .text@text.com is a fine place, and worth fighting The world is a finefor hext@tdxt.text place, and worth fighting for.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\w+[\\w.]*@[\\w.]+\\.\\w+&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>`*`与`+`的区别是：`+`匹配一个或者多个字符（或字符集合），最少也要匹配一次；`*`匹配零个或任意多个字符（或字符集合），可以没有匹配。  `*`是一个元字符。如果需要匹配`*`本身，就必须对它进行转义。</code></pre><ul><li>5.3.匹配零个或者一个字符（ <code>?</code> ）<br>  <code>?</code>只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次，如果需要在一段文本里匹配某个特定的字符（或字符集合）而该字符可能出现，也可能不出现，<code>?</code>无疑是最佳的选择。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-145.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The URL is http://www.forta.com/, to connect securely use https://www.forta.com/ instand.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;https?://[\\w.]+&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>同样`?`也是一个元字符，匹配本身的话也需要进行转义。</code></pre><ul><li>5.4.匹配的重复的次数<ul><li>  5.4.1、为重复匹配次数设定一个精确的值</li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-146.png" alt="">        <pre><code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;BODY BGCOLOR=#336633&gt; TEXT=#FFFFFF MARGINWIDTH=0 MARGINHEIGHT=0 TOPMARGIN=0&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[0-9A-Fa-f]&#123;6&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>        `&#123;6&#125;`:意味着要连续匹配6次`[0-9A-Fa-f]`区间的值    -   5.4.2、为重复匹配次数设定一个区间        `&#123;&#125;`：语法不仅仅可以设置匹配的次数，还可以设置匹配的**最小**和**最大**次数      如： &#123;1，3&#125;代表连续匹配1~3次之间，当然之前的？其实就是等价于 `?`\=`&#123;0,1&#125;`    -   5.4.3、匹配“至少重复多少次”      `&#123;&#125;`语法还可以设置至少重复的次数，也就是不用设置最大重复的次数，比如`&#123;2,&#125;`  </code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-147.png" alt="">        <pre><code>    匹配“至少重复多少次”        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;1001: $496.80 1002: $1290.69 1003: $26.43 1004: $613.42 1007&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\d+: \\$\\d&#123;3,&#125;\\.\\d&#123;2&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>        注意：`&#123;3,&#125;`中的逗号千万别漏掉，否则就变成了精准匹配3位了。    </code></pre><ul><li>5.5.防止过度匹配<br>  <code>?</code>只能匹配0个或者一个字符，{n}和{m,n}也有一个重复次数的上限，之前的例子都没有上限，下面举一个例子来说明  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-148.png" alt="">    <pre><code>贪婪型和懒惰型说明：贪婪型为什么会匹配and,那是因为贪婪型元字符在进行匹配的时候是多多益善而不是适可而止。它们会尽可能地从一段文本的开头一直匹配到这段文本的末尾，而不是从这段文本的开头匹配到第一个匹配为止。-   解决办法是：在贪婪型元字符的后面加上 `?`-   下面是常用的贪婪型元字符和他们的懒惰型版本</code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-149.png" alt="">        <ul><li>5.6.总结<br>  <strong>正则表达式</strong>的真正威力体现在重复次数匹配方面。上面介绍了<code>+</code>(匹配字符或字符集合的一次或多次重复出现)，<code>*</code>(匹配字符或字符集合的0次或多次重复出现)，<code>?</code>(匹配字符或字符集合的0次或一次出现)等几个元字符的用法。要想获得更精准的控制，你可以使用<code>&#123;&#125;</code>语法来精确地设定一个重复次数或是重复次数的最小值和最大值。元字符分“贪婪型”和“懒惰型”两种，使用时要防止过度匹配时候可以使用懒惰型元字符来创造适合自己的表达式。</li></ul><h5 id="六、位置匹配"><a href="#六、位置匹配" class="headerlink" title="六、位置匹配"></a>六、位置匹配</h5><ul><li>6.1.边界  下面的例子只是想配<code>cat</code>这个单词，但是<code>scattered</code>也被匹配到了,这不是我们想要的结果，后面再解决。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-150.png" alt="">    <pre><code>边界<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The cat scattered his food all over the room.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;cat&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure></code></pre><ul><li>6.2.单词边界  <code>\b</code>可以用来限制单词的边界，也就是规定单词的开头和结尾。，如下所示</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-151.png" alt="">    <pre><code>\\b单词边界<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;The cat scattered his food all over the room.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\bcat\\b&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>说明：`\b`:匹配的是这样一个位置，这个位置位于一个能够用来构成单词的字符(字母，数字，下划线，也就是与`\w`相匹配的字符)和一个不能用来构成单词的字符（也就是与\\w相匹配的字符）之间。  注意：要想精准的匹配某一个单词必须在其前后都要加上`\b单词\b`</code></pre><ul><li><p>如果不想匹配一个单词的边界，那么就可以使用<code>\B</code>了，看下面的例子  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-152.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Please enter the nine-digit id as it appears on your color - coded pass-key.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\B-\\B&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure><p>  <code>\\B-\\B</code>: 将匹配一个前后都不是单词边界的连字符。<code>nine-digit</code>和<code>pass-key</code>不能与之匹配，但<code>color - coded</code>中的连字符可以与之匹配。<br>  <strong>匹配单词</strong>的还有<code>\\&lt;单词\\&gt;</code>,但是swift4.0不支持，本人已经验证过了。</p></li><li><p>6.3、字符的边界</p><p>  单词边界可以用来进行与单词有关位置的匹配（单词的开头，单词的结束，整个单词等）。字符串边界有着类似的用途，只不过是用来进行与字符串有关的位置匹配而已（字符串的开头，字符串的结束，整个字符串等）。用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的<code>^</code>,另一个是用来定义字符串结尾的<code>$</code>.</p></li><li><p>  总结：<strong>正则表达式</strong>不仅仅可以用来匹配任意长度的文本块，还可以用来匹配出现在字符串中特定位置的文本。<code>\b</code>用来指定一个单词的边界（<code>\B</code>刚好相反）。<code>^</code>和<code>$</code>用来指定字符串的边界（字符串的开头和字符串的结束）。如果与<code>（?m）</code>配合使用，<code>^</code>和<code>$</code>还将匹配在一个换行处开头或结束的字符串（此时，换行符将被视为一个字符串分隔符）。</p></li></ul><h5 id="七、使用字表达式-元字符和字符是正则表达式的基本构件"><a href="#七、使用字表达式-元字符和字符是正则表达式的基本构件" class="headerlink" title="七、使用字表达式(元字符和字符是正则表达式的基本构件)"></a>七、使用字表达式(<code>元字符</code>和<code>字符</code>是<code>正则表达式</code>的<code>基本构件</code>)</h5><ul><li>7.1、什么是子表达式？<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-153.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Hello, my name is Ben&amp;nbsp;Forta, and I am the author of books on SQL, ColdFusion, WAP, Windows&amp;nbsp;&amp;nbsp;2000, and other subjects.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;&amp;nbsp;&#123;2,&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>  <code>&amp;nbsp;</code>：是HTML语言中的非换行空格字符。在这里使用模式<code>&amp;nbsp;&#123;2,&#125;</code>的本意是希望它能把 连续两次或更多次的重复出现找出来，但它没能给出我们所预期的结果。为什么会这样？因为**{2,}只作用于紧挨着它的前一个字符**，那是一个分号。如此一来，这个模式只能匹配像<code>&amp;nbsp;;;;</code>这样的文本，但无法匹配<code>&amp;nbsp;&amp;nbsp</code>。</li><li>7.2、子表达式  <strong>字表达式</strong>：是一个更大的表达式的一部分；把一个表达式划分为一系列表达式的目的是为了把那些字表达式当做一个独立元素来使用。字表达式必须用<code>()</code>括起来。<code>()</code>是元字符。如果要匹配<code>()</code>的话需要进行对它转义。看下面的例子  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-154.png" alt="">    ()的使用  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Hello, my name is Ben&amp;nbsp;Forta, and I am the author of books on SQL, ColdFusion, WAP, Windows&amp;nbsp;&amp;nbsp;2000, and other subjects.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(&amp;nbsp;)&#123;2,&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>  解释：<code>(&amp;nbsp;)</code>是一个字表达式，它将被视为一个独立的元素，而紧跟着在它后面的<code>&#123;2,&#125;</code>将做用于这个字表达式而不是仅仅作用于<code>;</code>。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-155.png" alt="">    <pre><code>&quot;(\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125;&quot;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Pinging hog.forta.com [12.159.46.200] with 32 bytes of data:&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>上面的例子中 `(\\d&#123;1,3&#125;\\.)`是一个**子表达式**，上面的匹配规则还可以写为`&quot;(\\d&#123;1,3&#125;\\.?)&#123;4&#125;&quot;`和`&quot;(\\d&#123;1,3&#125;\\.)&#123;3&#125;(\\d&#123;1,3&#125;)&quot;`。-   下面再写一个子表达式的匹配</code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-156.png" alt="">        <pre><code>    子表达式的匹配        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Hope clouds 1987-09-02 observation.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(19|20)\\d&#123;2&#125;&quot;,str: str, font: 22)</span><br></pre></td></tr></table></figure>    解释：`|`是**或**的意思。</code></pre><ul><li>7.3、子表达式的嵌套(下面的例子没有正确匹配：<strong>待解决</strong>)<br>  子表达式是允许嵌套的，实际上，子表达式允许多重嵌套，这种嵌套的层次在理论上没有限制，但在实际上应该合理的嵌套。下面的例子将全面的展示  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-157.png" alt="">    子表达式的嵌套  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;Pinging hog.forta.com [12.159.46.200] with 32 bytes of data:&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(((\\d&#123;1,2&#125;)|(1\\d&#123;2&#125;)|(2[0-4]\\d)|(25[0-5]))\\.)&#123;3&#125;(((25[0-5])|(2[0-4]\\d)|(1\\d&#123;2&#125;)|\\d&#123;1,2&#125;))&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>  注意：最后一个匹配的时候三位数要放到前面，否则的话匹配到<strong>两位数</strong>，<code>200</code>的最后一个<code>0</code>就不能匹配上了</li><li>7.4、总结<br>  <strong>子表达式</strong>的作用是把同一个表达式的各个相关部分组合在一起。子表达式必须用<code>()</code>来定义。子表达式的常见用途包括: 对重复次数元字符的作用对象作出精确的设定和控制、对<code>|</code>操作符条件作出准确额定义等，如有必要，子表达式还允许嵌套使用。</li></ul><h5 id="八、回溯引用，前后一致匹配"><a href="#八、回溯引用，前后一致匹配" class="headerlink" title="八、回溯引用，前后一致匹配"></a>八、回溯引用，前后一致匹配</h5><ul><li>8.1、回溯引用的作用（看下面的例子）<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-158.png" alt="">    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;BODY&gt;&lt;H1&gt;Welcom to my Homepage&lt;/H1&gt;\nContent is divided into two sections:&lt;BR&gt;\n &lt;H2&gt;ColodFusion&lt;/H2&gt;\nInformation about Macromedia ColodFusion.\n &lt;H2&gt;Wrieless&lt;/H2&gt;\n Information about Buletooth, 802.11, and more.\n &lt;H2&gt;This is not valid HTML&lt;/H3&gt;\n&lt;/BODY&gt;&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;&lt;[Hh][1-6]&gt;.*?&lt;/[Hh][1-6]&gt;&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>  解释：上面匹配按照规则是正确的，但是按照语法最后一个匹配是不正确的，因为H2和H3是不对应的标签。为了解决这个问题，下面阐述：<strong>回溯引用</strong></li><li>8.2、回溯引用匹配<ul><li>8.2.1、寻找连着的两个相同单词<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-159.png" alt="">    寻找连着的两个相同单词  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;This is a block of of text,serveral words here are repeated,and and they should not not be.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;[ ]+(\\w+)[ ]+\\1&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>  解释：<code>[ ]+</code>匹配一个或多个空格，<code>\w+</code>匹配一个或多个字母数字字符，<code>[ ]+</code>匹配随后的空格，注意 <code>\w+</code>是括在括号里的，它是一个子表达式。这个子表达式不是用来进行重复匹配的，这里不涉及到重复匹配的问题。这个子表达式只是把整个模式的一部分单独划分出来以便在后面引用。这个模式的最后一部分是<code>\1</code>;这是一个回溯引用。而它引用的正是前面划分出来的那个子表达式；当<code>(\w+)</code>匹配到单子<code>of</code>的时候，<code>\1</code>也匹配单词<code>of</code>;当<code>(\w+)</code>匹配到单词and的时候，<code>\1</code>也匹配到单词<code>and</code>。<br>  <strong>回溯引用</strong>指的是模式的后半部分引用在前半部分中定义的子表达式。<br>  <code>\1</code>代表模式里的第一个子表达式，<code>\2</code>代表模式里的第<code>2</code>个子表达式，以此类推，上面的例子将匹配到同一个单词的连续两次重复出现。</li><li>  8.2.2、解决8.1的最后一个不正确标签的匹配</li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-160.png" alt="">        <pre><code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;BODY&gt;&lt;H1&gt;Welcom to my Homepage&lt;/H1&gt;\nContent is divided into two sections:&lt;BR&gt;\n &lt;H2&gt;ColodFusion&lt;/H2&gt;\nInformation about Macromedia ColodFusion.\n &lt;H2&gt;Wrieless&lt;/H2&gt;\n Information about Buletooth, 802.11, and more.\n &lt;H2&gt;This is not valid HTML&lt;/H3&gt;\n&lt;/BODY&gt;&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;&lt;[Hh]([1-6])&gt;.*?&lt;/[Hh]\\1&gt;&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>    解释：`([1-6])`是一个集合的子表达式，`\1`匹配前面匹配到的`([1-6])`,所以说`H2`只能匹配到`H2`  注意：**不同的正则表达式在实现回溯引用的语法方面往往有着巨大的差异。**  提示：**回溯引用只能用来引用模式里的子表达式（（用（和））括起来的正则表达式片段）。**回溯引用通常从1开始计数（\\1、\\2等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。其实子表达式是通过它们的相对位置来引用的：\\1对应着第1个子表达式，\\5对应着第5个子表达式等等。这种语法是有问题的：如果子表达式的相对位置发生了变化，整个模式也许就不能再完成原来的工作，删除或者添加子表达式的后果可能更为严重。解决办法：是运用**命令捕获**。</code></pre><ul><li>8.3、回溯引用在替换操作中的应用（没理解透）</li><li>  8.4.大小写转换  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-161.png" alt="">    <pre><code>大小写转换</code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-162.png" alt="">    <pre><code>查找  替换使用： `$\\U$2\E$3`<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;BODY&gt;&lt;H1&gt;Welcom to my Homepage&lt;/H1&gt;\nContent is divided into two sections:&lt;BR&gt;\n &lt;H2&gt;ColodFusion&lt;/H2&gt;\nInformation about Macromedia ColodFusion.&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(&lt;[Hh]1&gt;)(.*?)(&lt;/[Hh]1&gt;)&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>分析：`&quot;(&lt;[Hh]1&gt;)(.*?)(&lt;/[Hh]1&gt;)&quot;`是三个子表达式就是为了使用回溯引用，说一下替换部分：`$1`包含着开始标签，`U$2\E`把第二个子表达式（b标题文字）转换为大写，`$3`包含着结束标签。</code></pre><ul><li>8.5、总结  子表达式用来定义字符或表达式的集合。除了可以用在重复匹配操作中意外，子表达式还可以在模式的内部被引用。这种引用被称为回溯引用。回溯引用的语法在不同的正则表达式实现里有很大的差异。回溯引用在文本匹配和文本替换操作里非常有用。</li></ul><h5 id="九、前后查找"><a href="#九、前后查找" class="headerlink" title="九、前后查找"></a>九、前后查找</h5><ul><li>9.1、向前查找<br>  <strong>向前查找</strong>指定了一个必须匹配但不在结果中返回的模式。向前查找实际就是一个子表达式，而且从格式上看也确实如此。从语法上看，一个<strong>向前查找模式其实就是一个以<code>?=</code>开头的子表达式，需要匹配的文本跟在<code>=</code>后面</strong>  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-163.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-164.png" alt="">    <pre><code>在向前查找里，被匹配的文本包含在最终返回的匹配结果里，被称为**“不消费”**。反之为**消费**。xiang  注意：向前查找和向后查找匹配本身其实是有返回结果的，只是这个结果的字节长度永远是0而已。因此，前后查找操作有时也被称为**零宽度匹配操作**。  **其实**，任何一个子表达式都可以转换为一个向前查找表达式，只要给它加上一个`?=`前缀即可。在同一个搜索模式里可以使用多个向前查找表达式，它们可以出现在模式里的任意位置（而不仅仅是出现在整个模式的开头，就像你们在上面看到的那样。）</code></pre><ul><li>9.2、向后查找  <code>?=</code>被称为向前查找的操作符，许多正则表达式还支持向后查找，也就是查找出现在被匹配文本之前的字符（但不消费它也就是不包含其后的文本），向后查找操作符是<code>?&lt;=</code>。<br>  <code>?&lt;=</code>与<code>?=</code>使用方法大同小异，它必须在一个子表达式里，而且后跟要匹配的文本。  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-165.png" alt="">    <pre><code>向后查找<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;ABC01: $23.45\nHGG42: $5.31\nCFMX1: $899.00\nXTC99: $69.96\nTotal items founf : 4&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(?&lt;=\\$)[0-9.]+&quot; ,str: str, font: 22)</span><br></pre></td></tr></table></figure>我们想要的是以`$`为基础匹配后面的消费金额，显然最后一种匹配最好。  提示：向前查找模式长度是可变的，它们可以包含.和+之类的元字符，所以非常灵活，而向后查找的模式只能是固定长度，这是一条几乎所有的正则表达式实现都遵循的限制。</code></pre><ul><li>  9.3.把向前查找和向后查找结合起来</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-166.png" alt="">    <pre><code>把向前查找和向后查找结合起来<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;HEAD&gt;\n&lt;TITLE&gt;Ben Forta&#x27;s Homepage&lt;/TITLE&gt;\n&lt;HEAD&gt;&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(?&lt;=&lt;[tT][iI][tT][lL][eE]&gt;).*(?=&lt;/[tT][iI][tT][lL][eE]&gt;)&quot; ,str: str, font: 18)</span><br></pre></td></tr></table></figure>说明：眼睛尖锐的大家可能已经看到了，上面我读`&lt;`进行了转义，再强调一下，向前查找`?=`(不消费)和向后查找`?&lt;=`(不消费)都是针对的子表达式来操作的。</code></pre><ul><li>  9.4、对前后查找取非</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-167.png" alt="">    <pre><code>各种前后取非操作符一般来说，凡是支持**正向前查找**的正则表达式也是支持**负向前查找**的，反之，凡是只是**正向后查找**的，也是支持**负向后查找**的。  </code></pre><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-168.png" alt="">    <pre><code>对前后查找取非上面大家可能看到了`\b`,单词的边界，去`\b`会有问题的，有兴趣的可以自己验证下。</code></pre><ul><li>9.5、总结  有了前后查找，我们就可以对最终的匹配结果包含哪些内容做出更精确的控制。前后查找操作使我们可以利用子表达式来指定文本操作的发生位置，并收到只匹配不消费的效果。正向前查找要用<code>(?=)</code>来定义，负向前查找要用<code>(?!)</code>来定义。有些正则表达式实现还支持正向后查找（响应的操作符是<code>(?&lt;=)</code>）和负向后查找（相应的操作符是<code>(?!&lt;)</code>）。</li></ul><h5 id="十、嵌入条件"><a href="#十、嵌入条件" class="headerlink" title="十、嵌入条件"></a>十、嵌入条件</h5><ul><li>10.1、为什么要嵌入条件？(看下面的例子)  <code>(123)456-7890</code>和<code>123-456-7890</code>都是可以接收的北美电话号码格式，而<code>1234567890</code>、<code>(123)-456-789</code>和<code>(123-456-7890)</code>虽然都包含着数字正确的字符，但是格式不对，看下面的匹配  </li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-169.png" alt="">    <pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;123-456-7890\n(123)456-7890\n(123)-456-7890\n(123-456-7890\n1234567890\n123 456 7890&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\(?\\d&#123;3&#125;\\)?-?\\d&#123;3&#125;-\\d&#123;4&#125;&quot; ,str: str, font: 24)</span><br></pre></td></tr></table></figure>分析：`\\(?`匹配的是一个可选的左括号， 请注意，这里必须对`(`进行转义； `\d&#123;3&#125;`匹配前三位数字；`\)?`匹配的是一个可选的右括号；`-？`匹配的是一个可选的连字符  上面的匹配`\\)?-`如果换做`[\\)-]?`这样的话`)`与`-`只能出现一个就能排除第三行，但是无法排除第4行，正确的匹配应该是：只在电话号码里有一个左括号（的时候才去匹配）。更准确地说，应该是如果电话号码里有一个左括号`（`，我们的模式必须去匹配`）`；如果不是这样，它就必须去匹配`-`,总之这种匹配需要条件。</code></pre><ul><li>10.2、正则表达式里的条件  正则表达式里的条件要用<code>?</code>来定义。事实上，你们已经见过几种非常特定的条件了。<ul><li><code>?</code>匹配前一个字符或者表达式，如果它存在的话（可有可无）。</li><li><code>?=</code>和<code>?&lt;=</code>匹配前面或后面的文本，如果它存在的话。<br>  嵌入条件语法也是用了<code>?</code>,这并没有什么让人感到吃惊的地方，因为嵌入条件不外乎以下两种情况。<ul><li>  根据前一个回溯引用来进行条件处理。</li><li>  根据前后查找来进行条件处理。</li></ul></li><li>10.2.1、回溯引用条件<br>  回溯引用条件只在一个前面的表达式搜索去的成功的情况下才允许使用一个表达式。看下面的例子，我们需要把一段文本里<code>&lt;IMG&gt;</code>标签全部都找出来；不仅仅如此，如果某个<code>&lt;IMG&gt;</code>标签是一个链接(被括在<A>和</A>标签之间)的话，你还要把整个链接标签匹配出来。<br>  用来定义这种条件的语法是<code>(?(backrefence)truepregex)</code>,其中<code>?</code>表明这是一个条件，括号里的 <code>backrefence</code>是一个回溯引用，<code>truepregex</code>是一个只在<code>backrefence</code>存在时才会被执行的表达式。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;&lt;!-- Nav bar --&gt;\n&lt;TD&gt;\n&lt;A HREF=/home&gt;&lt;IMG SRC=/imges/home.gif&gt;&lt;/A&gt;\n&lt;IMG SRC=/images/spacer.gif&gt;\n&lt;A HREF=/search&gt;&lt;IMG SRC=/imges/home.gif&gt;&lt;/A&gt;\n&lt;/A&gt;\n&lt;IMG SRC=/images/spacer.gif&gt;\n&lt;A HREF=/help&gt;&lt;IMG SRC=/imges/home.gif&gt;\n&lt;/TD&gt;&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(&lt;[Aa]\\s+[^&gt;]+&gt;\\s*)?&lt;[Ii][Mm][Gg]\\s+[^&gt;]+&gt;(?(1)\\s*&lt;/[Aa]&gt;)&quot; ,str: str, font: 24)</span><br></pre></td></tr></table></figure>  分析：这个模式不解释是不容易看明白的。<code>(&lt;[Aa]\\s+[^&gt;]+&gt;\\s*)?</code>将匹配一个<code>&lt;A&gt;</code>或<code>&lt;a&gt;</code>(以及<A>或<a>标签的任意属性)，这个标签可有可无（因为这个子表达式的最后有一个<code>?</code>）接下来，<code>&lt;[Ii][Mm][Gg]\\s+[^&gt;]+&gt;</code>匹配一个<code>&lt;IMG&gt;</code>(大小写均可)及其任意属性。<code>(?(1)\\s*&lt;/[Aa]&gt;)</code>是一个回溯引用条件，<code>?(1)</code>的含义是：如果第一个回溯引用条件（局具体到上面就是<A>标签）存在，则使用<code>\s*&lt;/[Aa]&gt;</code>继续进行匹配（换句话说，只有当前面的<A>标签匹配成功，才继续进行后面的匹配）。如果(1)存在，<code>\s*&lt;/[Aa]&gt;</code>将匹配结束标签<code>&lt;/A&gt;</code>之后出现的任意空白字符。<br>  注意：<code>(1)</code>检查第一个回溯引用是否存在，在条件里，回溯引用编号（本例中的1）不需要被转义。因此，<code>?(1)</code>是正确的，<code>?(\\1)</code>不正确（但是也能用）。<br>  我们刚才使用的模式只在给定的条件得到满足时候才执行一个表达式。条件还可以有否表达式，否则表达式只在给定的回溯引用不存在（也就是条件没有得到满足）时才会执行。用来定义这种条件的语法是<code>(?(backrefence)true-regex|false-regex)</code>,这个语法接受一个条件和两个将分别在这个条件得到满足和没有得到满足时执行的表达式。（下面就可以解决上面10.1电话号码的问题）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;123-456-7890\n(123)456-7890\n(123)-456-7890\n(123-456-7890\n1234567890\n123 456 7890&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;(\\()?\\d&#123;3&#125;(?(1)\\)|-)\\d&#123;3&#125;-\\d&#123;4&#125;&quot; ,str: str, font: 24)</span><br></pre></td></tr></table></figure></li></ul>  分析：从结果上看，这个模式解决了问题，但它是如何解决问题呢？和前面一样，<code>(\\()?</code>也匹配一个可选的左括号，但我们这次把它用括号括起来得到一个子表达式。随后的<code>\d&#123;3&#125;</code>匹配一位数字的区号。<code>(?(1)\\)|-)</code>是一个回溯引用条件，它将根据条件是否得到满足而去匹配<code>)</code>或<code>-</code>:如果<code>(1)</code>存在（也就是找到了一个左括号），<code>\\)</code>必须被匹配；否则，<code>-</code>必须被匹配。这样一来，只有配对出现的括号才会被匹配；如果没有使用括号或括号不配对，电话号码中的区域和其余数字之间的<code>-</code>必须被匹配。</li><li>10.2.2、前后查找条件  前后查找条件只在一个向前查找或向后查找操作取得成功的情况下才允许一个表达式被使用。定义一个前后查找条件的语法与定义一个回溯引用的条件的语法大同小异，只需要把回溯引用（括号里的回溯引用标号）替换为一个完整的前后查找表达式就行了。<ul><li>  例子一美国邮政编码匹配</li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-170.png" alt="">        <pre><code>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;11111\n22222\n33333-\n44444-4444&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\d&#123;5&#125;(-\\d&#123;4&#125;)?&quot; ,str: str, font: 24)</span><br></pre></td></tr></table></figure>        上面例子的更正：        <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str: String = &quot;11111\n22222\n33333-\n44444-4444&quot;</span><br><span class="line">label.attributedText = textRegex(pattern: &quot;\\d&#123;5&#125;(?(?=-)-\\d&#123;4&#125;)&quot; ,str: str, font: 24)</span><br></pre></td></tr></table></figure>        分析：`\d&#123;5&#125;`匹配前五位数字，接下来是一个`(?(?=-)-\\d&#123;4&#125;)`形式的向前查找条件。这个条件使用了`?=-`来匹配（但不消费）一个连字符，如果条件得到满足(那个连字符存在),`-\\d&#123;4&#125;`将匹配那个连字符和随后的4位数字。这样一来，`33333-`将被排除在最终的匹配结果之外（它有一个连字符，所以满足给定的条件，但那个连字符后面没有必须出现在那里的4位数字）。平时工作中嵌入查找的模式相当少见，这是因为我们往往可以用最简单的办法来达到同样的目的。    </code></pre><ul><li>10.3、总结  在正则表达式里面可以嵌入条件，只有相当条件得到（或者没有得到）满足时，相应的表达式才会被执行。这种条件可以是一个回溯引用（含义是检查该回溯引用是否存在），也可以是一个前后查找的操作。</li></ul><h5 id="十一、元字符表"><a href="#十一、元字符表" class="headerlink" title="十一、元字符表"></a>十一、元字符表</h5><ul><li>11.1、基本的元字符<ul><li>  <code>.</code> 匹配任意单个字符</li><li>  <code>|</code> 逻辑或操作符</li><li>  <code>[]</code> 匹配字符集合中的一个字符</li><li>  <code>[^]</code>对集合求非</li><li>  <code>-</code> 定义一个区间，如<code>[a-z]</code></li><li>  <code>\</code>对下一个字符转义</li></ul></li><li>11.2、数量元字符<ul><li>  <code>*</code>匹配前一个字符（子表达式）零次或者多次</li><li>  <code>*?</code> 是 <code>*</code>的懒惰型版本</li><li>  <code>+</code> 匹配前一个字符（子表达式）的一次或多次重复</li><li>  <code>+?</code> 是 <code>+</code>的懒惰型版本</li><li>  <code>?</code> 前一个字符可以可无，也就是最多匹配一次</li><li>  <code>&#123;n&#125;</code> 匹配前一个字符或者表达式n次</li><li>  <code>&#123;m,n&#125;</code>匹配前一个字符或表达式最少m次,最多n次</li><li>  <code>&#123;m,&#125;</code>匹配前一个字符至少m次</li><li>  <code>&#123;m,&#125;?</code> {m,}的懒惰型版本</li></ul></li><li>11.3、位置元字符<ul><li>  <code>^</code>匹配字符串的开头</li><li>  <code>\A</code>匹配字符串的开头</li><li>  <code>$</code>匹配字符串的结束</li><li>  <code>\z</code>匹配字符串的结束</li><li>  <code>\&lt;</code>单词匹配的开始</li><li>  <code>\&gt;</code>单词匹配的结束</li><li>  <code>\b</code> 单词匹配的边界（开头和结束）</li><li>  <code>\B</code>是 <code>\b</code>的反义</li></ul></li><li>11.4、特殊字符元字符<ul><li>  <code>[\b]</code>退格字符</li><li>  <code>\c</code> 匹配一个控制字符</li><li>  <code>\d</code> 匹配任意数字字符</li><li>  <code>\D</code> 匹配任意非数字字符</li><li>  <code>\f</code> 换页符</li><li>  <code>\n</code> 换行符</li><li>  <code>\r</code> 回车符</li><li>  <code>\s</code> 匹配一个空白字符</li><li>  <code>\S</code> 匹配一个非空白字符</li><li>  <code>\t</code> 制表符（Tab字符）</li><li>  <code>\v</code>垂直制表符</li><li>  <code>\w</code> 匹配任意数字、字母、下划线以及中文汉字</li><li>  <code>\W</code> 匹配任意非数字、非字母、非下划线以及非中文汉字</li><li>  <code>\x</code> 匹配一个十六进制数字</li><li>  <code>\0</code> 匹配一个八进制数字</li></ul></li><li>11.5、回溯引用和前后查找<ul><li>  <code>()</code>定义一个子表达式</li><li>  <code>\1</code>匹配第一个子表达式 <code>\2</code>代表匹配第二个子表达式</li><li>  <code>?=</code> 向前查找</li><li>  <code>?&lt;=</code> 向后查找</li><li>  <code>?!</code> 负向前查找</li><li>  <code>?&lt;!</code> 负向后查找</li><li>  <code>?()</code> 条件 （if then）</li><li>  <code>?()|</code> 条件（if then else）</li></ul></li><li>11.6、大小写转换</li><li><code>\E</code> 结束\L或\U转换</li><li><code>\l</code>把下一个字符转换为小写</li><li><code>\L</code>把后面的字符转换为小写直到遇见\E为止</li><li><code>\u</code> 把下一个字符转换为大写</li><li><code>\U</code> 把后面的字符转换为大写直到遇见\E为止</li><li>11.7、匹配模式<ul><li>  <code>(?m)</code>分行匹配模式</li></ul></li></ul><h5 id="十二、多规则匹配"><a href="#十二、多规则匹配" class="headerlink" title="十二、多规则匹配"></a>十二、多规则匹配</h5><ul><li>主要阐述多规则匹配的用法 <code>let pattern = pattern1 + &quot;|&quot; + pattern2 + &quot;|&quot; + pattern3</code> 看下面  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> let str = &quot;@joanking:【周杰伦的歌曲】#大眼睛#小猫咪这么尖叫[偷笑]、@老北: 蝉叫、狼这么尖叫[吃惊]、@乐不思蜀:达芬奇#烧饼#妙的笑到最后[挖鼻屎]！~ http://www.baidu.com&quot;</span><br><span class="line"> do&#123;</span><br><span class="line">   // 1.创建规则</span><br><span class="line">   let pattern1 = &quot;\\[.*?\\]&quot;</span><br><span class="line">   let pattern2 = &quot;@.*?:&quot;</span><br><span class="line">   let pattern3 = &quot;#.*?#&quot;</span><br><span class="line"> </span><br><span class="line">   // 多个规则之间使用 | 符号连接</span><br><span class="line">   let pattern = pattern1 + &quot;|&quot; + pattern2 + &quot;|&quot; + pattern3</span><br><span class="line"> </span><br><span class="line">   // 2.创建正则表达式对象</span><br><span class="line">   let regex = try NSRegularExpression(pattern: pattern, options: NSRegularExpression.Options.caseInsensitive)</span><br><span class="line">   // 3.开始匹配</span><br><span class="line">   let res = regex.matches(in: str, options: NSRegularExpression.MatchingOptions(rawValue: 0), range: NSMakeRange(0, str.count))</span><br><span class="line">   // 4取出结果</span><br><span class="line">   for checkingRes in res</span><br><span class="line">   &#123;</span><br><span class="line">     // print(checkingRes.range)</span><br><span class="line">     print((str as NSString).substring(with: checkingRes.range))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;catch</span><br><span class="line">&#123;</span><br><span class="line">    print(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="十三、正则练习的demo（有心的人可以看看，可以一起讨论一下回溯引用方面的知识，自己理解的不是很好）"><a href="#十三、正则练习的demo（有心的人可以看看，可以一起讨论一下回溯引用方面的知识，自己理解的不是很好）" class="headerlink" title="十三、正则练习的demo（有心的人可以看看，可以一起讨论一下回溯引用方面的知识，自己理解的不是很好）"></a>十三、正则练习的demo（有心的人可以看看，可以一起讨论一下回溯引用方面的知识，自己理解的不是很好）</h5><ul><li>  测试用的<a href="https://gitee.com/JKWC/JKRegex.git">JKRegex</a>demo</li></ul><p>转载自：<a href="https://www.jianshu.com/p/56da83a4e0ab">https://www.jianshu.com/p/56da83a4e0ab</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 文件读取和写入</title>
      <link href="/posts/2022/12/3cdeeeb7.html"/>
      <url>/posts/2022/12/3cdeeeb7.html</url>
      
        <content type="html"><![CDATA[<p>Swift 文件读取 和 写入</p><h3 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h3><p>读取本地txt资源：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//读取本地txt资源</span><br><span class="line">let path = Bundle.main.path(forResource:&quot;mapStr&quot;, ofType:&quot;txt&quot;)</span><br><span class="line">let text = try! String(contentsOfFile:path!, encoding: String.Encoding.utf8)</span><br></pre></td></tr></table></figure><p>是读取沙盒内的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//读取沙盒内的文件</span><br><span class="line">let url:URL?=URL.init(string:NSHomeDirectory() + &quot;/Documents/test.txt&quot;);</span><br><span class="line">let text = try! String(contentsOfFile:url!.relativePath, encoding: String.Encoding.utf8)</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let msg = &quot;需要写入的资源&quot;</span><br><span class="line">let fileName = &quot;学习笔记.text&quot;</span><br><span class="line"></span><br><span class="line">let fileManager = FileManager.default</span><br><span class="line">let file = NSSearchPathForDirectoriesInDomains(FileManager.SearchPathDirectory.documentDirectory, FileManager.SearchPathDomainMask.userDomainMask, true).first</span><br><span class="line">let path = file! + fileName</span><br><span class="line"></span><br><span class="line">fileManager.createFile(atPath: path, contents:nil, attributes:nil)</span><br><span class="line"></span><br><span class="line">let handle = FileHandle(forWritingAtPath:path)</span><br><span class="line">handle?.write(msg.data(using: String.Encoding.utf8)!)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift图片和Base64互相转换</title>
      <link href="/posts/2022/12/8db15c40.html"/>
      <url>/posts/2022/12/8db15c40.html</url>
      
        <content type="html"><![CDATA[<p>Swift 5 图片和Base64互相转换，话不多说，直接上代码：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController1: UIViewController &#123;</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        self.navigationItem.title = &quot;Main View&quot;</span><br><span class="line">        </span><br><span class="line">        let imageView = UIImageView()</span><br><span class="line">        imageView.frame = CGRect(x: 50, y: 50, width: 200, height: 200)</span><br><span class="line">        imageView.contentMode = .scaleAspectFit</span><br><span class="line">        view.addSubview(imageView)</span><br><span class="line">        </span><br><span class="line">        //Convert image to Base 64 String</span><br><span class="line">        let myImageName = &quot;apple.png&quot;</span><br><span class="line">        let myImage = UIImage(named: myImageName)</span><br><span class="line">        imageView.image = myImage</span><br><span class="line">        let imageStringData = convertImageToBase64(image: myImage!)</span><br><span class="line">        print(&quot;IMAGE base64 String: \(imageStringData)&quot;)</span><br><span class="line">        </span><br><span class="line">        //Convert Base 64 String back to Image</span><br><span class="line">        let imageView2 = UIImageView()</span><br><span class="line">        imageView2.frame = CGRect(x: 300, y: 50, width: 200, height: 200)</span><br><span class="line">        imageView2.contentMode = .scaleAspectFit</span><br><span class="line">        view.addSubview(imageView2)</span><br><span class="line">        imageView2.image = convertBase64ToImage(imageString: imageStringData)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func convertImageToBase64(image: UIImage) -&gt; String &#123;</span><br><span class="line">        let imageData = image.pngData()!</span><br><span class="line">        return imageData.base64EncodedString(options: Data.Base64EncodingOptions.lineLength64Characters)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func convertBase64ToImage(imageString: String) -&gt; UIImage &#123;</span><br><span class="line">        let imageData = Data(base64Encoded: imageString,</span><br><span class="line">                             options: Data.Base64DecodingOptions.ignoreUnknownCharacters)!</span><br><span class="line">        return UIImage(data: imageData)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - UserNotifications框架使用详解7（自定义通知详情视图）</title>
      <link href="/posts/2022/11/b707fe9d.html"/>
      <url>/posts/2022/11/b707fe9d.html</url>
      
        <content type="html"><![CDATA[<p>iOS 10 中添加了两个与通知相关的 extension：Service Extension 和 Content Extension。前者我在上文中已经介绍过了，本文介绍下后者：可以用来自定义通知的详细页面视图的 Content Extension。</p><h2 id="十五、创建-Notification-Content-Extension"><a href="#十五、创建-Notification-Content-Extension" class="headerlink" title="十五、创建 Notification Content Extension"></a>十五、创建 Notification Content Extension</h2><h3 id="1，操作步骤"><a href="#1，操作步骤" class="headerlink" title="1，操作步骤"></a>1，操作步骤</h3><p>（1）首先我们点击”File” -&gt; “New” -&gt; “Target…”，使用 NotificationContent 的模板来创建一个 NotificationContent。  </p><span id="more"></span>  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-89.png" alt=""><p>（2）使用模版创建完毕后，会自动生成如下三个文件：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-95.png" alt="">  <p>（3）NotificationViewController.swift</p><ul><li>  这个是一个实现了 UNNotificationContentExtension 的 UIViewController 子类。 </li><li>  该 extension 中有一个必须实现的方法 didReceive(_:)。当系统需要显示自定义样式的通知详情视图时，这个方法将被调用，然后我们可以在其中配置更新我们的 UI。</li><li>  默认生成的代码如下：直接将通知内容显示在 label 中。我们先不做修改。</li></ul><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2"><code class="swift keyword">import</code> <code class="swift color2">UserNotificationsUI</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift keyword">class</code> <code class="swift color2">NotificationViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code><code class="swift plain">, </code><code class="swift color2">UNNotificationContentExtension</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@IBOutlet</code> <code class="swift keyword">var</code> <code class="swift plain">label: </code><code class="swift color2">UILabel</code><code class="swift plain">?</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">didReceive(_ notification: </code><code class="swift color2">UNNotification</code><code class="swift plain">) &#123;</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.label?.text = notification.request.content.body</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number16 index15 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（4）MainInterface.storyboard</p><ul><li>  这里定义了该 extension 对应的详情视图 UI。</li><li>  默认生成的 UI 如下：只有一个 label 文本标签。我们先不做修改。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-96.png" alt="">  <p>（5）Info.plist</p><ul><li>  这里指定了该 extension 的各种配置。我们可以通过 Info.plist 控制通知详细视图的尺寸，以及是否显示原始的通知。</li><li>  要特别注意的是 UNNotificationExtensionCategory 这个 key 值，它指定这个通知样式所对应的 category 标识符。系统在接收到通知后会通过 category 标识符先查找有没有能够处理这类通知的 content extension，如果存在，那么就交给这个 extension 来进行处理。</li><li>  默认生成的 category 标识符是 myNotificationCategory。我们先不做修改。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-97.png" alt="">  <h3 id="2，使用样例"><a href="#2，使用样例" class="headerlink" title="2，使用样例"></a>2，使用样例</h3><p>（1）下面代码在页面加载完毕后会自动创建个 5 秒后的推送通知。注意的是我们将通知的 categoryIdentifier 设置成上面 content extension 的 category 标识符。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">class</code> <code class="swift color2">ViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置推送内容</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.title = </code><code class="swift string">"hangge.com"</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.body = </code><code class="swift string">"做最好的开发者知识平台"</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置category标识符</code></div><div class="line number15 index14 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.categoryIdentifier = </code><code class="swift string">"myNotificationCategory"</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知触发器</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">trigger = </code><code class="swift color2">UNTimeIntervalNotificationTrigger</code><code class="swift plain">(timeInterval: 5, repeats: </code><code class="swift keyword">false</code><code class="swift plain">)</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置请求标识符</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置一个通知请求</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceiveMemoryWarning() &#123;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.didReceiveMemoryWarning()</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number38 index37 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）可以看到通知的详情视图已经变成我们自定义的视图了。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-98.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-111.png" alt="">  <h2 id="十六、自定义通知详情视图（并添加-UI-交互功能）"><a href="#十六、自定义通知详情视图（并添加-UI-交互功能）" class="headerlink" title="十六、自定义通知详情视图（并添加 UI 交互功能）"></a>十六、自定义通知详情视图（并添加 UI 交互功能）</h2><h3 id="1，效果图"><a href="#1，效果图" class="headerlink" title="1，效果图"></a>1，效果图</h3><p>（1）这里我们推送一条使用自定义详情视图的通知，这个通知里其实包含了三条新闻资讯。</p><p>（2）打开通知详情时，会显示第一条资讯的标题、内容摘要、以及相关图片。下方还有三个交互按钮：</p><ul><li>  点击“换一条”按钮，这个通知视图会继续显示，不过内容会切换成下一条资讯。</li><li>  点击“打开”按钮，则自动打开应用。我们可以在程序中进行下一步操作，比如打开对应的新闻详情页面。</li><li>  点击”取消“按钮，则自动清除通知，且不会打开应用。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-112.png" alt="">  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-113.png" alt="">  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-114.png" alt=""><h3 id="2，Notification-Content-Extension-配置"><a href="#2，Notification-Content-Extension-配置" class="headerlink" title="2，Notification Content Extension 配置"></a>2，Notification Content Extension 配置</h3><p>（1）MainInterface.storyboard</p><ul><li>  这里我们在视图上添加两个 Label 和一个 ImageView，分别用来显示新闻资讯的标题、内容摘要、以及图片。</li><li>  同时还要设置好各个组件的约束，并在代码中做好 @IBOutlet 关联。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-115.png" alt="">  <p>（2）NotificationViewController.swift</p><p>我们在这里对详情视图进行显示和更新操作。特别注意的是，虽然我们可以使用包括按钮在内的各种 UI 组件，但是系统不允许我们与这些 UI 进行交互。点击通知视图本身会直接将我们导航到应用中，因此我们需要通过 action 按钮的方式来对视图进行更新。</p><p>didReceive(_:completionHandler:)方法介绍：<br>它是 UNNotificationContentExtension 的一个可选方法，它会在用户选择了某个 action 时被调用。我们可以根据情况给 completionHandler 传递不同的值实现不同操作：  </p><ul><li>  如果需要更新详情视图，可以选择传递 .doNotDismiss 来保持通知继续被显示。</li><li>  如果没有继续显示的必要，传递 .dismissAndForwardAction 会打开应用，并把通知的 action 继续传递给应用的 UNUserNotificationCenterDelegate 中的 userNotificationCenter(:didReceive:withCompletionHandler)</li><li>  而传递 .dismiss 则直接将这个通知清除，同时也不会打开这个应用。</li></ul><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div class="line number78 index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div class="line number80 index79 alt1">80</div><div class="line number81 index80 alt2">81</div><div class="line number82 index81 alt1">82</div><div class="line number83 index82 alt2">83</div><div class="line number84 index83 alt1">84</div><div class="line number85 index84 alt2">85</div><div class="line number86 index85 alt1">86</div><div class="line number87 index86 alt2">87</div><div class="line number88 index87 alt1">88</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2"><code class="swift keyword">import</code> <code class="swift color2">UserNotificationsUI</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//资讯条目</code></div><div class="line number6 index5 alt1"><code class="swift keyword">struct</code> <code class="swift color2">NewsItem</code> <code class="swift plain">&#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">title: </code><code class="swift color1">String</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">abstract: </code><code class="swift color1">String</code></div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">url: </code><code class="swift color2">URL</code></div><div class="line number10 index9 alt1"><code class="swift plain">&#125;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="swift keyword">class</code> <code class="swift color2">NotificationViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code><code class="swift plain">, </code><code class="swift color2">UNNotificationContentExtension</code> <code class="swift plain">&#123;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//显示资讯标题</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@IBOutlet</code> <code class="swift keyword">var</code> <code class="swift plain">titleLabel: </code><code class="swift color2">UILabel</code><code class="swift plain">!</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//显示资讯内容摘要</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@IBOutlet</code> <code class="swift keyword">weak</code> <code class="swift keyword">var</code> <code class="swift plain">abstractLabel: </code><code class="swift color2">UILabel</code><code class="swift plain">!</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//显示资讯图片</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@IBOutlet</code> <code class="swift keyword">weak</code> <code class="swift keyword">var</code> <code class="swift plain">imageView: </code><code class="swift color2">UIImageView</code><code class="swift plain">!</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//当前显示的资讯索引</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">var</code> <code class="swift plain">index: </code><code class="swift color1">Int</code> <code class="swift plain">= 0</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//所有资讯条目</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">items: [</code><code class="swift color2">NewsItem</code><code class="swift plain">] = []</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//收到通知</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">didReceive(_ notification: </code><code class="swift color2">UNNotification</code><code class="swift plain">) &#123;</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//处理资讯条目</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = notification.request.content</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">news = content.userInfo[</code><code class="swift string">"news"</code><code class="swift plain">] </code><code class="swift keyword">as</code><code class="swift plain">? [[</code><code class="swift color1">String</code><code class="swift plain">: </code><code class="swift color1">String</code><code class="swift plain">]] &#123;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">for</code> <code class="swift plain">i </code><code class="swift keyword">in</code> <code class="swift plain">0..&lt;news.count &#123;</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">title = news[i][</code><code class="swift string">"title"</code><code class="swift plain">] ?? </code><code class="swift string">""</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">abstract = news[i][</code><code class="swift string">"abstract"</code><code class="swift plain">] ?? </code><code class="swift string">""</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">url = content.attachments[i].url</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">presentItem = </code><code class="swift color2">NewsItem</code><code class="swift plain">(title: title, abstract: abstract, url: url)</code></div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.items.append(presentItem)</code></div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number45 index44 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number46 index45 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number47 index46 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//显示第一条资讯</code></div><div class="line number48 index47 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">updateNews(index: 0)</code></div><div class="line number49 index48 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number50 index49 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number51 index50 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//更新显示的资讯内容</code></div><div class="line number52 index51 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">updateNews(index: </code><code class="swift color1">Int</code><code class="swift plain">) &#123;</code></div><div class="line number53 index52 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">item = items[index]</code></div><div class="line number54 index53 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number55 index54 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//更新标题和内容摘要</code></div><div class="line number56 index55 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.titleLabel!.text = item.title</code></div><div class="line number57 index56 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.abstractLabel.text = item.abstract</code></div><div class="line number58 index57 alt1">&nbsp;</div><div class="line number59 index58 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//更新图片</code></div><div class="line number60 index59 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">item.url.startAccessingSecurityScopedResource() &#123;</code></div><div class="line number61 index60 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.imageView.image = </code><code class="swift color2">UIImage</code><code class="swift plain">(contentsOfFile: item.url.path)</code></div><div class="line number62 index61 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">item.url.stopAccessingSecurityScopedResource()</code></div><div class="line number63 index62 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number64 index63 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number65 index64 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.index = index</code></div><div class="line number66 index65 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number67 index66 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number68 index67 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//Action按钮点击响应</code></div><div class="line number69 index68 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">didReceive(_ response: </code><code class="swift color2">UNNotificationResponse</code><code class="swift plain">, completionHandler completion:</code></div><div class="line number70 index69 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@escaping</code> <code class="swift plain">(</code><code class="swift color2">UNNotificationContentExtensionResponseOption</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number71 index70 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">response.actionIdentifier == </code><code class="swift string">"change"</code> <code class="swift plain">&#123;</code></div><div class="line number72 index71 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//切换下一条资讯</code></div><div class="line number73 index72 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">nextIndex = (index + 1) % items.count</code></div><div class="line number74 index73 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">updateNews(index: nextIndex)</code></div><div class="line number75 index74 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//保持通知继续被显示</code></div><div class="line number76 index75 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completion(.doNotDismiss)</code></div><div class="line number77 index76 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125; </code><code class="swift keyword">else</code> <code class="swift keyword">if</code> <code class="swift plain">response.actionIdentifier == </code><code class="swift string">"open"</code> <code class="swift plain">&#123;</code></div><div class="line number78 index77 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//取消这个通知并继续传递Action</code></div><div class="line number79 index78 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completion(.dismissAndForwardAction)</code></div><div class="line number80 index79 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125; </code><code class="swift keyword">else</code> <code class="swift keyword">if</code> <code class="swift plain">response.actionIdentifier == </code><code class="swift string">"dismiss"</code> <code class="swift plain">&#123;</code></div><div class="line number81 index80 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//直接取消这个通知</code></div><div class="line number82 index81 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completion(.dismiss)</code></div><div class="line number83 index82 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125; </code><code class="swift keyword">else</code> <code class="swift plain">&#123;</code></div><div class="line number84 index83 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//取消这个通知并继续传递Action</code></div><div class="line number85 index84 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completion(.dismissAndForwardAction)</code></div><div class="line number86 index85 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number87 index86 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number88 index87 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（3）extension 的 Info.plist</p><p>通知扩展对应的 category 标识符这里不做修改。主要修改下 UNNotificationExtensionInitialContentSizeRatio 这个 key 值，它是 UI 界面默认的高宽比，将其修改成 0.8，这样在界面出来的时候不会有很突兀的 frame 改变。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-116.png" alt="">  <h3 id="3，Notification-Content-Extension-使用"><a href="#3，Notification-Content-Extension-使用" class="headerlink" title="3，Notification Content Extension 使用"></a>3，Notification Content Extension 使用</h3><p>（1）AppDelegate.swift</p><p>这里要注意的是我们注册一个通知 category，里面包含三个 Action 按钮。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1 highlighted">42</div><div class="line number43 index42 alt2 highlighted">43</div><div class="line number44 index43 alt1 highlighted">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1 highlighted">46</div><div class="line number47 index46 alt2 highlighted">47</div><div class="line number48 index47 alt1 highlighted">48</div><div class="line number49 index48 alt2 highlighted">49</div><div class="line number50 index49 alt1 highlighted">50</div><div class="line number51 index50 alt2 highlighted">51</div><div class="line number52 index51 alt1 highlighted">52</div><div class="line number53 index52 alt2 highlighted">53</div><div class="line number54 index53 alt1 highlighted">54</div><div class="line number55 index54 alt2 highlighted">55</div><div class="line number56 index55 alt1 highlighted">56</div><div class="line number57 index56 alt2 highlighted">57</div><div class="line number58 index57 alt1 highlighted">58</div><div class="line number59 index58 alt2 highlighted">59</div><div class="line number60 index59 alt1 highlighted">60</div><div class="line number61 index60 alt2 highlighted">61</div><div class="line number62 index61 alt1 highlighted">62</div><div class="line number63 index62 alt2 highlighted">63</div><div class="line number64 index63 alt1 highlighted">64</div><div class="line number65 index64 alt2 highlighted">65</div><div class="line number66 index65 alt1 highlighted">66</div><div class="line number67 index66 alt2 highlighted">67</div><div class="line number68 index67 alt1 highlighted">68</div><div class="line number69 index68 alt2 highlighted">69</div><div class="line number70 index69 alt1">70</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">@UIApplicationMain</code></div><div class="line number5 index4 alt2"><code class="swift keyword">class</code> <code class="swift color2">AppDelegate</code><code class="swift plain">: </code><code class="swift color2">UIResponder</code><code class="swift plain">, </code><code class="swift color2">UIApplicationDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">window: </code><code class="swift color2">UIWindow</code><code class="swift plain">?</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">application(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">, didFinishLaunchingWithOptions</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">launchOptions: [</code><code class="swift color2">UIApplicationLaunchOptionsKey</code><code class="swift plain">: </code><code class="swift color2">Any</code><code class="swift plain">]?) -&gt; </code><code class="swift color1">Bool</code> <code class="swift plain">&#123;</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current()</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.requestAuthorization(options: [.alert, .sound, .badge]) &#123;</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">(accepted, error) </code><code class="swift keyword">in</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">!accepted &#123;</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"用户不允许消息通知。"</code><code class="swift plain">)</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//注册category</code></div><div class="line number21 index20 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">registerNotificationCategory()</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">true</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillResignActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidEnterBackground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillEnterForeground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidBecomeActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillTerminate(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number40 index39 alt1">&nbsp;</div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//注册一个category</code></div><div class="line number42 index41 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">registerNotificationCategory() &#123;</code></div><div class="line number43 index42 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">newsCategory: </code><code class="swift color2">UNNotificationCategory</code> <code class="swift plain">= &#123;</code></div><div class="line number44 index43 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建三个普通的按钮action</code></div><div class="line number45 index44 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">changeAction = </code><code class="swift color2">UNNotificationAction</code><code class="swift plain">(</code></div><div class="line number46 index45 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift string">"change"</code><code class="swift plain">,</code></div><div class="line number47 index46 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"换一条"</code><code class="swift plain">,</code></div><div class="line number48 index47 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [])</code></div><div class="line number49 index48 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number50 index49 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">openAction = </code><code class="swift color2">UNNotificationAction</code><code class="swift plain">(</code></div><div class="line number51 index50 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift string">"open"</code><code class="swift plain">,</code></div><div class="line number52 index51 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"打开"</code><code class="swift plain">,</code></div><div class="line number53 index52 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [.foreground])</code></div><div class="line number54 index53 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number55 index54 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建普通的按钮action</code></div><div class="line number56 index55 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">cancelAction = </code><code class="swift color2">UNNotificationAction</code><code class="swift plain">(</code></div><div class="line number57 index56 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift string">"cancel"</code><code class="swift plain">,</code></div><div class="line number58 index57 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"取消"</code><code class="swift plain">,</code></div><div class="line number59 index58 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [.destructive])</code></div><div class="line number60 index59 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number61 index60 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建category</code></div><div class="line number62 index61 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift color2">UNNotificationCategory</code><code class="swift plain">(identifier: </code><code class="swift string">"myNotificationCategory"</code><code class="swift plain">,</code></div><div class="line number63 index62 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">actions: [changeAction, openAction, cancelAction],</code></div><div class="line number64 index63 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">intentIdentifiers: [], options: [])</code></div><div class="line number65 index64 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;()</code></div><div class="line number66 index65 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number67 index66 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//把category添加到通知中心</code></div><div class="line number68 index67 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().setNotificationCategories([newsCategory])</code></div><div class="line number69 index68 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number70 index69 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）ViewController.swift</p><p>我们同样是页面打开后就推送个 5 秒后的通知。注意的是这里会给通知添加附加信息（包含资讯标题和内容摘要），以及资讯使用的图片附件。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1 highlighted">32</div><div class="line number33 index32 alt2 highlighted">33</div><div class="line number34 index33 alt1 highlighted">34</div><div class="line number35 index34 alt2 highlighted">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">class</code> <code class="swift color2">ViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置推送内容</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.body = </code><code class="swift string">"今日资讯精选【2017-12-12】"</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知category标识符</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.categoryIdentifier = </code><code class="swift string">"myNotificationCategory"</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知附件图片</code></div><div class="line number17 index16 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">imageNames = [</code><code class="swift string">"image1"</code><code class="swift plain">, </code><code class="swift string">"image2"</code><code class="swift plain">, </code><code class="swift string">"image3"</code><code class="swift plain">]</code></div><div class="line number18 index17 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">attachments = imageNames.flatMap &#123; name -&gt; </code><code class="swift color2">UNNotificationAttachment</code><code class="swift plain">? </code><code class="swift keyword">in</code></div><div class="line number19 index18 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">imageURL = </code><code class="swift color2">Bundle</code><code class="swift plain">.main.url(forResource: name, withExtension: </code><code class="swift string">"png"</code><code class="swift plain">) &#123;</code></div><div class="line number20 index19 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift plain">try? </code><code class="swift color2">UNNotificationAttachment</code><code class="swift plain">(identifier: </code><code class="swift string">"\(name)"</code><code class="swift plain">, url: imageURL,</code></div><div class="line number21 index20 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: </code><code class="swift keyword">nil</code><code class="swift plain">)</code></div><div class="line number22 index21 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number23 index22 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">nil</code></div><div class="line number24 index23 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number25 index24 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.attachments = attachments</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知附加信息（资讯标题和内容摘要）</code></div><div class="line number28 index27 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.userInfo = [</code><code class="swift string">"news"</code><code class="swift plain">: [</code></div><div class="line number29 index28 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">[</code><code class="swift string">"title"</code><code class="swift plain">: </code><code class="swift string">"全国人民喜迎油价上涨"</code><code class="swift plain">,</code></div><div class="line number30 index29 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"abstract"</code><code class="swift plain">: </code><code class="swift string">"据国内多家测评机构的分析，国内成品油零售限价将迎来“两连涨”..."</code><code class="swift plain">],</code></div><div class="line number31 index30 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">[</code><code class="swift string">"title"</code><code class="swift plain">: </code><code class="swift string">"房价同比下降城市大幅扩容"</code><code class="swift plain">,</code></div><div class="line number32 index31 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"abstract"</code><code class="swift plain">: </code><code class="swift string">"70个大中城市中一二三线城市房价同比涨幅继续回落。这意味着，往年..."</code><code class="swift plain">],</code></div><div class="line number33 index32 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">[</code><code class="swift string">"title"</code><code class="swift plain">: </code><code class="swift string">"比特币市值再创新高"</code><code class="swift plain">,</code></div><div class="line number34 index33 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"abstract"</code><code class="swift plain">: </code><code class="swift string">"一项名为SegWit2X的技术取消升级，导致在本周一比特币市值蒸发多达380亿美元..."</code><code class="swift plain">]</code></div><div class="line number35 index34 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">]]</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知触发器</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">trigger = </code><code class="swift color2">UNTimeIntervalNotificationTrigger</code><code class="swift plain">(timeInterval: 5, repeats: </code><code class="swift keyword">false</code><code class="swift plain">)</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置请求标识符</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置一个通知请求</code></div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number45 index44 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number46 index45 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number47 index46 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number48 index47 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number49 index48 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number50 index49 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number51 index50 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number52 index51 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number53 index52 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number54 index53 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number55 index54 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceiveMemoryWarning() &#123;</code></div><div class="line number56 index55 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.didReceiveMemoryWarning()</code></div><div class="line number57 index56 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number58 index57 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table><p>源码下载：<img src="https://www.hangge.com/blog/admin/include/edit/sysimage/icon16/zip.gif"><a href="https://www.hangge.com/blog_uploads/201711/2017111821331920360.zip">hangge_1845.zip</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - UserNotifications框架使用详解6（ServiceExtension、多媒体内容推送</title>
      <link href="/posts/2022/11/fafa307a.html"/>
      <url>/posts/2022/11/fafa307a.html</url>
      
        <content type="html"><![CDATA[<h2 id="十二、使用-Notification-Service-Extension-拦截并修改通知"><a href="#十二、使用-Notification-Service-Extension-拦截并修改通知" class="headerlink" title="十二、使用 Notification Service Extension 拦截并修改通知"></a>十二、使用 Notification Service Extension 拦截并修改通知</h2><p>iOS 10 中添加了两个与通知相关的 extension：Service Extension 和 Content Extension。本文先介绍下前者。</p><h3 id="1，基本介绍"><a href="#1，基本介绍" class="headerlink" title="1，基本介绍"></a>1，基本介绍</h3><ul><li>  Service Extension 目前只对远程推送的通知有效。</li><li>  Service Extension 可以让我们有机会在收到远程推送通知后，展示之前对通知内容进行修改。</li></ul><p>通过本机截取推送并替换内容的方式，我们可以实现端到端 (end-to-end) 的推送加密：<br>我们在服务器推送 payload 中加入加密过的文本，在客户端接到通知后使用预先定义或者获取过的密钥进行解密，然后立即显示。<br>这样一来，即使推送信道被第三方截取，其中所传递的内容也还是安全的。使用这种方式来发送密码或者敏感信息，对于一些金融业务应用和聊天应用来说，应该是必备的特性。</p><span id="more"></span><h3 id="2，使用说明"><a href="#2，使用说明" class="headerlink" title="2，使用说明"></a>2，使用说明</h3><p>（1）首先我们点击”File” -&gt; “New” -&gt; “Target…”，使用 NotificationService 的模板来创建一个 NotificationService。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-85.png" alt="">  <p>（2）NotificationService 的模板已经自动为我们生成了一些基本代码，这里对其稍作修改（自动给通知内容后面加上一个小尾巴）。NotificationService 里特别要注意如下两个方法：  </p><p>1，didReceive<br>该方法中有一个等待发送的通知请求。我们通过修改这个请求中的 content 内容，然后在限制的时间内将修改后的内容通过调用 contentHandler 返还给系统，就可以显示这个修改过的通知了。  </p><p>2，serviceExtensionTimeWillExpire<br>在一定时间内如果没有调用 contentHandler 的话，系统会调用这个方法，来告诉我们时间到了：  </p><ul><li>  我们可以什么都不做，这样的话系统便当作什么都没发生，简单地显示原来的通知。</li><li>  或许我们已经设置好了绝大部分内容，只是有很少一部分没有完成。这时我们也可以像例子中这样调用 contentHandler 来显示一个变更到一半的通知。</li></ul><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="swift keyword">class</code> <code class="swift color2">NotificationService</code><code class="swift plain">: </code><code class="swift color2">UNNotificationServiceExtension</code> <code class="swift plain">&#123;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">contentHandler: ((</code><code class="swift color2">UNNotificationContent</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">)?</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">bestAttemptContent: </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">?</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//我们可以在后台处理接收到的推送，让后传递修改后的的内容给contentHandler进行展示</code></div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceive(_ request: </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">,</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">withContentHandler contentHandler: </code><code class="swift keyword">@escaping</code> <code class="swift plain">(</code><code class="swift color2">UNNotificationContent</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.contentHandler = contentHandler</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">bestAttemptContent = (request.content.mutableCopy() </code><code class="swift keyword">as</code><code class="swift plain">? </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">)</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">bestAttemptContent = bestAttemptContent &#123;</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//给通知内容添加个小尾巴</code></div><div class="line number16 index15 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">bestAttemptContent.body = </code><code class="swift string">"\(bestAttemptContent.body) 【来自hangge.com】"</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">contentHandler(bestAttemptContent)</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//如果我们获取消息后一段时间内没有调用 contentHandler 的话，系统会调用这个方法</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">serviceExtensionTimeWillExpire() &#123;</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//如果消息没处理好，我们也将这个没处理完毕的消息进行展示</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">contentHandler = contentHandler, </code><code class="swift keyword">let</code> <code class="swift plain">bestAttemptContent =&nbsp; bestAttemptContent &#123;</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">contentHandler(bestAttemptContent)</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number29 index28 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（3）如果需要调试这个通知扩展类，注意 Target 要选择 NotificationService，然后编译运行时选择我们的程序。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-86.png" alt="">  <p>（4）同时 Service Extension 的发布版本要低于设备的版本（比如我手机是 10.3.1，那么这里可以直接设置为 10）。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-87.png" alt="">  <p>（5）最后我们在远程通知的 payload 中增加一个 mutable-content 值为 1 的项来启用内容修改（这个一定要有，否则可能会拦截通知失败）。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift plain">&#123;</code></div><div class="line number2 index1 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"aps"</code><code class="swift plain">: &#123;</code></div><div class="line number3 index2 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"alert"</code><code class="swift plain">: &#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"title"</code><code class="swift plain">: </code><code class="swift string">"最新资讯"</code><code class="swift plain">,</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"body"</code><code class="swift plain">: </code><code class="swift string">"2017全国文明城市公布"</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;,</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"sound"</code><code class="swift plain">: </code><code class="swift string">"default"</code><code class="swift plain">,</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"badge"</code><code class="swift plain">: 1,</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"mutable-content"</code><code class="swift plain">: 1</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;,</code></div><div class="line number11 index10 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（6）可以看到客户端这边收到通知后，会自动在内容尾部增加一个段小尾巴（【来自hangge.com】）  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-88.png" alt="">  <h2 id="十三、为本地通知添加多媒体内容"><a href="#十三、为本地通知添加多媒体内容" class="headerlink" title="十三、为本地通知添加多媒体内容"></a>十三、为本地通知添加多媒体内容</h2><p>多媒体推送是 iOS10 新增加的一个功能。我们可以在通知中嵌入图片或者视频，这极大地丰富了推送内容的可读性和趣味性。</p><h3 id="1，使用说明"><a href="#1，使用说明" class="headerlink" title="1，使用说明"></a>1，使用说明</h3><ul><li>  为本地通知添加多媒体内容十分简单，只需要通过本地磁盘上的文件 URL 创建一个 UNNotificationAttachment 对象，然后将这个对象放到数组中赋值给 content 的 attachments 属性就可以了。</li><li>  attachments 虽然是一个数组，但是系统只会展示第一个 attachment 对象的内容。不过我们依然可以发送多个 attachments，然后在要展示的时候再重新安排它们的顺序，以显示最符合情景的图片或者视频。另外，我们也可能会在自定义通知展示 UI 时用到多个 attachment，这个我们下文会进行演示。</li><li>  系统在创建 attachement 时会根据提供的 url 后缀确定文件类型，如果没有后缀，或者后缀不正确的话，我们可以在创建时通过 UNNotificationAttachmentOptionsTypeHintKey 来指定资源类型。</li></ul><p> </p><h3 id="2，多媒体文件的格式、尺寸限制"><a href="#2，多媒体文件的格式、尺寸限制" class="headerlink" title="2，多媒体文件的格式、尺寸限制"></a>2，多媒体文件的格式、尺寸限制</h3><p>（1）支持的最大尺寸：</p><ul><li>  图片：10MB</li><li>  音频：5MB</li><li>视频：50MB</li></ul><p>（2）支持的文件格式：</p><ul><li>  图片：kUTTypeJPEG、kUTTypeGIF、kUTTypePNG</li><li>  音频：kUTTypeAudioInterchangeFileFormat、kUTTypeWaveformAudio、kUTTypeMP3、kUTTypeMPEG4Audio</li><li>视频：kUTTypeMPEG、kUTTypeMPEG2Video、kUTTypeMPEG4、kUTTypeAVIMovie</li></ul><h3 id="3，使用样例"><a href="#3，使用样例" class="headerlink" title="3，使用样例"></a>3，使用样例</h3><p>（1）下面代码我们给通知附带上一张图片：</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">class</code> <code class="swift color2">ViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置推送内容</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.title = </code><code class="swift string">"hangge.com"</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.body = </code><code class="swift string">"囤积iPhoneX的黄牛赔到怀疑人生?"</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//给通知添加图片附件</code></div><div class="line number15 index14 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">imageURL = </code><code class="swift color2">Bundle</code><code class="swift plain">.main.url(forResource: </code><code class="swift string">"image"</code><code class="swift plain">, withExtension: </code><code class="swift string">"png"</code><code class="swift plain">),</code></div><div class="line number16 index15 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">attachment = try? </code><code class="swift color2">UNNotificationAttachment</code><code class="swift plain">(identifier: </code><code class="swift string">"imageAttachment"</code><code class="swift plain">,</code></div><div class="line number17 index16 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">url: imageURL, options: </code><code class="swift keyword">nil</code><code class="swift plain">) &#123;</code></div><div class="line number18 index17 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.attachments = [attachment]</code></div><div class="line number19 index18 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知触发器</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">trigger = </code><code class="swift color2">UNTimeIntervalNotificationTrigger</code><code class="swift plain">(timeInterval: 5, repeats: </code><code class="swift keyword">false</code><code class="swift plain">)</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置请求标识符</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置一个通知请求</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceiveMemoryWarning() &#123;</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.didReceiveMemoryWarning()</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number42 index41 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）效果图</p><ul><li>  上面代码运行后，在通知显示时，横幅或者弹窗将附带有设置的图片。</li><li>  使用 3D Touch pop 通知或者下拉通知显示详细内容时，图片也会被放大展示。</li><li>  除了图片以外，通知还支持音频以及视频。我们可以将 MP3 或者 MP4 这样的文件提供给系统，从而在通知中进行展示和播放。<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-91.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-93.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-92.png" alt=""></li></ul><h3 id="4，访问已创建的-attachment-的内容"><a href="#4，访问已创建的-attachment-的内容" class="headerlink" title="4，访问已创建的 attachment 的内容"></a>4，访问已创建的 attachment 的内容</h3><p>我们可以访问一个已经创建的 attachment 的内容，但是要注意权限问题。可以使用 startAccessingSecurityScopedResource 来暂时获取已创建的 attachment 的访问权限。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">let</code> <code class="swift plain">content = notification.request.content</code></div><div class="line number2 index1 alt1"><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">attachment = content.attachments.first &#123;</code></div><div class="line number3 index2 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">attachment.url.startAccessingSecurityScopedResource() &#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">eventImage.image = </code><code class="swift color2">UIImage</code><code class="swift plain">(contentsOfFile: attachment.url.path!)</code></div><div class="line number5 index4 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">attachment.url.stopAccessingSecurityScopedResource()</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number7 index6 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h2 id="十四、为远程推送添加多媒体内容"><a href="#十四、为远程推送添加多媒体内容" class="headerlink" title="十四、为远程推送添加多媒体内容"></a>十四、为远程推送添加多媒体内容</h2><h3 id="1，实现原理"><a href="#1，实现原理" class="headerlink" title="1，实现原理"></a>1，实现原理</h3><p>对于远程推送，我们也可以显示图片等多媒体内容。不过需要通过上面介绍的 Notification Service Extension 来修改推送通知内容的技术。具体流程如下：</p><ul><li>  我们在推送的 payload 中指定需要加载的图片资源地址，这个地址可以是应用 bundle 内已经存在的资源，也可以是网络的资源。</li><li>  客户端收到通知后，根据资源地址创建相应的 UNNotificationAttachment。由于只能使用本地资源创建 UNNotificationAttachment，所以如果多媒体还不在本地的话，我们需要先将其下载到本地。</li><li>在完成 UNNotificationAttachment 创建后，我们就可以像本地通知一样，将它设置给 attachments 属性，然后调用 contentHandler 了。</li></ul><h3 id="2，使用样例"><a href="#2，使用样例" class="headerlink" title="2，使用样例"></a>2，使用样例</h3><p>（1）假设我们的远程通知 payload 报文如下，其中：  </p><ul><li>  mutable-content：表示我们会在接收到通知时需要对内容进行更改。</li><li>  image：表示需要显示的图片的地址。</li></ul><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift plain">&#123;</code></div><div class="line number2 index1 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"aps"</code><code class="swift plain">: &#123;</code></div><div class="line number3 index2 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"alert"</code><code class="swift plain">: &#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"title"</code><code class="swift plain">: </code><code class="swift string">"最新资讯"</code><code class="swift plain">,</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"body"</code><code class="swift plain">: </code><code class="swift string">"2017全国文明城市公布"</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;,</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"sound"</code><code class="swift plain">: </code><code class="swift string">"default"</code><code class="swift plain">,</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"badge"</code><code class="swift plain">: 1,</code></div><div class="line number9 index8 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"mutable-content"</code><code class="swift plain">: 1</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;,</code></div><div class="line number11 index10 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift string">"image"</code><code class="swift plain">: </code><code class="swift string">"<a href="https://img1.gtimg.com/ninja/2/2017/05/ninja149447456097353.jpg">https://img1.gtimg.com/ninja/2/2017/05/ninja149447456097353.jpg</a>"</code></div><div class="line number12 index11 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）项目这边创建一个 NotificationService，作用是接收到上面这样的通知时会自动提取图片地址、下载，并生成 attachment，然后进行通知展示。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1 highlighted">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1 highlighted">46</div><div class="line number47 index46 alt2 highlighted">47</div><div class="line number48 index47 alt1 highlighted">48</div><div class="line number49 index48 alt2 highlighted">49</div><div class="line number50 index49 alt1 highlighted">50</div><div class="line number51 index50 alt2 highlighted">51</div><div class="line number52 index51 alt1 highlighted">52</div><div class="line number53 index52 alt2 highlighted">53</div><div class="line number54 index53 alt1 highlighted">54</div><div class="line number55 index54 alt2 highlighted">55</div><div class="line number56 index55 alt1 highlighted">56</div><div class="line number57 index56 alt2 highlighted">57</div><div class="line number58 index57 alt1 highlighted">58</div><div class="line number59 index58 alt2 highlighted">59</div><div class="line number60 index59 alt1 highlighted">60</div><div class="line number61 index60 alt2 highlighted">61</div><div class="line number62 index61 alt1 highlighted">62</div><div class="line number63 index62 alt2 highlighted">63</div><div class="line number64 index63 alt1 highlighted">64</div><div class="line number65 index64 alt2 highlighted">65</div><div class="line number66 index65 alt1 highlighted">66</div><div class="line number67 index66 alt2">67</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="swift keyword">class</code> <code class="swift color2">NotificationService</code><code class="swift plain">: </code><code class="swift color2">UNNotificationServiceExtension</code> <code class="swift plain">&#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">contentHandler: ((</code><code class="swift color2">UNNotificationContent</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">)?</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">bestAttemptContent: </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">?</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//我们可以在后台处理接收到的推送，让后传递修改后的的内容给contentHandler进行展示</code></div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceive(_ request: </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">,</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">withContentHandler contentHandler:</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@escaping</code> <code class="swift plain">(</code><code class="swift color2">UNNotificationContent</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">self</code><code class="swift plain">.contentHandler = contentHandler</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">bestAttemptContent = (request.content.mutableCopy() </code><code class="swift keyword">as</code><code class="swift plain">? </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">)</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">bestAttemptContent = bestAttemptContent &#123;</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将远程推送通知中的图片下载到本地，并显示</code></div><div class="line number17 index16 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">imageURLString = bestAttemptContent.userInfo[</code><code class="swift string">"image"</code><code class="swift plain">] </code><code class="swift keyword">as</code><code class="swift plain">? </code><code class="swift color1">String</code><code class="swift plain">,</code></div><div class="line number18 index17 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift color2">URL</code> <code class="swift plain">= </code><code class="swift color2">URL</code><code class="swift plain">(string: imageURLString) &#123;</code></div><div class="line number19 index18 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">downloadAndSave(url: </code><code class="swift color2">URL</code><code class="swift plain">) &#123; localURL </code><code class="swift keyword">in</code></div><div class="line number20 index19 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">localURL = localURL &#123;</code></div><div class="line number21 index20 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">do &#123;</code></div><div class="line number22 index21 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">attachment = try </code><code class="swift color2">UNNotificationAttachment</code><code class="swift plain">(identifier: </code><code class="swift string">"download"</code><code class="swift plain">,</code></div><div class="line number23 index22 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">url: localURL,</code></div><div class="line number24 index23 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: </code><code class="swift keyword">nil</code><code class="swift plain">)</code></div><div class="line number25 index24 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">bestAttemptContent.attachments = [attachment]</code></div><div class="line number26 index25 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125; catch &#123;</code></div><div class="line number27 index26 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(error)</code></div><div class="line number28 index27 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number29 index28 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number30 index29 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">contentHandler(bestAttemptContent)</code></div><div class="line number31 index30 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number32 index31 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//如果我们获取消息后一段时间内没有调用 contentHandler 的话，系统会调用这个方法</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">serviceExtensionTimeWillExpire() &#123;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//如果消息没处理好，我们也将这个没处理完毕的消息进行展示</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">contentHandler = contentHandler, </code><code class="swift keyword">let</code> <code class="swift plain">bestAttemptContent =&nbsp; bestAttemptContent &#123;</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">contentHandler(bestAttemptContent)</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将图片下载到本地临时文件夹中</code></div><div class="line number45 index44 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">downloadAndSave(url: </code><code class="swift color2">URL</code><code class="swift plain">, handler: </code><code class="swift keyword">@escaping</code> <code class="swift plain">(_ localURL: </code><code class="swift color2">URL</code><code class="swift plain">?) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number46 index45 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">task = </code><code class="swift color2">URLSession</code><code class="swift plain">.shared.dataTask(with: url, completionHandler: &#123;</code></div><div class="line number47 index46 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">data, res, error </code><code class="swift keyword">in</code></div><div class="line number48 index47 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">localURL: </code><code class="swift color2">URL</code><code class="swift plain">? = </code><code class="swift keyword">nil</code></div><div class="line number49 index48 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">data = data &#123;</code></div><div class="line number50 index49 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//取得当前时间的时间戳</code></div><div class="line number51 index50 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">timeInterval = </code><code class="swift color2">Date</code><code class="swift plain">().timeIntervalSince1970</code></div><div class="line number52 index51 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">timeStamp = </code><code class="swift color1">Int</code><code class="swift plain">(timeInterval)</code></div><div class="line number53 index52 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//文件后缀</code></div><div class="line number54 index53 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">ext = (url.absoluteString </code><code class="swift keyword">as</code> <code class="swift color2">NSString</code><code class="swift plain">).pathExtension</code></div><div class="line number55 index54 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">temporaryURL = </code><code class="swift color2">FileManager</code><code class="swift plain">.</code><code class="swift keyword">default</code><code class="swift plain">.temporaryDirectory</code></div><div class="line number56 index55 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">url = temporaryURL.appendingPathComponent(</code><code class="swift string">"\(timeStamp)"</code><code class="swift plain">)</code></div><div class="line number57 index56 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.appendingPathExtension(ext)</code></div><div class="line number58 index57 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number59 index58 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">_ = try? data.write(to: url) &#123;</code></div><div class="line number60 index59 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">localURL = url</code></div><div class="line number61 index60 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number62 index61 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number63 index62 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">handler(localURL)</code></div><div class="line number64 index63 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;)</code></div><div class="line number65 index64 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">task.resume()</code></div><div class="line number66 index65 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number67 index66 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（3）具体效果如下。可以看到即使是远程通知，附带的也是网络图片，但也是可以正常显示的。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-90.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-94.png" alt="">]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - UserNotifications框架使用详解5（Actionable可交互通知）</title>
      <link href="/posts/2022/11/89e6beec.html"/>
      <url>/posts/2022/11/89e6beec.html</url>
      
        <content type="html"><![CDATA[<h2 id="十一、Actionable-可交互通知"><a href="#十一、Actionable-可交互通知" class="headerlink" title="十一、Actionable 可交互通知"></a>十一、Actionable 可交互通知</h2><p>从 iOS 8 起苹果就引入了可以交互的通知，其实现方式是把一组 action 放到一个 category 中，然后将这个 category 进行注册，最后在发送通知时将通知的 category 设置为要使用的 category 即可。到了 iOS10，苹果又对这些 action 做了统一。</p><h3 id="1，效果图"><a href="#1，效果图" class="headerlink" title="1，效果图"></a>1，效果图</h3><p>（1）下面是一个带有 action 交互的通知。设备接收到通知后默认的展示效果和普通的通知一样，点击通知同样也会打开应用。</p><span id="more"></span><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-82.png" alt="">  <p>（2）而当我们下拉或者使用 3D touch 展开通知后，就可以看到下方会出现对应的 action 按钮。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-83.png" alt="">  <p>（3）这里我们添加了三个按钮，点击后的功能分别如下：</p><ul><li>  点击“点个赞”：自动打开应用，同时在程序界面上弹出用户操作信息。</li><li>  点击“取消”：自动清除通知，且不会打开应用。（如果我们之后手动打开程序，界面上也会弹出用户操作信息。）</li><li>  点击“评论”：界面下方会出现一个输入框。用户输入文字并提交后，会自动打开应用，同时在程序界面上弹出刚才输入的文字内容。<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-117.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-84.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-118.png" alt="">### 2，样例代码</li></ul><p>（1）NotificationHandler.swift</p><p>为方便管理维护，这里我们将通知响应（action 响应）放在一个单独的文件中。并且将通知的 category 和 action 的标识符都定义成枚举。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift comments">//通知category标识符枚举</code></div><div class="line number5 index4 alt2"><code class="swift keyword">enum</code> <code class="swift color2">NotificationCategory</code><code class="swift plain">: </code><code class="swift color1">String</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">news&nbsp; </code><code class="swift comments">//新闻资讯通知category</code></div><div class="line number7 index6 alt2"><code class="swift plain">&#125;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="swift comments">//通知category的action标识符枚举</code></div><div class="line number10 index9 alt1"><code class="swift keyword">enum</code> <code class="swift color2">NotificationCategoryAction</code><code class="swift plain">: </code><code class="swift color1">String</code> <code class="swift plain">&#123;</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">like</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">cancel</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">comment</code></div><div class="line number14 index13 alt1"><code class="swift plain">&#125;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="swift comments">//通知响应对象</code></div><div class="line number17 index16 alt2"><code class="swift keyword">class</code> <code class="swift color2">NotificationHandler</code><code class="swift plain">: </code><code class="swift color2">NSObject</code><code class="swift plain">, </code><code class="swift color2">UNUserNotificationCenterDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//对通知进行响应（用户与通知进行交互时被调用）</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">userNotificationCenter(_ center: </code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">,</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">didReceive response: </code><code class="swift color2">UNNotificationResponse</code><code class="swift plain">,</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">withCompletionHandler completionHandler:</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@escaping</code> <code class="swift plain">() -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//根据category标识符做相应的处理</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">categoryIdentifier = response.notification.request.content.categoryIdentifier</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">category = </code><code class="swift color2">NotificationCategory</code><code class="swift plain">(rawValue: categoryIdentifier) &#123;</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">switch</code> <code class="swift plain">category &#123;</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">.news:</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">handleNews(response: response)</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completionHandler()</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//处理新闻资讯通知的交互</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">handleNews(response: </code><code class="swift color2">UNNotificationResponse</code><code class="swift plain">) &#123;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">message: </code><code class="swift color1">String</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//判断点击是那个action</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">actionType = </code><code class="swift color2">NotificationCategoryAction</code><code class="swift plain">(rawValue: response.actionIdentifier) &#123;</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">switch</code> <code class="swift plain">actionType &#123;</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">.like: message = </code><code class="swift string">"你点击了“点个赞”按钮"</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">.cancel: message = </code><code class="swift string">"你点击了“取消”按钮"</code></div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">case</code> <code class="swift plain">.comment:</code></div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">message = </code><code class="swift string">"你输入的是：\((response as! UNTextInputNotificationResponse).userText)"</code></div><div class="line number45 index44 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number46 index45 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125; </code><code class="swift keyword">else</code> <code class="swift plain">&#123;</code></div><div class="line number47 index46 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//直接点击通知，或者点击删除这个通知会进入这个分支。</code></div><div class="line number48 index47 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">message = </code><code class="swift string">""</code></div><div class="line number49 index48 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number50 index49 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number51 index50 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//弹出相关信息</code></div><div class="line number52 index51 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">!message.isEmpty &#123;</code></div><div class="line number53 index52 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">showAlert(message: message)</code></div><div class="line number54 index53 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number55 index54 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number56 index55 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number57 index56 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//在根视图控制器上弹出普通消息提示框</code></div><div class="line number58 index57 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">showAlert(message: </code><code class="swift color1">String</code><code class="swift plain">) &#123;</code></div><div class="line number59 index58 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift keyword">let</code> <code class="swift plain">vc = </code><code class="swift color2">UIApplication</code><code class="swift plain">.shared.keyWindow?.rootViewController &#123;</code></div><div class="line number60 index59 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">alert = </code><code class="swift color2">UIAlertController</code><code class="swift plain">(title: </code><code class="swift keyword">nil</code><code class="swift plain">, message: message, preferredStyle: .alert)</code></div><div class="line number61 index60 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">alert.addAction(</code><code class="swift color2">UIAlertAction</code><code class="swift plain">(title: </code><code class="swift string">"确定"</code><code class="swift plain">, style: .cancel))</code></div><div class="line number62 index61 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">vc.present(alert, animated: </code><code class="swift keyword">true</code><code class="swift plain">)</code></div><div class="line number63 index62 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number64 index63 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number65 index64 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）AppDelegate.swift</p><p>这里除了申请通知权限外，还注册了一个 category，里面包括两个标准按钮 action，以及一个文本输入 action。  </p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1 highlighted">46</div><div class="line number47 index46 alt2 highlighted">47</div><div class="line number48 index47 alt1 highlighted">48</div><div class="line number49 index48 alt2 highlighted">49</div><div class="line number50 index49 alt1 highlighted">50</div><div class="line number51 index50 alt2 highlighted">51</div><div class="line number52 index51 alt1 highlighted">52</div><div class="line number53 index52 alt2 highlighted">53</div><div class="line number54 index53 alt1 highlighted">54</div><div class="line number55 index54 alt2 highlighted">55</div><div class="line number56 index55 alt1 highlighted">56</div><div class="line number57 index56 alt2 highlighted">57</div><div class="line number58 index57 alt1 highlighted">58</div><div class="line number59 index58 alt2 highlighted">59</div><div class="line number60 index59 alt1 highlighted">60</div><div class="line number61 index60 alt2 highlighted">61</div><div class="line number62 index61 alt1 highlighted">62</div><div class="line number63 index62 alt2 highlighted">63</div><div class="line number64 index63 alt1 highlighted">64</div><div class="line number65 index64 alt2 highlighted">65</div><div class="line number66 index65 alt1 highlighted">66</div><div class="line number67 index66 alt2 highlighted">67</div><div class="line number68 index67 alt1 highlighted">68</div><div class="line number69 index68 alt2 highlighted">69</div><div class="line number70 index69 alt1 highlighted">70</div><div class="line number71 index70 alt2 highlighted">71</div><div class="line number72 index71 alt1 highlighted">72</div><div class="line number73 index72 alt2 highlighted">73</div><div class="line number74 index73 alt1 highlighted">74</div><div class="line number75 index74 alt2 highlighted">75</div><div class="line number76 index75 alt1">76</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">@UIApplicationMain</code></div><div class="line number5 index4 alt2 highlighted"><code class="swift keyword">class</code> <code class="swift color2">AppDelegate</code><code class="swift plain">: </code><code class="swift color2">UIResponder</code><code class="swift plain">, </code><code class="swift color2">UIApplicationDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">window: </code><code class="swift color2">UIWindow</code><code class="swift plain">?</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">notificationHandler = </code><code class="swift color2">NotificationHandler</code><code class="swift plain">()</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">application(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">, didFinishLaunchingWithOptions</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">launchOptions: [</code><code class="swift color2">UIApplicationLaunchOptionsKey</code><code class="swift plain">: </code><code class="swift color2">Any</code><code class="swift plain">]?) -&gt; </code><code class="swift color1">Bool</code> <code class="swift plain">&#123;</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//请求通知权限</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current()</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.requestAuthorization(options: [.alert, .sound, .badge]) &#123;</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">(accepted, error) </code><code class="swift keyword">in</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">!accepted &#123;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"用户不允许消息通知。"</code><code class="swift plain">)</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//注册category</code></div><div class="line number23 index22 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">registerNotificationCategory()</code></div><div class="line number24 index23 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().delegate = notificationHandler</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">true</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillResignActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidEnterBackground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillEnterForeground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidBecomeActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillTerminate(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number42 index41 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number43 index42 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//注册一个category</code></div><div class="line number45 index44 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">private</code> <code class="swift keyword">func</code> <code class="swift plain">registerNotificationCategory() &#123;</code></div><div class="line number46 index45 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">newsCategory: </code><code class="swift color2">UNNotificationCategory</code> <code class="swift plain">= &#123;</code></div><div class="line number47 index46 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建输入文本的action</code></div><div class="line number48 index47 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">inputAction = </code><code class="swift color2">UNTextInputNotificationAction</code><code class="swift plain">(</code></div><div class="line number49 index48 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift color2">NotificationCategoryAction</code><code class="swift plain">.comment.rawValue,</code></div><div class="line number50 index49 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"评论"</code><code class="swift plain">,</code></div><div class="line number51 index50 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [.foreground],</code></div><div class="line number52 index51 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">textInputButtonTitle: </code><code class="swift string">"发送"</code><code class="swift plain">,</code></div><div class="line number53 index52 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">textInputPlaceholder: </code><code class="swift string">"在这里留下你想说的话..."</code><code class="swift plain">)</code></div><div class="line number54 index53 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number55 index54 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建普通的按钮action</code></div><div class="line number56 index55 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">likeAction = </code><code class="swift color2">UNNotificationAction</code><code class="swift plain">(</code></div><div class="line number57 index56 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift color2">NotificationCategoryAction</code><code class="swift plain">.like.rawValue,</code></div><div class="line number58 index57 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"点个赞"</code><code class="swift plain">,</code></div><div class="line number59 index58 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [.foreground])</code></div><div class="line number60 index59 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number61 index60 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建普通的按钮action</code></div><div class="line number62 index61 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">cancelAction = </code><code class="swift color2">UNNotificationAction</code><code class="swift plain">(</code></div><div class="line number63 index62 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">identifier: </code><code class="swift color2">NotificationCategoryAction</code><code class="swift plain">.cancel.rawValue,</code></div><div class="line number64 index63 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">title: </code><code class="swift string">"取消"</code><code class="swift plain">,</code></div><div class="line number65 index64 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">options: [.destructive])</code></div><div class="line number66 index65 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number67 index66 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//创建category</code></div><div class="line number68 index67 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift color2">UNNotificationCategory</code><code class="swift plain">(identifier: </code><code class="swift color2">NotificationCategory</code><code class="swift plain">.news.rawValue,</code></div><div class="line number69 index68 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">actions: [inputAction, likeAction, cancelAction],</code></div><div class="line number70 index69 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">intentIdentifiers: [], options: [.customDismissAction])</code></div><div class="line number71 index70 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;()</code></div><div class="line number72 index71 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number73 index72 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//把category添加到通知中心</code></div><div class="line number74 index73 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().setNotificationCategories([newsCategory])</code></div><div class="line number75 index74 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number76 index75 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（3）ViewController.swift </p><p>我们在程序界面打开后就创建通知（5 秒后推送）。特别注意的是要将通知的 categoryIdentifier 设置为需要的 category 标识符，这样系统就知道这个通知对应的是哪个 category。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">class</code> <code class="swift color2">ViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置推送内容</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.title = </code><code class="swift string">"hangge.com"</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.body = </code><code class="swift string">"囤积iPhoneX的黄牛赔到怀疑人生?"</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知对应的category标识符</code></div><div class="line number14 index13 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.categoryIdentifier = </code><code class="swift color2">NotificationCategory</code><code class="swift plain">.news.rawValue</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知触发器</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">trigger = </code><code class="swift color2">UNTimeIntervalNotificationTrigger</code><code class="swift plain">(timeInterval: 5, repeats: </code><code class="swift keyword">false</code><code class="swift plain">)</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置请求标识符</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置一个通知请求</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceiveMemoryWarning() &#123;</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.didReceiveMemoryWarning()</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number37 index36 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table><p>源码下载：<img src="https://www.hangge.com/blog/admin/include/edit/sysimage/icon16/zip.gif"><a href="https://www.hangge.com/blog_uploads/201711/2017111016485141252.zip">hangge_1845.zip</a></p><h3 id="3，远程推送使用-category"><a href="#3，远程推送使用-category" class="headerlink" title="3，远程推送使用 category"></a>3，远程推送使用 category</h3><p>远程推送也可以使用 category，只需要在 payload 报文中添加 category 字段，并指定预先定义的 category id 就可以了。  </p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="js plain">&#123;</code></div><div class="line number2 index1 alt1"><code class="js spaces">&nbsp;&nbsp;</code><code class="js string">"aps"</code><code class="js plain">:&#123;</code></div><div class="line number3 index2 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"alert"</code><code class="js plain">:&#123;</code></div><div class="line number4 index3 alt1"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"title"</code><code class="js plain">:</code><code class="js string">"hangge.com"</code><code class="js plain">,</code></div><div class="line number5 index4 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"body"</code><code class="js plain">:</code><code class="js string">"囤积iPhoneX的黄牛赔到怀疑人生?"</code></div><div class="line number6 index5 alt1"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js plain">&#125;,</code></div><div class="line number7 index6 alt2"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"sound"</code><code class="js plain">:</code><code class="js string">"default"</code><code class="js plain">,</code></div><div class="line number8 index7 alt1"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"badge"</code><code class="js plain">:1,</code></div><div class="line number9 index8 alt2 highlighted"><code class="js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="js string">"category"</code><code class="js plain">:</code><code class="js string">"news"</code></div><div class="line number10 index9 alt1"><code class="js spaces">&nbsp;&nbsp;</code><code class="js plain">&#125;</code></div><div class="line number11 index10 alt2"><code class="js plain">&#125;</code></div></div></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - UserNotifications框架使用详解4（通知的处理、回调、应用内展示）</title>
      <link href="/posts/2022/11/f44f6a82.html"/>
      <url>/posts/2022/11/f44f6a82.html</url>
      
        <content type="html"><![CDATA[<h2 id="八、处理通知"><a href="#八、处理通知" class="headerlink" title="八、处理通知"></a>八、处理通知</h2><p>UserNotifications 框架为我们提供了查找、更新、删除通知等相关的 API 方法。其中关键在于 request 的 identifier，即在创建时指定的通知标识符。</p><h3 id="1，查找通知"><a href="#1，查找通知" class="headerlink" title="1，查找通知"></a>1，查找通知</h3><p>（1）获取所有待推送的通知</p><span id="more"></span><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().getPendingNotificationRequests &#123; (requests) </code><code class="swift keyword">in</code></div><div class="line number2 index1 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//遍历所有未推送的request</code></div><div class="line number3 index2 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">for</code> <code class="swift plain">request </code><code class="swift keyword">in</code> <code class="swift plain">requests &#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(request)</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number6 index5 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table><p>目前我们只有一个未推送的通知： <br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-105.png" alt=""></p><p>（2）获取所有已推送的通知</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().getDeliveredNotifications &#123; (notifications) </code><code class="swift keyword">in</code></div><div class="line number2 index1 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//遍历所有已推送的通知</code></div><div class="line number3 index2 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">for</code> <code class="swift plain">notification </code><code class="swift keyword">in</code> <code class="swift plain">notifications &#123;</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(notification)</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number6 index5 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h3 id="2，更新通知"><a href="#2，更新通知" class="headerlink" title="2，更新通知"></a>2，更新通知</h3><p>多次推送同一标识符的通知即可进行更新。比如我们有一条标识符为“com.hangge.testNotification”的通知还未触发推送。如果创建并添加一条同样标示符的通知，那么原先的那条通知就会被替换。（而如果原先的通知已展示，则会在通知中心中更新这条通知）</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//使用同样的请求标识符来设置一个新的通知</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number3 index2 alt2"><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number4 index3 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number7 index6 alt2"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number11 index10 alt2"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table><p>远程推送也可以进行通知的更新：</p><p>在使用 Provider API 向 APNs 提交请求时，在 HTTP/2 的 header 中 apns-collapse-id key 的内容将被作为该推送的标识符进行使用。多次推送同一标识符的通知即可进行更新。</p><h3 id="3，删除通知"><a href="#3，删除通知" class="headerlink" title="3，删除通知"></a>3，删除通知</h3><p>（1）取消未发送的通知  </p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//根据identifier来取消指定通知</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">identifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number3 index2 alt2"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().removePendingNotificationRequests(withIdentifiers: [identifier])</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//取消全部未发送通知</code></div><div class="line number6 index5 alt1"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().removeAllPendingNotificationRequests()</code></div></div></td></tr></tbody></table>  <p>（2）删除已发送的通知（清除通知中心里的记录）</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift comments">//根据identifier来删除指定通知</code></div><div class="line number2 index1 alt1"><code class="swift keyword">let</code> <code class="swift plain">identifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number3 index2 alt2"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().removeDeliveredNotifications(withIdentifiers: [identifier])</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="swift comments">//删除全部已发送通知</code></div><div class="line number6 index5 alt1"><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().removeAllDeliveredNotifications()</code></div></div></td></tr></tbody></table><p>远程推送无法删除已展示的通知：</p><p>现在还不能通过类似的方式，向 APNs 发送一个包含 collapse id 的 DELETE 请求来删除已经展示的推送，APNs 服务器并不接受一个 DELETE 请求。</p><h2 id="九、应用内展示通知"><a href="#九、应用内展示通知" class="headerlink" title="九、应用内展示通知"></a>九、应用内展示通知</h2><p>默认情况下当应用处于前台时，收到的通知是不进行展示的。如果我们希望在应用内也能显示通知的话，需借助 UNUserNotificationCenterDelegate，通过该协议提供的接口方法实现应用内展示通知。</p><h3 id="1，样例代码"><a href="#1，样例代码" class="headerlink" title="1，样例代码"></a>1，样例代码</h3><p>我们这里在 AppDelegate 中添加相关的代理协议进行处理。</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1 highlighted">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1 highlighted">46</div><div class="line number47 index46 alt2 highlighted">47</div><div class="line number48 index47 alt1 highlighted">48</div><div class="line number49 index48 alt2 highlighted">49</div><div class="line number50 index49 alt1 highlighted">50</div><div class="line number51 index50 alt2 highlighted">51</div><div class="line number52 index51 alt1 highlighted">52</div><div class="line number53 index52 alt2 highlighted">53</div><div class="line number54 index53 alt1 highlighted">54</div><div class="line number55 index54 alt2 highlighted">55</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">@UIApplicationMain</code></div><div class="line number5 index4 alt2"><code class="swift keyword">class</code> <code class="swift color2">AppDelegate</code><code class="swift plain">: </code><code class="swift color2">UIResponder</code><code class="swift plain">, </code><code class="swift color2">UIApplicationDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">window: </code><code class="swift color2">UIWindow</code><code class="swift plain">?</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">notificationHandler = </code><code class="swift color2">NotificationHandler</code><code class="swift plain">()</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">application(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">, didFinishLaunchingWithOptions</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">launchOptions: [</code><code class="swift color2">UIApplicationLaunchOptionsKey</code><code class="swift plain">: </code><code class="swift color2">Any</code><code class="swift plain">]?) -&gt; </code><code class="swift color1">Bool</code> <code class="swift plain">&#123;</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//请求通知权限</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current()</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.requestAuthorization(options: [.alert, .sound, .badge]) &#123;</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">(accepted, error) </code><code class="swift keyword">in</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">!accepted &#123;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"用户不允许消息通知。"</code><code class="swift plain">)</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知代理</code></div><div class="line number23 index22 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().delegate = notificationHandler</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">true</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillResignActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidEnterBackground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillEnterForeground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidBecomeActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillTerminate(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number42 index41 alt1"><code class="swift plain">&#125;</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1 highlighted"><code class="swift keyword">class</code> <code class="swift color2">NotificationHandler</code><code class="swift plain">: </code><code class="swift color2">NSObject</code><code class="swift plain">, </code><code class="swift color2">UNUserNotificationCenterDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number45 index44 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//在应用内展示通知</code></div><div class="line number46 index45 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">userNotificationCenter(_ center: </code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">,</code></div><div class="line number47 index46 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">willPresent notification: </code><code class="swift color2">UNNotification</code><code class="swift plain">,</code></div><div class="line number48 index47 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">withCompletionHandler completionHandler:</code></div><div class="line number49 index48 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@escaping</code> <code class="swift plain">(</code><code class="swift color2">UNNotificationPresentationOptions</code><code class="swift plain">) -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number50 index49 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completionHandler([.alert, .sound])</code></div><div class="line number51 index50 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number52 index51 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">// 如果不想显示某个通知，可以直接用空 options 调用 completionHandler:</code></div><div class="line number53 index52 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">// completionHandler([])</code></div><div class="line number54 index53 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number55 index54 alt2 highlighted"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h3 id="2，效果图"><a href="#2，效果图" class="headerlink" title="2，效果图"></a>2，效果图</h3><p>可以看到当通知触发时，即使当前应用处于前台，收到的通知也仍然会进行展示。</p><p>目前我们只有一个未推送的通知： <br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-106.png" alt=""></p><h2 id="十、通知的响应回调"><a href="#十、通知的响应回调" class="headerlink" title="十、通知的响应回调"></a>十、通知的响应回调</h2><p>UNUserNotificationCenterDelegate 还有另外一个代理方法，会在用户与推送的通知进行交互时被调用。比如：用户通过点击通知打开了应用、点击或触发了某个 action。</p><h3 id="1，样例代码-1"><a href="#1，样例代码-1" class="headerlink" title="1，样例代码"></a>1，样例代码</h3><p>（1）我们在程序页面加载完毕后（ViewController.swift）创建一条简单的通知消息（30 秒后触发）。特别要注意的是创建的通知出了基本的标题内容外，还附上了一些额外的信息。  </p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">class</code> <code class="swift color2">ViewController</code><code class="swift plain">: </code><code class="swift color2">UIViewController</code> <code class="swift plain">&#123;</code></div><div class="line number5 index4 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">viewDidLoad() &#123;</code></div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.viewDidLoad()</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置推送内容</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">content = </code><code class="swift color2">UNMutableNotificationContent</code><code class="swift plain">()</code></div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.title = </code><code class="swift string">"hangge.com"</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.body = </code><code class="swift string">"做最好的开发者知识平台"</code></div><div class="line number13 index12 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content.userInfo = [</code><code class="swift string">"userName"</code><code class="swift plain">: </code><code class="swift string">"hangge"</code><code class="swift plain">, </code><code class="swift string">"articleId"</code><code class="swift plain">: 10086]</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知触发器</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">trigger = </code><code class="swift color2">UNTimeIntervalNotificationTrigger</code><code class="swift plain">(timeInterval: 30, repeats: </code><code class="swift keyword">false</code><code class="swift plain">)</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置请求标识符</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">requestIdentifier = </code><code class="swift string">"com.hangge.testNotification"</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置一个通知请求</code></div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">request = </code><code class="swift color2">UNNotificationRequest</code><code class="swift plain">(identifier: requestIdentifier,</code></div><div class="line number23 index22 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">content: content, trigger: trigger)</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//将通知请求添加到发送中心</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().add(request) &#123; error </code><code class="swift keyword">in</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">error == </code><code class="swift keyword">nil</code> <code class="swift plain">&#123;</code></div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"Time Interval Notification scheduled: \(requestIdentifier)"</code><code class="swift plain">)</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">override</code> <code class="swift keyword">func</code> <code class="swift plain">didReceiveMemoryWarning() &#123;</code></div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">super</code><code class="swift plain">.didReceiveMemoryWarning()</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number36 index35 alt1"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <p>（2）然后在 AppDelegate 中添加相关的代理协议来处理用户与通知的交互操作。当用户点击通知后，会将该通知的标题、内容以及前面附加的额外信息给打印出来。（实际应用中我们可以根据 userInfo 的内容来决定页面跳转或者是其他后续操作）</p><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1 highlighted">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1 highlighted">46</div><div class="line number47 index46 alt2 highlighted">47</div><div class="line number48 index47 alt1 highlighted">48</div><div class="line number49 index48 alt2 highlighted">49</div><div class="line number50 index49 alt1 highlighted">50</div><div class="line number51 index50 alt2 highlighted">51</div><div class="line number52 index51 alt1 highlighted">52</div><div class="line number53 index52 alt2 highlighted">53</div><div class="line number54 index53 alt1 highlighted">54</div><div class="line number55 index54 alt2 highlighted">55</div><div class="line number56 index55 alt1 highlighted">56</div><div class="line number57 index56 alt2 highlighted">57</div><div class="line number58 index57 alt1 highlighted">58</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="swift keyword">import</code> <code class="swift color2">UIKit</code></div><div class="line number2 index1 alt1"><code class="swift keyword">import</code> <code class="swift color2">UserNotifications</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="swift keyword">@UIApplicationMain</code></div><div class="line number5 index4 alt2"><code class="swift keyword">class</code> <code class="swift color2">AppDelegate</code><code class="swift plain">: </code><code class="swift color2">UIResponder</code><code class="swift plain">, </code><code class="swift color2">UIApplicationDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number6 index5 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">var</code> <code class="swift plain">window: </code><code class="swift color2">UIWindow</code><code class="swift plain">?</code></div><div class="line number8 index7 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">notificationHandler = </code><code class="swift color2">NotificationHandler</code><code class="swift plain">()</code></div><div class="line number10 index9 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">application(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">, didFinishLaunchingWithOptions</code></div><div class="line number12 index11 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">launchOptions: [</code><code class="swift color2">UIApplicationLaunchOptionsKey</code><code class="swift plain">: </code><code class="swift color2">Any</code><code class="swift plain">]?) -&gt; </code><code class="swift color1">Bool</code> <code class="swift plain">&#123;</code></div><div class="line number13 index12 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//请求通知权限</code></div><div class="line number14 index13 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current()</code></div><div class="line number15 index14 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">.requestAuthorization(options: [.alert, .sound, .badge]) &#123;</code></div><div class="line number16 index15 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">(accepted, error) </code><code class="swift keyword">in</code></div><div class="line number17 index16 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">if</code> <code class="swift plain">!accepted &#123;</code></div><div class="line number18 index17 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(</code><code class="swift string">"用户不允许消息通知。"</code><code class="swift plain">)</code></div><div class="line number19 index18 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number20 index19 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number21 index20 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//设置通知代理</code></div><div class="line number23 index22 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">.current().delegate = notificationHandler</code></div><div class="line number24 index23 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">return</code> <code class="swift keyword">true</code></div><div class="line number26 index25 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number27 index26 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillResignActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number29 index28 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number30 index29 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number31 index30 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidEnterBackground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number32 index31 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number33 index32 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number34 index33 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillEnterForeground(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number35 index34 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number36 index35 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number37 index36 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationDidBecomeActive(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number38 index37 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number39 index38 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number40 index39 alt1"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">applicationWillTerminate(_ application: </code><code class="swift color2">UIApplication</code><code class="swift plain">) &#123;</code></div><div class="line number41 index40 alt2"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number42 index41 alt1"><code class="swift plain">&#125;</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1 highlighted"><code class="swift keyword">class</code> <code class="swift color2">NotificationHandler</code><code class="swift plain">: </code><code class="swift color2">NSObject</code><code class="swift plain">, </code><code class="swift color2">UNUserNotificationCenterDelegate</code> <code class="swift plain">&#123;</code></div><div class="line number45 index44 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//对通知进行响应（用户与通知进行交互时被调用）</code></div><div class="line number46 index45 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">func</code> <code class="swift plain">userNotificationCenter(_ center: </code><code class="swift color2">UNUserNotificationCenter</code><code class="swift plain">,</code></div><div class="line number47 index46 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">didReceive response: </code><code class="swift color2">UNNotificationResponse</code><code class="swift plain">,</code></div><div class="line number48 index47 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">withCompletionHandler completionHandler:</code></div><div class="line number49 index48 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">@escaping</code> <code class="swift plain">() -&gt; </code><code class="swift color1">Void</code><code class="swift plain">) &#123;</code></div><div class="line number50 index49 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(response.notification.request.content.title)</code></div><div class="line number51 index50 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(response.notification.request.content.body)</code></div><div class="line number52 index51 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//获取通知附加数据</code></div><div class="line number53 index52 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift keyword">let</code> <code class="swift plain">userInfo = response.notification.request.content.userInfo</code></div><div class="line number54 index53 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift functions">print</code><code class="swift plain">(userInfo)</code></div><div class="line number55 index54 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift comments">//完成了工作</code></div><div class="line number56 index55 alt1 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">completionHandler()</code></div><div class="line number57 index56 alt2 highlighted"><code class="swift spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="swift plain">&#125;</code></div><div class="line number58 index57 alt1 highlighted"><code class="swift plain">&#125;</code></div></div></td></tr></tbody></table>  <h3 id="2，效果图-1"><a href="#2，效果图-1" class="headerlink" title="2，效果图"></a>2，效果图</h3><p>（1）程序打开后退出，等待 30 秒后会收到推送通知。</p><p>目前我们只有一个未推送的通知： <br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-107.png" alt=""></p><p>（2）点击通知则自动打开程序，同时控制台中会输出该通知的标题、内容以及附加信息。</p><p>目前我们只有一个未推送的通知： <br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-108.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - UserNotifications框架使用详解3（推送远程通知）</title>
      <link href="/posts/2022/11/215a322d.html"/>
      <url>/posts/2022/11/215a322d.html</url>
      
        <content type="html"><![CDATA[<p>前文介绍了通知的本地推送，本文接着再介绍下远程推送。</p><h2 id="六、远程推送基本介绍"><a href="#六、远程推送基本介绍" class="headerlink" title="六、远程推送基本介绍"></a>六、远程推送基本介绍</h2><h3 id="1，什么是远程推送"><a href="#1，什么是远程推送" class="headerlink" title="1，什么是远程推送"></a>1，什么是远程推送</h3><ul><li>  远程通知是指在联网的情况下，由远程服务器推送给客户端的通知，又称 APNs（Apple Push Notification Services）。</li><li>  由于在联网状态下，所有苹果设备都会与苹果服务器建立长连接。所以不管应用是打开还是关闭的情况，都能接收到服务器推送的远程通知。</li></ul><h3 id="2，实现原理"><a href="#2，实现原理" class="headerlink" title="2，实现原理"></a>2，实现原理</h3><p>（1）App 打开后首先自动发送 UDID 和 BundleID 给 APNs 注册，并返回 deviceToken。</p><p>（2）App 获取 deviceToken 后，调用接口将用户身份信息和 deviceToken 发送给我们的服务器，服务器将其记录下来。</p><span id="more"></span><p>（3）当要推送消息时，服务器按照用户身份信息找到存储的 deviceToken，将消息和 deviToken 发送给 APNs。</p><p>（4）苹果的 APNs 通过 deviceToken，找到指定设备的指定程序, 并将消息推送给用户。</p><h3 id="3，准备工作"><a href="#3，准备工作" class="headerlink" title="3，准备工作"></a>3，准备工作</h3><p>要开发测试远程推送功能，我们需要准备如下两个东西：</p><ul><li>  真机：使用模拟器是没法注册 APNS，自然也就无法实现远程通知。</li><li>推送证书：这就要求我们必须要有个苹果开发者帐号</li></ul><h3 id="4，证书申请"><a href="#4，证书申请" class="headerlink" title="4，证书申请"></a>4，证书申请</h3><p>（1）首先我们需要创建应用的 APNs 证书。如果对 APNs 证书不太了解，可以请参考： <a href="http://docs.jiguang.cn/jpush/client/iOS/ios_cer_guide/">iOS 证书设置指南</a>。</p><p>（2）根据指南中的“方式一”，我们创建一个推送证书（aps.cer）。将其下载到本地，并双击安装即可。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-99.png" alt="">  <h2 id="七、远程推送样例"><a href="#七、远程推送样例" class="headerlink" title="七、远程推送样例"></a>七、远程推送样例</h2><h3 id="1，客户端准备工作"><a href="#1，客户端准备工作" class="headerlink" title="1，客户端准备工作"></a>1，客户端准备工作</h3><p>项目配置好证书后，还要打开下图的开关。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-100.png" alt="">  <h3 id="2，客户端代码"><a href="#2，客户端代码" class="headerlink" title="2，客户端代码"></a>2，客户端代码</h3><p>下面是 AppDelegate.swift 的代码。我们同样是先去获得通知权限后。不过对于 APNs 而言，还需要多一个获取用户 DeviceToken 的操作（高亮部分）。</p><ul><li>  实际应用中我们会把这个 DeviceToken 传递给我的的服务器，服务器后面就可以使用这个 DeviceToken 向 Apple Push Notification 的服务器提交请求，然后 APNs 通过 DeviceToken 识别设备和应用，将通知推给用户。</li><li>由于获取得到的 DeviceToken 是一个 Data 类型，为了方便使用和传递，通常会将它转换为一个适合传递给 Apple 的字符串（通过 Data 扩展实现）。这里我们直接将转换后的 DeviceToken 字符串打印出来。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import UserNotifications</span><br><span class="line"> </span><br><span class="line">@UIApplicationMain</span><br><span class="line">class AppDelegate: UIResponder, UIApplicationDelegate &#123;</span><br><span class="line">     </span><br><span class="line">    var window: UIWindow?</span><br><span class="line">     </span><br><span class="line">    let notificationHandler = NotificationHandler()</span><br><span class="line">     </span><br><span class="line">    func application(_ application: UIApplication, didFinishLaunchingWithOptions</span><br><span class="line">        launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool &#123;</span><br><span class="line">        //请求通知权限</span><br><span class="line">        UNUserNotificationCenter.current()</span><br><span class="line">            .requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">                (accepted, error) in</span><br><span class="line">                if !accepted &#123;</span><br><span class="line">                    print(&quot;用户不允许消息通知。&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //向APNs请求token</span><br><span class="line">        UIApplication.shared.registerForRemoteNotifications()</span><br><span class="line">         </span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    //token请求回调</span><br><span class="line">    func application(_ application: UIApplication,</span><br><span class="line">                     didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) &#123;</span><br><span class="line">         //打印出获取到的token字符串</span><br><span class="line">         print(&quot;Get Push token: \(deviceToken.hexString)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillResignActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationDidEnterBackground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillEnterForeground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationDidBecomeActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillTerminate(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//对Data类型进行扩展</span><br><span class="line">extension Data &#123;</span><br><span class="line">    //将Data转换为String</span><br><span class="line">    var hexString: String &#123;</span><br><span class="line">        return withUnsafeBytes &#123;(bytes: UnsafePointer&lt;UInt8&gt;) -&gt; String in</span><br><span class="line">            let buffer = UnsafeBufferPointer(start: bytes, count: count)</span><br><span class="line">            return buffer.map &#123;String(format: &quot;%02hhx&quot;, $0)&#125;.reduce(&quot;&quot;, &#123; $0 + $1 &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3，测试运行"><a href="#3，测试运行" class="headerlink" title="3，测试运行"></a>3，测试运行</h3><p>（1）接上手机，编译运行程序。可以看到我们已经成功获取到了推送 token。特别要注意的是：</p><ul><li>  app 重新启动后，token 是不会变化的。</li><li>  app 卸载重新安装的话，token 就会发生变化。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-101.png" alt="">  <p>（2）通常来说我们会有个服务端，然后通过这个 token 给对应的设备推送通知。这里为了方便测试，我们使用 APNs 调试工具 Knuff。下载地址：<a href="https://github.com/KnuffApp/Knuff/releases">https://github.com/KnuffApp/Knuff/releases</a></p><p>（3）Knuff 使用方法如下：</p><ul><li>  Custom：自定义模式。我们测试自己的应用，就用这个模式，可以自行选择证书。</li><li>  Choose：选择推送证书。也就是我们文章最开头申请的证书。</li><li>  Sandbox：表示推送给开发版本的 App（非 AppStore 版本）。</li><li>  Token：即我们上面注册苹果 APNs 服务时获取到的 device token。</li><li>  Payload：表示要推送的报文。</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-102.png" alt="">  <p>（4）上面这些设置好以后，点击“Push”按钮即可发送远程通知。这时手机这边就可以收到这条推送消息。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-103.png" alt="">  <p>（5）上面的推送报文比较简单，通知只有一个标题（title）和应用图标标记（badge）。这次我们再增加内容（body）、子标题（subtitle）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aps&quot;:&#123;</span><br><span class="line">    &quot;alert&quot;:&#123;</span><br><span class="line">      &quot;title&quot;:&quot;hangge.com&quot;,</span><br><span class="line">      &quot;subtitle&quot;:&quot;航歌&quot;,</span><br><span class="line">      &quot;body&quot;:&quot;做最好的开发者知识平台&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sound&quot;:&quot;default&quot;,</span><br><span class="line">    &quot;badge&quot;:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手机收到通知效果如下：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-104.png" alt="">]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift – UserNotifications框架使用详解2（发送本地通知）</title>
      <link href="/posts/2022/11/2ee8f52a.html"/>
      <url>/posts/2022/11/2ee8f52a.html</url>
      
        <content type="html"><![CDATA[<h2 id="三、一个简单的本地通知样例"><a href="#三、一个简单的本地通知样例" class="headerlink" title="三、一个简单的本地通知样例"></a>三、一个简单的本地通知样例</h2><h3 id="1，效果图"><a href="#1，效果图" class="headerlink" title="1，效果图"></a>1，效果图</h3><p>（1）程序启动后会自动创建并发送一个 30 秒后的通知，接着我们便可以锁屏或者将应用切到后台。</p><p>（2）30 秒时间一到，如果当前是锁屏状态。通知会出现在屏幕横幅中。如果当前是在系统里的话，则会出现在屏幕顶部。当然通知中心里也会有这条通知。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-109.png" alt=""><span id="more"></span>### 2，样例代码<p>（1）首先我们在 AppDelegate.swift 中申请通知权限。当然写在其它地方也是可以的，写这里只是为了方便测试，让程序一启动就去申请权限。</p><!-- more --><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import UserNotifications</span><br><span class="line"> </span><br><span class="line">@UIApplicationMain</span><br><span class="line">class AppDelegate: UIResponder, UIApplicationDelegate &#123;</span><br><span class="line">     </span><br><span class="line">    var window: UIWindow?</span><br><span class="line">     </span><br><span class="line">    func application(_ application: UIApplication, didFinishLaunchingWithOptions</span><br><span class="line">        launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool &#123;</span><br><span class="line">        //请求通知权限</span><br><span class="line">        UNUserNotificationCenter.current()</span><br><span class="line">            .requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">                (accepted, error) in</span><br><span class="line">                if !accepted &#123;</span><br><span class="line">                    print(&quot;用户不允许消息通知。&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillResignActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationDidEnterBackground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillEnterForeground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationDidBecomeActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func applicationWillTerminate(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）然后在程序页面加载完毕后（ViewController.swift）创建一条简单的通知消息（30 秒后触发）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import UserNotifications</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line"> </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        //设置推送内容</span><br><span class="line">        let content = UNMutableNotificationContent()</span><br><span class="line">        content.title = &quot;hangge.com&quot;</span><br><span class="line">        content.body = &quot;做最好的开发者知识平台&quot;</span><br><span class="line">         </span><br><span class="line">        //设置通知触发器</span><br><span class="line">        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 30, repeats: false)</span><br><span class="line">         </span><br><span class="line">        //设置请求标识符</span><br><span class="line">        let requestIdentifier = &quot;com.hangge.testNotification&quot;</span><br><span class="line">         </span><br><span class="line">        //设置一个通知请求</span><br><span class="line">        let request = UNNotificationRequest(identifier: requestIdentifier,</span><br><span class="line">                                            content: content, trigger: trigger)</span><br><span class="line">         </span><br><span class="line">        //将通知请求添加到发送中心</span><br><span class="line">        UNUserNotificationCenter.current().add(request) &#123; error in</span><br><span class="line">            if error == nil &#123;</span><br><span class="line">                print(&quot;Time Interval Notification scheduled: \(requestIdentifier)&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、设置推送内容"><a href="#四、设置推送内容" class="headerlink" title="四、设置推送内容"></a>四、设置推送内容</h2><p>上面的样例中我们只设置了推送通知的标题（title）和内容（body），其实还可以设置子标题（subtitle）和应用图标标记（badge）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置推送内容</span><br><span class="line">let content = UNMutableNotificationContent()</span><br><span class="line">content.title = &quot;hangge.com&quot;</span><br><span class="line">content.subtitle = &quot;航歌（二级标题）&quot;</span><br><span class="line">content.body = &quot;做最好的开发者知识平台&quot;</span><br><span class="line">content.badge = 2</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-110.png" alt=""></p><h2 id="五、设置通知触发器"><a href="#五、设置通知触发器" class="headerlink" title="五、设置通知触发器"></a>五、设置通知触发器</h2><p>目前 UserNotifications 框架中一共提供了如下三种触发器。注意：触发器是只对本地通知而言的，远程推送的通知默认会在收到后立即显示。</p><h3 id="1，一段时间后触发（UNTimeIntervalNotificationTrigger）"><a href="#1，一段时间后触发（UNTimeIntervalNotificationTrigger）" class="headerlink" title="1，一段时间后触发（UNTimeIntervalNotificationTrigger）"></a>1，一段时间后触发（UNTimeIntervalNotificationTrigger）</h3><p>比如下面样例我们设置10秒钟后触发推送通知。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 10, repeats: false)</span><br></pre></td></tr></table></figure><h3 id="2，指定日期时间触发（UNCalendarNotificationTrigger）"><a href="#2，指定日期时间触发（UNCalendarNotificationTrigger）" class="headerlink" title="2，指定日期时间触发（UNCalendarNotificationTrigger）"></a>2，指定日期时间触发（UNCalendarNotificationTrigger）</h3><p>（1）下面代码我们设置2017年11月11日凌晨触发推送通知。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var components = DateComponents()</span><br><span class="line">components.year = 2017</span><br><span class="line">components.month = 11</span><br><span class="line">components.day = 11</span><br><span class="line">let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）下面代码我们设置每周一上午8点都会触发推送通知。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var components = DateComponents()</span><br><span class="line">components.weekday = 2 //周一</span><br><span class="line">components.hour = 8 //上午8点</span><br><span class="line">components.second = 30 //30分</span><br><span class="line">let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: true)</span><br></pre></td></tr></table></figure><h3 id="3，根据位置触发（UNLocationNotificationTrigger）"><a href="#3，根据位置触发（UNLocationNotificationTrigger）" class="headerlink" title="3，根据位置触发（UNLocationNotificationTrigger）"></a>3，根据位置触发（UNLocationNotificationTrigger）</h3><p>该触发器支持进入某地触发、离开某地触发、或者两种情况均触发。下面代码设置成当手机进入到指定点（纬度：52.10，经度：51.11）200 米范围内时会触发推送通知。（注意：这里我们需要 import CoreLocation 框架）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let coordinate = CLLocationCoordinate2D(latitude: 52.10, longitude: 51.11)</span><br><span class="line">let region = CLCircularRegion(center: coordinate, radius: 200, identifier: &quot;center&quot;)</span><br><span class="line">region.notifyOnEntry = true  //进入此范围触发</span><br><span class="line">region.notifyOnExit = false  //离开此范围不触发</span><br><span class="line">let trigger = UNLocationNotificationTrigger(region: region, repeats: true)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift – UserNotifications框架使用详解1（基本介绍，权限的申请与判断）</title>
      <link href="/posts/2022/11/1be16142.html"/>
      <url>/posts/2022/11/1be16142.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、UserNotifications-框架介绍"><a href="#一、UserNotifications-框架介绍" class="headerlink" title="一、UserNotifications 框架介绍"></a>一、UserNotifications 框架介绍</h2><h3 id="1，起源"><a href="#1，起源" class="headerlink" title="1，起源"></a>1，起源</h3><ul><li>  过去我们通过 UILocalNotification 来实现本地消息的推送通知（Local Notification），或者利用 APNS 进行通知消息的远程推送（Remote Notification）。如果我们程序同时用到了本地通知和远程通知，会发现它们的 API 都被随意地放在了 UIApplication 或者 UIApplicationDelegate 中，开发时代码十分混乱。</li><li>到了 iOS10，苹果新增加了一个 UserNotifications.framework（用户通知框架），目的在于统一 Remote Notification（远程通知）和 Local Notification（本地通知）。过去那些杂乱的和通知相关的 API 都被统一，同时也新增了许多新功能。</li></ul><h3 id="2，新特性"><a href="#2，新特性" class="headerlink" title="2，新特性"></a>2，新特性</h3><p>UserNotifications 框架除了整合通知相关的 API，还增加了很多令人惊喜的特性，让我们实现许多过去没法实现的功能。</p><span id="more"></span><ul><li>  更加丰富的推送内容：现在可以设置推送的 title、subtitle、body 以及符合大小的图片、音频、视频等附件内容。</li><li>  更好的通知管理：过去已发出的通知不能更新。现在可以对通知进行查看、更新、删除了（哪怕是已展示通知）。</li><li>更优雅的展示方式：可以设置应用在前台展示通知，自定义通知 UI。</li></ul><h3 id="3，使用流程"><a href="#3，使用流程" class="headerlink" title="3，使用流程"></a>3，使用流程</h3><p>UserNotifications 框架的使用大概分为以下几个过程：</p><ul><li>  申请、注册通知：首先需要向用户请求通知权限，在取得权限后注册通知。</li><li>  创建、发送通知：然后创建一个通知并发起推送。对于远程推送 APNS 而言，还需要注册 DeviceToken。</li><li>展示、处理通知：在接收到推送通知后可以根据 app 的运行情况决定是否展示通知，当然也可以通过一系列的回调接口对通知进行处理加工。</li></ul><h2 id="二、通知权限说明"><a href="#二、通知权限说明" class="headerlink" title="二、通知权限说明"></a>二、通知权限说明</h2><h3 id="1，申请权限"><a href="#1，申请权限" class="headerlink" title="1，申请权限"></a>1，申请权限</h3><p>（1）iOS 10 统一了推送权限的申请。不管是本地推送，还是远程推送，只需要 UNUserNotificationCenter.current().requestAuthorization() 方法申请即可。（这里我们在 AppDelegate 中申请通知权限。当然写在其它地方也是可以的。）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import UserNotifications</span><br><span class="line"> </span><br><span class="line">@UIApplicationMain</span><br><span class="line">class AppDelegate: UIResponder, UIApplicationDelegate &#123;</span><br><span class="line"> </span><br><span class="line">    var window: UIWindow?</span><br><span class="line"> </span><br><span class="line">    func application(_ application: UIApplication, didFinishLaunchingWithOptions</span><br><span class="line">        launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool &#123;</span><br><span class="line">        //请求通知权限</span><br><span class="line">        UNUserNotificationCenter.current()</span><br><span class="line">            .requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">                (accepted, error) in</span><br><span class="line">                if !accepted &#123;</span><br><span class="line">                    print(&quot;用户不允许消息通知。&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    func applicationWillResignActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    func applicationDidEnterBackground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    func applicationWillEnterForeground(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    func applicationDidBecomeActive(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    func applicationWillTerminate(_ application: UIApplication) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）当第一次调用上面这个方法时，系统会弹出如下窗口询问用户是否授权。</p><p><a href="https://www.hangge.com/blog/cache/detail_1845.html#"><img src="https://www.hangge.com/blog_uploads/201711/201711081958027341.png" alt="原文:Swift - UserNotifications框架使用详解1（基本介绍，权限的申请与判断）"></a></p><p>（3）如果用户拒绝了这个请求，再次调用该方法也不会再进行弹窗，同时也就无法收到通知。这种情况如果想要应用能接收到通知的话，只能让用户自行前往系统的设置中手动为你的应用打开通知了。因此在合适的时候弹出请求窗，并预先进行说明是很重要的。</p><h3 id="2，判断权限"><a href="#2，判断权限" class="headerlink" title="2，判断权限"></a>2，判断权限</h3><p>（1）在有些情况下，我们可以对推送权限设置进行检查。比如在检测到用户把通知权限关闭的时候，弹出个提示框引导用户去系统设置中打开通知权限。</p><p>比如下面代码，用户如果点击了“设置”按钮，则会自动跳转到通知设置页面，方便用户设置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNUserNotificationCenter.current().getNotificationSettings &#123;</span><br><span class="line">    settings in</span><br><span class="line">    switch settings.authorizationStatus &#123;</span><br><span class="line">    case .authorized:</span><br><span class="line">        return</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        //请求授权</span><br><span class="line">        UNUserNotificationCenter.current()</span><br><span class="line">            .requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">                (accepted, error) in</span><br><span class="line">                if !accepted &#123;</span><br><span class="line">                    print(&quot;用户不允许消息通知。&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    case .denied:</span><br><span class="line">        DispatchQueue.main.async(execute: &#123; () -&gt; Void in</span><br><span class="line">            let alertController = UIAlertController(title: &quot;消息推送已关闭&quot;,</span><br><span class="line">                                        message: &quot;想要及时获取消息。点击“设置”，开启通知。&quot;,</span><br><span class="line">                                        preferredStyle: .alert)</span><br><span class="line">             </span><br><span class="line">            let cancelAction = UIAlertAction(title:&quot;取消&quot;, style: .cancel, handler:nil)</span><br><span class="line">             </span><br><span class="line">            let settingsAction = UIAlertAction(title:&quot;设置&quot;, style: .default, handler: &#123;</span><br><span class="line">                (action) -&gt; Void in</span><br><span class="line">                let url = URL(string: UIApplicationOpenSettingsURLString)</span><br><span class="line">                if let url = url, UIApplication.shared.canOpenURL(url) &#123;</span><br><span class="line">                    if #available(iOS 10, *) &#123;</span><br><span class="line">                        UIApplication.shared.open(url, options: [:],</span><br><span class="line">                                                  completionHandler: &#123;</span><br><span class="line">                                                    (success) in</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        UIApplication.shared.openURL(url)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">             </span><br><span class="line">            alertController.addAction(cancelAction)</span><br><span class="line">            alertController.addAction(settingsAction)</span><br><span class="line">             </span><br><span class="line">            self.present(alertController, animated: true, completion: nil)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）除了打开和关闭全部通知权限外，用户也可以限制应用只能进行哪种形式的通知显示，比如：只允许横幅，而不允许声音及通知中心显示等。这些细微的设置，我们程序也是能检测到的。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNUserNotificationCenter.current().getNotificationSettings &#123;</span><br><span class="line">    settings in</span><br><span class="line">    var message = &quot;是否允许通知：&quot;</span><br><span class="line">    switch settings.authorizationStatus &#123;</span><br><span class="line">    case .authorized:</span><br><span class="line">        message.append(&quot;允许&quot;)</span><br><span class="line">    case .notDetermined:</span><br><span class="line">        message.append(&quot;未确定&quot;)</span><br><span class="line">    case .denied:</span><br><span class="line">        message.append(&quot;不允许&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n声音：&quot;)</span><br><span class="line">    switch settings.soundSetting&#123;</span><br><span class="line">    case .enabled:</span><br><span class="line">        message.append(&quot;开启&quot;)</span><br><span class="line">    case .disabled:</span><br><span class="line">        message.append(&quot;关闭&quot;)</span><br><span class="line">    case .notSupported:</span><br><span class="line">        message.append(&quot;不支持&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n应用图标标记：&quot;)</span><br><span class="line">    switch settings.badgeSetting&#123;</span><br><span class="line">    case .enabled:</span><br><span class="line">        message.append(&quot;开启&quot;)</span><br><span class="line">    case .disabled:</span><br><span class="line">        message.append(&quot;关闭&quot;)</span><br><span class="line">    case .notSupported:</span><br><span class="line">        message.append(&quot;不支持&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n在锁定屏幕上显示：&quot;)</span><br><span class="line">    switch settings.lockScreenSetting&#123;</span><br><span class="line">    case .enabled:</span><br><span class="line">        message.append(&quot;开启&quot;)</span><br><span class="line">    case .disabled:</span><br><span class="line">        message.append(&quot;关闭&quot;)</span><br><span class="line">    case .notSupported:</span><br><span class="line">        message.append(&quot;不支持&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n在历史记录中显示：&quot;)</span><br><span class="line">    switch settings.notificationCenterSetting&#123;</span><br><span class="line">    case .enabled:</span><br><span class="line">        message.append(&quot;开启&quot;)</span><br><span class="line">    case .disabled:</span><br><span class="line">        message.append(&quot;关闭&quot;)</span><br><span class="line">    case .notSupported:</span><br><span class="line">        message.append(&quot;不支持&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n横幅显示：&quot;)</span><br><span class="line">    switch settings.alertSetting&#123;</span><br><span class="line">    case .enabled:</span><br><span class="line">        message.append(&quot;开启&quot;)</span><br><span class="line">    case .disabled:</span><br><span class="line">        message.append(&quot;关闭&quot;)</span><br><span class="line">    case .notSupported:</span><br><span class="line">        message.append(&quot;不支持&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    message.append(&quot;\n显示预览：&quot;)</span><br><span class="line">    switch settings.showPreviewsSetting&#123;</span><br><span class="line">    case .always:</span><br><span class="line">        message.append(&quot;始终（默认）&quot;)</span><br><span class="line">    case .whenAuthenticated:</span><br><span class="line">        message.append(&quot;解锁时&quot;)</span><br><span class="line">    case .never:</span><br><span class="line">        message.append(&quot;从不&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    print(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 本地通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人人都装杀毒软件的时代，电脑病毒却越杀越多，后来是怎么「清零」的？</title>
      <link href="/posts/2022/11/3601a248.html"/>
      <url>/posts/2022/11/3601a248.html</url>
      
        <content type="html"><![CDATA[<p><strong>👆</strong>在自己的身上，克服这个时代<strong>👆</strong></p><p>今天的文章，希望你能认真读完，因为这关乎我们每个人的切身利益。</p><p>我们这代人，一定都对「杀毒软件」印象深刻。</p><p>十几二十几年前，电脑病毒肆虐：各种木马病毒、CIH病毒，以及著名的熊猫烧香。</p><p>但凡买了新电脑，第一件要做的事，大概率都是装上杀毒软件。</p><p>去打印店，插U盘前也会问问老板：你家电脑没病毒吧？</p><p>而一批开发收费杀毒软件的公司，也随着病毒的猖狂迅速崛起：</p><p>卡巴斯基，江民，瑞星，金山毒霸……</p><p>比如说瑞星。</p><span id="more"></span><p>这个小狮子，大家应该不陌生。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-76.png" alt=""><p>当年发现了一种名叫CIH的病毒，只有1kb大小，却让全球数千万台电脑陷入瘫痪。</p><p>而当时发迹不久的瑞星，第一个开发出清除CIH病毒的软件。</p><p><strong>于是，病毒成就了瑞星。</strong></p><p>230元一套的杀毒软件，一个月能卖十万套。</p><p>2003年，瑞星年销售额就超过7个亿。</p><p>还有后来的金山毒霸。</p><p>为了抢市场，打出免费试用和低价策略。</p><p>不到三年，在市占率上就名列前茅。</p><p>那些年，真可谓是杀毒软件的黄金时代。</p><p><strong>可奇怪的是，当时不管这些技术先进的软件怎么遍地开花，电脑病毒却道高一尺魔高一丈，层出不穷，越杀越多。</strong></p><p>人们一度陷于被病毒支配的恐惧。</p><p><strong>更奇怪的是，后来，电脑病毒似乎一夜之间“消失”了。</strong></p><p><strong>现在我们很少再用什么杀毒软件，可“裸奔”的机器，照样很安全。</strong></p><p>这些，都是为什么？</p><p><strong>01</strong></p><p>聊这个问题前，先说另一个故事。</p><p>相传殖民时期的印度，毒蛇泛滥。</p><p>尤其是眼镜蛇，总在大街小巷出没，伤人不说，还常引起居民骚乱。</p><p>当局为了稳定局势，颁布悬赏：</p><p>只要有人能抓到眼镜蛇，就能领一笔赏金。</p><p>事实证明这是个好主意，当地居民人人热情高涨，上街打蛇，换取赏金。很快肆虐的毒蛇就被消灭干净了。  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-77.png" alt=""><p>但，故事没有结束。</p><p>有一群人，在捕蛇运动中嗅到了商机，起早贪黑抓着成筐的蛇，换得盆满钵满，甚至以此为生。</p><p>可抓着抓着，毒蛇眼看不够用了，财路要断，怎么能行？</p><p>他们想出个好招：<strong>饲养眼镜蛇。</strong></p><p>只要把蛇交上去，当局哪里能分辨出是家养还是野生，当然只能支付赏金。</p><p><strong>于是原本为了清理蛇患的政策，变成了一桩生意，越来越多的人开始专门养蛇领钱。</strong></p><p>持续了一段时间，当局再也撑不住了。</p><p>眼镜蛇越杀反而越多，悬赏金也严重亏空了财政。</p><p>调查之后，当局终于发现了其中猫腻。震怒之下，第二天就宣布废除悬赏。</p><p>这下闹剧该结束了吧？</p><p><strong>但结果是，大家一看养蛇没用了，急着脱手，干脆把毒蛇全部放生。</strong></p><p>大街上，蛇山蛇海，为了换钱而大量饲养的眼镜蛇在人间泛滥，反而造成了比之前更严重的蛇患……</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-78.png" alt=""><p>这就是经济学上的<strong>“眼镜蛇效应”</strong>。</p><p>它不是偶然，不是孤例。</p><p>20世纪初，越南河内老鼠泛滥成灾。</p><p>当时的殖民总督想出了相似的办法，唯一不同的是，统治者担心抓来的老鼠堆积成山更有隐患，便宣布：</p><p>抓到老鼠后，自行消灭。只需把尾巴割下来，即可兑换报酬。</p><p>于是人人踊跃，一连两个多月，每天都有数千条老鼠尾巴被呈上。</p><p>但鼠患不光愈演愈烈，还满大街出现没有尾巴的老鼠。</p><p>原来人们根本不会真正杀掉老鼠，而是只切下尾巴，故意“放鼠归洞”。</p><p><strong>毕竟丢掉尾巴的老鼠性命仍在，可以继续繁殖出大量老鼠，继续提供老鼠尾巴。</strong></p><p>谁还会管老鼠携带的病菌害不害人？</p><p>反正多一条尾巴，就多一笔收入。</p><p>这些当局的政策，都错了吗？</p><p>不，这些措施都是出于好意。</p><p>不光在很大程度上解决了麻烦，还补贴了民众。</p><p>可问题是：</p><p><strong>当灾难能带来利益，就一定会有人不愿看到灾难结束。</strong></p><p><strong>02</strong></p><p>“眼镜蛇效应”，还会在更大的层面奏效。</p><p>19世纪80年代，德国“铁血宰相”俾斯麦通过立法，建立了世界上最早的工人养老金、社会保障、医疗保险制度。</p><p>这是德国社会救济制度的起源。</p><p>一百多年来，社会救助，已经发展成德国的第一大产业。</p><p>直接从业人数200万，比德国最著名的汽车产业庞大得多。</p><p>为的，当然是让穷人过上更有保障的生活。</p><p>让他们饥有所食，病有所医，让不那么幸运的人，不会陷入绝境。</p><p>他们可以领到很高的失业救助金，还可以住进环境优美、医疗护理都免费的福利房。</p><p>每年每套租金，只要0.88欧元，约人民币7块钱。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-79.png" alt=""><p>这是件利民的好事。</p><p>但如今，某种程度上，却变成了德国经济的一道伤痕。</p><p>为了避免政府机构的官僚主义和低效率，德国把福利救助工作大量外包给私营机构去做。</p><p>每年，为之几乎要拨款1/5的政府税收。</p><p><strong>这就意味着，私营救助机构的收入来源，靠的是政府补助。</strong></p><p><strong>更意味着，受救助的人越多，向政府领的钱也就越多。</strong></p><p>于是，各种救助机构如捕猎一般搜寻救助对象。</p><p>巡视社区，走遍街道，发掘甚至“培育”着“客户”。</p><p><strong>穷人不够，就创造穷人。</strong></p><p>1994 年到2010 年，仅十几年间，德国残疾人数量增长了一倍。</p><p>许许多多的健康人，被救助机构一顿“操作”后，被鉴定为残疾人。</p><p>他们还在下层阶级家庭中“挖掘”着有学习障碍的孩子。</p><p>即便有些问题，对成长中的孩子来说很正常，但在救助机构眼里，这些孩子是“优质客户”。</p><p>他们拿到了补助，孩子却被终身贴上了标签。</p><p>很难进入正常学校接受教育，成年后，也很难进入正常劳动力市场。</p><p>到了最后，甚至争先恐后从国外“引进”难民。</p><p>大批难民，按月从德国政府那里领取丰厚补贴，但其中很大一部分收入落到了谁手里，不言而喻。</p><p>而这背后所带来的社会问题，他们才懒得管。</p><p>这一切，不是没人在意。</p><p>2003年，德国时任总理施罗德宣布改革，缩减救助补贴。</p><p>不仅很大程度减轻了财政压力，失业率也逐步下降。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-80.png" alt=""><p>可仅仅两年后，他就在选举中失利，退出政坛。</p><p>那200 万从业人员，加上家属和上下游产业，德国至少有数百万乃至上千万人直接间接靠福利制度赚钱。</p><p>他们手中握着选票，很多人甚至能够影响别人的选票。</p><p>于是，任何试图削减福利制度的政策都难以通过，任何想制衡救助产业的人都会很快下台。</p><p>这颗“雷”，越埋越深，却无人敢碰。</p><p>那些养蛇的、放老鼠的、“制造”穷人的，也许从一开始，也像我们普通人一样。</p><p>不想看到有人受穷，不想看到虫患肆虐，病毒横行。</p><p>可当他们能从中获得惊人的利益，便摇身一变，成了灾害的帮凶爪牙。</p><p>他们说着冠冕堂皇的话，喊着公共利益的号子，却在混乱中笑得无比开心。</p><p>才不管蛇会咬谁，鼠疫会传染给谁，高昂的财政拨款最后是由谁纳的税来买单。</p><p>想到那个段子：</p><p>上帝来到人间，看到每当他安排雨神下雨时，路上行人只能无助地躲在屋檐下。</p><p>而卖伞的商家，总是能及时出现，给躲雨的人带来雨伞。</p><p>上帝赞赏他，便说：</p><p><strong>“就让卖伞商家掌管天上下雨吧，他知道行人出行时间，不至于让大家淋雨。”</strong></p><p>三年后，上帝又来到人间，才发现：</p><p><strong>三年来，这场大雨，从没停过。</strong></p><p><strong>03</strong></p><p>写到这里，你肯定理解了文章开头的那个问题：</p><p>电脑病毒后来为什么突然就不见踪迹了？</p><p>因为那时候，发生了一件事。</p><p>2008年7月，一家叫奇虎360的公司横空出世，宣布自己的杀毒软件永久免费。</p><p>当时所有的同行都不理解，不在意，等着它迟早倒闭。</p><p>结果它用广告变现的方式活了下来，用户数还突破了3亿，迅速拿下行业头把交椅。</p><p>其他公司还能怎么办，当然是被迫跟着免费。</p><p>于是，付费杀毒时代，宣告落幕，而曾经活跃在每台电脑上的杀毒软件们，也渐渐褪去了风头。</p><p>那么，是因为电脑病毒真的消失了吗？</p><p>当然并没有，它们依旧很有危害性，但却已把目标对准了高校、企业、政府机构这类对象。</p><p>因为对公采购，能获利更多。</p><p>而针对我们普通人个人电脑的病毒，从经济角度看并不能产生什么利益了，自然就消失了。</p><p><strong>打蛇行动的结束，不是因为蛇没了，而是利益没了。</strong></p><p>话已至此，诸位都懂。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-81.png" alt=""><p><strong>如果一直让捉蛇的人有高额赏金，蛇患哪一天能绝？</strong></p><p><strong>如果一直让“制造”穷人的机构挣大钱，穷人是会越帮越多还是越帮越少？</strong></p><p><strong>如果一直让卖伞的人握有降雨的权利，天什么时候能放晴？</strong></p><p>只有无利可图了，有些事情，才能有所改变。</p><p>灾难、病毒，往往也同时捆绑着利益、欲望。</p><p><strong>真正需要封控的，是卖伞的龙王，而不是淋雨的行人。</strong></p><p><strong><strong>-END-</strong></strong></p><p>我们一起，在自己的身上，克服这个时代</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复习机制的想法(关于Anki与MarginNote)</title>
      <link href="/posts/2022/11/a5ad2d9b.html"/>
      <url>/posts/2022/11/a5ad2d9b.html</url>
      
        <content type="html"><![CDATA[<p>大纲：</p><ul><li>anki的优缺点</li><li>人的记忆规律(不是艾宾浩斯这些老生常谈)</li><li>  复习机制实现的建议</li></ul><p>这里是比较新的观点和总结，全是干货，很值得一看，比那些公众号大谈特谈记忆的诀窍要强得多。</p><p>大家都觉得anki做的很好了。我不同意，anki在应付考试这方面确实很不错。但学习的目的不只是为了考试。记忆太重要了，估计没人反对。复习太重要了，极少有人能不复习就不遗忘的吧(如果有，那不是天才，那是病，没人能选择性记忆、遗忘)。</p><h2 id="anki的优点"><a href="#anki的优点" class="headerlink" title="anki的优点"></a>anki的优点</h2><ul><li>生态和开源。我认为这是它最出色的一点。一个软件能有这么多用户参与进来，我没见过第二个(因为我太菜，没见过GNU)。你想要的，往往有大神已经做出来了。偶尔也会没有。</li><li>配合上插件，功能非常完善。filter deck，card browser。各种模板(html,css的支持)，公式、化学式、latex支持，图像音频支持。和插件配合，支持代码块高亮插件、表格、超链接，估计都超越了大多数笔记软件。<span id="more"></span>  在我心里，它的笔记支持是最好的。markdown原生不支持音频、图像也很弱。onenote太强大了，力不从心，不支持latex。印象笔记就更不用说了，代码块高亮都不支持(虽然配上tool是可以有的，只是很麻烦)。富文本，虽然也都能支持，但排版麻烦，而且也没找到很理想的富文本编辑器。</li><li>多平台(所有主流平台，甚至包括linux)，同步稳定可靠(只要没有冲突)。</li></ul><p>flashcard该有的anki全都有，尽善尽美。而且社区也在不断壮大，迭代速度也很快。</p><h2 id="anki的短板"><a href="#anki的短板" class="headerlink" title="anki的短板"></a>anki的短板</h2><p>anki功能上堪称尽善尽美，它的缺点是设计思路上的，插件很难弥补。</p><h2 id="缺乏整体的连接，知识是碎片的"><a href="#缺乏整体的连接，知识是碎片的" class="headerlink" title="缺乏整体的连接，知识是碎片的"></a>缺乏整体的连接，知识是碎片的</h2><p>用来学学语言挺好的，学个初等数论、几何，就把知识割裂开了，一般的学科就像搭积木，没有这一层就没有上面一层。知识与知识之间有联系的。</p><p>anki局限在一个卡片了。anki的卡片没有url，估计短时间内都不会支持。</p><p>举个场景，简单线性回归OLS中b的表示方式可以是Xi的线性组合。用anki，你记住了Xi的线性组合系数ki的3大性质。但你无法将OLS与非OLS的线性无偏估计进行比较，后者也有2个相同性质，只差第三点。</p><p>你也想不到，这简单线性回归中，这个知识点在什么位置。但</p><p>用思维导图你就能看到，这就是我比较坚定地认为MN更好的原因。</p><p>一句话，知识是散的，不成体系、难以梳理，这是flashcard的固有缺点。</p><h2 id="忽略了卡片难度的巨大差别"><a href="#忽略了卡片难度的巨大差别" class="headerlink" title="忽略了卡片难度的巨大差别"></a>忽略了卡片难度的巨大差别</h2><p>我发现的基本规律，那就是，10个知识点，有7个很简单，比如概念和定理本身和定理的一些显然的推论。3个很困难，比如定理的证明，比如一道综合性强的题目。但anki的算法对难度不敏感。我复习的时候，经常想，这么简单还好意思出现？或者是，根本不记得了，我记忆力好差。就是因为anki没有考虑到二八定律(20%的时间用于80%时间的考虑)。把大量时间用于简单内容的复习上，让人不胜其烦。</p><h2 id="算法不合理"><a href="#算法不合理" class="headerlink" title="算法不合理"></a>算法不合理</h2><p>anki算法基础就是记忆是按指数衰减的。记忆指数衰减规律真的对么？我不这么认为，或许因为我的记忆力比一般人差。背了那么十几天GRE，间隔稍微长一点，又不记得了。</p><p>我觉得是大家误解了艾宾浩斯实验本身的意义，是强行推论。艾宾浩斯只是告诉我们，适当安排复习是非常重要的，可没告诉我们怎么才是“适当”的间隔。没说是指数，也没说这个衰减的公式是什么。我不同意指数衰减，人脑对困难的材料没那么强悍。比如要是有人跟我说，GRE单词难度是指数衰减的，我就不信，顶多是个等差数列级别的。我只同意一点：一开始的复习很重要。后面是我关于人的记忆的猜想。</p><h2 id="再来一遍？"><a href="#再来一遍？" class="headerlink" title="再来一遍？"></a>再来一遍？</h2><p>有时候，有个知识点我忘了，此时我不想复习那几十张其它的，就想记这个。我得新建立一个deck，再移动过去。记完了再移动回去。2.0版本有个插件可以做到预览复习，2.1这个插件就不支持了(但估计迟早会支持，作者是一位大神)。</p><h2 id="我总结的记忆规律"><a href="#我总结的记忆规律" class="headerlink" title="我总结的记忆规律"></a>我总结的记忆规律</h2><p>最开始的那一段时间(比如一周)的密集召回记忆是最重要的。如果能应用，比如给同学讲讲，效果会更好。总之就是一开始要走心，要多想多用。如果我给同学讲了一种方法，那么这种方法我会记很久。到大学这么操作不容易，没这个氛围。</p><p>我有些诗文记得很牢，不是因为我指数间隔复习，而是因为一开始的那一段时间过于密集地复习，老师也抽背，同学们之间互相考着玩。比如背《醉翁亭记》《岳阳楼记》，那几天总是在想这个，下课就背上两句。尽管后面没怎么复习，还是记很久。反观《马嵬》，背的时候没怎么走心，几下背了就不管了，现在都只记得最后两句了。</p><p>你是不是感觉小时候背的东西记得很牢，怎么也不会忘。其实是因为小时候学的知识太少了，能反复巩固。你想想，是不是背了首李煜的《虞美人》，就迫不及待地跟父母同学展示？</p><h2 id="我对MN复习机制设计的建议"><a href="#我对MN复习机制设计的建议" class="headerlink" title="我对MN复习机制设计的建议"></a>我对MN复习机制设计的建议</h2><p>这个想法很不成熟，纸上谈兵，不过只是说来听听：</p><ul><li>关于复习的参数，是卡片本身属性的一部分，就像标签一样。最基本的属性是：开始学习的时间，上一次复习到下一次复习的间隔，它选择的记忆路线 ，它被记忆了几次(index)。如果有遗忘，那么index重置为1。  记忆路线：可以由用户自定义，很简单，只是常数数组。比如：1,1,1,1,8,20。表示的是，上一次复习到下一次复习的间隔。  实际上记忆路线只是个参考，用户可以自己定义下一次复习时间。那么记忆路线是不是乱套、不能用了呢？不，它继续按照index和路线数组决定。比如，这是第3次记忆，我自己选择了一个新的间隔，那么下一个间隔继续按照a[3]这样，就好像之前的手动选择没发生过一样。反正维护的只是间隔，不是日期。但是实际UI中，为了方便用户，可以选择日期，日期更直观。  用户也可以选择重置。</li><li>关于上一点我觉得如果能与搜索过滤设置配合就更好了。就是找出遗忘的，这样不用到复习界面就能复习，好处是看得更快。</li><li>对于难点的复习，由用户标注为难点，在一开始给它安排大量复习。意思是，用户循环完一遍以后，这个循环就再次开始，而不是像现在这样，今天复习就结束了，记忆不结束，直到没有难点为止。排序也要调整，上一次的错误排在前面。要提醒用户，这种卡片记忆压力很大，不是重难点不要标记，否则就是浪费时间。  那么什么时候变成普通的卡片呢？<ul><li>  用户标志熟记。</li><li>  记录一下整个用时，当时间小到一定程度的时候，且连续好几次时间都很短的时候，从难点变为普通。</li></ul>  当它不是难点以后，它就跟普通卡片没区别了，默默地进入冷宫。  而且难点不划分科目，直接在一起，因为难点数量不多，用户可以自由地筛选来自哪个笔记本的，就类似于搜索的过滤一样。  当用户没有多少时间的时候，首先要复习的就是难点。</li></ul><p>这两点做到以后，实际上就是少数的难点(大概1/4-1/5的样子)，和不怎么需要操心的简单卡片。让用户把复习时间花在刀刃上。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升记忆力——艾宾浩斯记忆曲线原理</title>
      <link href="/posts/2022/11/2f173542.html"/>
      <url>/posts/2022/11/2f173542.html</url>
      
        <content type="html"><![CDATA[<p>人的大脑是一个记忆的宝库，人脑经历过的事物，思考过的问题，体验过的情感和情绪，练习过的动作，都可以成为人们记忆的内容。例如英文的学习中单词、短语和句子，甚至文章的内容都是通过记忆完成的。从”记”到”忆”是有个过程的，这其中包括了识记、保持、再认和回忆。有很多人在学习英语的过程中，只注重了学习当时的记忆效果，孰不知，要想做好学习的记忆工作，是要下一番工夫的，单纯的注重当时的记忆效果，而忽视了后期的保持和再认同样是达不到良好的效果的。</p><p>在信息的处理上，记忆是对输入信息的编码、贮存和提取的过程，从信息处理的角度上，英文的第一次学习和背诵只是一个输入编码的过程。人的记忆的能力从生理上讲是十分惊人的，它可以存贮1015比特(byte，字节)的信息，可是每个人的记忆宝库被挖掘的只占10%，还有更多的记忆发挥空间。这是因为，有些人只关注了记忆的当时效果，却忽视了记忆中的更大的问题–即记忆的牢固度问题，那就牵涉到心理学中常说的关于记忆遗忘的规律。</p><span id="more"></span><p><strong>一、艾宾浩斯记忆曲线解释</strong><br>德国有一位著名的心理学家名叫艾宾浩斯(Hermann Ebbinghaus，1850-1909)，他在1885年发表了他的实验报告后，记忆研究就成了心理学中被研究最多的领域之一，而艾宾浩斯正是发现记忆遗忘规律的第一人。</p><p>根据我们所知道的，记忆的保持在时间上是不同的，有短时的记忆和长时的记忆两种。而我们平时的记忆的过程是这样的：</p><p>输入的信息在经过人的注意过程的学习后，便成为了人的短时的记忆，但是如果不经过及时的复习，这些记住过的东西就会遗忘，而经过了及时的复习，这些短时的记忆就会成为了人的一种长时的记忆，从而在大脑中保持着很长的时间。那么，对于我们来讲，怎样才叫做遗忘呢，所谓遗忘就是我们对于曾经记忆过的东西不能再认起来，也不能回忆起来，或者是错误的再认和错误的回忆，这些都是遗忘。艾宾浩斯在做这个实验的时候是拿自己作为测试对象的，他得出了一些关于记忆的结论。他选用了一些根本没有意义的音节，也就是那些不能拼出单词来的众多字母的组合，比如asww，cfhhj，ijikmb，rfyjbc等等。他经过对自己的测试，得到了一些数据。</p><p>然后，艾宾浩斯又根据了这些点描绘出了一条曲线，这就是非常有名的揭示遗忘规律的曲线：艾宾浩斯遗忘曲线，图中竖轴表示学习中记住的知识数量，横轴表示时间(天数)，曲线表示记忆量变化的规律。</p><p><img src="https://pic1.zhimg.com/v2-8e16d1cfe51b4f1f928c6a00542c2cc4_b.jpg"></p><p>这条曲线告诉人们在学习中的遗忘是有规律的，遗忘的进程不是均衡的，不是固定的一天丢掉几个，转天又丢几个的，而是在记忆的最初阶段遗忘的速度很快，后来就逐渐减慢了，到了相当长的时候后，几乎就不再遗忘了，这就是遗忘的发展规律，即”先快后慢”的原则。观察这条遗忘曲线，你会发现,学得的知识在一天后，如不抓紧复习,就只剩下原来的25%。随着时间的推移,遗忘的速度减慢，遗忘的数量也就减少。有人做过一个实验，两组学生学习一段课文，甲组在学习后不久进行一次复习，乙组不予复习，一天后甲组保持98%，乙组保持56%；一周后甲组保持83%，乙组保持33%。乙组的遗忘平均值比甲组高。</p><p><strong>二、不同性质材料有不同的遗忘曲线</strong><br>而且，艾宾浩斯还在关于记忆的实验中发现，记住12个无意义音节，平均需要重复16.5次；为了记住36个无意义章节，需重复54次；而记忆六首诗中的480个音节，平均只需要重复8次！这个实验告诉我们，凡是理解了的知识，就能记得迅速、全面而牢固。不然，愣是死记硬背，那也是费力不讨好的。因此，比较容易记忆的是那些有意义的材料，而那些无意义的材料在记忆的时候比较费力气，在以后回忆起来的时候也很不轻松。因此，艾宾浩斯遗忘曲线是关于遗忘的一种曲线，而且是对无意义的音节而言，对于与其他材料的对比，艾宾浩斯又得出了不同性质材料的不同遗忘曲线，不过他们大体上都是一致的。</p><p>因此，艾宾浩斯的实验向我们充分证实了一个道理，学习要勤于复习，而且记忆的理解效果越好，遗忘的也越慢。</p><p><img src="https://pic1.zhimg.com/v2-08d3afc2b491013450ffcbd19edefc9c_b.jpg"></p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-75.png" alt=""> <p><strong>三、不同的人有不同的艾宾浩斯记忆曲线–个性化的艾宾浩斯</strong><br>上述的艾宾浩斯记忆曲线是艾宾浩斯在实验室中经过了大量测试后，产生了不同的记忆数据，从而生成的一种曲线，是一个具有共性的群体规律。此记忆曲线并不考虑接受试验个人的个性特点，而是寻求一种处于平衡点的记忆规律。</p><p>但是记忆规律可以具体到我们每个人，因为我们的生理特点、生活经历不同，可能导致我们有不同的记忆习惯、记忆方式、记忆特点。规律对于自然人改造世界的行为，只能起一个催化的作用，如果与每个人的记忆特点相吻合，那么就如顺水扬帆，一日千里；如果与个人记忆特点相悖，记忆效果则会大打折扣。因此，我们要根据每个人的不同特点，寻找到属于自己的艾宾浩斯记忆曲线。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki 高阶教程 核心设置算法研究与详解（四）记忆库（牌组）选项之失误次数</title>
      <link href="/posts/2022/11/929d38a8.html"/>
      <url>/posts/2022/11/929d38a8.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong><br>同上文，略…</p><p><strong>本文详解后你能清楚的了解到的功能有：</strong></p><blockquote><p><strong>1、记忆库-齿轮选项-失误次数-步伐</strong><br><strong>2、记忆库-齿轮选项-失误次数-新间隔（此点内容较多）</strong><br><strong>3、复杂算法</strong><br><strong>4、记忆库-齿轮选项-失误次数-最小间隔</strong><br><strong>5、如何进行虚拟机anki使用练习</strong><br><strong>6、浏览</strong></p></blockquote><span id="more"></span><p><strong>看完此文你将会学习到：</strong></p><blockquote><p><strong>“步伐”=“老卡步伐”</strong>（老卡片一级间隔）<br>“<strong>失误</strong>”=<strong>“遗忘”</strong><br><strong>“新间隔”=“减去基准间隔”</strong>（不稳定的设置项）<br><strong>复杂算法 不同点击后的进一步计算方式</strong><br><strong>“最小间隔”=“老卡生疏最右侧值”</strong><br><strong>“失误次数”=“老卡时间2”</strong><br><strong>虚拟机anki使用练习</strong><br><strong>“新的”=”复习“</strong><br><strong>“时间框的时间限制”=“间隔学习量提示”</strong></p></blockquote><hr><p><img src="https://pic1.zhimg.com/v2-c9a94383a7fd540bd580e010b89f9c4c_b.jpg"></p><h2 id="1、记忆库-齿轮选项-失误次数-步伐"><a href="#1、记忆库-齿轮选项-失误次数-步伐" class="headerlink" title="1、记忆库-齿轮选项-失误次数-步伐"></a><strong>1、记忆库-齿轮选项-失误次数-步伐</strong></h2><blockquote><p>和第（一）篇文章的“步伐”（一级间隔）是一个意思，这里呢就是换做对老卡片的了。</p></blockquote><p>什么是老卡片？</p><blockquote><p>就是学习“<strong>新卡片”</strong>时选择了“毕业时间-二级间隔”或“简单时间-三级间隔”的时间周期后就是“<strong>老卡片”</strong>了，关于“毕业时间-二级间隔”或“简单时间-三级间隔”如果不懂的可以回顾第（二）篇文章。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-bd617d0dbff1c1f314eec4ad642313fc_b.jpg"></p><p>什么是“失误”呢？</p><blockquote><p>就是在学习或复习老卡片的时候选择最<strong>左边的“生疏”</strong>选项后anki就判定为“<strong>失误</strong>”，其实更地道点表达应该是“<strong>遗忘</strong>”而不是“<strong>失误</strong>”，或者直接命名为“<strong>老卡 生疏</strong>”都是很好理解的，意思就是点击生疏后的各项时间处理选项。</p></blockquote><p>“<strong>失误</strong>”=<strong>“遗忘”</strong></p><blockquote><p>这个“<strong>步伐</strong>”和第一篇文章的功能几乎一模一样，只要你在老卡片复习时点击的是“<strong>10分 生疏</strong>”就会跳入或者叫出现“<strong>步伐”</strong>的时间周期选项，跳或者叫出现“步伐”的周期后最右边的“<strong>顺利/正确</strong>”是由“<strong>最小间隔</strong>”控制，你设定的“最小间隔”会成为最右侧的“<strong>顺利/正确</strong>”。<br>我看了官方说明，只要点击“生疏”后最右侧时间就会最大重置为1天或叫“最小间隔”天。（官方说明当然是不大好理解的和我在这表述的完全不是一个感觉），“最小间隔”我们留到后边在进行探讨。</p></blockquote><p><strong>“步伐”=“老卡步伐”</strong>（老卡片一级间隔）</p><p><img src="https://pic4.zhimg.com/v2-454e2a888efea861d324f9a7433ff783_b.jpg"></p><blockquote><p>另外如果你在“<strong>失误次数</strong>”的“<strong>步伐</strong>”中如果只设定了“<strong>1次</strong>”时间周期在“<strong>学习老卡片时”</strong>选择最左侧“<strong>生疏</strong>”后它也就只会出现两个选项，如上图，此时<strong>“最小间隔”</strong>的时间会为最右侧的时间周期</p></blockquote><hr><p><img src="https://pic1.zhimg.com/v2-2699907e43fac937cfbaf6255629b364_b.jpg"></p><h2 id="2、记忆库-齿轮选项-失误次数-新间隔"><a href="#2、记忆库-齿轮选项-失误次数-新间隔" class="headerlink" title="2、记忆库-齿轮选项-失误次数-新间隔"></a><strong>2、记忆库-齿轮选项-失误次数-新间隔</strong></h2><p><strong>高能预警：（这个点比较纠结要看请做好心理准备，再继续向下看）</strong></p><p><strong>高能预警：（这个点比较纠结要看请做好心理准备，再继续向下看）</strong></p><p><strong>高能预警：（这个点比较纠结要看请做好心理准备，再继续向下看）</strong></p><p>接下来我们继续研究下去，新间隔是什么呢？？</p><p>官方说明上是这样描述的“_新的间隔_控制Anki应该对以前的间隔减少多少。如果卡片有100天的间隔，默认为0%将减少间隔为0（但是看下一个选项）。如果你设置此选项为20%，该卡片将其间隔减少到20天。“</p><p>我自己是看得云里雾里，看起来这个值是减少时间用的，但是具体是怎么减少的，官方说明没有具体说明白，所以我们直接默认参数和设定参数进行对照来直观看看是怎么回事吧：</p><p><img src="https://pic3.zhimg.com/v2-4856041af0df333476dff8fb70c76efe_b.jpg"></p><p>上图为默认参数下效果，下边我把新**间隔设置为50%**，来看看时间是否会减少！</p><p><img src="https://pic2.zhimg.com/v2-ab008e28e853ea021596d966bfdcb091_b.jpg"></p><p><img src="https://pic1.zhimg.com/v2-af342e7e02e2b6fda1b4be30bd4409f8_b.jpg"></p><blockquote><p>设置50%后犹豫时间减少了3天（一个月为30天计算的话），也就只是30天的10%，并未减少多少，按理是和“<strong>复习</strong>”中<strong>“间隔修饰符”（间隔乘数再加倍）</strong>是一个原理的，就是对时间再处理也可以加倍也可以减倍数。</p></blockquote><p><strong>“新间隔”=“间隔乘数再再加倍”</strong></p><p><img src="https://pic2.zhimg.com/v2-eb47abf9ccfa52130cae24c19560276d_b.jpg"></p><p><img src="https://pic4.zhimg.com/v2-11c208082a898d349bc3d803fa7e247f_b.jpg"></p><blockquote><p>但实际效果设置50%后实际得到的是10%的效果，不知道是什么原因，那么我们把它再往小里设置了测试试试看。这次设置20%，<strong>不知道为什么最后还是得到27天</strong>。点击27天后得到2.3个月。看来这个新间隔怎么调整都是固定在了<strong>90%的状态。</strong></p></blockquote><p><img src="https://pic1.zhimg.com/v2-8283e651d7b3e5208e6e9d6136704b08_b.jpg"></p><blockquote><p>经过我再次测试设置为50%后点击顺利4天 犹豫10天后变为了<strong>25天</strong>，看来里边有一些随机因素？？<br>这个新间隔我目前测试结果如果你设置它为20%或50%都是固定在90%的效果并且有一定上下浮动的随机性。</p></blockquote><p>接下来再深入研究一下这个新间隔，它是否是在复习老卡片时点击<strong>生疏</strong>后才生效？</p><blockquote><p>首先我们先测试一组默认参数的效果。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-e7e87e323fac26d4980c20ea3e65d93d_b.jpg"></p><p>以下“<strong>新间隔</strong>”再次设置为50%进行对照测试：</p><p><img src="https://pic4.zhimg.com/v2-59df55994b101dadd01dfc3791b95b97_b.jpg"></p><blockquote><p>这次测试<strong>仔细看图</strong>的应该都知道这个新间隔是起什么作用了？改变它后会对老卡片选择“<strong>生疏/错误</strong>”后的时间起作用，但具体算法并不是按输入的百分比计算，不过实际是起到会减少间隔时间的作用。</p><p>在初期怎么“<strong>犹豫想起</strong>”怎么会变成了<strong>2天</strong>，我也不大搞得清楚相当于是*2的时间，很有可能是软件bug，（我在测试中发现了很多软件bug，比如有时选择4天复习实际是5天，所以anki折扣软件有一些地方并不稳定）。</p><p><strong>建议大家要使用这个功能前，用虚拟机多做模拟，搞清楚它的运算效果，再进行改动！目前我的测试结果如果设置为50%他是先倍增后边又缩小，比较奇怪，如何使用虚拟机进行模拟练习我在文尾有写。</strong></p></blockquote><p><strong>我接下来配合其它参数对它再做进一步的测试，试着搞懂它到底是怎么计算的！</strong></p><p><img src="https://pic3.zhimg.com/v2-641587bec98c920de23a16e7ef6b5db2_b.jpg"></p><p><img src="https://pic4.zhimg.com/v2-0c4df17e7378cbc4a7f32af6e90b2203_b.jpg"></p><blockquote><p>上图我把”<strong>开始简化</strong>“调节为**200%<strong>方便我观察，其它参数不变，进行对照测试观察。<br>下图为把新间隔修改为</strong>50%**，进行对照测试！（是不是太能折腾了···）</p></blockquote><p><img src="https://pic4.zhimg.com/v2-2c55a9d4cfef2850f3cc44362e5e4bd3_b.jpg"></p><p><img src="https://pic3.zhimg.com/v2-6419d766f38220cff3a9971c3ef80d3e_b.jpg"></p><p><img src="https://pic3.zhimg.com/v2-4bc4c09f81440e1b29c20f8d1daebed2_b.jpg"></p><blockquote><p>修改<strong>“开始简化”</strong>的<strong>基准数值</strong>后它真的起什么作用渐渐开始凸显出来！<strong>它并不是什么”新间隔”!!!</strong></p></blockquote><p><strong>它是对“开始简化”也就是对基准的“间隔乘数”的减法而已！！！</strong></p><p><img src="https://pic3.zhimg.com/v2-4055a9283f2a216abadf8b145ed40d0e_b.jpg"></p><p><strong>“复习”</strong>中的<strong>“间隔修饰符”</strong>是对<strong>老卡</strong>时间周期计算做加法的，那么<strong>“失误次数”</strong>中的<strong>“新间隔”</strong>就是做减法的！如上图,单这个减法实际使用中未知原因并不是太稳定。</p><p>（但有未知原因时并无效果或者效果过头，我目前把它理解未一个并不稳定的设置项，因为不是非常清楚它的算法）</p><p><strong>“新间隔”=“减去基准间隔”</strong>（不稳定的设置项）</p><blockquote><p>（它在基准的“间隔乘数“为某些数值时它会失效而且产生BUG，比如“开始简化”为250%它新间隔为50%的时候，不仅会失效，而且在点击生疏时还会产生翻倍计算的效果1天变为两天）</p></blockquote><p><strong>另外如上图，在点击“生疏”后会anki软件系统算法会进入另外一种计算模式</strong>，这个模式算法又更复杂了，它不会再持续按照“开始简化”设置的参数进行“放大”。下边我们就探讨一下这些复杂的算法它到底是怎么计算的？我把它命名为“<strong>复杂算法”</strong>开启另外一个小节。</p><hr><h2 id="3、复杂算法"><a href="#3、复杂算法" class="headerlink" title="3、复杂算法"></a><strong>3、复杂算法</strong></h2><p><img src="https://pic1.zhimg.com/v2-7e45d331c2fc7216f2886ce1f135d6c4_b.jpg"></p><p><img src="https://pic3.zhimg.com/v2-2f107b313dc589f6294c84ec26c1794e_b.png"></p><blockquote><p>官方说明里一共有6个对“<strong>重来</strong>”的提及，也就是目前最新版本对应的“<strong>生疏</strong>”，官方6次提及都没有说明软件点击该项后的算法具体是什么。反复搜索知乎和各网站后我见到一个回答有对其算法的提及，这样的话大大减少了我对这个软件点击时间选项后复杂算法研究的时间，以下是相关连接：</p></blockquote><p>我对算法部分引用借鉴过来说明算法的这个问题，引用后我做了一定的修改、补充和排版，以方便理解：</p><p>+++++++++++++++++++++++++</p><p>学习时选择或叫点击了：”生疏/错误、困难/模糊、犹豫/想起、顺利/正确“这四种选项将会产生对应的算法的计算</p><p><strong>生疏/错误（重来）</strong></p><blockquote><p>卡片进入<strong>重新学习队列</strong>，对“<strong>开始简化”</strong>参数或当前已有的时间间隔减去<strong>20%<strong>，比如，默认的“</strong>开始简化”</strong>是250%，减去20%后就变为230%。</p><p>在<strong>重新学习队列</strong>中<strong>连续正确</strong>即可恢复成复习卡片，<strong>第一次复习间隔</strong>为“上次复习间隔”*“新间隔”和“最小间隔”中较大的间隔。</p></blockquote><p>（解读：作者未说明“连续正确”时什么我理解也许就是不点击“生疏”，“第一次复习的间隔”这位作者的描述是否正确我并未验证此处先只做参考即可）</p><p><strong>困难/模糊（困难）</strong></p><blockquote><p>卡片的“<strong>简易度</strong>”减少15%，当前的间隔乘以1.2。</p></blockquote><p>（解读：看作者字面意思是减少15%后再增加了20%（1.2）这样就是实际增加5%，我是没看明白，前后比较矛盾，不过我觉得这方面不需要细致的去推敲了，偏向于理解就是减少15即可%，anki的算法选择困难后间隔就会比原理的缩短，还是比较智能的。）</p><p><strong>犹豫/想起（一般）：</strong></p><blockquote><p>“<strong>当前间隔”</strong>乘以“<strong>当前简易度</strong>”，<strong>“简易度”</strong>不变。（比如上一次的间隔是10天，简易度是250%，那么下一次的间隔就是10*250%=25（天））。</p></blockquote><p>（解读：“当前间隔”就是学习所选的时间，“<strong>简易度</strong>”就是“<strong>间隔系数</strong>”）</p><p><strong>顺利/正确（容易）：</strong></p><blockquote><p>“<strong>当前间隔</strong>”乘以“<strong>当前简易</strong>”度再乘以“<strong>简单奖励</strong>”，“<strong>简易度</strong>”增加15%。<br>比如上一次的间隔是10天，简易度是250%，那么下一次的间隔就是 10*250%*130%=32.5*33（天），简易度为250%+15%=265%</p></blockquote><p>（解读：当前间隔就是学习所选的时间）</p><p>++++++++++++++++++++++++</p><p><strong>小结：</strong></p><blockquote><p>其复杂算法其实无需进行仔细推敲，只要大概了解其运作模式做到心中有数即可，毕竟我们不是要写软件，我们是要用软件，知道软件我用起来到底是怎么运作的，如果某天你真的有需要知道其复杂算法到底是怎么计算的时候，可以再回过头来仔细推敲。此处我认为了解到了也就行了，但是我文章其它地方提到的设置项，是使用改软件必须掌握的，如果没有掌握到，使用anki那必然是糊里糊涂较为被动和有风险的，没有掌握到各项参数不会设置也就起不到软件应该有的效果了。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-9d9d88044349071b9848b02ff80f7131_b.jpg"></p><p>在“<strong>浏览器</strong>”中右键“<strong>排序字段</strong>”打开难度系数可以看见卡牌目前的“<strong>难度系数</strong>”也就是学习时按下某个选项后的时间乘数。</p><hr><p><strong>4、记忆库-齿轮选项-失误次数-最小间隔</strong></p><p><img src="https://pic2.zhimg.com/v2-ef982d9d98b33f64fd6fa9e0c107ebc1_b.jpg"></p><p>按官方说明大白话翻译过来就是“<strong>最小间隔</strong>”是对“<strong>新间隔”</strong>的一个最小值设定,我实际测试“<strong>最小间隔</strong>”的设定对“<strong>新间隔</strong>”并没有任何影响。</p><p><img src="https://pic3.zhimg.com/v2-a87549dce5f18c8db8d7a05dcede1572_b.jpg"></p><p>而且是“<strong>失误</strong>“后也就是点击“<strong>生疏/错误</strong>”后的出现的<strong>“右侧最大值”</strong>的间隔设定。、</p><hr><p><strong>补充</strong></p><p><strong>1、“浏览”功能里“新的”=“复习”</strong></p><p><img src="https://pic2.zhimg.com/v2-3a36a9a3909833b3703dce0e6948554d_b.jpg"></p><p>浏览里边的“<strong>新的</strong>”实际是“<strong>复习</strong>”</p><p><img src="https://pic3.zhimg.com/v2-336b6620dd6a131b9dfda765124c18be_b.jpg"></p><blockquote><p>浏览里边<br>折线图表现的是累积量对应右边的竖轴<br>柱状图表现得是某天量对应得是左边竖轴</p></blockquote><p><strong>2、时间框的时间限制=间隔学习量提示</strong></p><p><img src="https://pic2.zhimg.com/v2-e0f96811a387ae33eb29b3bd32c7c25d_b.jpg"></p><p>工具-首选项-<strong>时间框的时间限制，</strong>实际就是间隔学习提示</p><hr><p><strong>最后：</strong></p><p>按照相关功能命名的话<strong>“复习”</strong>应该命名为“<strong>老卡时间2</strong>”更为适合。</p><hr><p><strong>结语：</strong></p><p>我所写的《Anki 暗记 核心设置算法研究与详解》一、二、三、四，是对其最核心也是最难的部分“记忆库（牌组）选项”进行详解，**<em>对直观就能理解的或者很好理解的很多功能就不做更多的讲述继续写下去了，因为知乎上或者别的网站上都有类似内容，我再写也是无意义的重复累述</em><strong>，我相信新手或者老手阅读完结合其它文章再读我的这四篇小短文后对anki的核心算法都多少会心中有数，再也不是盲目的、“</strong>没有方向盘”**的使用anki了。</p><p>我对“选择：生疏/错误、困难/模糊、犹豫/想起、顺利/正确”的算法没有进行验证和测试只引用了另外一个作者的说法，我认为这部分没有必要进行详细测试和验证了，只要大概知道其意也就可以做到心中有数了，其实就是智能的加减间隔百分比而已啦15%、20%、25%选择不同选项加减一下值之类的很简单我认为不需要多验证了。</p><p>如果要对软件功能最更详细透彻的详解，<strong>只有解读其源码</strong>并把源码说为大白话，我认为这样做无异于<strong>重新写一本说明书</strong>，个人的时间有限，再一个写出来也未必有人看，所以我认为这四篇小短文已经大概足够对其核心算法和的运作方式有所了解了，再结合一些别的作者、网站的各种对anki的文章一般也够用了。</p><p>我这四篇小短文也是对anki使用的必要补充，<strong>目前所有网站不管视频教学还是文章为主都还找不到和我这四篇小短文相同的文章，有提及的都是只提及其中非常简单的几点后对于其它项目快速略过，官方的不仅含糊难以理解而且神翻译也非常多让人费解。</strong></p><hr><p><img src="https://pic4.zhimg.com/v2-7925b06b9c57e66e52cf09e9f381477f_b.jpg"></p><p>建议使用anki前先学习一些基础操作，并配合我这篇是核心算法<strong>，用虚拟机进行演练到熟练后再进行实际使用</strong>，上图就是虚拟机的软件，即使是mac os上也能利用虚拟机安装win10。</p><p><img src="https://pic3.zhimg.com/v2-b4c4e9965f78261d06c85a04c5efc48a_b.jpg"></p><p>以上就是更改时间的办法！ 最好不要在主机操作，会影响到你的其它软件或者说是杀软导致电脑不正常。时间修改好后点击“<strong>更改”</strong>时间就会生效，但<strong>“</strong>设置”界面不要关闭，以方便你待会再次修改使用。</p><p><img src="https://pic1.zhimg.com/v2-0f18c29f9e5a605aea3b3a854694268c_b.jpg"></p><p>特别注意如果你修改时间后没有关闭anki，你<strong>修改前</strong>和<strong>修改后</strong>都要点击一次<strong>“记忆库”</strong>我发现点击记忆库anki就会自动刷新其时间，如果不点击可能会产生错乱。</p><p>你在模拟练习anki使用时可以和我一样如上图，左边是anki，右边是时间设置界面，这样会非常的方便。</p><hr><p><strong>在结尾我附上几篇系列小短文的连接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/91456481">威廉：Anki 暗记 核心设置算法研究与详解（一）记忆库（牌组）选项之新卡片1</a></p><p><a href="https://zhuanlan.zhihu.com/p/91481067">威廉：Anki 暗记 核心设置算法研究与详解（二）记忆库（牌组）选项之新卡片2</a></p><p><a href="https://zhuanlan.zhihu.com/p/91522990">威廉：Anki 暗记 核心设置算法研究与详解（三）记忆库（牌组）选项之复习</a></p><p><a href="https://zhuanlan.zhihu.com/p/91627238">威廉：Anki 暗记 核心设置算法研究与详解（四）记忆库（牌组）选项之失误次数</a></p><p><a href="https://zhuanlan.zhihu.com/p/245218259">威廉：Obsidian和Anki如何真正的联用！</a></p><p><strong>2019年11月13日-本文结束-</strong></p><p><strong>彩蛋：</strong></p><p><img src="https://pic1.zhimg.com/v2-54f5a05786bf6965a491e7540ac7bf2c_b.jpg"></p><p>以上我把我几篇文章所详解到的地方的对应做了标注，你可以看一看上边的标注想一想你是否都学会了做一个总复习，你也可以<strong>点击查看原图</strong>并保存，在anki中建立卡片对此进行复习，这样你使用anki会更加的得心应手！</p><p><strong>强烈建议</strong>，实际运用前对牌组的间隔时间最好自己大概进行一次推算，比如默认的三级间隔4间隔乘数是250%，就是4*2.5=10、10*2.5=25、62、156···天的基础间隔，你的知识是否需要那么大的跨度，很多人不知道核心算法都是按软件默认来进行，这样必然很有可能耽误很多需要高频记忆的科目！</p><p><strong>一些评论</strong><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-73.png" alt=""><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-74.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki 高阶教程 核心设置算法研究与详解（三）记忆库（牌组）选项之复习</title>
      <link href="/posts/2022/11/d364a871.html"/>
      <url>/posts/2022/11/d364a871.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong><br>同上文，略…</p><p><strong>本文详解后你能清楚的了解到的功能有：</strong></p><blockquote><p><strong>1、记忆库-齿轮选项-复习-最大复习数/天</strong><br><strong>2、记忆库-齿轮选项-复习-简单奖励</strong><br><strong>3、记忆库-齿轮选项-复习-间隔修饰符</strong><br><strong>4、犹豫左列40%</strong><br><strong>5、记忆库-齿轮选项-复习-搁置相关新卡片到隔日</strong></p></blockquote><p><strong>看完此文你将会学习到：</strong></p><blockquote><p><strong>“最大复习数/天”=“每天复习多少卡片”</strong><br>”<strong>简单奖励</strong>“=”<strong>最右边时间间隔乘数</strong>“<br><strong>“间隔修饰符”=”间隔乘数再加倍”</strong>（对开始简单的加倍）<br><strong>“犹豫左列40%”的算法</strong><br><strong>“搁置相关复习到隔日”=“屏蔽复习卡片的相关卡片”</strong><br>“<strong>复习</strong>”=“<strong>老卡时间1”</strong><br>（和系列文章二“搁置相关新卡片到隔日”功能类似，屏蔽也可以理解“暂停”）</p></blockquote><span id="more"></span><hr><p><img src="https://pic4.zhimg.com/v2-081cda5e0e0549896207cd66c9ce7ae3_b.jpg"></p><p><strong>1、记忆库-齿轮选项-复习-最大复习数/天</strong></p><blockquote><p>这个名字看起来好像是你最大想复习几天，超过这些天后久停止复习一样，稍微有一点歧义。</p><p>实际很简单实际意思就是你“<strong>每天想复习多少张卡片”！，</strong>这个设置项是预防突然太多需要复习的量的一个猛增，导致学习者全部时间都用于复习，把学习者的学新时间完全占用。</p><p>此项实际设置多少值最好还是<strong>由自己的实际情况出发</strong>，我认为默认值对个人是意义不大的。</p><p>另外比较好的一个地方是“<strong>当复习卡片因此选项而被隐藏时， 在（学习结束后的）祝贺页面中会出现一条如果有余力可建议考虑调高上限的提示</strong>。”引号内的是官方说明，这样学习者可以较好的控制自己的“<strong>复习量</strong>”。</p></blockquote><hr><p><img src="https://pic2.zhimg.com/v2-d465788ce05d3075634b9b4a3a88a289_b.jpg"></p><p><strong>2、记忆库-齿轮选项-复习-简单奖励</strong></p><blockquote><p>官方说明：<br><strong>“简单奖励</strong>选项允许设置在一张卡片回答_一般_和_简单_后的复习间隔的差额。例如，默认的值130%, 回答简单后的复习间隔是回答一般的1.3倍”。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-7b7cbfa0fc320d3f2d075dcef07923a2_b.jpg"></p><blockquote><p>官方说明的“一般”和“简单”并不存在于目前的软件选项内，所以我需要测试出来到底是那个选项我把值改为200%以方便测试(新卡片-开始简化 选项 目前也是300 )。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-c0d842d8502e5bcb25a84e775ea12055_b.jpg"></p><blockquote><p>上图为默认“简单奖励”130%的效果，下图设置为200%进行对比，看看它实际算法到底是怎么回事。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-54c76e8c585d4bbd76eba21950bfb57e_b.jpg"></p><blockquote><p>效果出来了，这个“简单奖励”实际是负责最右边项的时间。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-6759b17345f244a2a4c1851e4ec3692e_b.jpg"></p><blockquote><p><strong>算法</strong>(如上图)：<br>开始简化300%*选择的顺利4天=下次复习或叫学习时的“中间的时间”就会是 “犹豫 12天”。</p><p>12天如果*1.3（130%）=15.6 天<br>（anki软件的算法是忽略小数点后位的所以开始简化为130%的时候最右边时间就是15天。）<br>这个12如果*2（200%）=24天</p></blockquote><p>”<strong>简单奖励</strong>“=”<strong>最右边时间间隔乘数</strong>“</p><blockquote><p>实际我继续点击后“<strong>顺利4天</strong>”–&gt;“<strong>犹豫12天</strong>”–&gt; 后边会变成“<strong>犹豫1.1月</strong> “仔细数是37天按照算法应该是12*3=36天的，可能anki有更细致的地方，我还未察觉到，等之后发现再更新到此文中。</p></blockquote><hr><p><img src="https://pic3.zhimg.com/v2-a6d62fcc086a28a7af2394f27ad2bcd6_b.jpg"></p><h2 id="3、记忆库-齿轮选项-复习-间隔修饰符"><a href="#3、记忆库-齿轮选项-复习-间隔修饰符" class="headerlink" title="3、记忆库-齿轮选项-复习-间隔修饰符"></a><strong>3、记忆库-齿轮选项-复习-间隔修饰符</strong></h2><p>现在我们继续下去，又是个神翻译“间隔修饰符”从字面意思看好像和音乐有关，<strong>是用来做简谱的吗</strong>？还是老办法我们把他修改参数前100%和修改参数后进行对比，看看它的运作方式。</p><p><img src="https://pic4.zhimg.com/v2-86f16cee5c8304131b9315a7493be6d7_b.jpg"></p><blockquote><p>上图为100%间隔修饰符，其它参数和接着之前的设置无改变。我现在把修饰符改为200%进行对比。</p><p>（由于是新建立的卡片选择12天犹豫后的1.1个月我看了一下是30天，在“2、记忆库-齿轮选项-复习-简单奖励”结尾部分测试的是一张用过几次并重置的卡片，它的1.1个月为37天，看来其中还有另外的什么算法。）</p></blockquote><p><img src="https://pic2.zhimg.com/v2-e9ba4e5da0c240d8af9cb73783837e11_b.jpg"></p><blockquote><p>上图为200%间隔修饰符，可以看出第一次选择4天后，4天*300%开始简化=12天，这个12又被*200%间隔修饰符得出24。</p><p>选择24天后按理应该是24*300%开始简化=72天，72天又*间隔修饰符200%=144天，至于实际为什么是147天应该又有别的参数算法在其中，目前我还没找到，找到发现时会做一个更新。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-c8ae2dabd7127b685f2fdd47fffb28f4_b.jpg"></p><blockquote><p>上边我做了一张详细的图解，应该一看就懂了。<br>“<strong>间隔修饰符</strong>”实际不是什么用于音乐简谱的功能，而是对“<strong>开始简化</strong>”（也就是第二文章里边的“<strong>间隔乘数”</strong>）<strong>一个的加倍参数而已！</strong>。<br>所以：</p></blockquote><p><strong>“间隔修饰符”=”间隔乘数加倍”</strong></p><blockquote><p>“间隔修饰符”和“开始简化”的加大适用于不重要的知识，或者特别熟悉的卡组，这样这类卡组出现的频率就会降低很多，如果你是用于考试“高频重点”部分以外卡组可以适当通过这两项的设置来给“高频重点”进行“让路”从而获取更多的时间复习重要的知识！</p></blockquote><hr><p><strong>4、犹豫左列40%（困难/模糊）</strong></p><p><img src="https://pic1.zhimg.com/v2-102f489f44f7332b389264342d6b810c_b.jpg"></p><p>犹豫的左边一列，上图蓝色框内，级本都是犹豫的天数的40%的量，这个地方没有设置项可以进行调节，ANKI软件的部分设置系数是没有开放设置的！</p><p>大概就是 犹豫天数s * 0.4（40%）=犹豫左列（困难/模糊）的天数，不要小数点 取整数。</p><hr><h2 id="5、记忆库-齿轮选项-复习-搁置相关新卡片到隔日"><a href="#5、记忆库-齿轮选项-复习-搁置相关新卡片到隔日" class="headerlink" title="5、记忆库-齿轮选项-复习-搁置相关新卡片到隔日"></a><strong>5、记忆库-齿轮选项-复习-搁置相关新卡片到隔日</strong></h2><p><img src="https://pic1.zhimg.com/v2-3e464731d721bdc99414ea8b2aed60dc_b.jpg"></p><blockquote><p><strong>搁置相关复习到隔日</strong>，学习过系列文章（二）“<strong>搁置相关新卡片到隔日=“把相关卡片完全屏蔽</strong>”的应该都明白是什么意思了。</p><p>在这里就是直接屏蔽复习卡片中的相关卡片，实际就是“屏蔽复习卡片的相关卡片”，实际没什么”<strong>搁置到隔日再显示</strong>”之类的效果，和系列文章（二）中”<strong>搁置相关新卡片到隔日“</strong>的效果一模一样，就是把相关卡片直接屏蔽，如果你这次取消掉”搁置相关复习到隔日“再进行学习或复习，下次相关卡片就会一同显示出来，否则会再也不显示，更多科研再参考文章（二）中”<strong>搁置相关新卡片到隔日“</strong>。</p></blockquote><p><strong>“搁置相关复习到隔日”=“屏蔽复习卡片的相关卡片”</strong>（屏蔽也可以理解“暂停”）</p><hr><p><img src="https://pic2.zhimg.com/v2-8f94ad732af6004d14ec3ba32ea04ae5_b.jpg"></p><p>补充/<strong>最大间隔</strong>：20191207</p><p>“复习”标签选项中的“最大间隔”就只是对已经进入列队的老卡片的间隔时间的最高设置，比如设置3天就会出现上图的状态，再下一次也是上图状态。对新卡片无效。假如一个知识你不想让它跨度太大，大到你某科考试（或者说是需要使用）后才出现，你就有必要进行最大间隔的设定。</p><hr><p><strong>最后：</strong></p><p>按照相关功能命名的话<strong>“复习”</strong>应该改名为“<strong>老卡时间1</strong>”</p><p>在结尾我附上几篇系列小短文的连接：</p><p><a href="https://zhuanlan.zhihu.com/p/91456481">威廉：Anki 暗记 核心设置算法研究与详解（一）记忆库（牌组）选项之新卡片1</a></p><p><a href="https://zhuanlan.zhihu.com/p/91481067">威廉：Anki 暗记 核心设置算法研究与详解（二）记忆库（牌组）选项之新卡片2</a></p><p><a href="https://zhuanlan.zhihu.com/p/91522990">威廉：Anki 暗记 核心设置算法研究与详解（三）记忆库（牌组）选项之复习</a></p><p><a href="https://zhuanlan.zhihu.com/p/91627238">威廉：Anki 暗记 核心设置算法研究与详解（四）记忆库（牌组）选项之失误次数</a></p><p><a href="https://zhuanlan.zhihu.com/p/245218259">威廉：Obsidian和Anki如何真正的联用！</a></p><p><strong>2019年11月13日–本文结束-</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki 高阶教程 核心设置算法研究与详解（二）记忆库（牌组）选项之新卡片2</title>
      <link href="/posts/2022/11/cdafc205.html"/>
      <url>/posts/2022/11/cdafc205.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong><br>同上文，略…  </p><p><strong>本文详解后你能清楚的了解到的功能有：</strong></p><blockquote><p><strong>1、记忆库-齿轮选项-新卡片-毕业间隔</strong> 、<strong>简单间隔</strong><br><strong>2、记忆库-齿轮选项-新卡片-开始简化</strong><br><strong>3、记忆库-齿轮选项-新卡片-新卡片/天、搁置相关新卡片到隔日</strong></p></blockquote><p><strong>看完此文你将会学习到：</strong></p><blockquote><p><strong>一、二、三级间隔的概念</strong><br>“步伐” =“一级间隔”<br>“毕业时间”=“二级间隔”<br>“简单时间”=“三级间隔”</p><p>“<strong>开始简化</strong>”=“<strong>间隔乘数</strong>”<br><strong>“新卡片/天”=”今日计划学习卡片量“</strong><br>“<strong>搁置相关新卡片到隔日”=“把相关卡片完全屏蔽”</strong></p></blockquote><span id="more"></span><hr><h2 id="1、记忆库-齿轮选项-毕业间隔-、简单间隔"><a href="#1、记忆库-齿轮选项-毕业间隔-、简单间隔" class="headerlink" title="1、记忆库-齿轮选项-毕业间隔 、简单间隔"></a><strong>1、记忆库-齿轮选项-毕业间隔</strong> 、简单间隔</h2><p><img src="https://pic3.zhimg.com/v2-edc4a5f5b3ba3d2540021fcbd2bb0916_b.jpg"></p><p><strong>接着系列文章（一）末尾1继续说下去。</strong></p><blockquote><p>选择”步伐设置“过的”40犹豫“后，下再次学习时”犹豫的选项“就会变为”1天，这个1天“就对应到”毕业时间“的设置，”顺利“就对应上”简单间隔“的设置。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-23d2476c84a933ac1807e9ab44654b1a_b.jpg"></p><p><strong>一、二、三级间隔的概念：</strong></p><blockquote><p><strong>“毕业时间”=“二级间隔”</strong><br>其实就是卡片的一个相对于“步伐”更大的周期的时间选项，按理应该翻译为“<strong>二级间隔</strong>”更恰当。“<strong>步伐</strong>”翻译为“<strong>一级间隔</strong>”更为恰当，它们们实际就是间隔时间。</p><p><strong>“简单时间”=“三级间隔”</strong><br>也就是比“毕业时间”是间隔更大的实际翻译为“三级间隔”更为恰当，一级意味着比一级跨度更高，也意味着对知识更熟悉。</p></blockquote><p><img src="https://pic3.zhimg.com/v2-0c6cc00e4255b8a17c5de7079fc94d3e_b.jpg"></p><p>现在我们恢复默认设置再讲讲“<strong>毕业时间</strong>”（二级间隔），“<strong>毕业时间</strong>”只有在你学习时点击“<strong>步伐</strong>”（一级间隔）的最高级别（此处为10分钟）后下次再学习时才会出现（如上图）,也就是你对这个知识不是太有把握时它才会出现给你一个更近时间进行复习的选项。</p><hr><p><img src="https://pic1.zhimg.com/v2-3f0315d0f19c4f2d60e549fe3c512fe8_b.jpg"></p><p>接下来开始讲讲“开始简化”，这个“开始简化”到底是什么鬼呢？</p><p>我把它设置为300%方便大家理解。</p><p><img src="https://pic2.zhimg.com/v2-ebdca3d75d8dd480c143c78997e197c1_b.jpg"></p><p>见到上边的图大家应该已经明白这个“<strong>开始简化</strong>”是什么意思了吧？</p><p><strong>1*3=3、3*3=9</strong>这个就不用多说了</p><p><img src="https://pic3.zhimg.com/v2-c3eae0f413cde62146c4da4979f0e05e_b.jpg"></p><p>“<strong>开始简化</strong>”=“<strong>间隔乘数</strong>”</p><p>再来一张给大家参考参考。相信看了这张图明白这个“<strong>开始简化</strong>”并不是要简化什么东西而是“<strong>间隔乘数</strong>”，当你选择某个间隔天数“X”后，下次的“<strong>犹豫</strong>”部分就是你选择的这个时间”X”乘于“<strong>开始简化</strong>”的参数来的，<strong>它主要负责了下次的“犹豫”间隔的时间的多少的一个乘数</strong>。</p><p>上图第二次选择了5天，5天后打开为14天，按理是300%*5天=15，为什么少了1天这涉就及到了其它的设置项了，在其它小节中再把它提到。</p><hr><h2 id="3、记忆库-齿轮选项-新卡片-其余项目"><a href="#3、记忆库-齿轮选项-新卡片-其余项目" class="headerlink" title="3、记忆库-齿轮选项-新卡片-其余项目"></a><strong>3、记忆库-齿轮选项-新卡片-其余项目</strong></h2><p><img src="https://pic3.zhimg.com/v2-5975b8468b223c6960878a85848216ea_b.jpg"></p><p>关于“新卡片”中的一些选项较为简单一看就懂，比如“顺序”就不做过多详解了。</p><h2 id="新卡片-天："><a href="#新卡片-天：" class="headerlink" title="新卡片/天："></a><strong>新卡片/天</strong>：</h2><p><img src="https://pic3.zhimg.com/v2-79f45dbc1b1c1893993c8c3a216ea932_b.png"></p><blockquote><p>上图文字为官方中文解释，大概看前边你可能有点懂，但是仔细想想可能又会有点懵，后边的可能你可能就会更懵了，我来把这个中文说明”翻译”过来给大家吧。</p><p>新卡片/天，到底是什么意思呢？<br><strong>其实很简单，就是你今天打算学多少张新卡片！！！</strong></p></blockquote><p>“新卡片/天”=”今日计划学习卡片量“</p><p><img src="https://pic4.zhimg.com/v2-333f9d9a676540207925143d3b06e61f_b.jpg"></p><blockquote><p>这个设置项主要就是用来计划你的每天学习的卡的数量他会在此对应显示出来，如上图，为什么要定个学习数量呢？如果你今日学习的太多你未来复习就会非常吃力！所以每天就要有一定规划控制，否则到后边天数复习量会非常巨大，至于是你要学习多少的量，那就看你个人之后复习能承受多少量来定。</p><p>这个选项的翻译，甚至官方说明<strong>新手看到可能会误以为今天我能新建立多少卡片</strong>，非常的误导人，需要注意的是<strong>设置为0</strong>是不学习新卡片只复习久卡片。</p><p>关于这个“法语”部分这样说比较好理解：你如果你在主牌组中设置了每天学习20的量也就是“新卡片/天 20”，你的子牌组的学习量将会受限，假设1子牌组中是15，2子牌组中是15，那么今天将只能学习1子牌组中的15和2子牌组中的5 加起来就是20。</p></blockquote><p><img src="https://pic1.zhimg.com/v2-864ea7467f83baaa9879cc293a8d202c_b.jpg"></p><blockquote><p><strong>什么是子牌组什么是主牌组呢？</strong><br>就是在初始界面的“创建记忆库”用“::”符号前后间隔文字，前边为上一级，后边为下一级。</p></blockquote><p><img src="https://pic2.zhimg.com/v2-e2834e69b0f843d9c72ccd363eda47b9_b.jpg"></p><hr><h2 id="搁置相关新卡片到隔日"><a href="#搁置相关新卡片到隔日" class="headerlink" title="搁置相关新卡片到隔日"></a><strong>搁置相关新卡片到隔日</strong></h2><p>（搁置相关新卡片到隔日=“把相关卡片完全屏蔽”）</p><blockquote><p>这项是什么意思呢？就是在某一张卡片中附带创建的x张“相关卡片”搁置到明天再显示。<br>那什么又是相关卡片呢？看下图</p></blockquote><p><img src="https://pic2.zhimg.com/v2-6c25147baabc76db3575ec77f08ca699_b.jpg"></p><p>意思就是通过一张卡片 创建X张连带的卡片，这些连带的卡片就是“相关卡片”，勾选“<strong>搁置相关新卡片到隔日”</strong>后虽然还会显示新建为2，但是学习一张卡片后就会结束学习。</p><p><img src="https://pic1.zhimg.com/v2-dea45ac82d8299f37f76a13bcf19b530_b.jpg"></p><p>另外这种相关卡片再浏览里边把主卡删除后其余附带的也会一律删除。</p><p><img src="https://pic3.zhimg.com/v2-4419d3108e00dacd84e803dcc8ab547e_b.jpg"></p><p>我创建了一张主卡 附带一张衍生的副卡，勾选“<strong>搁置相关新卡片到隔日”</strong>进行效果测试。</p><p><img src="https://pic3.zhimg.com/v2-86a164782d1a2032ef996b2ae288d48a_b.jpg"></p><p><img src="https://pic3.zhimg.com/v2-911cd1a4d3d46ac5ce496e7e5aed308e_b.jpg"></p><p>学习完后第二天未显示新学习项也是“恭喜！目前已经完成···”</p><p>到了第三天也是同样状态“恭喜！目前已经完成···”，说明它并不会“搁置到隔日”而是“<strong>把相关卡片完全屏蔽”。</strong></p><p><img src="https://pic4.zhimg.com/v2-12c1ec306755522ff1be151c283e00cb_b.jpg"></p><p><strong>第四天正常出现了之前点击“4天 顺利/正确”的内容</strong></p><p><strong>如何才能让屏蔽的卡组出现呢？</strong></p><p><img src="https://pic1.zhimg.com/v2-fdebd17972c033d131130e7c3087c488_b.jpg"></p><p><img src="https://pic2.zhimg.com/v2-1a62f9e613024a9b806074909d0f7f71_b.jpg"></p><p>去掉勾选，学习完这次应该学习的“主卡牌”后，下次“主卡牌”的日期到的时候它就会一起再次出现。</p><p><img src="https://pic2.zhimg.com/v2-d55fba7d29579244769c520c96439a85_b.jpg"></p><p>或者进入“浏览”找到卡片用“开光暂停状态”进行开启，开启后将再不会受到“搁置相关新卡片到隔日”选项的影响。</p><hr><p>在结尾我附上几篇系列小短文的连接：</p><p><a href="https://zhuanlan.zhihu.com/p/91456481">威廉：Anki 暗记 核心设置算法研究与详解（一）记忆库（牌组）选项之新卡片1</a></p><p><a href="https://zhuanlan.zhihu.com/p/91481067">威廉：Anki 暗记 核心设置算法研究与详解（二）记忆库（牌组）选项之新卡片2</a></p><p><a href="https://zhuanlan.zhihu.com/p/91522990">威廉：Anki 暗记 核心设置算法研究与详解（三）记忆库（牌组）选项之复习</a></p><p><a href="https://zhuanlan.zhihu.com/p/91627238">威廉：Anki 暗记 核心设置算法研究与详解（四）记忆库（牌组）选项之失误次数</a></p><p><a href="https://zhuanlan.zhihu.com/p/245218259">威廉：Obsidian和Anki如何真正的联用！</a></p><p><strong>2019年11月12日-本文结束-</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki 高阶教程 核心设置算法研究与详解（一）记忆库（牌组）选项之新卡片1</title>
      <link href="/posts/2022/11/ea6be1bf.html"/>
      <url>/posts/2022/11/ea6be1bf.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>最近又想起anki这个软件来，好奇心驱使下载了看了一看，发现非人类的中文界面依然存在，比如“简单间隔、毕业时间、简单奖励”等等这类令人极度费解的神翻译，<strong>我好奇软件开发者是不是用翻译软件把英文翻译成阿拉伯文又翻译成日文再翻译成中文得到的这种效果</strong>，这系列神翻译依然通杀所有平台版本，新手和老手是摸不着头脑的。所以我想写一写这方面的文章来分享分享让更多人明白这软件的一些核心功能到底是怎么回事。</p><p>本人2016年前就开始使用anki，中途也因为软件一些地方含含糊糊没搞得懂事什么意思而弃用。另外我有些好奇，对算法根本不理解，很多设置项都意味着未知效果，那么多用户为什么还能糊里糊涂用得那么津津有味，各种anki教程的也几乎没有对其核心算法琢磨过就下定义为”好用“实际是一种只了解基础功能的盲用，<strong>就像开没有方向盘的车一样！</strong></p></blockquote><span id="more"></span><blockquote><p>由于官方说明大部分是机器翻译的缘故很多新手甚至老手都比较难懂一些功能到底是什么意思，以至于各项核心功能用不到或者糊里糊涂的在使用，即使有是翻译者翻译的有时也是较为难以理解。</p><p>官方的中英文说明很多地方并未给出设置项对应的算法的明确，实用者如果对这些核心算法设置不清楚，<strong>资料录入后复习时会有一定模糊性、不可预知性</strong>，从而对复习与学习根本做不到心中有数，<strong>就像开车没有方向盘一样，</strong>你根本不了解软件是如何运作的，重大考试很有可能因为这种模糊性会造成失误，<strong>不明白其算法和具体运作方式用就来进行关键考试是非常危险的！</strong></p><p>在此所以我对其核心设置项进行了详解写了系列小短文，写的较为详实，学习者看完后就能做到对其核心设置算法和运作方式心中有数！系列小短文并不是新手教程而是对特定项目的详解，</p><p><strong>只要学会PC Windows版的也就自然明白Mac os版 ios版 Android版，一举多得。</strong></p><p>本文非入门教程，如果你是彻头彻尾的新手请跳转自 《Anki 常用操作方法合集（二）初级引导 新手必看》的第一有很好的详细教程推荐。</p></blockquote><hr><p><strong>所以此系列小短文在于：</strong></p><blockquote><p>1、用大白话讲解一些常用又不是太简单能懂的细节功能。<br>2、有必要详解但别的文章都没详解过的功能。</p></blockquote><p><strong>本文详解后你能清楚的了解到的功能有：</strong></p><blockquote><p><strong>1、记忆库-齿轮选项-步伐</strong><br><strong>2、如何提前复习而不等到时间复习呢？</strong></p></blockquote><p><strong>看完此文你将会学习到：</strong></p><blockquote><p><strong>步伐的运作方式</strong><br><strong>如何提前复习步伐的内容</strong></p></blockquote><p><img src="https://pic4.zhimg.com/v2-35a9ae385749e5c70f1b539081202453_b.jpg"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了更好的进行教程我使用了虚拟机，以方便调整时间进行配合</span><br></pre></td></tr></table></figure><hr><p><img src="https://pic2.zhimg.com/v2-153879d61de80bd8a63b84bfa75e17f9_b.jpg"></p><p><img src="https://pic1.zhimg.com/v2-9f42367bed2721341bfd354b45595b20_b.jpg"></p><p>步伐：其实就是设置“建立的新卡片”或者“学习中选择了生疏错误的卡片”时的卡片学习中会显示的时间选项（如上图）。</p><p>默认是1分钟+空格+10分钟，这样就有两个时间可以学习中供选择，你如果不喜欢系统自定义的时间你可以自己设置时间，记得中间要带空格，</p><p><img src="https://pic3.zhimg.com/v2-1f0b37b1e794892323050221297d4ee6_b.jpg"></p><p>不管你设置的再多，它在之后再学习时只会显示最左边和最右边的时间如上图，但有时又是按顺序显示的“10生疏、20犹豫”这让我有点摸不着头脑可能是软件的BUG如下图，<strong>大家以下图的为准就行，更多时候是显示下图的“10 20”</strong>。</p><p>这样的情况下如果你学习中再次选择“生疏”或者“建立了新卡片并学习”就会在“正在进行的课程”数量多出来，会按你设置的时间次数来进行如下图（步伐设置的10 20 30 40）学习中选择“生疏”后：</p><p><img src="https://pic3.zhimg.com/v2-8857c311cd67ce3495d0eadcad4660e2_b.jpg"></p><p>我新添加一张卡为B，学习后选择“生疏”正在进行的课程就变为“8”意味着有8次卡片的学些也就是A卡4次+B卡4次。</p><p><img src="https://pic4.zhimg.com/v2-10e9cf5843d860b9d3398c0a2c76a973_b.jpg"></p><p><img src="https://pic4.zhimg.com/v2-389a927e5e74fca54604bcc4eaa73e47_b.jpg"></p><p>如果你设置步伐为“10 20 30 40”第一次学习时选择的是“20犹豫”，那么这张卡片剩余的次数（正在进行的课程）就会减少1次变成“3”卡片下次就会出现“10生疏30想起4天顺利”让你选择，如上图。</p><p><img src="https://pic2.zhimg.com/v2-7fb853a2c37ffe6ed182d56e11b349f9_b.jpg"></p><p>以此类推你这次选择“30犹豫”后就变成“40”，正在进行的课程就成“2”。</p><p><img src="https://pic1.zhimg.com/v2-ffd05fc2681508647b8ca193115305b8_b.jpg"></p><p>如果你选择40犹豫，40分钟后学习就会变成上图的选项。</p><p>也就对应上“<strong>毕业时间</strong>”和“<strong>简单间隔</strong>”的设置了。</p><p>“<strong>毕业时间</strong>”和“<strong>简单间隔</strong>”在系列文章（二）中进行详解。</p><hr><p><img src="https://pic3.zhimg.com/v2-ad6a1b20e223a83dd526d192ecfc9e3e_b.jpg"></p><h2 id="2、如何提前复习而不等到时间复习呢？"><a href="#2、如何提前复习而不等到时间复习呢？" class="headerlink" title="2、如何提前复习而不等到时间复习呢？"></a><strong>2、如何提前复习而不等到时间复习呢？</strong></h2><p>可以这样设置（上图），“先学时间上限”实际就是“不等待的时间”设置这个后原来需要等待30分钟出现的，在30分钟时都出现了。</p><hr><p>在结尾我附上几篇系列小短文的连接：</p><p><a href="https://zhuanlan.zhihu.com/p/91456481">威廉：Anki 高阶教程 核心设置算法研究与详解（一）记忆库（牌组）选项之新卡片1</a></p><p><a href="https://zhuanlan.zhihu.com/p/91481067">威廉：Anki 暗记 核心设置算法研究与详解（二）记忆库（牌组）选项之新卡片2</a></p><p><a href="https://zhuanlan.zhihu.com/p/91522990">威廉：Anki 暗记 核心设置算法研究与详解（三）记忆库（牌组）选项之复习</a></p><p><a href="https://zhuanlan.zhihu.com/p/91627238">威廉：Anki 暗记 核心设置算法研究与详解（四）记忆库（牌组）选项之失误次数</a></p><p><a href="https://zhuanlan.zhihu.com/p/245218259">威廉：Obsidian和Anki如何真正的联用！</a></p><p><strong>2019年11月12日-本文结束-</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对不同类型记忆材料的Anki参数设置模板</title>
      <link href="/posts/2022/11/499d8081.html"/>
      <url>/posts/2022/11/499d8081.html</url>
      
        <content type="html"><![CDATA[<h2 id="2022-07-29-更新"><a href="#2022-07-29-更新" class="headerlink" title="2022-07-29 更新"></a>2022-07-29 更新</h2><ol><li> <strong>修改文科记忆2和理解性记忆的</strong> <strong>New interval</strong>：文科记忆2的忘记代价太小了，出现了部分卡片不会之后下次复习还是忘记了；理解性记忆反之。</li><li> 把<strong>Minimum interval</strong> <em>（The minimum interval given to a review card after eecn acuon answering Again）</em> 设置为2了，大概就是说我前一天不会的卡片，至少会在2天后出现，默认是1。没这个需求的可以不设置。</li></ol><h3 id="New-Cards"><a href="#New-Cards" class="headerlink" title="New Cards"></a>New Cards</h3><p>Learning steps: 10m</p><p>Graduating interval: 2</p><p>Easy interval: 8</p><span id="more"></span><h3 id="Lapses"><a href="#Lapses" class="headerlink" title="Lapses"></a>Lapses</h3><p>Leech threshold: 8（默认）</p><p>Leech action: Tag Only</p><p>Relearning steps: 10m</p><p>Minimum interval: 2</p><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p>Starting ease: 2.5（默认）</p><p>Easy bonus: 1.3（默认）</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-70.png" alt=""><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><p>首先是上一张图，我其实也用了很久的anki了，陪伴我度过了考研的时光，对于anki的各种参数有一些感受，在此分享一下我的anki设置。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-71.png" alt=""><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面对于高级设置中的3个参数——Interval modifier、Hard interval和New interval分享我的看法：</span><br><span class="line"></span><br><span class="line">Interval modifier（间隔修饰符）越大，复习间隔越大，以1.0为基准，是影响复习压力最大的变量,是目前我认为影响记忆效果的最重要变量</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Hard interval（困难间隔 ） 越大，选择困难之后间隔时间越大，以120%为基准，即选择“Hard”之后卡片到下次复习的间隔时间。</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">New interval（新间隔 ） 越大，失误之后间隔时间越大，以0%为基准，即选择“Again”之后被设置为新卡片的间隔时间。</span><br></pre></td></tr></table></figure><h3 id="第一组参数推荐：关于这三个参数，有如下几种不同类型的推荐，根据Deck的不同选择不同的参数："><a href="#第一组参数推荐：关于这三个参数，有如下几种不同类型的推荐，根据Deck的不同选择不同的参数：" class="headerlink" title="第一组参数推荐：关于这三个参数，有如下几种不同类型的推荐，根据Deck的不同选择不同的参数："></a><strong>第一组参数推荐：关于这三个参数，有如下几种不同类型的推荐，根据Deck的不同选择不同的参数：</strong></h3><table><thead><tr><th>类型</th><th>Interval modifier（间隔修饰符）</th><th>Hard interval（困难间隔 ）</th><th>New interval（新间隔 ）</th><th>备注</th></tr></thead><tbody><tr><td>通用</td><td>0.9</td><td>1.1</td><td>0.1</td><td>用于没有特殊要求的普通难度的普通记忆，曾用于记忆英语作文、英语阅读、政治填空题、政治选择题。</td></tr><tr><td>理解性记忆</td><td>0.8</td><td>0.7</td><td>0.1</td><td>不要求严格背住，但属于难度高的项目，困难间隔为0.7，方便控制下一次的复习时间。</td></tr><tr><td>文科记忆</td><td>0.6</td><td>1.0</td><td>0.1</td><td>曾用于专业课的论述、简答的学习。</td></tr><tr><td>公式</td><td>0.5</td><td>1.05</td><td>0.1</td><td>记忆效果最好，适用于精度要求高的项目，曾用于用于公式和定理。</td></tr></tbody></table><h3 id="第二组参数推荐：New-Cards里面三个参数的设置如下："><a href="#第二组参数推荐：New-Cards里面三个参数的设置如下：" class="headerlink" title="第二组参数推荐：New Cards里面三个参数的设置如下："></a>第二组参数推荐：<strong>New Cards里面三个参数的设置如下：</strong></h3><p>Learning steps：10m （因为卡片量比较大，所以每张卡片我回答正确一次之后，这张就进入下一阶段了；如果希望一张卡片回答错了之后多出现一次，可以采用2步步长，即默认值）</p><p>Graduating interval：<strong>2</strong>（新卡片点击Good时，下一次复习的间隔<strong>2</strong>天）</p><p>Easy interval：<strong>8</strong>（新卡片点击Easy时，下一次复习的间隔<strong>8</strong>天）</p><h2 id="题外话："><a href="#题外话：" class="headerlink" title="题外话："></a>题外话：</h2><ul><li><p>  关于supermemo和anki</p></li><li><p>  今天偶然发现有人在讨论supermemo和anki，有几位大佬在anki的复习量巨大的情况下，决定转向supermemo，其实我也有面临过anki复习量巨大的情况，我是如何解决的呢？就是Suspend，一些collection里面的知识点，如果说删掉的话，感觉很可惜，毕竟是辛辛苦苦整理的卡片，因此采用suspend的方式，将一些不再需要背诵的考过的内容，暂停复习，减少目前学习的卡片总量。</p></li><li><p>  其实，一些东西，考试的时候无法查阅，需要背下来，但是平常总是背这么多东西，肯定会影响精力，倒不如Suspend，等到万一再用到之时，比如某某公式，只能依稀记得好像背过，这时，只需要查询一下，然后再取消Suspend，正常复习就好。</p></li><li><p>  关于anki</p></li><li><p>  其实我也不太懂里面那些算法，很多地方是边蒙带猜。</p></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-72.png" alt=""><h2 id="一些评论"><a href="#一些评论" class="headerlink" title="一些评论"></a>一些评论</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">叶峻峣：                      </span><br><span class="line">[捂脸]反对任何忘记后不让间隔归一的系数，特别是困难。如果30天后忘了，点困难，30* 0.7 = 21，我敢保证21天后铁忘。  </span><br><span class="line">如果还记得，间隔应该拉长，也不应该出现 * 0.7 的情况  </span><br><span class="line">nus9Vyt8n：  </span><br><span class="line">如果是需要重新学习的情况，我认为应该点Again，而不是Hard。这样可以使学习间隔归零而不影响Ease。  </span><br><span class="line">叶峻峣：    </span><br><span class="line">那hard一般是什么情况下点呢？  </span><br><span class="line">nus9Vyt8n：    </span><br><span class="line">30天之后如果完全忘记了，应该点Again，30*0.1是3天。</span><br><span class="line">此外，对于Hard按键，官方手册解释hard（困难/模糊）会让卡片下一次出现的间隔比上一次略微长一点点，并且会让Anki在未来更加频繁地出示这张卡片。  </span><br><span class="line">除了理解性记忆，我的所有参数设置都是≥1的，这符合官方的定义，理解性记忆主要是用于数学题目的解题思路。  </span><br><span class="line">所以我违背了官方的定义，将默认的1.2改为了0.7，以达到让这道题目更频繁出现，又能有一个比上次更短的间隔。  </span><br><span class="line">nus9Vyt8n：  </span><br><span class="line">对于一个间隔曾经可以达到20天以上的卡片，我认为这张卡片不至于说当天背完第二天就能忘记，所以将New interval（新间隔 ）参数从默认的0.0调整为0.1。  </span><br><span class="line">nus9Vyt8n：  </span><br><span class="line">从我个人的使用情况来看，Hard我会在：勉强说出来/很困难说出来/说对了一半/不太确定自己说的对不对但其实是对的 这种情况之下点击  </span><br><span class="line">叶峻峣：  </span><br><span class="line">关于间隔很长的卡片，在忘记后重新背，间隔是否要比新卡片长一些，其实有相关研究：  </span><br><span class="line">叶峻峣：  </span><br><span class="line">如果是说对一半的话，我感觉卡片还可以继续拆分，如果放在一起，点困难的话，大概率下一次还是只对一半。 </span><br><span class="line">nus9Vyt8n：  </span><br><span class="line">此外还有就是，我需要Anki在未来，更加频繁的出示这张卡片，也即需要相对的减少这张卡片的间隔。  </span><br><span class="line">因为按照现在的，我点击Good出现了我：勉强说出来/很困难说出来/说对了一半/不太确定自己说的对不对但其实是对的 这种情况。    </span><br><span class="line">总之，就是需要告诉anki，这张卡片的难度好像比较大（降低ease值），未来你要更频繁的提问我这张卡片（降低间隔）。  </span><br><span class="line">nus9Vyt8n：  </span><br><span class="line">你说的是对的，如果一个卡片存在了这种情况，首选是拆分。但是，不是所有的卡片都可以拆分，有的卡片的内容因为牵扯思路或者完整性，不适合拆分。  </span><br><span class="line">这时候我只能采取这种方法：降低他的ease，使这张卡片在相同情况下，能比其他卡片间隔少，这是我的处理方法。</span><br><span class="line">叶峻峣：  </span><br><span class="line">嗯嗯，理解了哈哈，顺便安利一下制卡教程：</span><br><span class="line">如何写出好卡片：利用间隔重复创造理解 - 叶峻峣的文章 - 知乎</span><br></pre></td></tr></table></figure><p>文章来源：<a href="https://zhuanlan.zhihu.com/p/435951839">Anki的相关参数设置 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki算法与术语浅谈-叶峻峣</title>
      <link href="/posts/2022/11/c54807c8.html"/>
      <url>/posts/2022/11/c54807c8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>已收录于<a href="https://zhuanlan.zhihu.com/p/57637220">「一周年」专栏整理</a></p></blockquote><p>新卡片-步伐：第一个数字是学习新卡片选择【重来】的间隔，1 表示重来的间隔是 1 分钟，即一分钟后会重新出现。后面的数字是学习新卡片时选择【一般】的间隔， 5 10 表示第一次间隔 5 分钟，第二次间隔 10 分钟；</p><p>毕业间隔：学习新卡片后连续选择【一般】的间隔；</p><p>简单间隔：学习新卡片后选择【简单】的间隔；</p><p>开始简化：其实英文是 starting ease ，即初始简易度，这个决定了每次间隔之间的倍数；</p><p>简单奖励：与选择【简单】的间隔有关；</p><p>间隔修饰符：与所有复习间隔有关；</p><span id="more"></span><p>失误次数-步伐：复习卡片选择【重来】的间隔；</p><p>新间隔：重来卡片连续选择一般/简单后，下次复习的【间隔】= 之前复习的间隔 * 【新间隔】，默认为 0；</p><p>最小间隔：因为新间隔算出来可能很小，如果小于最小间隔，就用最小间隔来替代下次复习的【间隔】；</p><p>难点阈值：设置难点阈值，即累计失误次数；</p><p>记忆难点动作：如果一张卡片的失误次数超过难点阈值，就会【暂停卡片】或者【仅标记】。</p><p>以上是所有与算法相关的术语，接下来就简单的说说算法吧！</p><p>拿三个图来展示一下：</p>  <blockquote><p>19/08/19 补充：</p></blockquote>  <p>首先，每张卡片的复习间隔都与卡片本身的<strong>简易度</strong>、<strong>上一次的间隔</strong>和此次的<strong>选项</strong>有关</p><p>如果你按下了。。。</p><p>【重来】</p><p>卡片进入重新学习队列，简易度减少 20 个百分点（比如，原来的简易度是 250%，现在变成 230%）</p><blockquote><p>19/08/19 补充：在重新学习队列中连续正确即可恢复成复习卡片，第一次复习的间隔为【上次复习间隔】* 【新间隔】和【最小间隔】中较大的间隔</p></blockquote><p>【困难】</p><p>卡片的简易度减少 15% ，当前的间隔乘以 1.2。</p><p>【一般】</p><p>当前间隔乘以当前简易度，简易度不变。（比如上一次的间隔是 10 天，简易度是 250%，那么下一次的间隔就是 10 * 250% = 25(天)）。</p><p>【容易】</p><p>当前间隔乘以当前简易度再乘以简单奖励，简易度增加 15 个百分点。（比如上一次的间隔是10天，简易度是250%，那么下一次的间隔就是 10 * 250% * 130% = 32.5 ≈ 33(天)，简易度为 250% + 15% = 265%）。</p><p>So？间隔修饰符呢？由于初始为 100%，所以任何间隔都乘以 100%，即不变。如果你想缩短任何间隔，就把它调整到小于 100% 吧。</p><p>PS：简易度最低为 130%，算法默认重来 8 次就会暂停这张卡片，免得气到你，233。</p><p>PPS：研究算法我还发现，算法调用了随机算法，所以同样进度的卡片在同样的选项下可能会有不同的间隔，可以错开复习时机。</p><p>文章来源：<a href="https://zhuanlan.zhihu.com/p/42921090">Anki 算法与术语浅谈 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki的重复间隔如何计算的</title>
      <link href="/posts/2022/11/56bf4c70.html"/>
      <url>/posts/2022/11/56bf4c70.html</url>
      
        <content type="html"><![CDATA[<h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><ul><li>  间隔：Anki 是 Spaced repetition 软件，核心就是「间隔」的计算</li><li>  笔记：Note，Anki 知识库中的一条记录</li><li>  卡片：Card，拥有学习进度的最小单位，由一个笔记中的特定内容组合而成</li><li>  牌组：Deck，卡片的集合</li></ul><h2 id="Anki-卡片的-4-种状态"><a href="#Anki-卡片的-4-种状态" class="headerlink" title="Anki 卡片的 4 种状态"></a>Anki 卡片的 4 种状态</h2><ol><li> New  新卡片  </li><li> Learning  学习中卡片</li><li> Re-Learning    复习中卡片</li><li> Graduated   毕业</li></ol><h2 id="未毕业卡片的间隔"><a href="#未毕业卡片的间隔" class="headerlink" title="未毕业卡片的间隔"></a>未毕业卡片的间隔</h2><span id="more"></span><p>在 [[anki option]] 中的 learning step 指定。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-66.png" alt=""><p>使用上图的配置（15m 1d 6d），卡片的出现的间隔就是</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-65.png" alt=""><h2 id="回答的作用"><a href="#回答的作用" class="headerlink" title="回答的作用"></a>回答的作用</h2><p>在 learning 阶段，回答不会影响间隔值本身。</p><p>答错只是会将卡片重置回第一步，间隔还是以前的间隔。</p><h2 id="已毕业卡片的间隔"><a href="#已毕业卡片的间隔" class="headerlink" title="已毕业卡片的间隔"></a>已毕业卡片的间隔</h2><p>卡片一旦走完 learning step 进入毕业状态，复习间隔就要根据下面公式计算：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已毕业卡片的新间隔 = 当前间隔 * ease * 间隔调节参数</span><br></pre></td></tr></table></figure><p>公式说明：</p><table><thead><tr><th>parameter</th><th>explanation</th><th>note</th></tr></thead><tbody><tr><td>当前间隔</td><td>字面意思</td><td></td></tr><tr><td>ease 难度值</td><td>默认 <code>default starting ease</code> 是 250%</td><td>和卡片绑定</td></tr><tr><td>间隔调节参数</td><td>默认 <code>default interval modifier</code> 是 100%</td><td>和牌组绑定</td></tr></tbody></table><p>ease 和间隔调节参数的进一步说明：</p><ol><li> 牌组可以理解为卡片的容器</li><li> 难度值（ease）是卡片的属性，即使把卡片移动到了新的牌组，ease 保持不变</li><li> 间隔调节参数却是牌组的属性，卡片移动到了新的牌组，就要使用新牌组的间隔调节参数</li></ol><h2 id="回答的作用-1"><a href="#回答的作用-1" class="headerlink" title="回答的作用"></a>回答的作用</h2><p>不同于未毕业的卡片，回答会影响已毕业卡片的 ease，进而影响间隔：</p><table><thead><tr><th>Answer</th><th>Ease</th><th>Interval</th></tr></thead><tbody><tr><td>Good</td><td><code>ease = ease</code></td><td><code>interval = interval * ease * interval modifier</code></td></tr><tr><td>Again</td><td><code>ease = ease * 0.8</code></td><td>_触发 re-learning 机制, 由 new interval 参数控制</td></tr><tr><td>Hard</td><td><code>ease = ease * 0.85</code></td><td><code>interval = interval * 1.2 * interval modifier</code></td></tr><tr><td>Easy</td><td><code>ease = ease * 1.15</code></td><td><code>interval = interval * new ease * interval modifier * ease bonus</code></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般：</span><br><span class="line">下一次时间间隔=开始简化（简易度）*上一次时间间隔*间隔修饰符。</span><br><span class="line">简易度不变</span><br><span class="line"></span><br><span class="line">简单：</span><br><span class="line">下一次时间间隔=开始简化（简易度）*上一次时间间隔*间隔修饰符*简单奖励。</span><br><span class="line">简易度+15%</span><br><span class="line"></span><br><span class="line">困难：</span><br><span class="line">下一次时间间隔=1.2*上一次时间间隔*间隔修饰符</span><br><span class="line">简易度-15%</span><br><span class="line"></span><br><span class="line">重来：</span><br><span class="line">卡片进入重新学习队列，简易度减少 20 个百分点（比如，原来的简易度是 250%，现在变成 230%）</span><br><span class="line"></span><br><span class="line">ps：简易度最低限度130%</span><br></pre></td></tr></table></figure><p>可以看到，如果一个已毕业的卡片总是答不对（Again 或 Hard），ease 值会持续下降，这样会引发一个问题，ease hell</p><h2 id="ease-hell"><a href="#ease-hell" class="headerlink" title="ease hell"></a>ease hell</h2><h2 id="什么是-ease-hell？"><a href="#什么是-ease-hell？" class="headerlink" title="什么是 ease hell？"></a>什么是 ease hell？</h2><p>一些卡片出现的频率非常高，即使每次都回答 Good，还是会以很高的频率反复出现。</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ol><li> 一直对一个卡片按 Hard 和 Again，卡片的 ease 会掉到 130%（最低值）</li><li> 达到 ease 下限的卡片，即使之后按 Good，也不会提高 ease，导致计算出来的频率非常高</li></ol><h2 id="如何避免？"><a href="#如何避免？" class="headerlink" title="如何避免？"></a>如何避免？</h2><p>配置 [[anki option]] 中的 learning step，多增加几个 step，不要只用默认值。</p><p>原理很简单，处在 learning 阶段的卡片，按 hard/again 还是 good 都不会影响 ease ：）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>  <a href="https://www.youtube.com/watch?v=1XaJjbCSXT0">Guide to Anki Intervals and Learning Steps - YouTube</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift5 Sqlite.swift 使用教程</title>
      <link href="/posts/2022/11/22af3269.html"/>
      <url>/posts/2022/11/22af3269.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-iOS-SQLite-swift-简介"><a href="#1-iOS-SQLite-swift-简介" class="headerlink" title="1. iOS SQLite.swift 简介"></a>1. iOS SQLite.swift 简介</h2><ul><li>  之前使用SQLite苹果官方框架的痛点<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">之前在Swift下使用SQLite很是麻烦（当然OC下也是挺麻烦的），苹果官方文档中，要使用原生的SQLite，要先导入framwork，然后建一个.h文件，还要做一次Swift与C语言的桥接（SQLite是基于C语言的），使用的时候还要写SQL语句，反正就是很麻烦，需要写很多胶水代码。</span><br></pre></td></tr></table></figure></li><li>  Swift下的SQLite.swift就是为了解决上面痛点而产生的。不过只支持swift4.0以上版本。</li></ul><h2 id="2-iOS-SQLite-swift-安装"><a href="#2-iOS-SQLite-swift-安装" class="headerlink" title="2. iOS SQLite.swift 安装"></a>2. iOS SQLite.swift 安装</h2><ul><li>  这里只介绍pod安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SQLite.swift&#x27;</span><br></pre></td></tr></table></figure><p>或者指定具体版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SQLite.swift&#x27;, &#x27;~&gt; 0.12.2&#x27;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="3-iOS-SQLite-swift-使用"><a href="#3-iOS-SQLite-swift-使用" class="headerlink" title="3. iOS SQLite.swift 使用"></a>3. iOS SQLite.swift 使用</h2><h2 id="3-1-导入"><a href="#3-1-导入" class="headerlink" title="3.1 导入"></a>3.1 导入</h2><ul><li>  在要使用SQLite的地方导入头文件，当然一般会将数据库操作封装到一个类中<code>import SQLite</code></li></ul><h2 id="3-2-创建-连接数据库"><a href="#3-2-创建-连接数据库" class="headerlink" title="3.2 创建/连接数据库"></a>3.2 创建/连接数据库</h2><ul><li>  比如在iOS下，要在Document文件夹下创建一个名为db.sqlite3的数据库，并且要连接数据库。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取doc路径</span><br><span class="line">let path = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first!</span><br><span class="line">//如果不存在的话，创建一个名为db.sqlite3的数据库，并且连接数据库</span><br><span class="line">let db = try Connection(&quot;\(path)/db.sqlite3&quot;)</span><br></pre></td></tr></table></figure><ul><li>  如果你把一个数据库应用程序（例如，复制数据库文件到你的Xcode项目并将其添加到你的应用程序的target），你可以建立一个只读连接。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let path = Bundle.main.pathForResource(&quot;db&quot;, ofType: &quot;sqlite3&quot;)</span><br><span class="line">let db = try Connection(path, readonly: true)</span><br></pre></td></tr></table></figure><ul><li>  如果省略路径，sqlite.swift将提供一个内存数据库。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建一个内存数据库</span><br><span class="line">let db = try Connection() </span><br></pre></td></tr></table></figure><ul><li>  有时候多个数据库连接使用同一个数据库的时候，可能会出现线程安全的问题，这时候访问数据库可能会出错，这时候就有类似于网络访问超时的机制，如果为单个数据库维护多个连接，可以设置超时时间（以秒为单位）以及繁忙处理程序。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.busyTimeout = 5</span><br><span class="line"></span><br><span class="line">db.busyHandler(&#123; tries in</span><br><span class="line">    if tries &gt;= 3 &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-3-Expression基本表达式"><a href="#3-3-Expression基本表达式" class="headerlink" title="3.3 Expression基本表达式"></a>3.3 Expression基本<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a></h2><ul><li>  Swift和SQLite数据类型的对照图</li></ul><p><img src="https://img-blog.csdnimg.cn/20190902110632190.png" alt="Swift和SQLite数据类型的对照图"></p><ul><li>  表达式是与类型（内置或自定义）、原始SQL和（可选）值绑定到该SQL的通用结构。通常，您只需显式地创建表达式来描述列，通常每列只有一次。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let id = Expression&lt;Int64&gt;(&quot;id&quot;)</span><br><span class="line">let email = Expression&lt;String&gt;(&quot;email&quot;)</span><br><span class="line">let balance = Expression&lt;Double&gt;(&quot;balance&quot;)</span><br><span class="line">let verified = Expression&lt;Bool&gt;(&quot;verified&quot;)</span><br></pre></td></tr></table></figure><ul><li>  以上表达式分别表示表的字段，第一个字段名是id，类型是Int64,第二个字段名是email,类型是String…以此类推，以上创建的是不为空的，要创建可以为空的字段，可以这样创建：<code>let name = Expression&lt;String?&gt;(&quot;name&quot;)</code></li></ul><h2 id="3-4-创建表"><a href="#3-4-创建表" class="headerlink" title="3.4 创建表"></a>3.4 创建表</h2><ul><li>  声明一个Table常量</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let users = Table(&quot;users&quot;)</span><br></pre></td></tr></table></figure><ul><li>  使用上文表达式创建的字段，如果表不存在，就创建表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try db.run(users.create(ifNotExists: true) &#123; t in     // CREATE TABLE &quot;users&quot; (</span><br><span class="line">    t.column(id, primaryKey: true) //     &quot;id&quot; INTEGER PRIMARY KEY NOT NULL,</span><br><span class="line">    t.column(email, unique: true)  //     &quot;email&quot; TEXT UNIQUE NOT NULL,</span><br><span class="line">    t.column(name)                 //     &quot;name&quot; TEXT</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><ul><li>  我们也可以对字段进行约束。设置字段为主键/自增/唯一/检查/设置默认值/校对/设置外键等等</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t.column(id, primaryKey: true)</span><br><span class="line">// &quot;id&quot; INTEGER PRIMARY KEY NOT NULL</span><br><span class="line"></span><br><span class="line">t.column(id, primaryKey: .autoincrement)</span><br><span class="line">// &quot;id&quot; INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL</span><br><span class="line"></span><br><span class="line">t.column(email, unique: true)</span><br><span class="line">// &quot;email&quot; TEXT UNIQUE NOT NULL</span><br><span class="line"></span><br><span class="line">t.column(email, check: email.like(&quot;%@%&quot;))</span><br><span class="line">// &quot;email&quot; TEXT NOT NULL CHECK (&quot;email&quot; LIKE &#x27;%@%&#x27;)</span><br><span class="line"></span><br><span class="line">t.column(name, defaultValue: &quot;Anonymous&quot;)</span><br><span class="line">// &quot;name&quot; TEXT DEFAULT &#x27;Anonymous&#x27;</span><br><span class="line"></span><br><span class="line">t.column(email, collate: .nocase)</span><br><span class="line">// &quot;email&quot; TEXT NOT NULL COLLATE &quot;NOCASE&quot;</span><br><span class="line">t.column(name, collate: .rtrim)</span><br><span class="line">// &quot;name&quot; TEXT COLLATE &quot;RTRIM&quot;</span><br><span class="line"></span><br><span class="line">t.column(user_id, references: users, id)</span><br><span class="line">// &quot;user_id&quot; INTEGER REFERENCES &quot;users&quot; (&quot;id&quot;)</span><br></pre></td></tr></table></figure><ul><li>  表之间的约束</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//不像上面的字段约束，它支持所有的数据库类型，升序和降序命令，和复合（多字段）键。</span><br><span class="line"> t.primaryKey(email.asc, name)</span><br><span class="line">// PRIMARY KEY(&quot;email&quot; ASC, &quot;name&quot;)</span><br><span class="line"></span><br><span class="line">//不像上面的字段约束，它支持复合（多字段）键。</span><br><span class="line">t.unique(local, domain)</span><br><span class="line">// UNIQUE(&quot;local&quot;, &quot;domain&quot;)</span><br><span class="line"></span><br><span class="line">t.check(balance &gt;= 0)</span><br><span class="line">// CHECK (&quot;balance&quot; &gt;= 0.0)</span><br><span class="line"></span><br><span class="line">//可以使用过滤器运算符和函数轻松地构造布尔表达式。</span><br><span class="line">t.check(balance &gt;= 0)</span><br><span class="line">// CHECK (&quot;balance&quot; &gt;= 0.0)</span><br><span class="line"></span><br><span class="line">//和上面的引用约束不同的是，它支持SQLite的全部类型，比如更新、删除操作以及复合（多字段）键。</span><br><span class="line">t.foreignKey(user_id, references: users, id, delete: .setNull)</span><br><span class="line">// FOREIGN KEY(&quot;user_id&quot;) REFERENCES &quot;users&quot;(&quot;id&quot;) ON DELETE SET NULL</span><br></pre></td></tr></table></figure><h2 id="3-5-增，删，改，查"><a href="#3-5-增，删，改，查" class="headerlink" title="3.5 增，删，改，查"></a>3.5 增，删，改，查</h2><h3 id="3-5-1-插入操作（增）"><a href="#3-5-1-插入操作（增）" class="headerlink" title="3.5.1 插入操作（增）"></a>3.5.1 插入操作（增）</h3><ul><li>  通过insert()方法进行插入操作，操作成功会返回一个类型为Int64的ROWID</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try db.run(users.insert(email &lt;- &quot;alice@mac.com&quot;, name &lt;- &quot;Alice&quot;))</span><br><span class="line">// INSERT INTO &quot;users&quot; (&quot;email&quot;, &quot;name&quot;) VALUES (&#x27;alice@mac.com&#x27;, &#x27;Alice&#x27;)</span><br><span class="line"></span><br><span class="line">try db.run(users.insert(or: .replace, email &lt;- &quot;alice@mac.com&quot;, name &lt;- &quot;Alice B.&quot;))</span><br><span class="line">// INSERT OR REPLACE INTO &quot;users&quot; (&quot;email&quot;, &quot;name&quot;) VALUES (&#x27;alice@mac.com&#x27;, &#x27;Alice B.&#x27;)</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    let rowid = try db.run(users.insert(email &lt;- &quot;alice@mac.com&quot;))</span><br><span class="line">    print(&quot;inserted id: \(rowid)&quot;)</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;insertion failed: \(error)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  如果insert()方法没有任何参数，全部字段都会以默认值录入数据库表，字段没有默认值的，会报错。</li></ul><h3 id="3-5-2-删除操作（删）"><a href="#3-5-2-删除操作（删）" class="headerlink" title="3.5.2 删除操作（删）"></a>3.5.2 删除操作（删）</h3><ul><li>  使用delete()方法进行删除操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try db.run(users.delete())</span><br><span class="line">// DELETE FROM &quot;users&quot;</span><br></pre></td></tr></table></figure><ul><li>  可以先使用filter()方法进行过滤操作，指定范围进行删除操作</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let alice = users.filter(id == 1)</span><br><span class="line">try db.run(alice.delete())</span><br><span class="line">// DELETE FROM &quot;users&quot; WHERE (&quot;id&quot; = 1)    </span><br></pre></td></tr></table></figure><ul><li>  删除操作会返回被删除数据的行号</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    if try db.run(alice.delete()) &gt; 0 &#123;</span><br><span class="line">        print(&quot;deleted alice&quot;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       print(&quot;alice not found&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;delete failed: \(error)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-更新操作（改）"><a href="#3-5-3-更新操作（改）" class="headerlink" title="3.5.3 更新操作（改）"></a>3.5.3 更新操作（改）</h3><ul><li>  赋值方法:</li></ul><blockquote><p>在SQLite.swift中，可以直接使用 ‘&lt;-’ 为字段赋值，由上文表达式一节可见端倪，同样，我们也可以在update,delete等语句中使用同样格式进行操作。比如，在更新语句中：<code>try db.run(users.update(balance-=10))</code> 这条语句是指对表中全部数据的balance字段进行 -10 操作。</p></blockquote><ul><li>  使用update()方法进行更新操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try db.run(users.update(email &lt;- &quot;alice@me.com&quot;))</span><br><span class="line">// UPDATE &quot;users&quot; SET &quot;email&quot; = &#x27;alice@me.com&#x27;    </span><br></pre></td></tr></table></figure><ul><li>  可以先使用filter()方法进行过滤操作，指定范围进行更新操作</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let alice = users.filter(id == 1)</span><br><span class="line">try db.run(alice.update(email &lt;- &quot;alice@me.com&quot;))</span><br><span class="line">// UPDATE &quot;users&quot; SET &quot;email&quot; = &#x27;alice@me.com&#x27; WHERE (&quot;id&quot; = 1)</span><br></pre></td></tr></table></figure><ul><li>  更新操作会返回被更新数据的行号</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    if try db.run(alice.update(email &lt;- &quot;alice@me.com&quot;)) &gt; 0 &#123;</span><br><span class="line">        print(&quot;updated alice&quot;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        print(&quot;alice not found&quot;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;update failed: \(error)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-查询操作（查）"><a href="#3-5-4-查询操作（查）" class="headerlink" title="3.5.4 查询操作（查）"></a>3.5.4 查询操作（查）</h3><ul><li>  在SQLite.swift中，使用prepare()方法表示SELECT操作。此方法返回的是一组数据，我们可以使用forin循环从里面取出数据.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for user in try db.prepare(users) &#123;</span><br><span class="line">    print(&quot;id: \(user[id]), email: \(user[email]), name: \(user[name])&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// SELECT * FROM &quot;users&quot;</span><br></pre></td></tr></table></figure><ul><li>  在一条数据中的列下标将尝试中止错误的情况下执行，如果想处理这种情况，可以使用Row.get(_ column: Expression)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for user in try db.prepare(users) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        print(&quot;name: \(try user.get(name))&quot;)</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        // handle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><ul><li>  我们可以通过对数据库连接上的pluck方法的查询来获取第一行。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if let user = try db.pluck(users) &#123; /* ... */ &#125; // Row</span><br><span class="line">// SELECT * FROM &quot;users&quot; LIMIT 1</span><br></pre></td></tr></table></figure><ul><li>  将查询结果封装成一个数组也很简单，我们可以这样处理：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let all = Array(try db.prepare(users))</span><br><span class="line">// SELECT * FROM &quot;users&quot;</span><br></pre></td></tr></table></figure><ul><li>  上面的是指一些很简单的查询操作，实际操作中这些肯定满足不了我们的需求的，所以要用到复合查询操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let query = users.select(email)           // SELECT &quot;email&quot; FROM &quot;users&quot;</span><br><span class="line">                 .filter(name != nil)                // WHERE &quot;name&quot; IS NOT NULL</span><br><span class="line">                 .order(email.desc, name)   // ORDER BY &quot;email&quot; DESC, &quot;name&quot;</span><br><span class="line">                 .limit(5, offset: 1)                 // LIMIT 5 OFFSET 1</span><br></pre></td></tr></table></figure><ul><li>  选择指定的字段</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for user in try db.prepare(users.select(id, email)) &#123;</span><br><span class="line">   print(&quot;id: \(user[id]), email: \(user[email])&quot;)</span><br><span class="line">    // id: 1, email: alice@mac.com</span><br><span class="line">&#125;</span><br><span class="line">// SELECT &quot;id&quot;, &quot;email&quot; FROM &quot;users&quot;</span><br></pre></td></tr></table></figure><ul><li>  数据表内联接，比如将posts表的user_id和users表的id作为连接条件，内联两个表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.join(posts, on: user_id == users[id])</span><br><span class="line">// SELECT * FROM &quot;users&quot; INNER JOIN &quot;posts&quot; ON (&quot;user_id&quot; = &quot;users&quot;.&quot;id&quot;)</span><br></pre></td></tr></table></figure><ul><li>  以上是表之间的连接，有时候涉及到表内自联，这时候就要用到数据表别名alias</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let managers = users.alias(&quot;managers&quot;)</span><br><span class="line">let query = users.join(managers, on: managers[id] == users[managerId])</span><br><span class="line">// SELECT * FROM &quot;users&quot;</span><br><span class="line">// INNER JOIN (&quot;users&quot;) AS &quot;managers&quot; ON (&quot;managers&quot;.&quot;id&quot; = &quot;users&quot;.&quot;manager_id&quot;)</span><br></pre></td></tr></table></figure><ul><li>  选择的条件：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.filter(id == 1)</span><br><span class="line">// SELECT * FROM &quot;users&quot; WHERE (&quot;id&quot; = 1)</span><br><span class="line"></span><br><span class="line">users.filter([1, 2, 3, 4, 5].contains(id))</span><br><span class="line">// SELECT * FROM &quot;users&quot; WHERE (&quot;id&quot; IN (1, 2, 3, 4, 5))</span><br><span class="line"></span><br><span class="line">users.filter(email.like(&quot;%@mac.com&quot;))</span><br><span class="line">// SELECT * FROM &quot;users&quot; WHERE (&quot;email&quot; LIKE &#x27;%@mac.com&#x27;)</span><br><span class="line"></span><br><span class="line">users.filter(verified &amp;&amp; name.lowercaseString == &quot;alice&quot;)</span><br><span class="line">// SELECT * FROM &quot;users&quot; WHERE (&quot;verified&quot; AND (lower(&quot;name&quot;) == &#x27;alice&#x27;))</span><br><span class="line"></span><br><span class="line">users.filter(verified || balance &gt;= 10_000)</span><br><span class="line">// SELECT * FROM &quot;users&quot; WHERE (&quot;verified&quot; OR (&quot;balance&quot; &gt;= 10000.0))</span><br></pre></td></tr></table></figure><ul><li>  排序操作（ASC：升序，DESC：降序），根据email和name字段排序</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.order(email, name)</span><br><span class="line">// SELECT * FROM &quot;users&quot; ORDER BY &quot;email&quot;, &quot;name&quot;</span><br></pre></td></tr></table></figure><ul><li>  email字段降序，name字段升序</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.order(email.desc, name.asc)</span><br><span class="line">// SELECT * FROM &quot;users&quot; ORDER BY &quot;email&quot; DESC, &quot;name&quot; ASC</span><br></pre></td></tr></table></figure><ul><li>  分页操作,取前面5条数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.limit(5)</span><br><span class="line">// SELECT * FROM &quot;users&quot; LIMIT 5</span><br></pre></td></tr></table></figure><ul><li>  分页操作, 偏移量为5，取偏移量后面5条数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users.limit(5, offset: 5)</span><br><span class="line">// SELECT * FROM &quot;users&quot; LIMIT 5 OFFSET 5</span><br></pre></td></tr></table></figure><ul><li>  聚合操作</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let count = try db.scalar(users.count)</span><br><span class="line">  // SELECT count(*) FROM &quot;users&quot;</span><br><span class="line">let count = try db.scalar(users.filter(name != nil).count)</span><br><span class="line">// SELECT count(*) FROM &quot;users&quot; WHERE &quot;name&quot; IS NOT NULL</span><br><span class="line">let count = try db.scalar(users.select(name.count)) // -&gt; Int</span><br><span class="line">// SELECT count(&quot;name&quot;) FROM &quot;users&quot;</span><br><span class="line">let max = try db.scalar(users.select(id.max)) // -&gt; Int64?</span><br><span class="line">// SELECT max(&quot;id&quot;) FROM &quot;users&quot;</span><br><span class="line">let min = try db.scalar(users.select(id.min)) // -&gt; Int64?</span><br><span class="line">// SELECT min(&quot;id&quot;) FROM &quot;users&quot;</span><br><span class="line">let average = try db.scalar(users.select(balance.average)) // -&gt; Double?</span><br><span class="line">// SELECT avg(&quot;balance&quot;) FROM &quot;users&quot;</span><br><span class="line">let sum = try db.scalar(users.select(balance.sum)) // -&gt; Double?</span><br><span class="line">// SELECT sum(&quot;balance&quot;) FROM &quot;users&quot;</span><br><span class="line">let total = try db.scalar(users.select(balance.total)) // -&gt; Double</span><br><span class="line">// SELECT total(&quot;balance&quot;) FROM &quot;users&quot;</span><br></pre></td></tr></table></figure><h2 id="3-6-错误处理"><a href="#3-6-错误处理" class="headerlink" title="3.6 错误处理"></a>3.6 错误处理</h2><ul><li>  你可以匹配上选择性地抓住SQLite的错误错误。例如，专门处理约束错误</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    try db.run(users.insert(email &lt;- &quot;alice@mac.com&quot;))</span><br><span class="line">    try db.run(users.insert(email &lt;- &quot;alice@mac.com&quot;))</span><br><span class="line">&#125; catch let Result.error(message, code, statement) where code == SQLITE_CONSTRAINT &#123;</span><br><span class="line">    print(&quot;constraint failed: \(message), in \(statement)&quot;)</span><br><span class="line">&#125; catch let error &#123;</span><br><span class="line">    print(&quot;insertion failed: \(error)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  Result.error类型包含描述错误的英语文本（信息），错误代码（参见SQLite结果代码列表详情），产生错误的语句的一个可选的引用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki基础教程</title>
      <link href="/posts/2022/11/9362ca3f.html"/>
      <url>/posts/2022/11/9362ca3f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上缺少足够优秀的、广泛传播的中文教程所带来的 Anki 学习阻力，也是一种保护。真正追求学习的优秀人才 ，不会因为教程原文是英文而放弃阅读。</p><p>写这篇教程时，Anki 的 Windows 电脑端版本是 2.1。</p><p>在接下来介绍这个软件的时候 ，里面的许多概念 我会使用英文原文，因为这些单词虽然简单，但翻译过来的中文，大体上总觉得有些不合意，所以就按照英文单词来了。使用电脑端的时候，我也建议使用英文作为软件语言设置。</p><p>Anki 的电脑端就叫 Anki，手机端叫 AnkiDroid。目前只有 iOS 端收费 160 元，高价一是为了筛选用户，二是用于支持服务器。</p><p>在阅读这篇教程的同时，最好也打开电脑端 Anki 软件，同步操作，这样才能完全看懂学会。</p><p>另外如果你对电脑操作不熟悉 ，一定要花时间区别下中文符号和英文符号 ，例如“**:<strong>”和“</strong>：**”在计算机中区别是很大的 ，这在自定义卡片模板的时候会用得到 。</p><span id="more"></span><h3 id="网站参考："><a href="#网站参考：" class="headerlink" title="网站参考："></a>网站参考：</h3><p><a href="https://ld246.com/forward?goto=https://apps.ankiweb.net/">https://apps.ankiweb.net/</a> <code>官网</code></p><p><a href="https://ld246.com/forward?goto=https://apps.ankiweb.net/docs/manual.html">https://apps.ankiweb.net/docs/manual.html</a> <code>官方用户指南</code></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Anki 是一个强大的记忆工具 ，使用 Anki，你就可以用最小的、必要的付出，记住一切你想记忆的知识。我称它为学习工具界的核武器 ，核武器级别的工具，一定只能少数人掌握。</p><p>Anki 可以帮助记忆的内容有文字、图像、音频、视频。</p><p>一些复杂的文本 ，例如复杂的数学公式和化学方程式等，可以使用图片录入笔记 ，或者使用 科学标记法（LaTex）录入。</p><p>Anki 基于两个科学方法 ，来帮助你记忆 ：主动回忆性的问答、有时间间隔的多次复习。</p><h3 id="主动回忆性的问答"><a href="#主动回忆性的问答" class="headerlink" title="主动回忆性的问答"></a>主动回忆性的问答</h3><p>主动回忆性的问答意思是 ：Anki 给你看一张卡片的正面，正面上可以有提示或者问题 ，你来回忆 卡片背面的信息。</p><p>这是一种与被动学习相反的方法，被动学习就是 ：只翻书、听讲，被动接受课本和老师所讲的内容，我相信你一定 很多次在这样的过程中感到过瞌睡吧，被动学习的缺陷就是 ：学习过程中让人瞌睡无聊，难以长时间集中精力 ，记忆的效率差。</p><h3 id="大脑的不用就忘策略"><a href="#大脑的不用就忘策略" class="headerlink" title="大脑的不用就忘策略"></a>大脑的不用就忘策略</h3><p>我们人的大脑是物质性的，依靠神经突触来存储信息 ，能记忆的量有限，所以不重要的信息会很快被大脑忘却。</p><p>试着想一下你两个礼拜前 周一的晚餐是什么 ？估计你记不得了。因为这是无用信息 。</p><p>但如果你参加了一个派对，玩的非常开心 ，之后经常主动与朋友分享那次经历，你就可能对那次派对的细节记得很牢。</p><h3 id="有间隔的多次复习"><a href="#有间隔的多次复习" class="headerlink" title="有间隔的多次复习"></a>有间隔的多次复习</h3><p>1885 年 一位德国心理学家发表了 篇文章，主题就是关于“有时间间隔的多次复习” 。里面提到 ，与一次性将知识记忆很多遍相比 ，隔一段时间复习记忆一遍并多次复习，效果更要出奇的好。</p><h3 id="SuperMeomo"><a href="#SuperMeomo" class="headerlink" title="SuperMeomo"></a>SuperMeomo</h3><p>SuperMemo 是一款商业软件 ，最早的结合上面两种学习方式的软件 ，使用电子记忆卡片（以后通称<strong>闪卡</strong> FlashCard）辅助用户主动记忆，并能根据使用者的反馈 ，生成再次复习的时间 。</p><p>SuperMemo 的口号是：With spaced repitation, you can forget about forgetting.</p><h3 id="为什么使用-Anki？"><a href="#为什么使用-Anki？" class="headerlink" title="为什么使用 Anki？"></a>为什么使用 Anki？</h3><p>SuperMemo 在学习策略上很成功 ，但是这个软件是有版权的，不开放 ，只能运行在收费的 Windows 平台，而且 Bug 奇多，很难上手使用。</p><p>而 Anki 是一个开源软件 ，源代码对所有人开放 ，能运行在 Windows, Mac OS, Linux, Android, iOS 上，几乎你能用到的平台都支持 。而且受益于开源，许多用户开发了很多优秀插件 ，将 Anki 可以变得更为强大。</p><p>Anki 使用的“复习时间计算”算法是基于 SuperMemo 的一个版本的算法，叫 SM-2。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>使用 Anki，我非常建议同时使用两个设备，一台电脑 和 一部手机 ，电脑最好是轻薄便携长续航的笔记本 ，方便在图书馆、自习室、课间将新知识录入 Note ，而手机用于随时随地复习 。（手机和电脑间可以同步电脑在录入 Note 方面优势很大）</p><h3 id="Cards"><a href="#Cards" class="headerlink" title="Cards"></a>Cards</h3><p>一个 Card 有两面 ，学习的时候先展示正面 ，再展示背面。你可以在正面写下问题 ，在背面展示答案 。</p><p>例如你在正面写下了 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q：氧的化学符号是什么？</span><br></pre></td></tr></table></figure><p>你思考一阵后 ，决定答案是 “O”，然后点击显示背面，Anki 将会展示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q：氧的化学符号是什么？</span><br><span class="line">A: O</span><br></pre></td></tr></table></figure><p>校对答案后 ，你再告诉 Anki 你记得怎么样 ，Anki 会决定下次给你展示这个 Card 的时间。</p><h3 id="Decks"><a href="#Decks" class="headerlink" title="Decks"></a>Decks</h3><p>你可以想象把一堆卡片放在一个盒子里，这个盒子就是一个 Deck，大盒子里还可以放小盒子，也就是 Subdecks。</p><p>Anki 使用“::”表示包含关系，例如 “Chinese::Hanzi” 就表示“Hanzi”这个 Deck 在“Chinese”这个 Deck 里面。</p><p>如果你刚开始使用 还没有添加 Deck，Anki 会默认有一个 Deck 叫 “default” 。</p><p>在使用 Deck 的时候，最好不要分的太细，原因在之后会讲到。</p><h3 id="Notes-和-Fields"><a href="#Notes-和-Fields" class="headerlink" title="Notes 和 Fields"></a>Notes 和 Fields</h3><p>在制作卡片的时候 ，我们经常会想为一个知识点制作多张卡片。</p><p>用纸质卡片时 ，为了制作两张卡片 ，你只能将同样的知识点写两次 。</p><p>而 Anki 解决了这个问题。将笔记的内容分成几条独立的信息，你告诉 Anki 每张卡片需要的信息，Anki 就会为每个笔记自动创建卡片 ，并方便你在未来编辑卡片 。</p><p>例如我们想学英语单词，并且希望在每张卡片背面 附上页码 ，我们期望的卡片是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：Vertex 意思</span><br><span class="line">答：顶点</span><br><span class="line">页码：12</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：顶点 的英文</span><br><span class="line">答：Vertex</span><br><span class="line">页码：12</span><br></pre></td></tr></table></figure><p>在这个例子里 ，有三条相关信息 ，一个英文单词 ，一个中文翻译 ，一个页码 。把他们放在一起 也就是 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单词：Vertex</span><br><span class="line">中文：顶点</span><br><span class="line">页码：12</span><br></pre></td></tr></table></figure><p>总共三条信息，这三条信息的合集叫一个 Note ，每条信息的名字叫 Field ，我们就可以说 这条 Note 里面有三个 Field ，分别是“单词”，“中文 ”，“页码”。在录入笔记时，你只需要将“Vertex”，“顶点”，“12” 填入对应的 Field 就可以了。</p><h3 id="Card-Types"><a href="#Card-Types" class="headerlink" title="Card Types"></a>Card Types</h3><p>为了让 Anki 能根据你的 Note 自动创建一定格式的卡片，我们需要为每种卡片制作一个卡片模板 ，这个卡片模板就叫 Card Types 。你每增加一条笔记 ，Anki 就根据每个模板自动创建一张卡片 。</p><p>在上面的例子中 ，我们希望看到的卡片是这样的 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：Vertex 意思</span><br><span class="line">答：顶点</span><br><span class="line">页码：12</span><br></pre></td></tr></table></figure><p>为了达到这个目标 ，我们可以把模板设置成这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：&#123;&#123;单词&#125;&#125; 意思&lt;br&gt;</span><br><span class="line">答：&#123;&#123;中文&#125;&#125;&lt;br&gt;</span><br><span class="line">页码：&#123;&#123;页码&#125;&#125;</span><br></pre></td></tr></table></figure><p>将 Field 名字填在 两个大括号里面 ，我们告诉 Anki 将括号里的内容替换为 Field 里面实际填写的笔记内容，模板上面 没有被大括号括住的内容 将保持不变 。“<br>” 是一个 HTML 代码，即 break，中文意思换行 。模板是使用 HTML 语言来写的。</p><p>只有 HTML 语言才能 让用户定义丰富的模板 ，显示精美的图片 ，不用担心你不会 html 语言 ，因为设置简单的模板 不需要多复杂，你完全可以看懂 并且应用 。</p><p>当我们创建了上面那个模板，也就是 Card Type 以后，每次我们添加笔记 ，都将创建一个基于该 Card Type 的卡片，这样 可以方便保持卡片格式的一致性 ，减少制作新卡片 所需的精力。</p><p>每次你更改已存在的 Card Type 后，与之相关联的卡片也会更新布局，也就方便了我们在未来批量调整已创建卡片的布局 。</p><p>在主页面点击 “Add” ，会弹出添加笔记的页面 ，在这个页面上点击 “Card”按钮，就会进入编辑 Card Type 页面。关于编辑的更多信息会在后面讲到。</p><h3 id="Note-Types"><a href="#Note-Types" class="headerlink" title="Note Types"></a>Note Types</h3><p>Anki 创建定义多个 Note Types，每个 Note Type 下定义了多个 Field 和 Card Type。</p><p>估计你看到这里已经浑了，我们来举个例子 帮你梳理一下 。比如你正在记忆英语单词 ，你就可以创建一个叫“英语单词 ”的 Note Type，在这个 Note Type 下定义以下的 Field：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;单词&#125;&#125;</span><br><span class="line">&#123;&#123;中文&#125;&#125;</span><br><span class="line">&#123;&#123;同源词&#125;&#125;</span><br><span class="line">&#123;&#123;例句&#125;&#125;</span><br></pre></td></tr></table></figure><p>和两种 Card Type，比如第一种 Card Type</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正面显示单词</span><br><span class="line">背面显示中文 、同源词、例句</span><br></pre></td></tr></table></figure><p>第二种 Card Type：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正面显示中文 </span><br><span class="line">背面显示英文、同源词、例句</span><br></pre></td></tr></table></figure><p>这样，当你做英语单词笔记的时候 ，先选择 Note Type，在分别将英语单词、中文意思、同源词、例句 分别填入对应的 Field ，Anki 就会根据该 Note Type 下的两种 Card Type 生成两张卡片，至于生成的这两张卡片会被放入哪个 Deck，你可以在添加时定义。</p><p>Anki 会在同一个 Note Type 下查找和清理 Duplicates（重复卡片 ）。</p><p>Anki 会默认给你几种基本的 Note Type，这些基本的 Note type 下自带已经定义好的 Fields 和 Card Types。现在来介绍下这些 Note Type：</p><p><strong>Basic</strong></p><p>有  和  两个 Field，只有一种 Card Type，也就是只会创建一张卡片，正面显示里的内容 、背面显示 和的内容。</p><p><strong>Basic (and reversed card)</strong></p><p>有  和  两个 Field，有两种 Card Type，也就是会创建两张卡片，一张正面显示里的内容 、背面显示 和的内容；另一张是 reverse 的，正面显示里的内容 、背面显示 和的内容</p><p><strong>Basic (optional reversed card)</strong></p><p><strong>Cloze</strong></p><p>用于创建挖空问题（也就是填空题 ）的卡片，详见后面讲 Cloze 的部分。</p><p>如果要修改或增加 Note Types，在软件主界面点击“Tools” → “Manage Note Types”。</p><blockquote><p>注意：Note Types 在整个 Collection 里面通用，就是说用某种 Note Type 生成的卡片，可以指定存放在任意一个 Deck，你可以在”Add”窗口的右上角选择存放在哪个 Deck。</p></blockquote><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection 是指你所有 Material 的合集，包括你的 Cards, Notes, Decks, Deck Options……</p><h2 id="添加-Material"><a href="#添加-Material" class="headerlink" title="添加 Material"></a>添加 Material</h2><h3 id="下载-Shared-Decks"><a href="#下载-Shared-Decks" class="headerlink" title="下载 Shared Decks"></a>下载 Shared Decks</h3><p>有很多人在学习之后 将他们的 Cards 分享在了网上 ，你可以将他们的下载下来导入 。但是下载卡牌学习的效果比不上自己制作卡牌 学习的效果强 ，这一点你一定要清楚 。</p><p>在软件主界面 左下角有一个”Get Shared”按钮 ，点击它就可以进入分享页面 ，在里面找到你想下载的 Deck，下载以后双击文件就可以导入 。</p><h3 id="添加-Note-和-Card"><a href="#添加-Note-和-Card" class="headerlink" title="添加 Note 和 Card"></a>添加 Note 和 Card</h3><p>回想之前所说的 ，我们往 Anki 添加的是 Notes，而 Cards 是自动生成的 。</p><p>在软件主窗口点击 “Add”，会弹出添加笔记窗口，添加笔记窗口左上角显示当前 Note Type，右上角选择卡片放到哪个 Deck。</p><p>接下来有一行按钮，暂且不管 ，在这行按钮下面有几个 输入框 ，输入框的左上角显示了 这个 Field 的名称，输入框里就是要输入 Note 的地方。将你的笔记填入对应的 Field，如果你的 Note Type 是“Basic”，那么你应该会看到两个 Field。分别会在卡片的正面和背面显示。</p><p>在 Field 的下放，还有一个框 ，用于填写 Tags，也就是标签 ，你可以问你的笔记添加标签 ，方便以后查找 ，标签之间用空格分隔 ，就可以为一个笔记添加多个标签 。</p><p>填写完成以后 ，点击下方的 “Add”或者按下键盘的 Ctrl + Enter，就会自动生成卡片了。”History”按钮会显示你最近添加的卡片 ，方便你不小心填错添加以后进行修改 。</p><p>Anki 会检查第一个 Field 的来判断笔记的唯一性，假如你在同一 Note Types 下添加了两份第一个 Field 内容相同的 Note，Anki 会给出警告 。不检查其他 Field 是为了提高软件的效率。</p><p>Note Type 和 Field 之间那些按钮 ，你可以参与后面的_编辑_部分 。</p><h3 id="添加-Note-Types"><a href="#添加-Note-Types" class="headerlink" title="添加 Note Types"></a>添加 Note Types</h3><p>Basic 这个 Note Type 对于一般的记单词短语是够用的 ，但是当你学习其他内容 时候 ，最好将这些信息分到更多的 Field 中。</p><p>你可能会问 ，我为什么就不能把音频图片提示解释都放在 Card 正面的 Field 中呢？如果你喜欢这样做 ，那是最好了 。但这样的缺点是所有的信息都连在了一起 ，当你想批量整理的时候 ，比如希望将一大堆 Card 的音频部分从前面移到后面 ，你就只能 一张卡片 一张卡片的 去修改 ，但当你将你的 Note 分成多个 Field，只需要编辑这个 Card Type，将 音频部分的 Field 放在卡片背面，就可以一次性批量完成修改 。</p><p>你可以在软件主页面点击 “Tools”-&gt;”Manage Note Types”进入 Note Type 编辑页面 ，在这里编辑或添加 Note Types，并修改各个 Note Type 下的 Fields 和 Card Types。</p><p>在 Manage Note Types 页面，点击“Add”，会弹出一个框 ，框内让你选择一个已存在的 Note Type，每个 Note Type 前面有“Add：”或“Clone：”字样，“Add：”表示从 Anki 自带的 Note Type 复制一个 Note Type 便赋予新的名字 ，“Clone：”表示从所有已创建的 Note Type 复制一个 Note Type 并赋予 新的名字 。（其实选哪个都无所谓 ，添加 Note Type 本质上就是先复制一个 Note Type，赋予一个新的名字，再详细修改它的 Fields、Card Types）</p><h3 id="自定义-Fields"><a href="#自定义-Fields" class="headerlink" title="自定义 Fields"></a>自定义 Fields</h3><p>你可以在主页面点击 “Add”-&gt;”Fields”，或者在 上面提到的 Manage Note Type 页面点击“Fields”，就可以编辑所选 Note Type 的 Fields。</p><p>右侧的按钮“Reposition”功能是修改所选 Field 在列表中的位置 。</p><p>下方的”Editing Font” 可以修改该 Field 在添加笔记页面中的内容的字体。（也就是，在软件主页面点击“Add”后，弹出的窗口内输入框中的字体）</p><p>在下方有一个“Sort by this field in the brawser”，选中后有什么效果呢？</p><ul><li>  假设现在“Front”勾选上了这个选项。</li><li>  这时候你回到主页面 ，点击 “Browse”，会进入卡片浏览页面 ，这就是所谓的 “Browser”（浏览器，这里的浏览器和你平常所用的网页浏览器概念不一样 ）。</li><li>  在 Browser 中，最右边的大框框就是你浏览卡片的地方 ，左边那一列显示的就是”Front”这个 Field 的内容。</li></ul><p>下面两个打勾的地方，翻译过来就是 ：</p><ul><li>  添加的时候自动填充上次的输入</li><li>  文字方向为从右到左 （某些语言如阿拉伯语会需要 ）</li></ul><p>自定义了 Field 以后 ，怎么决定他们在卡片的哪个部分显示呢 ？这个请参阅后面的 <strong>Template</strong> 部分。</p><h3 id="正确的使用-Deck"><a href="#正确的使用-Deck" class="headerlink" title="正确的使用 Deck"></a>正确的使用 Deck</h3><p>Deck 本来是用于将你的卡片分大类的 ，但你可能会想创建 许多小的 Decks，例如“我的犯罪心理学第一章”，又或者“食品名字”，但是不推荐这样做 ，原因如下 ：</p><ul><li>  许多小的 Deck，意味着你在复习时 ，卡片会议能被记住的顺序依次展示 （就像你在检查视力时，把视力表最下一行每个图形 的方向记住了），这将使你回答卡片更容易 ，因为你可以根据上一张卡片的内容，记起下一张卡片的内容 。这就导致了比较弱的记忆效果 。当你在 Anki 软件之外的地方需要记起这些内容时 ，就会更困难 。</li><li>  Anki 在设计之初就没有考虑要处理非常多的 Deck，当你的 Decks 很多时 （超过几十个 ），会让软件运行变慢（尤其是在手机端 ） 。</li></ul><p>使用 Tags 和 Fields 来分类筛选内容是更好的办法 。</p><p>如果你喜欢让 Notes 非常条理 ，可以添加 Fields 到你的 Note Type，例如 “出自书名”、“页数”，这些 Fields 可以不在 卡片中显示 ，但会方便以后的筛选查找 。</p><p>Anki 有 Custom Study 和 Filtered Deck，通过一系列搜索条件创建临时 Deck，方便你的自定义学习 。</p><p>#Learning</p><p>当你添加了 Note 或导入了 Shared Deck，就可以开始学习了 ，在主页面点击”Decks”按钮，会列出你所有的 Decks，右侧有两个数字 ，分别是对应”Due”和“New”。</p><ul><li>  “Due”代表应当复习的卡片数</li><li>  “New”代表要新学习的卡片数</li></ul><h3 id="Study-Overview"><a href="#Study-Overview" class="headerlink" title="Study Overview"></a>Study Overview</h3><p>选择一个 Deck 点击后，会看到一个界面：</p><ul><li>  “New” 表示你新建了但从未学习过的 Card 数</li><li>  “Learning” 表示你近期见过一次 但仍需要学习的 Card 数</li><li>  “To Review” 表示之前学习过 ，但今天需要复习的 Card 数</li></ul><p>你可以点击 “Study Now”或按下键盘上的 s 键 ，开始学习 。</p><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>卡片在展示时 ，先只展示正面 ，也就是 Question，你去思考答案 ，然后点击 “Show Answer” 或者按下键盘上的空格键 ，就会显示卡片的背面 。你可能会花点时间去想答案 ，但如果在十秒内不能想起来 ，最好还是放弃苦思冥想，然后查看答案。</p><p>背面显示后 ，将你所想的答案 和背面内 Answer 进行对照 ，告诉 Anki 你记得怎么样 (下边会有几个按钮供你选择)。如果你不能准确的对照 ，例如单词的拼写之类 ，你可以使用”Checking Your Answer”功能（这个在后面会讲到 ），这个功能会让你输入答案 ，翻转背面后 Anki 会进行对照 。</p><h3 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h3><p>当你学习 New Card 或已经忘记了的 Card 时，Anki 会向你展示多次 ，帮助你 记住他们 。每次展示 都称为一个 Learning Step，默认有两个 Steps ：1 分钟和 10 分钟 。你可以在 Deck Option 里面更改 Learning Steps 的数量和时间 。</p><p>在学习时有三个评级按钮</p><ul><li>  <strong>“Again”</strong> 会将卡片移到第一个 Step</li><li>  <strong>“Good”</strong> 会移动卡片到下一个 Step，如果卡片已经处在最后一个 Step，那么它就会转变成 “Review Card”（It graduates）。默认情况下 ，如果一个卡片毕业了 ，在第二天还会再显示 一次 。之后显示的间隔时间会逐渐增加 。</li><li>  <strong>“Easy”</strong> 立刻将该卡片转变成 “Review Card”，默认情况下 该卡片会在四天后再次显示 。在**“Again”**模式 不会出现 “Easy”按钮。</li></ul><p>当卡片第一次显示时 ，处在第一阶梯 ，当你回答“Good”时，它会在十分钟内再次展示 。</p><p>你可以用键盘上的 1、2、3 来选择这三个按钮 ，键盘上的空格键会选择 “Good”。</p><h3 id="Reviewing"><a href="#Reviewing" class="headerlink" title="Reviewing"></a>Reviewing</h3><p>当卡片被学习过 ，要复习时 ，有四个按钮来评估你的复习 。</p><ul><li>  “Again” 将你的答案标记为错误 ，也就是失误了 （This card is said to have <strong>lapsed</strong>），未来会增加展示这张卡片的频率 。</li><li>  “Hard” 会在比上次间隔稍微长一点的时间后 再次展示该卡片，并且告诉 Anki 增加在未来显示这张卡片的频率 。</li><li>  “Good” 告诉 Anki 上次的间隔刚好合适 。默认情况下 ，卡片会在之前时间的大约 2.5 倍之后复习。比如你在十天前见过该卡片 ，下一次间隔大约 25 天 。</li><li>  “Easy” 告诉 Anki 间隔太短了，问题太容易回答 。将来的间隔时间会加大 。记住 ，这个只适用于极其简单的卡片，慎选！</li></ul><p>你也可以用键盘上的 1 到 4 来选择这四个按键</p><h3 id="Due-Counts-and-Time-Estimates（待学计数和时间估计）"><a href="#Due-Counts-and-Time-Estimates（待学计数和时间估计）" class="headerlink" title="Due Counts and Time Estimates（待学计数和时间估计）"></a><strong>Due Counts</strong> and <strong>Time Estimates</strong>（待学计数和时间估计）</h3><p>当 Card 正面展示的时候 ，屏幕下方会展示 像 12+34+56 这样的数字 ，这些数字分别代表 ：new cards、cards in learning、cards to review。你可以在 Preference（首选项 ）里关掉这些数字的显示 。</p><p>显示 Card 背面时 ，按钮上会显示下次出现该卡片的预估时间 ，同样可以在首选项里关闭显示 。</p><h3 id="Editing-and-More（编辑和更多-）"><a href="#Editing-and-More（编辑和更多-）" class="headerlink" title="Editing and More（编辑和更多 ）"></a>Editing and More（编辑和更多 ）</h3><p>你可以点击左下角的 “<strong>Edit</strong>“按钮，编辑当前卡片，编辑完成后，返回继续学习 。Editing 界面和 Add Notes 界面很像 。</p><p>在 Review 界面 右下角有一个按钮 “<strong>More</strong>”，可以提供一些额外的操作：</p><ul><li>  <strong>Mark Notes</strong> 添加一个”marked” 标签（Tag）给这个卡片，方便在浏览器中找到 。同时在复习时 ，已标记的 Cards 在右上角会显示一个小星星。</li><li>  <strong>Bury Card / Note</strong> 让这张卡片或笔记在今天的复习过程中不再显示 。这个”Bury”挺形象的，就像是你把这张卡片埋到了明天需要复习的卡片中一样 。你可以在该 Deck 的概览界面点击“<strong>Unbury</strong>”来取消搁置。</li><li>  <strong>Suspend Card / Note</strong> 字面意思挂起该卡片 ，就是永久的挂起来 ，在你手动把它取下来之前 ， 不会在复习列表里再次出现。</li><li>  <strong>Delete Note</strong> 删除 Note 和其对应生成的 Cards</li><li>  <strong>Options</strong> 编辑该 Deck 的选项</li><li>  <strong>Replay Audio</strong> 如果这张卡片有音频 ，就再次播放</li><li>  <strong>Record Own Voice</strong> 录制一段声音 ，用于检查你的发音 ，这段录音不会永久保存 ，再次复习时会被删掉 。如果想永久保存录音 ，请进入 Edit 页面录制。</li><li>  <strong>Replay Own Voice</strong> 重新播放 你录制的声音 。</li></ul><h3 id="Display-Order（显示顺序-）"><a href="#Display-Order（显示顺序-）" class="headerlink" title="Display Order（显示顺序 ）"></a>Display Order（显示顺序 ）</h3><p>在选定一个 Deck 学习时 ，会显示该 Deck 下的 Cards 和 SubDecks 内的 Cards。比如你选择了 “<strong>French</strong>“这个 Deck 进行学习，“<strong>French::Vocab</strong>”和“<strong>French::MyTextBook::Lesson 1</strong>”内的 Cards 也会显示。</p><p>对于 <strong>New</strong> 和 <strong>Reviewing</strong> 的 Cards，Akin 会以字母顺序从 SubDecks 里面选取 Cards。在上述例子中 ，你会先获得“<strong>French</strong>”里面的 Cards，然后是“<strong>MyTextBook</strong>”，接着是“<strong>Vocab</strong>”。你可以借此控制卡片出现的次序 。</p><p>而 <strong>Learning</strong> 的 Cards，也就是刚学了，但还没有 graduate 的卡片，对时间会比较敏感 ，有更高的优先级 ，会从所有的 Deck 里立即获取并展示。</p><h3 id="Siblings-and-Burying（相关卡片和搁置-）"><a href="#Siblings-and-Burying（相关卡片和搁置-）" class="headerlink" title="Siblings and Burying（相关卡片和搁置 ）"></a>Siblings and Burying（相关卡片和搁置 ）</h3><p>之前曾经提到 ，一份 Note 可以生成多张 Note，这些 Notes 互称 Siblings，中文可以叫相关卡片、同胞卡片等等 。Anki 会尽可能保证这些相关卡片 在学习时不会紧挨着显示 。</p><p>Anki 只会自动 Bury <strong>New</strong> 或 <strong>Rewiewing</strong> 的卡片，将更高的优先级给 <strong>Learning</strong> 的卡片，因为时间对它们更重要 。</p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>当你把鼠标移到一个按钮上悬停 ，会出现关于这个按钮的快捷方式的提示。</p><p>一般学习时用空格回答大多数卡片是很方便的 。</p><p>##Falling Behind（落后、落下复习）</p><p>如果你的复习落后了 ，Anki 会优先显示等待最长的 Cards ，这将确保没有 Cards 会无限的 等下去 。</p><p>那些超过应有复习时间的卡片 称为 Overdue Cards。</p><p>当你在回答一张 Card 时 delay 了过长时间，会影响接下来卡片的显示顺序 。</p><h2 id="Editing（编辑-）"><a href="#Editing（编辑-）" class="headerlink" title="Editing（编辑 ）"></a>Editing（编辑 ）</h2><h3 id="Features（特性）"><a href="#Features（特性）" class="headerlink" title="Features（特性）"></a>Features（特性）</h3><p>在软件主页点击 <strong>Add</strong> ，会打开 Editor （编辑器）。（当然还有几个地方也可以打开编辑器 ）</p><p>现在介绍 Field 区域 右上角的几个按钮的功能 ：</p><p><strong>B</strong> 粗体</p><p><em><strong>I</strong></em> 斜体</p><p><strong>U</strong> 下划线</p><p><strong>S²</strong> 上标</p><p><strong>S₂</strong> 下标</p><p><strong>Fx</strong>(F 右下角一个错号) 清除所选文本的格式</p><p>接下来两个方块按钮是改变字体颜色的</p><p><strong>[…]</strong> 将选中的文本变成 Cloze 格式，要使用这个功能 ，必须切换 <strong>Note Types</strong> 到 <strong>Cloze</strong>（详述见下一小节）</p><p><strong>回形针图标</strong> 添加音频、图片、视频文件</p><p>**麦克风图标 ** 录音</p><p><strong>三条横杠图标</strong> 假如更多高级格式（需要额外学习），这些高级格式可以方便输入数学公式和化学方程式，在学术性论文中很常用。</p><p>这些按钮大部分都有快捷键 ，鼠标悬停在上面就可以看到 。</p><p>当你从外边例如浏览器复制上文本 ，粘贴到 Anki 中，默认会<strong>清除所有格式</strong>（例如大小、颜色、加粗等等 ），如果在粘贴的时候按 住 <strong>Shift</strong>，就可以保留格式 。</p><h3 id="Cloze-Deletion-（挖空）"><a href="#Cloze-Deletion-（挖空）" class="headerlink" title="Cloze Deletion （挖空）"></a>Cloze Deletion （挖空）</h3><p>例如你在“Front” Field 填入了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Canberra was founded in 1913.</span><br></pre></td></tr></table></figure><p>接着选中“1913”，点击右上角的**[…]**，框内 这个句子就会变成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Canberra was founded in &#123;&#123;c1::1913&#125;&#125;.</span><br></pre></td></tr></table></figure><p>这样的话，这个 Field 在生成的卡片正面就会显示为：</p><blockquote><p>Canberra was founded in ____.</p></blockquote><p>而在背面会显示：</p><blockquote><p>Canberra was founded in 1913.</p></blockquote><p>假如你又把“Caberra”选中，单击**[…]**，这时候句子会变成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;c2::Canberra&#125;&#125; was founded in &#123;&#123;c1::1913&#125;&#125;.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;c1::Canberra&#125;&#125; was founded in &#123;&#123;c1::1913&#125;&#125;.</span><br></pre></td></tr></table></figure><p>其实你还可以给这个挖控设置一个提示 ，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;c1::Canberra::City&#125;&#125; was founded in 1913.</span><br></pre></td></tr></table></figure><p>这样的话，这个 Field 在 Card 正面显示的就是：</p><blockquote><p>( City ) was founded in 1913.</p></blockquote><p>当然这样的挖空不能让你输入文本，如果你想要实打实的填空，来测试你的拼写能力 ，请看后面“<strong>Typing Answers</strong>”部分。</p><p>Anki 将 <strong>Cloze</strong> 看做特殊的笔记类型，在一般的 Note Type 里无法使用 Cloze Deletion 功能，如果要使用自定义的 Note Type ，确保原样复制已有的 <strong>Cloze</strong> Type 。</p><h2 id="Cards-and-Templates-（卡片和模板）"><a href="#Cards-and-Templates-（卡片和模板）" class="headerlink" title="Cards and Templates （卡片和模板）"></a>Cards and Templates （卡片和模板）</h2><p>之前曾提到了，用户选择 Note Type ，填写 Note 到 Fields ，Anki 根据该笔记类型下的 Card Types 自动创建 Cards 。</p><p>在添加 Note 页面（也就是 Editor 页面），或 Manage Note Types 页面，都可以点击 “<strong>Cards…<strong>” 按钮，来编辑该笔记类型下的 Card Types ，在新打开的卡片类型编辑页面中 ，中间上方的下拉框可以看到有几种卡片类型，每种卡片类型一般都会生成一张卡片。你可以通过右边的 “</strong>Options</strong>” 按钮来添加、删除卡片类型。另外“<strong>Option</strong>”中的 “<strong>Deck Override</strong>“ 可以额外自定义这种 Card Type 生成的新卡片放在哪个 Deck 里面。</p><p>左边上方是该 Card Type 下的 Front Template （正面模板），左边下方是 Back Template （背面模板 ）。使用 html 语言描述，不用担心你不会，只需要下面三个基本的代码，你就可以写出简单的模板。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br&gt;    表示换行（break）</span><br><span class="line">&lt;hr&gt;&lt;br&gt;    可以画一条水平分割平线</span><br></pre></td></tr></table></figure><blockquote> 表示 Field 的名称，最终会被替换成相应 Field 的内容</blockquote><p>左边中间是 Styling （控制正反两面的样式 ），使用 CSS 描述，不用学 css，我相信普通人也能看懂那几行代码 并且进行简单修改 ，无外乎是改变字体的名称 、字体大小 、颜色 、背景颜色 。</p><p>想要定义更漂亮的模板，还是最好学下 html 和 css，电脑上很多和排版有关的地方 ，几乎都会用到它们 。</p><h3 id="Reverse-Cards-创建反转卡片"><a href="#Reverse-Cards-创建反转卡片" class="headerlink" title="Reverse Cards (创建反转卡片)"></a>Reverse Cards (创建反转卡片)</h3><p>如果你想创建 有两个方向的卡片 （例如“省名” -&gt; “省城名字”和“省城名字” -&gt; “省名”），直接使用 <strong>Basic (and reversed card)</strong> Note Type 就可以。</p><p>也可以选择 <strong>Basic (optional reversed card)</strong> Note Type，在这种笔记类型中，只有当第三个 Field （即”Add Reverse”）中象征性的填入一些内容 ，才会生成两张互为反转的卡片 。</p><p>如果稍后决定不需要添加反转卡片，将 “Add Reverse” 中的内容清除即可。</p><p>如果在一开始没有选择 <strong>Basic (optional reversed card)</strong> Note Type，可以在 Browser 中改变某 Note 的 Note Type 。</p><blockquote><p>为了防止丢失数据，在用户清除了 “Add Reverse” field 的内容后，并不会自动删除卡片。为了完成删除操作，需要手动在软件主页面点击 “<strong>Tools</strong>“ -&gt; “<strong>Empty Cards…</strong>“ 。</p></blockquote><p>如果要使用更复杂的 Note Types， 例如希望在某些特定条件下生成特定的 Cards，参阅后面的 “<strong>Conditional Replacement</strong>” 章节。</p><h3 id="Basic-Templates-基础模板"><a href="#Basic-Templates-基础模板" class="headerlink" title="Basic Templates (基础模板)"></a>Basic Templates (基础模板)</h3><p>最简单的模板就是像这样的 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;Front&#125;&#125;</span><br></pre></td></tr></table></figure><p>把 Field 名字放进两个大括号里面，Anki 会查找该 Field 的内容，并进行替换。</p><p><em>要注意模板对大小写是敏感的</em></p><p>模板可以添加任何文本 ，例如你在学习各国的首都 ，创建了一个包含 “国家”、“首都” 两个 Field 的 Note Type，你就可以创建这样的模板，正面是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;国家&#125;&#125;的首都叫什么？</span><br></pre></td></tr></table></figure><p>背面是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;FrontSide&#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;hr id=answer&gt;</span><br><span class="line">&#123;&#123;首都&#125;&#125;</span><br></pre></td></tr></table></figure><p>代码的意思是：先显示正面的文本 ，再画一条分割线 ，再显示  Field 的内容。</p><blockquote><p><strong>id=answer</strong> 告诉 Anki 问题和答案之间的分界处，当你的正面文本较长时，显示背面后，可以快速自动滚动到答案开头 。</p></blockquote><h3 id="Checking-Your-Answer-（输入比对模式）"><a href="#Checking-Your-Answer-（输入比对模式）" class="headerlink" title="Checking Your Answer （输入比对模式）"></a>Checking Your Answer （输入比对模式）</h3><p>如果你在脑海里回忆还不够 ，希望将脑海里的答案写下来，与标准答案进行比较，核查拼写错误，那你就可以用到这个。</p><p>假设你有的一张 Card Type ，它的模板是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;中文&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;FrontSide&#125;&#125;</span><br><span class="line">&lt;hr id=answer&gt;</span><br><span class="line">&#123;&#123;英文&#125;&#125;</span><br></pre></td></tr></table></figure><p>你需要将它的正面改成这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;中文&#125;&#125;</span><br><span class="line">&#123;&#123;type:英文&#125;&#125;</span><br></pre></td></tr></table></figure><p>我们在这里添加了一个 “**type:**” ，于是就会在卡片的正面添加一个输入框，学习时，在输入框内填入你所想的答案 ，点击显示答案 ，Anki 就会核对你所输入的文字和  Field 的内容，正确部分用绿色表示 ，错误部分用红色表示 。</p><p>答案正确与否并不会影响这个卡片下次复习的时间 ，这仍然取决于用户是否觉得记住了。</p><blockquote><p>注意 ：一张卡片只能用一个输入对比，也只支持单行文字。</p></blockquote><p>高级用户可以定义 css 的 class: <strong>typeGood</strong> 、 <strong>typeBad</strong> 、 <strong>typeMissed</strong> 来改变比对结果显示的颜色。</p><p>也可以在 Cloze 卡片中使用 Type Answer 功能，为此需要在卡片的正面背面都添加上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;type:cloze:Text_Field_Name&#125;&#125;</span><br></pre></td></tr></table></figure><p>因此背面的模板是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;cloze:Text_Field_Name&#125;&#125;</span><br><span class="line">&#123;&#123;type:cloze:Text_Field_Name&#125;&#125;</span><br><span class="line">&#123;&#123;Extra&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个只能在 Cloze 类型的 Note Type 里面添加 。</p><blockquote><p>提醒：输入答案的文本框，在 Browser 的 Preview 中不会出现，只有在学习时才会出现。</p></blockquote><p>##换行</p><p>由于模板使用 HTML 语言书写 ，所以需要特殊的换行，如果你在模板中写下了 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">One</span><br><span class="line">Two</span><br></pre></td></tr></table></figure><p>在实际预览时，你会发现它变成了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">One Two</span><br></pre></td></tr></table></figure><p>为了换行，我们就需要在每一行末尾加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure><p>就像这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">One&lt;br&gt;</span><br><span class="line">Two</span><br></pre></td></tr></table></figure><p>这样换行也同样适用于有多个 Field 时：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;Field_One&#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;Field_Two&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Card-Styling-卡片样式"><a href="#Card-Styling-卡片样式" class="headerlink" title="Card Styling (卡片样式 )"></a>Card Styling (卡片样式 )</h3><p>编辑出更复杂和精美的卡片样式需要使用 css 知识，这个在网上可以轻易搜到很多资料。这里就不再赘述。</p><p>但是你可以在 <strong>Front Template</strong> 和 <strong>Back Template</strong> 之间的 <strong>Styling</strong> 区域简单地定义文本字体、大小、颜色。</p><h3 id="Special-Fields"><a href="#Special-Fields" class="headerlink" title="Special Fields"></a>Special Fields</h3><p>Anki 有一些保留 Field 可以直接使用，现在列在下面：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The note&#x27;s tags: &#123;&#123;Tags&#125;&#125;</span><br><span class="line"></span><br><span class="line">The type of note: &#123;&#123;Type&#125;&#125;</span><br><span class="line"></span><br><span class="line">The card&#x27;s deck: &#123;&#123;Deck&#125;&#125;</span><br><span class="line"></span><br><span class="line">The card&#x27;s subdeck: &#123;&#123;Subdeck&#125;&#125;</span><br><span class="line"></span><br><span class="line">The type of card : &#123;&#123;Card&#125;&#125;</span><br><span class="line"></span><br><span class="line">The content of the front template:</span><br><span class="line">&#123;&#123;FrontSide&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Card-Generation-amp-Deletion-卡片的生成与删除"><a href="#Card-Generation-amp-Deletion-卡片的生成与删除" class="headerlink" title="Card Generation &amp; Deletion (卡片的生成与删除)"></a>Card Generation &amp; Deletion (卡片的生成与删除)</h3><p>Anki 不会创建正面空白的卡片。Note 正面为空会无法创建 Cards。</p><p>将一条已经存在的卡片编辑，使它正面为空 ，为了防止数据丢失 ， Anki 不会自动删除这张空卡片。需要手动在软件主页面选择 “Tools” -&gt; “Empty Cards…”。</p><p>由于卡片的生成方式，删除单张 Card 可能不会生成该 Note（有的一条 Note 会创建多张 Card ），因此要么把与这条 Note 相关的 Card 一一全部删除 ，要么你可以编辑 Card 内容，使正面 Field 的内容为空（与之相关的 Note 也会被更改），再回到首页，直行删除空卡片 。</p><h3 id="Media-amp-LaTex-References-媒体与-LaTex-引用"><a href="#Media-amp-LaTex-References-媒体与-LaTex-引用" class="headerlink" title="Media &amp; LaTex References (媒体与 LaTex 引用)"></a>Media &amp; LaTex References (媒体与 LaTex 引用)</h3><h4 id="静态引用声音或图像"><a href="#静态引用声音或图像" class="headerlink" title="静态引用声音或图像"></a>静态引用声音或图像</h4><p>假如你希望每张卡片上都含有一个相同的图片，例如一个公司 logo。</p><blockquote><p>先将图片文件重命名，并且一定以下划线开头（这非常重要），例如“_logo.jpg”</p></blockquote><p>在卡片的正面或背面模板添加该图片文件的引用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;_logo.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><p>不允许出现下述的表达（否则会失效 ）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&#123;&#123;Expression&#125;&#125;.jpg&gt;</span><br></pre></td></tr></table></figure><h3 id="Conditional-Replacement-条件替换"><a href="#Conditional-Replacement-条件替换" class="headerlink" title="Conditional Replacement (条件替换)"></a>Conditional Replacement (条件替换)</h3><p>举两个例子就可以解释了，第一个例子是在 “<strong>Expression</strong>“ Field 非空时显示 “<strong>Note</strong>“ Field 的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#Expression&#125;&#125;</span><br><span class="line">&#123;&#123;Note&#125;&#125;</span><br><span class="line">&#123;&#123;/Expression&#125;&#125;</span><br></pre></td></tr></table></figure><p>第二个例子是在 “<strong>Expression</strong>“ Field 为空时才显示 “<strong>Note</strong>“ Field 的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;^Expression&#125;&#125;</span><br><span class="line">&#123;&#123;Note&#125;&#125;</span><br><span class="line">&#123;&#123;/Expression&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>Basic (optional reversed card)</strong> 笔记类型中第二个 Card Type 就是使用了条件判断，来决定卡片正面的内容的，当卡片正面为空时 ，Anki 自然不会创建反转卡片 。</p><h3 id="Cloze-Templates-挖空模板"><a href="#Cloze-Templates-挖空模板" class="headerlink" title="Cloze Templates (挖空模板)"></a>Cloze Templates (挖空模板)</h3><p>Cloze 模板的卡片生成方式与 其他卡片的生成方式略微有所不同：</p><ul><li>  Anki 先在正面模板查看有没有像这样的 Cloze Replacements: {cloze:FieldName}</li><li>  再查找 FieldName 里面的 Cloze References，例如： { c1:text }</li><li>  生成卡片</li></ul><p>理解了这个后，再去查看 <strong>Cloze</strong> Note Type 下的 Templates 就可以看懂了。</p><h3 id="Browser-Appearance"><a href="#Browser-Appearance" class="headerlink" title="Browser Appearance"></a>Browser Appearance</h3><p>如果你的模板太复杂 ，可能每张卡片在 Browser 里显示时（Browser 里第一页会显示卡片的正面 ） ，你可以使用编辑页里 “<strong>Cards</strong>“ -&gt; “<strong>Options</strong>“ -&gt; “<strong>Browser Appearance</strong>“ 来自定义该卡片在浏览器里显示的内容 。</p><h3 id="Plarform-Specific-CSS"><a href="#Plarform-Specific-CSS" class="headerlink" title="Plarform-Specific CSS"></a>Plarform-Specific CSS</h3><p>略</p><h3 id="Installing-Fonts"><a href="#Installing-Fonts" class="headerlink" title="Installing Fonts"></a>Installing Fonts</h3><p>略</p><h3 id="Night-Mode"><a href="#Night-Mode" class="headerlink" title="Night Mode"></a>Night Mode</h3><p>略</p><h2 id="Peofiles-amp-Preferences-配置文件和首选项"><a href="#Peofiles-amp-Preferences-配置文件和首选项" class="headerlink" title="Peofiles &amp; Preferences (配置文件和首选项)"></a>Peofiles &amp; Preferences (配置文件和首选项)</h2><p>##Profiles (配置文件 )</p><p>如果有多个用户在一台电脑上使用 Anki，你可以为每个用户添加一个 Profile，也就是配置文件 ，配置文件里包含了该用户所有的信息 ，首选项、学习记录、媒体文件、卡片、同步账号……</p><p>在主页面点击 “<strong>File</strong>“ -&gt; “<strong>Switch Profile</strong>“，就可以切换配置文件了。</p><h3 id="Preferences-（首选项-）"><a href="#Preferences-（首选项-）" class="headerlink" title="Preferences （首选项 ）"></a>Preferences （首选项 ）</h3><p>首选项里面有三块，第一块是 Basic。里面可以切换语言 、第二个下拉框可以决定学习时 新卡片和复习卡片的显示顺序 、决定凌晨几点开始才属于第二天（对于熬夜学习的同学 很有用）</p><p><strong>Learn Ahead Limit</strong> 默认是 20，假如当你学习完了所有卡片以后，还有几张卡片本应当在再过十分钟左右显示 ，10&lt;20，那么 这些卡片就会直接继续显示 。</p><p><strong>Time Box</strong> 是一种将大块的学习时间分成小段的方技巧，比如一次只学 30 分钟 。如果你把它设成非零的数值比如 30 ，Anki 每过这么 30 分钟，就会提醒一下你在这段时间里学习了多少张卡片 。</p><h2 id="Deck-Option（记忆库-牌组-选项）"><a href="#Deck-Option（记忆库-牌组-选项）" class="headerlink" title="Deck Option（记忆库/牌组 选项）"></a>Deck Option（记忆库/牌组 选项）</h2><p>你可以在软件主窗口某个 Deck 的右边点击齿轮图标，选择 “<strong>Options</strong>“ 进入该 Deck 的 Option。</p><p>在上方的下拉框 ，你可以设定多个设置组，方便在不同学习阶段切换不同的学习设置 。默认只有一个 default。</p><p>在下方 你可以设置 Steps、每天学习的新卡片和复习卡片数量 。</p><blockquote><p>千万不要太兴奋 把每天学习新卡片的数量调到很多 ，假如你一天学习 20 个 ，当你的学习稳定后 ，每天应当复习的卡片数量就大概会是 200 个 。</p></blockquote><p><strong>Starting ease</strong> 数值 250%，代表当一张卡牌的难度 对你很简单的时候 ，每次复习间隔的时间 是上一次间隔时间的 2.5 倍 。</p><h3 id="Lapses"><a href="#Lapses" class="headerlink" title="Lapses"></a>Lapses</h3><p>当有一张 Revied 的卡片 被你忘记了 ，再次复习的时候你选择了 “Again”，我们就称这张卡片 Lapsed。首选项里有对应这种卡片的复习参数。</p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p><strong>Ignore answer times than</strong> 的默认数值是 60 秒，当你学习时，Anki 会记住你学习的时间 ，显示一张卡片，你超过 60 秒 没有回答 ，Anki 就认为你的注意力已经不在学习上了 ，会停止增加学习时间计时，这样就可以避免不准确的统计 。这个数值最小是 30 秒 。</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>这个里面允许你写下关于你这个 Deck 的描述，方便你分享 Deck 时 ，让别人通过这个 Description 了解这个 Deck 更多的信息 。</p><h2 id="AnkiWeb-and-Synchronization-（同步）"><a href="#AnkiWeb-and-Synchronization-（同步）" class="headerlink" title="AnkiWeb and Synchronization （同步）"></a>AnkiWeb and Synchronization （同步）</h2><p>AnkiWeb 是一个免费服务 ，你在上面注册上免费账号后 ，在电脑和手机端 等多个设备上登录 ，就可以进行同步 ，在手机上学习完 ，就可以将学习记录同步到电脑端 。</p><p>首次同步时 ，服务器上内容为空 ，Anki 会无法合并 AnkiWeb 上和本地的内容，你可以选择上传全部到云端。</p><p>默认每次打开和关闭软件时都会自动同步，如果你倾向于手动同步 ，可以在首选项里关闭自动同步 。</p><h3 id="Conflicts"><a href="#Conflicts" class="headerlink" title="Conflicts"></a>Conflicts</h3><p>大部分的操作都可以在同步时合并 ，但是如果你做了一些比较大的改动 ，例如修改模板 ，就无法进行合并同步 ，这时你可以选择从云端覆盖本地 ，或从本地覆盖云端 。</p><h3 id="同步速度慢"><a href="#同步速度慢" class="headerlink" title="同步速度慢"></a>同步速度慢</h3><p>由于某些众所周知的原因（如果你不知道，那最好别知道，多一事不如少一事），我国访问外国网站速度非常慢，而这个软件的云端 AnkiWeb 的服务器在日本，再加上是开源免费软件，服务器并不是很强大，在国内访问速度比蜗牛还慢，同步几 KB 的学习记录甚至要好几十秒，如果有图片和音频媒体文件要同步 ，那就更慢的要死。这个同步服务只能说是可以用，但会让人用着超级不爽 。可以说这也是阻碍 Anki 在国内传播的一个因素吧。</p><p>针对这种情况，有些人想出一些奇思妙招 ，比如通过手动从从电脑上导出文件 ，到手机上导入 ，再从手机上导出 ，传到电脑上导入 ，这哪里是略微麻烦，简直是太麻烦 ，而且还不能合并同步。又有的人就只用一台设备添加卡片和学习 。</p><p>但其实我认为最佳的使用方法是使用电脑专门用于录入笔记 （电脑在这方面优势很大 ），用手机在平时闲暇功夫复习 ，例如排队、等车的时候 。学习完后再一同步，一合并，多完美。</p><p>所以我在阿里云上租了一台服务器 ，搭建了一个同步服务 ，简单修改一下电脑端和手机端同步服务器的地址，就可以非常快速的同步。如果受不了官方的同步速度 ，联系我在服务器上开一个账户就 ok 了 (^_^)</p><p>搭建服务器和修改同步服务器地址的教程，我都发表在了一篇知乎文章上**《在阿里云上搭建 Anki 同步服务器（傻瓜化小白解决方案）》**。估计看的人也不会有几个。</p><h2 id="Browser-（浏览器）"><a href="#Browser-（浏览器）" class="headerlink" title="Browser （浏览器）"></a>Browser （浏览器）</h2><p>在软件主界面点击 Browse ，就可以打开浏览器了。左侧是筛选列表 ，右侧是 Cards 。右侧上边有一个搜索框 ，可以进行 高级筛选搜索 。选中一个卡牌，可以直接编辑 Note 的内容 ，点击右上角的 “<strong>Preview</strong>“ 按钮就可以进行预览 。</p><h3 id="Searching（高级搜索）"><a href="#Searching（高级搜索）" class="headerlink" title="Searching（高级搜索）"></a>Searching（高级搜索）</h3><p>关于搜索，当你的卡牌很多时，搜索有时就会很必要。下面关于搜索的描述我就不再翻译 ，因为其实都很简单 ，但没有必要刻意去记，需要某些 需要某些复杂的搜索条件时 ，查阅一下 User Guide 的搜索部分即可。</p><p>Above the card list is a search box. You can type in various things there to search for cards. (If you’d rather select what you’re looking for in a list, please take a look at the sidebar section above.)</p><h4 id="Simple-searches"><a href="#Simple-searches" class="headerlink" title="Simple searches"></a>Simple searches</h4><p>When you type some text into the search box, Anki finds matching notes and displays their cards. Anki searches in all fields of the notes, but does not search for tags (see later in this section for how to search for tags). Some examples:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dog</span><br><span class="line"></span><br><span class="line">search for &quot;dog&quot; - will match words like &quot;doggy&quot; and &quot;underdog&quot; too</span><br><span class="line"></span><br><span class="line">dog cat</span><br><span class="line"></span><br><span class="line">finds notes with both &quot;dog&quot; and &quot;cat&quot;, such as &quot;a dog and cat&quot;</span><br><span class="line"></span><br><span class="line">dog or cat</span><br><span class="line"></span><br><span class="line">finds notes with either &quot;dog&quot; or &quot;cat&quot;</span><br><span class="line"></span><br><span class="line">dog (cat or mouse)</span><br><span class="line"></span><br><span class="line">finds notes with dog and cat, or dog and mouse</span><br><span class="line"></span><br><span class="line">-cat</span><br><span class="line"></span><br><span class="line">finds notes without the word &quot;cat&quot;.</span><br><span class="line"></span><br><span class="line">-cat -mouse</span><br><span class="line"></span><br><span class="line">finds notes with neither &quot;cat&quot; nor &quot;mouse&quot;.</span><br><span class="line"></span><br><span class="line">-(cat or mouse)</span><br><span class="line"></span><br><span class="line">same as the above.</span><br><span class="line"></span><br><span class="line">&quot;a dog&quot;</span><br><span class="line"></span><br><span class="line">finds notes with the exact phrase &quot;a dog&quot; on them</span><br><span class="line"></span><br><span class="line">-&quot;a dog&quot;</span><br><span class="line"></span><br><span class="line">finds notes without the exact phrase &quot;a dog&quot;</span><br><span class="line"></span><br><span class="line">d_g</span><br><span class="line"></span><br><span class="line">finds notes with d, a letter, g, like dog, dig, dug, and so on.</span><br><span class="line"></span><br><span class="line">d*g</span><br><span class="line"></span><br><span class="line">finds notes with d, &lt;zero or more letters&gt;, g, like dg, dog, dung, etc.</span><br></pre></td></tr></table></figure><p>Things to note from the above:</p><p>Search terms are separated by spaces.</p><p>When multiple search terms are provided, Anki looks for notes that match all of the terms.</p><p>You can use “or” if you only need one of the terms to match.</p><p>You can prepend a minus sign to a term to find notes that don’t match.</p><p>If you want to search for something including a space or parenthesis, enclose it in quotes.</p><p>You can group search terms by placing them in parentheses, as in the dog (cat or mouse) example. This becomes important when combining OR and AND searches — in the example, with the parentheses, it matches either dog cat or dog mouse, whereas without them it would match either dog and cat or mouse.</p><p>Anki is only able to search within formatting in the sort field you’ve configured. For example, if you add “example” to one of your fields, this will not be matched when searching for “example” unless that field is the sort field. If a word is not formatted, or the formatting does not change in the middle of the word, then Anki will be able to find it in any field.</p><h4 id="Limiting-to-a-field"><a href="#Limiting-to-a-field" class="headerlink" title="Limiting to a field"></a>Limiting to a field</h4><p>You can also ask Anki to match only if a particular field contains some text. Unlike the searches above, searching on fields requires an exact match by default.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">front:dog</span><br><span class="line"></span><br><span class="line">find notes with a Front field of exactly &quot;dog&quot;. A field that says &quot;a dog&quot; will not match.</span><br><span class="line"></span><br><span class="line">front:*dog*</span><br><span class="line"></span><br><span class="line">find notes with Front field containing dog somewhere</span><br><span class="line"></span><br><span class="line">front:</span><br><span class="line"></span><br><span class="line">find notes that have an empty Front field</span><br><span class="line"></span><br><span class="line">front:_*</span><br><span class="line"></span><br><span class="line">find notes that have a non-empty Front field</span><br><span class="line"></span><br><span class="line">front:*</span><br><span class="line"></span><br><span class="line">find notes that have a Front field, empty or not</span><br><span class="line"></span><br><span class="line">Tags, decks, cards and notes</span><br><span class="line"></span><br><span class="line">tag:animal</span><br><span class="line"></span><br><span class="line">find notes with the tag &quot;animal&quot;</span><br><span class="line"></span><br><span class="line">tag:none</span><br><span class="line"></span><br><span class="line">find notes with no tags</span><br><span class="line"></span><br><span class="line">tag:ani*</span><br><span class="line"></span><br><span class="line">find notes with tags starting with ani</span><br><span class="line"></span><br><span class="line">deck:french</span><br><span class="line"></span><br><span class="line">find cards in a French deck, or subdecks like French::Vocab</span><br><span class="line"></span><br><span class="line">deck:french -deck:french::*</span><br><span class="line"></span><br><span class="line">find cards in French, but not subdecks</span><br><span class="line"></span><br><span class="line">deck:&quot;french vocab&quot;</span><br><span class="line"></span><br><span class="line">searching when a deck has a space</span><br><span class="line"></span><br><span class="line">&quot;deck:french vocab&quot;</span><br><span class="line"></span><br><span class="line">also ok</span><br><span class="line"></span><br><span class="line">deck:filtered</span><br><span class="line"></span><br><span class="line">filtered decks only</span><br><span class="line"></span><br><span class="line">-deck:filtered</span><br><span class="line"></span><br><span class="line">normal decks only</span><br><span class="line"></span><br><span class="line">card:forward</span><br><span class="line"></span><br><span class="line">search for Forward cards</span><br><span class="line"></span><br><span class="line">card:1</span><br><span class="line"></span><br><span class="line">search for cards by template number - eg, to find the second cloze deletion for a note, you’d use card:2</span><br><span class="line"></span><br><span class="line">note:basic</span><br><span class="line"></span><br><span class="line">search for cards with a Basic note type</span><br><span class="line"></span><br><span class="line">Card state</span><br><span class="line"></span><br><span class="line">is:due</span><br><span class="line"></span><br><span class="line">review cards and learning cards waiting to be studied</span><br><span class="line"></span><br><span class="line">is:new</span><br><span class="line"></span><br><span class="line">new cards</span><br><span class="line"></span><br><span class="line">is:learn</span><br><span class="line"></span><br><span class="line">cards in learning</span><br><span class="line"></span><br><span class="line">is:review</span><br><span class="line"></span><br><span class="line">reviews (both due and not due) and lapsed cards</span><br><span class="line"></span><br><span class="line">is:suspended</span><br><span class="line"></span><br><span class="line">cards that have been manually suspended</span><br><span class="line"></span><br><span class="line">is:buried</span><br><span class="line"></span><br><span class="line">cards that have been buried, either automatically or manually</span><br><span class="line"></span><br><span class="line">Cards that have lapsed fall into several of these categories, so it may be useful to combine them to get more precise results:</span><br><span class="line"></span><br><span class="line">is:learn is:review</span><br><span class="line"></span><br><span class="line">cards that have lapsed and are awaiting relearning</span><br><span class="line"></span><br><span class="line">-is:learn is:review</span><br><span class="line"></span><br><span class="line">review cards, not including lapsed cards</span><br><span class="line"></span><br><span class="line">is:learn -is:review</span><br><span class="line"></span><br><span class="line">cards that are in learning for the first time</span><br><span class="line"></span><br><span class="line">Card properties</span><br><span class="line"></span><br><span class="line">prop:ivl&gt;=10</span><br><span class="line"></span><br><span class="line">cards with interval of 10 days or more</span><br><span class="line"></span><br><span class="line">prop:due=1</span><br><span class="line"></span><br><span class="line">cards due tomorrow</span><br><span class="line"></span><br><span class="line">prop:due=-1</span><br><span class="line"></span><br><span class="line">cards due yesterday that haven’t been answered yet</span><br><span class="line"></span><br><span class="line">prop:due&gt;-1 prop:due&lt;1</span><br><span class="line"></span><br><span class="line">cards due between yesterday and tomorrow</span><br><span class="line"></span><br><span class="line">prop:reps&lt;10</span><br><span class="line"></span><br><span class="line">cards that have been answered less than 10 times</span><br><span class="line"></span><br><span class="line">prop:lapses&gt;3</span><br><span class="line"></span><br><span class="line">cards that have moved into relearning more than 3 times</span><br><span class="line"></span><br><span class="line">prop:ease!=2.5</span><br><span class="line"></span><br><span class="line">cards easier or harder than default</span><br><span class="line"></span><br><span class="line">Note that due only matches review cards and learning cards with an interval of a day or more: cards in learning with small intervals like 10 minutes are not included.</span><br><span class="line"></span><br><span class="line">Recently added</span><br><span class="line"></span><br><span class="line">added:1</span><br><span class="line"></span><br><span class="line">cards added today</span><br><span class="line"></span><br><span class="line">added:7</span><br><span class="line"></span><br><span class="line">cards added in last week</span><br><span class="line"></span><br><span class="line">The check is made against card creation time rather than note creation time, so cards that were generated within the time frame will be included even if their notes were added a long time ago.</span><br><span class="line"></span><br><span class="line">Recently answered</span><br><span class="line"></span><br><span class="line">rated:1</span><br><span class="line"></span><br><span class="line">cards answered today</span><br><span class="line"></span><br><span class="line">rated:1:2</span><br><span class="line"></span><br><span class="line">cards answered Hard (2) today</span><br><span class="line"></span><br><span class="line">rated:7:1</span><br><span class="line"></span><br><span class="line">cards answered Again (1) over the last 7 days</span><br><span class="line"></span><br><span class="line">rated:31:4</span><br><span class="line"></span><br><span class="line">cards answered Easy (4) in the last month</span><br><span class="line"></span><br><span class="line">For speed, rating searches are limited to 31 days.</span><br><span class="line"></span><br><span class="line">Object IDs</span><br><span class="line"></span><br><span class="line">nid:123</span><br><span class="line"></span><br><span class="line">all cards of the note with note id 123</span><br><span class="line"></span><br><span class="line">cid:123</span><br><span class="line"></span><br><span class="line">the card with card id 123</span><br><span class="line"></span><br><span class="line">mid:123</span><br><span class="line"></span><br><span class="line">find note types with note type id 123</span><br><span class="line"></span><br><span class="line">Note and card IDs can be found in the card info dialog in the browser. Note type IDs can be found by clicking on a note type in the Browse screen. These searches may also be helpful when doing add-on development or otherwise working closely with the database.</span><br></pre></td></tr></table></figure><blockquote><p>Note: Object IDs will not work in the mobile clients, and are not intended to be used in filtered decks at the moment.</p></blockquote><h2 id="Filtered-Decks-amp-Cramming-筛选卡片和死记硬背"><a href="#Filtered-Decks-amp-Cramming-筛选卡片和死记硬背" class="headerlink" title="Filtered Decks &amp; Cramming (筛选卡片和死记硬背)"></a>Filtered Decks &amp; Cramming (筛选卡片和死记硬背)</h2><p>Filtered Decks 是一个非常有用的功能，通过一定的搜索条件 ，将符合条件的 Cards 从原本的 Decks 抽取出来 ，放到一个 Filtered Deck 单独学习，每张 Card 会在学习完成后会携带着学习记录，自动被放回到原来的 Decks ，你也可以删掉这个 Filtered Deck，里面的 Cards 同样会自动回到原来的 Decks 。</p><p>这个功能对于考试前的综合大复习等等情况非常有用！</p><h2 id="Leeches-老是忘的-Notes"><a href="#Leeches-老是忘的-Notes" class="headerlink" title="Leeches (老是忘的 Notes)"></a>Leeches (老是忘的 Notes)</h2><p>Leeches 是你经常忘记的卡片，他们需要比其他卡片花更多的时间来复习 。</p><p>可以帮助你辨别哪些是 ，每次你复习的时候 Lapses（点击了 “<strong>Again</strong>“ ），就会计数一次 ，当计数达到 8 时 ，这条 Note 就会被加上 <strong>leech</strong> 的标签 ，并且这张卡片被 Suspend ，这个阈值可以在 Deck Options 里面修改 。</p><p>每过阈值一半数量的 Lapses ，Anki 就会提醒一次你的 Leeches。</p><p>只要你找到了 Leech ，处理它的方法就多了去了。</p><h2 id="批量导入导出"><a href="#批量导入导出" class="headerlink" title="批量导入导出"></a>批量导入导出</h2><p>略。。。(▼ 皿 ▼#)</p><h2 id="Managing-Files-and-Your-Collection-管理你的学习文件"><a href="#Managing-Files-and-Your-Collection-管理你的学习文件" class="headerlink" title="Managing Files and Your Collection (管理你的学习文件)"></a>Managing Files and Your Collection (管理你的学习文件)</h2><p>为什么要有这样一章？其实这一章的内容还不少 ，不过我都把不会用到的地方给省略了。</p><h3 id="检查数据库"><a href="#检查数据库" class="headerlink" title="检查数据库"></a>检查数据库</h3><p>当你的 Collection 意外地出现了问题 ，可以使用 “<strong>Tool</strong>“ -&gt; “<strong>Check Database</strong>“ 功能来优化数据库。</p><p>比如你删除了一些 Notes ，会留下一些空的 Tags ，为了防止数据丢失 ， Anki 并不会自动删除这些空 Tags ，而当你检查数据库的时候 ，空 Tags 就会被优化清理掉 。</p><h3 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h3><p>在 WINDOWS 电脑上 ，打开 文件管理器 ，在地址栏输入 <code>%APPDATA%\Anki2</code>，就可以定位到你的学习文件存储位置。</p><h3 id="把-Anki-装在-U-盘上"><a href="#把-Anki-装在-U-盘上" class="headerlink" title="把 Anki 装在 U 盘上"></a>把 Anki 装在 U 盘上</h3><p>如果你希望随时随地找到一台电脑都可以用 Anki，你可能想把它装在 U 盘上 。这个操作会有点复杂 ，建议需要的时候查看官方用户指南 。就不翻译了。</p><h2 id="Graphs-and-Statics-（图表和统计）"><a href="#Graphs-and-Statics-（图表和统计）" class="headerlink" title="Graphs and Statics （图表和统计）"></a>Graphs and Statics （图表和统计）</h2><p>你所有的学习过程 、学习结果的好坏，Anki 都会帮你记下来 作为统计数据 （只有你能看到 ），在软件主页面点击 “<strong>Stats</strong>” 就可以看到统计图标，里面各个名词的具体意思 我就不再翻译了</p><ul><li>  一来用处不大</li><li>  二来基本上都可以直观理解</li><li>  三来你都看到这里了 ，遇到我没有翻译的 不懂的的地方应该有能力去看下官方文档了</li></ul><h2 id="Latex-支持"><a href="#Latex-支持" class="headerlink" title="Latex 支持"></a>Latex 支持</h2><p>略</p><h2 id="Miacellanea-杂录"><a href="#Miacellanea-杂录" class="headerlink" title="Miacellanea (杂录)"></a>Miacellanea (杂录)</h2><p>略</p><h2 id="Add-on-插件"><a href="#Add-on-插件" class="headerlink" title="Add-on (插件)"></a>Add-on (插件)</h2><p>略</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>略（大部分是关于学习的，例如过了一个月没有学习 ，该怎么办等等。Anki 会帮你处理的。）</p><p>翻译一个有意思的地方吧：</p><h3 id="为什么安卓桌免费而苹果端收费？"><a href="#为什么安卓桌免费而苹果端收费？" class="headerlink" title="为什么安卓桌免费而苹果端收费？"></a>为什么安卓桌免费而苹果端收费？</h3><p>开发者的回答：<code>开发 Anki 是我现在的全职工作 ，我也需要一份收入来支持 ，所以只能依赖在苹果端的收入来支持开发。 安卓端的 AnkiDroid 是一群志愿者基于我的一个免费桌面版本开发的，并且支持 AnkiWeb 同步，他们也决定让这个软件免费。</code></p><p>我忘记从哪里看到了 ，作者曾解释了为什么苹果专要收费 160 元 ，其实刚开始的时候定价是不高的 ，但是这个软件需要一定的学习成本 ，许多人在 App Store 见着便宜买了以后 ，没有花精力学习 ，就觉得这软件特别难用 ，不值得花几块钱买 ，于是就给了差评 ，拉低拉软件的评分 ，所以作者干脆把价格调得很高 ，通过价格筛选用户 ，没有认识到 Anki 价值的人是不会花这么多钱买这个软件的，从而也就避免了大量的差评，保护了软件评分。</p><p>至此，这篇 20000 多字的中文 Anki 教程就完结撒花了！</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anki基础-基本概念</title>
      <link href="/posts/2022/11/a89d4e23.html"/>
      <url>/posts/2022/11/a89d4e23.html</url>
      
        <content type="html"><![CDATA[<p>要高效利用anki这个神器学习，需要知道几个基本概念：</p><ul><li>card</li><li>note</li><li>field</li><li>card type</li><li>note type</li><li>deck</li><li>collection</li><li>card</li></ul><p>对应一张分为正面Q和反面A的卡片。</p><ul><li>note</li></ul><p>对应一则信息。anki要做的，正是要把一则信息，转化为一张或多张卡片，方便用户记忆和学习。对应于这个转化过程的需要，故引入以下几个延伸的概念。</p><span id="more"></span><ul><li>field</li></ul><p>将一条note结构化，分成几个field。比如，最简单的分法是分为两部分：问题Q和答案A。这个结构化的过程很重要，使零散的信息变得有条理，变得井然有序，不仅能加深对信息的理解，拆解信息本身也能促进记忆。</p><ul><li>card type</li></ul><p>一条note的各个field最终要展示到card上，展示的方式由card type控制。card type实际上是一个模板，需要field的地方用对应的占位符填充。</p><ul><li>note type</li></ul><p>一条note要拆解成哪几个field，展示方式（card type）有哪几种，是由note type控制的。如果card type有多个，那么一条note最终转化出的card会有多个。一条note必须有对应的一个note type。</p><ul><li>deck</li></ul><p>简单的deck就是一系列card的集合，相当于把一堆卡片放在一起，方便做记忆计划。当然也有复杂点的deck，就是一个deck包含了另一个subdeck，构成父子关系，形成嵌套结构。</p><ul><li>collection</li></ul><p>以上所有东西，集合到一起就构成了collection。可以将一个collection整体打包保存和发送，这是为了方便用户备份和迁移。</p><p>厘清了以上这些基础概念，也就理解了anki这个软件的设计逻辑。而只有了解了anki整个逻辑，才能更高效地使用它，在学习上事半功倍。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anki如何设置三个时间间隔？</title>
      <link href="/posts/2022/11/d3ff87f2.html"/>
      <url>/posts/2022/11/d3ff87f2.html</url>
      
        <content type="html"><![CDATA[<p>底部的三个时间如何设置呢，怎么样的时间间隔才算合理？</p><p><img src="https://pic3.zhimg.com/v2-b7bdd4796870f4d92c372571113b0492_b.jpg"></p><p>这三个时间间隔是由 Anki 的安排算法计算得出的。</p><span id="more"></span><p>关于 Anki 算法的通俗介绍可以看这篇文章：</p><p><a href="https://zhuanlan.zhihu.com/p/42921090">叶峻峣：Anki 算法与术语浅谈</a></p><p>嫌简单？那继续往下看吧！</p><hr><h2 id="Anki-术语"><a href="#Anki-术语" class="headerlink" title="Anki 术语"></a><strong>Anki 术语</strong></h2><h3 id="新卡片"><a href="#新卡片" class="headerlink" title="新卡片"></a><strong>新卡片</strong></h3><p>graduating interval: 新卡片学习以 ‘Good’ 结束后进入复习阶段的第一个间隔</p><p>easy interval: 新卡片学习以 ‘Easy’ 结束后进入复习阶段的第一个间隔</p><p>starting ease: 初始间隔基数，默认 250%</p><h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a><strong>复习</strong></h3><p>easy bonus: 简单奖励系数，默认 130%</p><p>interval modifier: 间隔系数修饰，默认 100%</p><p>maximum interval: 最大间隔</p><p>hard interval: ‘Hard’ 间隔系数，默认为 120%</p><h3 id="遗忘"><a href="#遗忘" class="headerlink" title="遗忘"></a><strong>遗忘</strong></h3><p>new interval: 遗忘间隔系数</p><p>minimum interval: 遗忘最小间隔</p><p>leech threshold: 顽固卡片遗忘次数门槛</p><p>leech action: 对顽固卡片的处理</p><h2 id="Anki-算法"><a href="#Anki-算法" class="headerlink" title="Anki 算法"></a><strong>Anki 算法</strong></h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><p>间隔系数 = <a href="https://www.zhihu.com/search?q=%E5%88%9D%E5%A7%8B%E9%97%B4%E9%9A%94%E5%9F%BA%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1408959119%7D">初始间隔基数</a>​，默认为 250%</p><h3 id="again-重来"><a href="#again-重来" class="headerlink" title="again/重来"></a><strong>again/重来</strong></h3><p>新间隔 = 上次规划间隔 * 遗忘间隔系数</p><p>间隔系数减少 20%</p><h3 id="hard-困难"><a href="#hard-困难" class="headerlink" title="hard/困难"></a><strong>hard/困难</strong></h3><p>新间隔 = 上次规划间隔 * ‘Hard’ 间隔系数</p><p>间隔系数减少 15%</p><h3 id="good-一般"><a href="#good-一般" class="headerlink" title="good/一般"></a><strong>good/一般</strong></h3><p>新间隔 = (上次规划间隔 + 延迟 ) * 间隔系数</p><p>间隔系数不变</p><h3 id="easy-简单"><a href="#easy-简单" class="headerlink" title="easy/简单"></a><strong>easy/简单</strong></h3><p>新间隔 = (上次规划间隔 + 延迟) * 间隔系数 * 简单奖励系数</p><p>间隔系数增加 15%</p><h3 id="early-提早"><a href="#early-提早" class="headerlink" title="early/提早"></a><strong>early/提早</strong></h3><p>新间隔 = (上次规划间隔 - 提早) * 间隔系数 * 提早奖励系数</p><p><a href="https://www.zhihu.com/search?q=%E6%8F%90%E6%97%A9%E5%A5%96%E5%8A%B1%E7%B3%BB%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1408959119%7D">提早奖励系数</a> = (简单奖励系数 - 100%) / 2 + 100%</p><p>间隔系数由具体选项确定</p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a><strong>通用</strong></h3><p><a href="https://www.zhihu.com/search?q=%E8%A7%84%E5%88%92%E9%97%B4%E9%9A%94&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1408959119%7D">规划间隔</a> = 新间隔 ​* 间隔系数修饰</p><h2 id="code-代码"><a href="#code-代码" class="headerlink" title="code/代码"></a><strong>code/代码</strong></h2><pre><code>    def _rescheduleRev(self, card: Card, ease: int, early: bool) -&gt; None:        # update interval        card.lastIvl = card.ivl        if early:            self._updateEarlyRevIvl(card, ease)        else:            self._updateRevIvl(card, ease)        # then the rest        card.factor = max(1300, card.factor + [-150, 0, 150][ease - 2])        card.due = self.today + card.ivl        # card leaves filtered deck        self._removeFromFiltered(card)            def _nextRevIvl(self, card: Card, ease: int, fuzz: bool) -&gt; int:        &quot;Next review interval for CARD, given EASE.&quot;        delay = self._daysLate(card)        conf = self._revConf(card)        fct = card.factor / 1000        hardFactor = conf.get(&quot;hardFactor&quot;, 1.2)        if hardFactor &gt; 1:            hardMin = card.ivl        else:            hardMin = 0        ivl2 = self._constrainedIvl(card.ivl * hardFactor, conf, hardMin, fuzz)        if ease == BUTTON_TWO:            return ivl2        ivl3 = self._constrainedIvl((card.ivl + delay // 2) * fct, conf, ivl2, fuzz)        if ease == BUTTON_THREE:            return ivl3        ivl4 = self._constrainedIvl(            (card.ivl + delay) * fct * conf[&quot;ease4&quot;], conf, ivl3, fuzz        )        return ivl4</code></pre><p>以上就是 Anki 算法的介绍。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki卡牌数据结构和关键配置</title>
      <link href="/posts/2022/11/284ccda.html"/>
      <url>/posts/2022/11/284ccda.html</url>
      
        <content type="html"><![CDATA[<p>以下Anki卡牌数据结构和关键配置信息是采集自Github，记录到这里方便查看。</p><span id="more"></span><h3 id="Cards"><a href="#Cards" class="headerlink" title="Cards"></a>Cards</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- Cards are what you review. </span><br><span class="line">-- There can be multiple cards for each note, as determined by the Template.</span><br><span class="line">CREATE TABLE cards (</span><br><span class="line">    id              integer primary key,</span><br><span class="line">      -- the epoch milliseconds of when the card was created</span><br><span class="line">    nid             integer not null,--    </span><br><span class="line">      -- notes.id</span><br><span class="line">    did             integer not null,</span><br><span class="line">      -- deck id (available in col table)</span><br><span class="line">    ord             integer not null,</span><br><span class="line">      -- ordinal : identifies which of the card templates or cloze deletions it corresponds to </span><br><span class="line">      --   for card templates, valid values are from 0 to num templates - 1</span><br><span class="line">      --   for cloze deletions, valid values are from 0 to max cloze index - 1 (they&#x27;re 0 indexed despite the first being called `c1`)</span><br><span class="line">    mod             integer not null,</span><br><span class="line">      -- modification time as epoch seconds</span><br><span class="line">    usn             integer not null,</span><br><span class="line">      -- update sequence number : used to figure out diffs when syncing. </span><br><span class="line">      --   value of -1 indicates changes that need to be pushed to server. </span><br><span class="line">      --   usn &lt; server usn indicates changes that need to be pulled from server.</span><br><span class="line">    type            integer not null,</span><br><span class="line">      -- 0=new, 1=learning, 2=review, 3=relearning</span><br><span class="line">    queue           integer not null,</span><br><span class="line">      -- -3=user buried(In scheduler 2),</span><br><span class="line">      -- -2=sched buried (In scheduler 2), </span><br><span class="line">      -- -2=buried(In scheduler 1),</span><br><span class="line">      -- -1=suspended,</span><br><span class="line">      -- 0=new, 1=learning, 2=review (as for type)</span><br><span class="line">      -- 3=in learning, next rev in at least a day after the previous review</span><br><span class="line">      -- 4=preview</span><br><span class="line">    due             integer not null,</span><br><span class="line">     -- Due is used differently for different card types: </span><br><span class="line">     --   new: note id or random int</span><br><span class="line">     --   due: integer day, relative to the collection&#x27;s creation time</span><br><span class="line">     --   learning: integer timestamp in second</span><br><span class="line">    ivl             integer not null,</span><br><span class="line">      -- interval (used in SRS algorithm). Negative = seconds, positive = days</span><br><span class="line">    factor          integer not null,</span><br><span class="line">      -- The ease factor of the card in permille (parts per thousand). If the ease factor is 2500, the card’s interval will be multiplied by 2.5 the next time you press Good.</span><br><span class="line">    reps            integer not null,</span><br><span class="line">      -- number of reviews</span><br><span class="line">    lapses          integer not null,</span><br><span class="line">      -- the number of times the card went from a &quot;was answered correctly&quot; </span><br><span class="line">      --   to &quot;was answered incorrectly&quot; state</span><br><span class="line">    left            integer not null,</span><br><span class="line">      -- of the form a*1000+b, with:</span><br><span class="line">      -- a the number of reps left today</span><br><span class="line">      -- b the number of reps left till graduation</span><br><span class="line">      -- for example: &#x27;2004&#x27; means 2 reps left today and 4 reps till graduation</span><br><span class="line">    odue            integer not null,</span><br><span class="line">      -- original due: In filtered decks, it&#x27;s the original due date that the card had before moving to filtered.</span><br><span class="line">                    -- If the card lapsed in scheduler1, then it&#x27;s the value before the lapse. (This is used when switching to scheduler 2. At this time, cards in learning becomes due again, with their previous due date)</span><br><span class="line">                    -- In any other case it&#x27;s 0.</span><br><span class="line">    odid            integer not null,</span><br><span class="line">      -- original did: only used when the card is currently in filtered deck</span><br><span class="line">    flags           integer not null,</span><br><span class="line">      -- an integer. This integer mod 8 represents a &quot;flag&quot;, which can be see in browser and while reviewing a note. Red 1, Orange 2, Green 3, Blue 4, no flag: 0. This integer divided by 8 represents currently nothing</span><br><span class="line">    data            text not null</span><br><span class="line">      -- currently unused</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- col contains a single row that holds various information about the collection</span><br><span class="line">CREATE TABLE col (</span><br><span class="line">    id              integer primary key,</span><br><span class="line">      -- arbitrary number since there is only one row</span><br><span class="line">    crt             integer not null,</span><br><span class="line">      -- timestamp of the creation date in second. It&#x27;s correct up to the day. For V1 scheduler, the hour corresponds to starting a new day. By default, new day is 4.</span><br><span class="line">    mod             integer not null,</span><br><span class="line">      -- last modified in milliseconds</span><br><span class="line">    scm             integer not null,</span><br><span class="line">      -- schema mod time: time when &quot;schema&quot; was modified. </span><br><span class="line">      --   If server scm is different from the client scm a full-sync is required</span><br><span class="line">    ver             integer not null,</span><br><span class="line">      -- version</span><br><span class="line">    dty             integer not null,</span><br><span class="line">      -- dirty: unused, set to 0</span><br><span class="line">    usn             integer not null,</span><br><span class="line">      -- update sequence number: used for finding diffs when syncing. </span><br><span class="line">      --   See usn in cards table for more details.</span><br><span class="line">    ls              integer not null,</span><br><span class="line">      -- &quot;last sync time&quot;</span><br><span class="line">    conf            text not null,</span><br><span class="line">      -- json object containing configuration options that are synced. Described below in &quot;configuration JSONObjects&quot;</span><br><span class="line">    models          text not null,</span><br><span class="line">      -- json object of json object(s) representing the models (aka Note types) </span><br><span class="line">      -- keys of this object are strings containing integers: &quot;creation time in epoch milliseconds&quot; of the models</span><br><span class="line">      -- values of this object are other json objects of the form described below in &quot;Models JSONObjects&quot;</span><br><span class="line">    decks           text not null,</span><br><span class="line">      -- json object of json object(s) representing the deck(s)</span><br><span class="line">      -- keys of this object are strings containing integers: &quot;deck creation time in epoch milliseconds&quot; for most decks, &quot;1&quot; for the default deck</span><br><span class="line">      -- values of this object are other json objects of the form described below in &quot;Decks JSONObjects&quot;</span><br><span class="line">    dconf           text not null,</span><br><span class="line">      -- json object of json object(s) representing the options group(s) for decks</span><br><span class="line">      -- keys of this object are strings containing integers: &quot;options group creation time in epoch milliseconds&quot; for most groups, &quot;1&quot; for the default option group</span><br><span class="line">      -- values of this object are other json objects of the form described below in &quot;DConf JSONObjects&quot;</span><br><span class="line">    tags            text not null</span><br><span class="line">      -- a cache of tags used in the collection (This list is displayed in the browser. Potentially at other place)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Graves"><a href="#Graves" class="headerlink" title="Graves"></a>Graves</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- Contains deleted cards, notes, and decks that need to be synced. </span><br><span class="line">-- usn should be set to -1, </span><br><span class="line">-- oid is the original id.</span><br><span class="line">-- type: 0 for a card, 1 for a note and 2 for a deck</span><br><span class="line">CREATE TABLE graves (</span><br><span class="line">    usn             integer not null,</span><br><span class="line">    oid             integer not null,</span><br><span class="line">    type            integer not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- Notes contain the raw information that is formatted into a number of cards</span><br><span class="line">-- according to the models</span><br><span class="line">CREATE TABLE notes (</span><br><span class="line">    id              integer primary key,</span><br><span class="line">      -- epoch milliseconds of when the note was created</span><br><span class="line">    guid            text not null,</span><br><span class="line">      -- globally unique id, almost certainly used for syncing</span><br><span class="line">    mid             integer not null,</span><br><span class="line">      -- model id</span><br><span class="line">    mod             integer not null,</span><br><span class="line">      -- modification timestamp, epoch seconds</span><br><span class="line">    usn             integer not null,</span><br><span class="line">      -- update sequence number: for finding diffs when syncing.</span><br><span class="line">      --   See the description in the cards table for more info</span><br><span class="line">    tags            text not null,</span><br><span class="line">      -- space-separated string of tags. </span><br><span class="line">      --   includes space at the beginning and end, for LIKE &quot;% tag %&quot; queries</span><br><span class="line">    flds            text not null,</span><br><span class="line">      -- the values of the fields in this note. separated by 0x1f (31) character.</span><br><span class="line">    sfld            integer not null,</span><br><span class="line">      -- sort field: used for quick sorting and duplicate check. The sort field is an integer so that when users are sorting on a field that contains only numbers, they are sorted in numeric instead of lexical order. Text is stored in this integer field.</span><br><span class="line">    csum            integer not null,</span><br><span class="line">      -- field checksum used for duplicate check.</span><br><span class="line">      --   integer representation of first 8 digits of sha1 hash of the first field</span><br><span class="line">    flags           integer not null,</span><br><span class="line">      -- unused</span><br><span class="line">    data            text not null</span><br><span class="line">      -- unused</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Review-Log"><a href="#Review-Log" class="headerlink" title="Review Log"></a>Review Log</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- revlog is a review history; it has a row for every review you&#x27;ve ever done!</span><br><span class="line">CREATE TABLE revlog (</span><br><span class="line">    id              integer primary key,</span><br><span class="line">       -- epoch-milliseconds timestamp of when you did the review</span><br><span class="line">    cid             integer not null,</span><br><span class="line">       -- cards.id</span><br><span class="line">    usn             integer not null,</span><br><span class="line">        -- update sequence number: for finding diffs when syncing. </span><br><span class="line">        --   See the description in the cards table for more info</span><br><span class="line">    ease            integer not null,</span><br><span class="line">       -- which button you pushed to score your recall. </span><br><span class="line">       -- review:  1(wrong), 2(hard), 3(ok), 4(easy)</span><br><span class="line">       -- learn/relearn:   1(wrong), 2(ok), 3(easy)</span><br><span class="line">    ivl             integer not null,</span><br><span class="line">       -- interval (i.e. as in the card table)</span><br><span class="line">    lastIvl         integer not null,</span><br><span class="line">       -- last interval (i.e. the last value of ivl. Note that this value is not necessarily equal to the actual interval between this review and the preceding review)</span><br><span class="line">    factor          integer not null,</span><br><span class="line">      -- factor</span><br><span class="line">    time            integer not null,</span><br><span class="line">       -- how many milliseconds your review took, up to 60000 (60s)</span><br><span class="line">    type            integer not null</span><br><span class="line">       --  0=learn, 1=review, 2=relearn, 3=cram</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Indexes"><a href="#Indexes" class="headerlink" title="Indexes"></a>Indexes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX ix_cards_nid on cards (nid);</span><br><span class="line">CREATE INDEX ix_cards_sched on cards (did, queue, due);</span><br><span class="line">CREATE INDEX ix_cards_usn on cards (usn);</span><br><span class="line">CREATE INDEX ix_notes_csum on notes (csum);</span><br><span class="line">CREATE INDEX ix_notes_usn on notes (usn);</span><br><span class="line">CREATE INDEX ix_revlog_cid on revlog (cid);</span><br><span class="line">CREATE INDEX ix_revlog_usn on revlog (usn);</span><br></pre></td></tr></table></figure><h3 id="Models-JSONObjects"><a href="#Models-JSONObjects" class="headerlink" title="Models JSONObjects"></a>Models JSONObjects</h3><p>Here is an annotated description of the JSONObjects in the models field of the col table. Each object is the value of a key that’s a model id (epoch time in milliseconds):</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;model id (epoch time in milliseconds)&quot; :</span><br><span class="line">  &#123;</span><br><span class="line">    css : &quot;CSS, shared for all templates&quot;,</span><br><span class="line">    did :</span><br><span class="line">        &quot;Long specifying the id of the deck that cards are added to by default&quot;,</span><br><span class="line">    flds : [</span><br><span class="line">             &quot;JSONArray containing object for each field in the model as follows:&quot;,</span><br><span class="line">             &#123;</span><br><span class="line">               font : &quot;display font&quot;,</span><br><span class="line">               media : &quot;array of media. appears to be unused&quot;,</span><br><span class="line">               name : &quot;field name&quot;,</span><br><span class="line">               ord : &quot;ordinal of the field - goes from 0 to num fields -1&quot;,</span><br><span class="line">               rtl : &quot;boolean, right-to-left script&quot;,</span><br><span class="line">               size : &quot;font size&quot;,</span><br><span class="line">               sticky : &quot;sticky fields retain the value that was last added </span><br><span class="line">                           when adding new notes&quot;</span><br><span class="line">             &#125;</span><br><span class="line">           ],</span><br><span class="line">    id : &quot;model ID, matches notes.mid&quot;,</span><br><span class="line">    latexPost : &quot;String added to end of LaTeX expressions (usually \\end&#123;document&#125;)&quot;,</span><br><span class="line">    latexPre : &quot;preamble for LaTeX expressions&quot;,</span><br><span class="line">    mod : &quot;modification time in seconds&quot;,</span><br><span class="line">    name : &quot;model name&quot;,</span><br><span class="line">    req : [</span><br><span class="line">            &quot;req is unused in modern clients. May exist for backwards compatibility. </span><br><span class="line">             https://forums.ankiweb.net/t/is-req-still-used-or-present/9977</span><br><span class="line">             AnkiDroid 2.14 uses it, AnkiDroid 2.15 does not use it but still generates it.</span><br><span class="line">             Array of arrays describing, for each template T, which fields are required to generate T.</span><br><span class="line">             The array is of the form [T,string,list], where:</span><br><span class="line">             -  T is the ordinal of the template. </span><br><span class="line">             - The string is &#x27;none&#x27;, &#x27;all&#x27; or &#x27;any&#x27;. </span><br><span class="line">             - The list contains ordinal of fields, in increasing order.</span><br><span class="line">             The meaning is as follows:</span><br><span class="line">             - if the string is &#x27;none&#x27;, then no cards are generated for this template. The list should be empty.</span><br><span class="line">             - if the string is &#x27;all&#x27; then the card is generated only if each field of the list are filled</span><br><span class="line">             - if the string is &#x27;any&#x27;, then the card is generated if any of the field of the list is filled.</span><br><span class="line"></span><br><span class="line">             The algorithm to decide how to compute req from the template is explained on: </span><br><span class="line">             https://github.com/Arthur-Milchior/anki/blob/commented/documentation//templates_generation_rules.md&quot;</span><br><span class="line">          ],</span><br><span class="line">    sortf : &quot;Integer specifying which field is used for sorting in the browser&quot;,</span><br><span class="line">    tags : &quot;Anki saves the tags of the last added note to the current model, use an empty array []&quot;,</span><br><span class="line">    tmpls : [</span><br><span class="line">              &quot;JSONArray containing object of CardTemplate for each card in model&quot;,</span><br><span class="line">              &#123;</span><br><span class="line">                afmt : &quot;answer template string&quot;,</span><br><span class="line">                bafmt : &quot;browser answer format: </span><br><span class="line">                          used for displaying answer in browser&quot;,</span><br><span class="line">                bqfmt : &quot;browser question format: </span><br><span class="line">                          used for displaying question in browser&quot;,</span><br><span class="line">                did : &quot;deck override (null by default)&quot;,</span><br><span class="line">                name : &quot;template name&quot;,</span><br><span class="line">                ord : &quot;template number, see flds&quot;,</span><br><span class="line">                qfmt : &quot;question format string&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">    type : &quot;Integer specifying what type of model. 0 for standard, 1 for cloze&quot;,</span><br><span class="line">    usn : &quot;usn: Update sequence number: used in same way as other usn vales in db&quot;,</span><br><span class="line">    vers : &quot;Legacy version number (unused), use an empty array []&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Decks-JSONObjects"><a href="#Decks-JSONObjects" class="headerlink" title="Decks JSONObjects"></a>Decks JSONObjects</h3><p>Here is an annotated description of the JSONObjects in the decks field of the col table:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;deck id (creation time in epoch milliseconds for most decks, &#x27;1&#x27; for the default deck)&quot;</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;name of deck&quot;, </span><br><span class="line">    extendRev: &quot;extended review card limit (for custom study)</span><br><span class="line">                Potentially absent, in this case it&#x27;s considered to be 10 by aqt.customstudy&quot;, </span><br><span class="line">    usn: &quot;usn: Update sequence number: used in same way as other usn vales in db&quot;, </span><br><span class="line">    collapsed: &quot;true when deck is collapsed&quot;, </span><br><span class="line">    browserCollapsed: &quot;true when deck collapsed in browser&quot;, </span><br><span class="line">    newToday/revToday/lrnToday : two number array.</span><br><span class="line">                                 First one is the number of days that have passed between the collection was created and the deck was last updated</span><br><span class="line">                                 The second one is equal to the number of cards seen today in this deck minus the number of new cards in custom study today.</span><br><span class="line">                                 BEWARE, it&#x27;s changed in anki.sched(v2).Scheduler._updateStats and anki.sched(v2).Scheduler._updateCutoff.update  but can&#x27;t be found by grepping &#x27;newToday&#x27;, because it&#x27;s instead written as type+&quot;Today&quot; with type which may be new/rev/lrnToday    </span><br><span class="line">    timeToday: &quot;two number array used somehow for custom study. Currently unused in the code&quot;, </span><br><span class="line">    dyn: &quot;1 if dynamic (AKA filtered) deck&quot;, </span><br><span class="line">    extendNew: &quot;extended new card limit (for custom study). </span><br><span class="line">                Potentially absent, in this case it&#x27;s considered to be 10 by aqt.customstudy&quot;, </span><br><span class="line">    conf: &quot;id of option group from dconf in `col` table. Or absent if the deck is dynamic. </span><br><span class="line">          Its absent in filtered deck&quot;, </span><br><span class="line">    id: &quot;deck ID (automatically generated long)&quot;, </span><br><span class="line">    mod: &quot;last modification time&quot;, </span><br><span class="line">    desc: &quot;deck description&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DConf-JSONObjects"><a href="#DConf-JSONObjects" class="headerlink" title="DConf JSONObjects"></a>DConf JSONObjects</h3><p>Here is an annotated description of the JSONObjects in the dconf field of the col.decks table:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;deck config id (creation time in epoch milliseconds for most option groups, &#x27;1&#x27; for the default option group)&quot; :</span><br><span class="line">  &#123;</span><br><span class="line">        autoplay : &quot;whether the audio associated to a question should be</span><br><span class="line">played when the question is shown&quot;</span><br><span class="line">        dyn : &quot;Whether this deck is dynamic. Not present by default in decks.py&quot;</span><br><span class="line">        id : &quot;deck ID (automatically generated long). Not present by default in decks.py&quot;</span><br><span class="line">        lapse : &#123;</span><br><span class="line">            &quot;The configuration for lapse cards.&quot;</span><br><span class="line">            delays : &quot;The list of successive delay between the learning steps of the new cards, as explained in the manual.&quot;</span><br><span class="line">            leechAction : &quot;What to do to leech cards. 0 for suspend, 1 for mark. Numbers according to the order in which the choices appear in aqt/dconf.ui&quot;</span><br><span class="line">            leechFails : &quot;the number of lapses authorized before doing leechAction.&quot;</span><br><span class="line">            minInt: &quot;a lower limit to the new interval after a leech&quot;</span><br><span class="line">            mult : &quot;percent by which to multiply the current interval when a card goes has lapsed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        maxTaken : &quot;The number of seconds after which to stop the timer&quot;</span><br><span class="line">        mod : &quot;Last modification time&quot;</span><br><span class="line">        name : &quot;The name of the configuration&quot;</span><br><span class="line">        new : &#123;</span><br><span class="line">            &quot;The configuration for new cards.&quot;</span><br><span class="line">            bury : &quot;Whether to bury cards related to new cards answered&quot;</span><br><span class="line">            delays : &quot;The list of successive delay between the learning steps of the new cards, as explained in the manual.&quot;</span><br><span class="line">            initialFactor : &quot;The initial ease factor&quot;</span><br><span class="line">            ints : &quot;The list of delays according to the button pressed while leaving the learning mode. Good, easy and unused. In the GUI, the first two elements corresponds to Graduating Interval and Easy interval&quot;</span><br><span class="line">            order : &quot;In which order new cards must be shown. NEW_CARDS_RANDOM = 0 and NEW_CARDS_DUE = 1.&quot;</span><br><span class="line">            perDay : &quot;Maximal number of new cards shown per day.&quot;</span><br><span class="line">            separate : &quot;Seems to be unused in the code.&quot;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        replayq : &quot;whether the audio associated to a question should be played when the answer is shown&quot;</span><br><span class="line">        rev : &#123;</span><br><span class="line">            &quot;The configuration for review cards.&quot;</span><br><span class="line">            bury : &quot;Whether to bury cards related to new cards answered&quot;</span><br><span class="line">            ease4 : &quot;the number to add to the easyness when the easy button is pressed&quot;</span><br><span class="line">            fuzz : &quot;The new interval is multiplied by a random number between -fuzz and fuzz&quot;</span><br><span class="line">            ivlFct : &quot;multiplication factor applied to the intervals Anki generates&quot;</span><br><span class="line">            maxIvl : &quot;the maximal interval for review&quot;</span><br><span class="line">            minSpace : &quot;not currently used according to decks.py code&#x27;s comment&quot;</span><br><span class="line">            perDay : &quot;Numbers of cards to review per day&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        timer : &quot;whether timer should be shown (1) or not (0)&quot;</span><br><span class="line">        usn : &quot;See usn in cards table for details.&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="configuration-JSONObject"><a href="#configuration-JSONObject" class="headerlink" title="configuration JSONObject"></a>configuration JSONObject</h3><p>Here is an annotated description of the JSONObject in the conf field of the col table when the collection is started. More values may be added to it by any add-on. Unlike the models, decks, and dconf JSONObjects, there should be only one conf JSONObject per collection.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;curDeck&quot;: &quot;The id (as int) of the last deck selected (during review, adding card, changing the deck of a card)&quot;,</span><br><span class="line">    &quot;activeDecks&quot;: &quot;The list containing the current deck id and its descendant (as ints)&quot;,</span><br><span class="line">    &quot;newSpread&quot;: &quot;In which order to view to review the cards. This can be selected in Preferences&gt;Basic. Possible values are:</span><br><span class="line">      0 -- NEW_CARDS_DISTRIBUTE (Mix new cards and reviews)</span><br><span class="line">      1 -- NEW_CARDS_LAST (see new cards after review)</span><br><span class="line">      2 -- NEW_CARDS_FIRST (See new card before review)&quot;,</span><br><span class="line">    &quot;collapseTime&quot;: &quot;&#x27;Preferences&gt;Basic&gt;Learn ahead limit&#x27;*60. If there is no more card to review now but next card in learning is in less than collapseTime second, show it now.</span><br><span class="line">    If there are no other card to review, then we can review cards in learning in advance if they are due in less than this number of seconds.&quot;,</span><br><span class="line">    &quot;timeLim&quot;: &quot;&#x27;Preferences&gt;Basic&gt;Timebox time limit&#x27;*60. Each time this number of second elapse, anki tell you how many card you reviewed.&quot;,</span><br><span class="line">    &quot;estTimes&quot;: &quot;&#x27;Preferences&gt;Basic&gt;Show next review time above answer buttons&#x27;. A Boolean.&quot;</span><br><span class="line">    &quot;dueCounts&quot;: &quot;&#x27;Preferences&gt;Basic&gt;Show remaining card count during review&#x27;. A Boolean.&quot;</span><br><span class="line">    &quot;curModel&quot;: &quot;Id (as string) of the last note type (a.k.a. model) used (i.e. either when creating a note, or changing the note type of a note).&quot;,</span><br><span class="line">    &quot;nextPos&quot;: &quot;This is the highest value of a due value of a new card. It allows to decide the due number to give to the next note created. (This is useful to ensure that cards are seen in order in which they are added.&quot;,</span><br><span class="line">    &quot;sortType&quot;: &quot;A string representing how the browser must be sorted. Its value should be one of the possible value of &#x27;aqt.browsers.DataModel.activeCols&#x27; (or equivalently of &#x27;activeCols&#x27;  but not any of (&#x27;question&#x27;, &#x27;answer&#x27;, &#x27;template&#x27;, &#x27;deck&#x27;, &#x27;note&#x27;, &#x27;noteTags&#x27;)&quot;,</span><br><span class="line">    &quot;sortBackwards&quot;: &quot;A Boolean stating whether the browser sorting must be in increasing or decreasing order&quot;,</span><br><span class="line">    &quot;addToCur&quot;: &quot;A Boolean. True for &#x27;When adding, default to current deck&#x27; in Preferences&gt;Basic. False for &#x27;Change deck depending on note type&#x27;.&quot;,</span><br><span class="line">    &quot;dayLearnFirst&quot;: &quot;A Boolean. It corresponds to the option &#x27;Show learning cards with larger steps before reviews&#x27;. But this option does not seems to appear in the preference box&quot;,</span><br><span class="line">    &quot;newBury&quot;: &quot;A Boolean. Always set to true and not read anywhere in the code but at the place where it is set to True if it is not already true. Hence probably quite useful.&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;lastUnburied&quot;:&quot;The date of the last time the scheduler was initialized or reset. If it&#x27;s not today, then buried notes must be unburied. This is not in the json until scheduler is used once.&quot;,</span><br><span class="line">    &quot;activeCols&quot;:&quot;the list of name of columns to show in the browser. Possible values are listed in aqt.browser.Browser.setupColumns. They are:</span><br><span class="line">    &#x27;question&#x27; -- the browser column&#x27;Question&#x27;,</span><br><span class="line">    &#x27;answer&#x27; -- the browser column&#x27;Answer&#x27;,</span><br><span class="line">    &#x27;template&#x27; -- the browser column&#x27;Card&#x27;,</span><br><span class="line">    &#x27;deck&#x27; -- the browser column&#x27;Deck&#x27;,</span><br><span class="line">    &#x27;noteFld&#x27; -- the browser column&#x27;Sort Field&#x27;,</span><br><span class="line">    &#x27;noteCrt&#x27; -- the browser column&#x27;Created&#x27;,</span><br><span class="line">    &#x27;noteMod&#x27; -- the browser column&#x27;Edited&#x27;,</span><br><span class="line">    &#x27;cardMod&#x27; -- the browser column&#x27;Changed&#x27;,</span><br><span class="line">    &#x27;cardDue&#x27; -- the browser column&#x27;Due&#x27;,</span><br><span class="line">    &#x27;cardIvl&#x27; -- the browser column&#x27;Interval&#x27;,</span><br><span class="line">    &#x27;cardEase&#x27; -- the browser column&#x27;Ease&#x27;,</span><br><span class="line">    &#x27;cardReps&#x27; -- the browser column&#x27;Reviews&#x27;,</span><br><span class="line">    &#x27;cardLapses&#x27; -- the browser column&#x27;Lapses&#x27;,</span><br><span class="line">    &#x27;noteTags&#x27; -- the browser column&#x27;Tags&#x27;,</span><br><span class="line">    &#x27;note&#x27; -- the browser column&#x27;Note&#x27;,</span><br><span class="line">    The default columns are: noteFld, template, cardDue and deck</span><br><span class="line">    This is not in the json at creation. It&#x27;s added when the browser is open.</span><br><span class="line">     &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源自：<a href="https://github.com/ankidroid/Anki-Android/wiki/Database-Structure">https://github.com/ankidroid/Anki-Android/wiki/Database-Structure</a></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki卡片的本质</title>
      <link href="/posts/2022/11/dd51b034.html"/>
      <url>/posts/2022/11/dd51b034.html</url>
      
        <content type="html"><![CDATA[<p>我们对于卡片的操作，大体可以分为两种：</p><ul><li>生成卡片</li><li>回忆卡片</li></ul><p>生成卡片，指的是输入字段内容后生成一张或多张新卡片。</p><p>根据《Anki学习中卡片间隔的处理方式》，学习也是回忆的过程，所以学习和复习卡片可以统称回忆卡片。</p><span id="more"></span>  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-58.png" alt="">  <p>生成和回忆卡片的单位不同:</p><ul><li>生成卡片的单位是note</li><li>回忆卡片的单位是卡片</li><li>一个note可能包含一张或多张卡片</li></ul><p>严格来说，并不存在“制作卡片”一说</p><ul><li>卡片非由我们直接制作出来，而是由Anki自动生成</li><li>并没有一个独立的对象记录卡片的“完整信息”，而是由Anki动态生成</li><li>Anki所知的是一些配置和我们输入的内容</li></ul><p>通常所说的“制作卡片”，实际上是在制作note，更准确地说，是在填充note字段。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-59.png" alt=""><p>卡片的动态生成所需的“原料”如下：</p><ul><li>卡片的基本信息</li><li>卡片所属的note信息</li><li>note所属的note类型</li><li>卡片使用的卡片类型</li></ul><p>可以认为，卡片的本质就是由以上四种数据动态生成的对象。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-60.png" alt="">]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一张Anki卡片的N种状态</title>
      <link href="/posts/2022/11/7bfa4958.html"/>
      <url>/posts/2022/11/7bfa4958.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>整体上，一张Anki卡片有“正常”和“筛选”两种状态。</p></li><li><p>如果卡片经过筛选条件，被放入了筛选Deck，则处于“筛选”状态，否则都处于“正常”状态。</p></li></ul><h3 id="“正常”状态"><a href="#“正常”状态" class="headerlink" title="“正常”状态"></a>“正常”状态</h3><p>“正常”状态下的卡片，又可以分为以下4个子状态，每个子状态对应了卡片生命周期的不同阶段：</p><ul><li>“新”状态</li><li>“学习中”状态</li><li>“复习”状态</li><li>“重学中”状态<span id="more"></span></li></ul><h4 id="“新”状态"><a href="#“新”状态" class="headerlink" title="“新”状态"></a>“新”状态</h4><ul><li>顾名思义，这是所有卡片的原始状态。</li><li>只有“新”状态下的卡片，才有“位置”这一属性。</li><li>“位置”用来决定新卡片的显示顺序，可通过查看其在Browser中的Due字段确认它的值，格式是New #123。</li></ul><h4 id="“学习中”状态"><a href="#“学习中”状态" class="headerlink" title="“学习中”状态"></a>“学习中”状态</h4><ul><li>“学习中”状态是“新”状态的下一个状态，新卡片一旦显示出来便默认进入此状态。</li><li>“学习中”状态的卡片只有两个重要的属性，剩余步骤数和被调度的间隔时长。</li><li>剩余步骤数的计算依据有两个<ul><li>回答卡片时选择的难易程度</li><li>Deck配置 -&gt; New Cards -&gt; Learning steps</li></ul></li><li>只有在回答Again和Good时，才会去计算剩余步骤数，Hard会使剩余步骤数保持不变，而Easy则直接将卡片推进到“复习”状态，感兴趣的同学可以阅读《Anki学习中卡片间隔的处理方式》这篇文章。</li></ul><h4 id="“复习”状态"><a href="#“复习”状态" class="headerlink" title="“复习”状态"></a>“复习”状态</h4><ul><li>持续使用Anki一段时间后，“复习”状态是绝大多数卡片应处于的状态，也是间隔重复算法发挥作用的阶段。</li><li>为了应用间隔重复算法，卡片处于“复习”状态时会拥有更多的属性，例如：<ul><li>上次回答后计算出的到期日期</li><li>当前col的创建天数</li><li>间隔因子</li><li>遗忘次数</li><li>遗忘次数是否超过了阈值<br>“复习”状态下，卡片每个属性的作用较复杂，后面单独撰文说明。</li></ul></li></ul><h4 id="“重学中”状态"><a href="#“重学中”状态" class="headerlink" title="“重学中”状态"></a>“重学中”状态</h4><ul><li>卡片处于“重学中”状态时，处理方式与“学习中”状态基本相同。</li><li>每次卡片从“复习”状态进入“重学中”状态，遗忘次数就会增加一次。</li></ul><h3 id="“筛选”状态"><a href="#“筛选”状态" class="headerlink" title="“筛选”状态"></a>“筛选”状态</h3><p>卡片被放入筛选Deck中便进入“筛选”状态，有两个子状态</p><ul><li>“预览”状态</li><li>“重新调度”状态</li></ul><h4 id="“预览”状态"><a href="#“预览”状态" class="headerlink" title="“预览”状态"></a>“预览”状态</h4><ul><li><p>“预览”状态，顾名思义不会对卡片的调度产生任何影响，仅供浏览。</p></li><li><p>创建筛选Deck时，不勾选Reschedule cards based on my answers in this deck，筛选出的卡片便是“预览”状态。</p></li><li><p>因为不需要按照正常的间隔调度算法进行调度，所以它的调度间隔是固定的，如下：</p><ul><li><p>Again - 600秒即10分钟后再次显示</p></li><li><p>Hard - 900秒即15分钟后再次显示</p></li><li><p>Good - 1200秒即20分钟后再次显示</p></li><li><p>Easy - 放回原Deck，表示预览结束，不再显示</p></li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-57.png" alt=""><h4 id="“重新调度”状态"><a href="#“重新调度”状态" class="headerlink" title="“重新调度”状态"></a>“重新调度”状态</h4><ul><li>与“预览”状态相反，“重新调度”状态的卡片会按照正常的调度算法进行调度。</li><li>创建筛选Deck时，勾选Reschedule cards based on my answers in this deck，筛选出的卡片便是“重新调度”状态。</li><li>“重新调度”状态下的卡片被回答时，会按照卡片在原Deck中的方式进行调度，也就是所有调度相关的配置都与原Deck相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki新卡片顺序</title>
      <link href="/posts/2022/11/bf8edd5b.html"/>
      <url>/posts/2022/11/bf8edd5b.html</url>
      
        <content type="html"><![CDATA[<h3 id="新卡片顺序什么时候决定的？"><a href="#新卡片顺序什么时候决定的？" class="headerlink" title="新卡片顺序什么时候决定的？"></a>新卡片顺序什么时候决定的？</h3><pre><code>新增卡片时决定的。</code></pre><h3 id="新卡片顺序如何决定的？"><a href="#新卡片顺序如何决定的？" class="headerlink" title="新卡片顺序如何决定的？"></a>新卡片顺序如何决定的？</h3><p>新增Note的逻辑：</p><ul><li><p>找到Note对应的Model（即Note Type）的模板Templates，每个Model可能有多个Templates</p></li><li><p>获取全局计数器nextPos加1后的值</p><ul><li>nextPos是属于Collection的全局配置，保存在config表中</li><li>nextPos每次新增卡片会递增1</li></ul></li><li><p>遍历每个Template，根据Note、Template、Deck等信息生成Card</p><ul><li><p>Card.due属性保存新卡片的到期时间，但对于不同类型的卡，该属性的值不同，参考文档说明</p></li><li><p>新增卡片时为Card.due赋值</p><span id="more"></span></li><li><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-54.png" alt="">   <ul><li>如果Deck配置项conf[“new”][“order”]为NEW_CARDS_DUE，则使用全局计数器nextPos的值<ul><li>conf[“new”][“order”]有两种可能的值，NEW_CARDS_DUE和NEW_CARDS_RANDOM，分别对应Deck配置中Show new cards in order added和Show new cards in random order两个配置项，如下图所示： </li><li>如果Deck配置项conf[“new”][“order”]为NEW_CARDS_RANDOM则为Card.due属性计算一个随机值  </li></ul></li></ul></li></ul></li></ul><h3 id="新卡片的顺序值如何查看？"><a href="#新卡片的顺序值如何查看？" class="headerlink" title="新卡片的顺序值如何查看？"></a>新卡片的顺序值如何查看？</h3><pre><code>Browser中的Due字段。</code></pre><ul><li><p>Deck配置项conf[“new”][“order”]为NEW_CARDS_DUE</p><p>  新增4张卡片，如下图所示： </p>  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-55.png" alt=""> </li><li><p>Deck配置项conf[“new”][“order”]为NEW_CARDS_RANDOM</p><p>  新增4张卡片，如下图所示： </p>  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-56.png" alt=""> </li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞懂Anki卡片的Due字段</title>
      <link href="/posts/2022/11/b27befa9.html"/>
      <url>/posts/2022/11/b27befa9.html</url>
      
        <content type="html"><![CDATA[<p>Anki卡片的本质是由一系列字段组成的数据结构。卡片的字段可以在Browser中看到，有些字段比较简单，例如Added代表“添加日期”，这是一眼就能看出的。有些字段比较复杂，例如Ease代表间隔扩大系数，需要明白调度算法才能理解。</p><p>其中有一个Due字段，代表“到期时间”，但不同卡片类型的Due值有所差异，这一点可能让人迷惑，在这里捋一捋。</p><span id="more"></span>  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-47.png" alt=""> <p>“新卡片”（new card）的Due值是整数。“新卡片”由于还没有学过，所以不存在“到期”一说，但Anki需要决定“新卡片”的显示顺序，哪张在前哪张在后是如何决定的呢？Anki的Deck配置中，有一项专门针对“新卡片”显示顺序的配置“Order”，如下图所示：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-48.png" alt=""> <p>关于这个配置项，文档的部分说明如下：</p><p>Order controls whether Anki should add new cards into the deck randomly, or in order.</p><p>Anki文档 “Order”决定了“新卡片”的学习顺序，即“随机显示”或“按添加顺序显示”。如果是“随机显示”，则Anki会将“新卡片”的Due值设置为一个随机的整数。如果是“按添加顺序显示”，则Anki会将每一张“新卡片”的Due值设置为一个更大的整数，下一张总是比上一张的Due值大1，如下图所示：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-49.png" alt=""> 但有一个例外，无论“新卡片”按哪种顺序显示，只要属于同一个note，则它们的Due值相同，此时顺序就取决于生成卡片的template的序号。Cloze类型的卡片就是这种情况的典型，如下图所示：<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-50.png" alt=""> <p>“学习中卡片”（learning card）的Due值是Unix时间戳。“新卡片”完成第一次学习后变成“学习中卡片”，其下次的显示时间取决于Deck的Steps配置项。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-51.png" alt=""> <p>如果不是在学习卡片的过程中忘记，比如其中一个step是Again，Steps配置项的第一个step是无效的，下次的显示时间由第二个step决定。假如Steps配置项是“10、20、60”，则“新卡片”变成“学习中卡片”后的下次显示时间便是20分钟后。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-52.png" alt=""> <p>虽然“学习中卡片”的Due值在Browser中显示的依然是日期，但在内部的表示是一个Unix时间戳，否则就无法确切地知道在哪个时间点再次显示它。对Unix时间戳有疑问的同学请自行了解。假设当前的时间戳是1614944804，按照前面的配置，“学习中卡片”下次显示的时间戳是1614944804+20*60即1614946004。</p><p>“复习卡片”（review card）的Due值是日期。如果一张卡片从“学习中卡片”变成“复习卡片”，其Due值便从时间戳变成下次显示该卡片的日期，此时的Due才与它的本意更相符。“学习中卡片”第一次变成“复习卡片”的Due值与当天间隔的天数取决于两个配置项，如下图框起的部分所示:</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-53.png" alt="">  <p>两个配置分别适配两种不同的情况。<br>情况一，“学习中卡片”经过了完整的Steps变成“复习卡片”，比如每个step都是Good，Graduating Interval适配这种情况。<br>情况二，“学习中卡片”未经过完整的Steps变成“复习卡片”，比如其中一个step是Easy，Easy Interval适配这种情况。<br>根据默认配置，情况一中的“复习卡片”显示的日期与当天的间隔是1天，即明天就会再次出现。情况二中的“复习卡片”的显示日期与当天的间隔是3<del>5天。明明配置是4天，为什么结果是3</del>5天呢？因为Anki会对大于等于两天的间隔进行随机混淆，目的是为了避免相同间隔的卡片扎堆显示，所以同一天新增的卡片在后面的复习过程中并不是同一天出现，可能相差一天，也可能相差几十天，越往后相差越大。“复习卡片”每成功复习一次，Anki就会为其计算一个比上次间隔更长的新间隔，此时的Due值便是复习当天的日期加上新间隔后的日期。</p><p>对于不太关心Anki运行原理的同学来说，上面的内容略显枯燥，但相信坚持看下来的同学对Due字段的理解可以说相当透彻。</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StatefulSet 通过 Service + Endpoints 暴露端口供外部访问</title>
      <link href="/posts/2022/11/183d9365.html"/>
      <url>/posts/2022/11/183d9365.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是StatefulSet"><a href="#什么是StatefulSet" class="headerlink" title="什么是StatefulSet"></a>什么是StatefulSet</h3><p>RC、Deployment、DaemonSet都是面向无状态的服务，它们所管理的Pod的IP、名字，启停顺序等都是随机的，而StatefulSet是什么？顾名思义，有状态的集合，管理所有有状态的服务，比如MySQL、MongoDB集群等。<br>StatefulSet本质上是Deployment的一种变体，在v1.9版本中已成为GA版本，它为了解决有状态服务的问题，它所管理的Pod拥有固定的Pod名称，启停顺序，在StatefulSet中，Pod名字称为网络标识(hostname)，还必须要用到共享存储。<br>在Deployment中，与之对应的服务是service，而在StatefulSet中与之对应的headless service，headless service，即无头服务，与service的区别就是它没有Cluster IP，解析它的名称时将返回该Headless Service对应的全部Pod的Endpoint列表。<br>除此之外，StatefulSet在Headless Service的基础上又为StatefulSet控制的每个Pod副本创建了一个DNS域名，这个域名的格式为：<br>$(podname).(headless server name)<br>FQDN：$(podname).(headless server name).namespace.svc.cluster.local<br>例如访问mysql集群Master库：<code>jdbc:mysql://mysql-0.mysql.mysql.svc.cluster.local:3306/test</code></p><span id="more"></span> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-45.png" alt=""> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-46.png" alt=""> <h3 id="创建-StatefulSet"><a href="#创建-StatefulSet" class="headerlink" title="创建 StatefulSet"></a>创建 StatefulSet</h3><p>K8s 1.23版本，创建 StatefulSet，以 mysql集群 为例,演示怎么通过外部端口访问k8s mysql集群内的数据库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  namespace: mysql</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: mysql</span><br><span class="line">  serviceName: mysql</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql</span><br><span class="line">    spec:</span><br><span class="line">      initContainers:</span><br><span class="line">      - name: init-mysql</span><br><span class="line">        image: 10.100.57.178:5000/mysql:8.0.19</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        command:</span><br><span class="line">        - bash</span><br><span class="line">        - &quot;-c&quot;</span><br><span class="line">        - |</span><br><span class="line">          set -ex</span><br><span class="line">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="line">          myindex=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="line">          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf</span><br><span class="line">          echo server-id=$((100 + $&#123;myindex&#125;)) &gt;&gt; /mnt/conf.d/server-id.cnf</span><br><span class="line">          if [[ $&#123;myindex&#125; -eq 0 ]]; then</span><br><span class="line">            cp /mnt/config-map/master.cnf /mnt/conf.d/</span><br><span class="line">          else</span><br><span class="line">            cp /mnt/config-map/slave.cnf /mnt/conf.d/</span><br><span class="line">          fi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: conf</span><br><span class="line">          mountPath: /mnt/conf.d</span><br><span class="line">        - name: config-map</span><br><span class="line">          mountPath: /mnt/config-map</span><br><span class="line">      - name: clone-mysql</span><br><span class="line">        image: 10.100.57.178:5000/mzmuer/xtrabackup:1.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        command:</span><br><span class="line">        - bash</span><br><span class="line">        - &quot;-c&quot;</span><br><span class="line">        - |</span><br><span class="line">          set -ex</span><br><span class="line">          [[ -d /var/lib/mysql/mysql ]] &amp;&amp; exit 0</span><br><span class="line">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="line">          myindex=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="line">          [[ $&#123;myindex&#125; -eq 0 ]] &amp;&amp; exit 0</span><br><span class="line">          ncat --recv-only mysql-$(($&#123;myindex&#125;-1)).mysql 3307 | xbstream -x -C /var/lib/mysql</span><br><span class="line">          xtrabackup --prepare --target-dir=/var/lib/mysql</span><br><span class="line">          # --redo-only 加了会导致为提交的事务不回滚</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">          subPath: mysql</span><br><span class="line">        - name: conf</span><br><span class="line">          mountPath: /etc/mysql/conf.d</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql</span><br><span class="line">        image: 10.100.57.178:5000/mysql:8.0.19</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args: [&quot;--default-authentication-plugin=mysql_native_password&quot;]</span><br><span class="line">        env:</span><br><span class="line">        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">          value: &quot;1&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - name: mysql</span><br><span class="line">          containerPort: 3306</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">          subPath: mysql</span><br><span class="line">        - name: conf</span><br><span class="line">          mountPath: /etc/mysql/conf.d</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 250m</span><br><span class="line">            memory: 256Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">        livenessProbe:</span><br><span class="line">          exec:</span><br><span class="line">            command: [&quot;mysqladmin&quot;, &quot;ping&quot;]</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          exec:</span><br><span class="line">            command: [&quot;mysql&quot;, &quot;-h&quot;, &quot;127.0.0.1&quot;, &quot;-e&quot;, &quot;SELECT 1&quot;]</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 2</span><br><span class="line">          timeoutSeconds: 1</span><br><span class="line">      - name: xtrabackup</span><br><span class="line">        image: 10.100.57.178:5000/mzmuer/xtrabackup:1.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - name: xtrabackup</span><br><span class="line">          containerPort: 3307</span><br><span class="line">        command:</span><br><span class="line">        - bash</span><br><span class="line">        - &quot;-c&quot;</span><br><span class="line">        - |</span><br><span class="line">          set -ex</span><br><span class="line">          mkdir /test</span><br><span class="line">          cd /var/lib/mysql</span><br><span class="line">          if [[ -s xtrabackup_slave_info ]]; then</span><br><span class="line">            mv xtrabackup_slave_info change_master_to.sql.in</span><br><span class="line">            rm -f xtrabackup_binlog_info</span><br><span class="line">          elif [[ -f xtrabackup_binlog_info ]]; then</span><br><span class="line">            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1</span><br><span class="line">            echo -e &quot;CHANGE MASTER TO\nMASTER_LOG_FILE=&#x27;$&#123;BASH_REMATCH[1]&#125;&#x27;,\nMASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;&quot; &gt; change_master_to.sql.in</span><br><span class="line">            rm -f xtrabackup_binlog_info</span><br><span class="line">          fi</span><br><span class="line">          if [[ -f change_master_to.sql.in ]]; then</span><br><span class="line">            echo &quot;Waiting for mysqld to be ready (accepting connections)&quot;</span><br><span class="line">            until mysql -h 127.0.0.1 -e &quot;SELECT 1&quot;; do sleep 1; done</span><br><span class="line">            echo &quot;Initializing replication from clone position&quot;</span><br><span class="line">            mv change_master_to.sql.in change_master_to.sql.orig</span><br><span class="line">            mysql -h 127.0.0.1 &lt;&lt;EOF</span><br><span class="line">            $(&lt;change_master_to.sql.orig),</span><br><span class="line">            MASTER_HOST=&#x27;mysql-0.mysql&#x27;,</span><br><span class="line">            MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">            MASTER_PASSWORD=&#x27;repl123.&#x27;,</span><br><span class="line">            MASTER_CONNECT_RETRY=10;</span><br><span class="line">            START SLAVE;</span><br><span class="line">          EOF</span><br><span class="line">          echo &quot;master slave config ok&quot;</span><br><span class="line">          fi</span><br><span class="line">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="line">          myindex=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="line">          if [[ $&#123;myindex&#125; -eq 0 ]]; then</span><br><span class="line">            mysql -h 127.0.0.1 &lt;&lt;EOF</span><br><span class="line">            use mysql;</span><br><span class="line">            delete from user where user=&#x27;repl&#x27; and host=&#x27;%&#x27;;flush privileges;</span><br><span class="line">            CREATE USER &#x27;repl&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;repl123.&#x27;;</span><br><span class="line">            GRANT REPLICATION SLAVE ON *.* TO &#x27;repl&#x27;@&#x27;%&#x27;;flush privileges;</span><br><span class="line">            SELECT Host, User, plugin from mysql.user;</span><br><span class="line">          EOF</span><br><span class="line">          else</span><br><span class="line">            Slave_healthy=`mysql -h 127.0.0.1 -e &#x27;show slave status\G&#x27; 2&gt; /dev/null |grep -E &quot;Slave_IO_Running|Slave_SQL_Running&quot;|awk &#x27;&#123;print $2&#125;&#x27;|grep -c Yes`</span><br><span class="line">            if [[ $&#123;Slave_healthy&#125; -eq 2 ]]; then</span><br><span class="line">              echo &quot;master slave healthy ok&quot;</span><br><span class="line">            elif [[ $&#123;Slave_healthy&#125; -eq 1 ]]; then</span><br><span class="line">              echo &quot;master slave healthy no&quot;</span><br><span class="line">              mysql -h 127.0.0.1 &lt;&lt;EOF</span><br><span class="line">              stop slave;</span><br><span class="line">              reset slave;</span><br><span class="line">              start slave;</span><br><span class="line">          EOF</span><br><span class="line">              echo &quot;master slave healthy revert&quot;</span><br><span class="line">            elif [[ $&#123;Slave_healthy&#125; -eq 0 ]]; then</span><br><span class="line">              echo &quot;master slave healthy no&quot;</span><br><span class="line">              mysql -h 127.0.0.1 &lt;&lt;EOF</span><br><span class="line">              reset slave;</span><br><span class="line">              start slave;</span><br><span class="line">          EOF</span><br><span class="line">              echo &quot;master slave healthy revert&quot;</span><br><span class="line">            fi</span><br><span class="line">          fi</span><br><span class="line">          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \</span><br><span class="line">            &quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root&quot;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">          subPath: mysql</span><br><span class="line">        - name: conf</span><br><span class="line">          mountPath: /etc/mysql/conf.d</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">      volumes:</span><br><span class="line">      - name: conf</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: config-map</span><br><span class="line">        configMap:</span><br><span class="line">          name: mysql</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: data</span><br><span class="line">    spec:</span><br><span class="line">      storageClassName: &quot;managed-nfs-storage&quot;</span><br><span class="line">      accessModes: [&quot;ReadWriteMany&quot;]</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 10Gi</span><br></pre></td></tr></table></figure><h3 id="创建第一个外部端口，以访问Master库"><a href="#创建第一个外部端口，以访问Master库" class="headerlink" title="创建第一个外部端口，以访问Master库"></a>创建第一个外部端口，以访问Master库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-0-external</span><br><span class="line">  namespace: mysql</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:    </span><br><span class="line">    - port: 3306</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 3306</span><br><span class="line">      nodePort: 31306</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-0-external</span><br><span class="line">  namespace: mysql</span><br><span class="line">subsets:  </span><br><span class="line">  - addresses:      </span><br><span class="line">      - ip: &quot;10.244.2.239&quot;   # 根据 pod mysql-0 的 ip 填写</span><br><span class="line">    ports:      </span><br><span class="line">      - port: 3306</span><br></pre></td></tr></table></figure><p>创建完成后，用户可以通过 <code>jdbc:mysql://宿主机IP:31306</code> 访问Master库</p><h3 id="创建第2个外部端口，以访问Slave库"><a href="#创建第2个外部端口，以访问Slave库" class="headerlink" title="创建第2个外部端口，以访问Slave库"></a>创建第2个外部端口，以访问Slave库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-1-external</span><br><span class="line">  namespace: mysql</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:    </span><br><span class="line">    - port: 3306</span><br><span class="line">      protocol: TCP</span><br><span class="line">      targetPort: 3306</span><br><span class="line">      nodePort: 31307</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-1-external</span><br><span class="line">  namespace: mysql</span><br><span class="line">subsets:  </span><br><span class="line">  - addresses:      </span><br><span class="line">      - ip: &quot;10.244.2.240&quot;   # 根据 pod mysql-1 的 ip 填写</span><br><span class="line">    ports:      </span><br><span class="line">      - port: 3306</span><br></pre></td></tr></table></figure><p>创建完成后，用户可以通过 <code>jdbc:mysql://宿主机IP:31307</code> 访问Slave库</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> Statefuset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s 1.23版本nfs创建动态存储报错</title>
      <link href="/posts/2022/11/f415608b.html"/>
      <url>/posts/2022/11/f415608b.html</url>
      
        <content type="html"><![CDATA[<p>K8s 1.23版本nfs创建动态存储报错 <code>persistentvolume-controller waiting for a volume to be created, either by external provisioner &quot;qgg-nfs-storage&quot; or manually created by system administrator</code></p><h3 id="查看状态-Pending"><a href="#查看状态-Pending" class="headerlink" title="查看状态(Pending)"></a>查看状态(Pending)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-matser01 nfs.rbac]# kubectl get pvc</span><br><span class="line">NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">default     test-claim     Pending                                      managed-nfs-storage   4s</span><br></pre></td></tr></table></figure><span id="more"></span> <h3 id="查看报错"><a href="#查看报错" class="headerlink" title="查看报错"></a>查看报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-matser01 nfs.rbac]# kubectl get pvc</span><br><span class="line">NAME         STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">test-claim   Pending                                      managed-nfs-storage   5s</span><br><span class="line">[root@k8s-matser01 nfs.rbac]# kubectl describe pvc test-claim </span><br><span class="line">Name:          test-claim</span><br><span class="line">Namespace:     default</span><br><span class="line">StorageClass:  managed-nfs-storage</span><br><span class="line">Status:        Pending</span><br><span class="line">Volume:        </span><br><span class="line">Labels:        &lt;none&gt;</span><br><span class="line">Annotations:   volume.beta.kubernetes.io/storage-class: managed-nfs-storage</span><br><span class="line">               volume.beta.kubernetes.io/storage-provisioner: qgg-nfs-storage</span><br><span class="line">Finalizers:    [kubernetes.io/pvc-protection]</span><br><span class="line">Capacity:      </span><br><span class="line">Access Modes:  </span><br><span class="line">VolumeMode:    Filesystem</span><br><span class="line">Used By:       &lt;none&gt;</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason                Age               From                         Message</span><br><span class="line">  ----    ------                ----              ----                         -------</span><br><span class="line">  Normal  ExternalProvisioning  8s (x2 over 13s)  persistentvolume-controller  waiting for a volume to be created, either by external provisioner &quot;qgg-nfs-storage&quot; or manually created by system administrator</span><br></pre></td></tr></table></figure><h3 id="解决（修改apiserver的配置）"><a href="#解决（修改apiserver的配置）" class="headerlink" title="解决（修改apiserver的配置）"></a>解决（修改apiserver的配置）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-matser01 nfs.rbac]# cat /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">-----</span><br><span class="line">    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span><br><span class="line">    - --feature-gates=RemoveSelfLink=false # 添加这个配置</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 重启apiserver</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line">[root@k8s-matser01 nfs.rbac]# kubectl get pvc</span><br><span class="line">NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">test-claim     Bound     pvc-c113b86d-7eb2-4a2e-a905-582241f5396a   1Mi        RWX            managed-nfs-storage   13m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> StorageClass </tag>
            
            <tag> nfs </tag>
            
            <tag> PVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s操作PV、PVC和StorageClass的相关命令</title>
      <link href="/posts/2022/11/c21c189e.html"/>
      <url>/posts/2022/11/c21c189e.html</url>
      
        <content type="html"><![CDATA[<p>配置生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exportfs -r</span><br></pre></td></tr></table></figure><p>重启rpcbind、nfs服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart rpcbind &amp;&amp; systemctl restart nfs</span><br></pre></td></tr></table></figure><p>重启apiserver</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>获取pvc信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pvc</span><br><span class="line">kubectl describe pvc test-claim </span><br></pre></td></tr></table></figure><span id="more"></span> <p>删除pvc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete pvc test-claim</span><br></pre></td></tr></table></figure><p>删除StorageClass</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete storageclass managed-nfs-storage</span><br></pre></td></tr></table></figure><p>#查看存储卷</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master k8s-mysql]# kubectl  get sc</span><br><span class="line">NAME                  PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">managed-nfs-storage   qgg-nfs-storage   Delete          Immediate           false                  90m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> StorageClass </tag>
            
            <tag> PV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPad使用UIAlertControllerStyleActionSheet崩溃</title>
      <link href="/posts/2022/11/deebb41e.html"/>
      <url>/posts/2022/11/deebb41e.html</url>
      
        <content type="html"><![CDATA[<p>【Swift 5】使用UIAlertController弹出一个.actionSheet样式(UIAlertControllerStyleActionSheet)的弹出框，<br>运行设备为iPhone时，正常。<br>运行设备为iPad时，崩溃。<br>报错如下：<br><code>You must provide location information for this popover through the alert controller&#39;s popoverPresentationController</code></p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#完整报错信息</span><br><span class="line">reason: &#x27;Your application has presented a UIAlertController (&lt;UIAlertController: 0x124638680&gt;) of style UIAlertControllerStyleActionSheet. </span><br><span class="line">The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. </span><br><span class="line">You must provide location information for this popover through the alert controller&#x27;s popoverPresentationController. </span><br><span class="line">You must provide either a sourceView and sourceRect or a barButtonItem. </span><br><span class="line">If this information is not known when you present the alert controller, </span><br><span class="line">you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.</span><br></pre></td></tr></table></figure><p>解决：  </p><p>iPhone和iPad使用UIAlertController展示ActionSheep时，展示是不一样的。</p><p>所以在iPhone上正常显示的AlertController，在iPad上显示要添加几行代码。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//解决ipad 弹出框崩溃问题 start</span><br><span class="line">let popover:UIPopoverPresentationController? = alertController.popoverPresentationController;</span><br><span class="line"></span><br><span class="line">if (popover != nil) &#123;</span><br><span class="line">    popover!.sourceView = self.view;</span><br><span class="line">    popover!.sourceRect = self.view.bounds;</span><br><span class="line">    popover!.permittedArrowDirections = .any;</span><br><span class="line">&#125;</span><br><span class="line">//解决ipad 弹出框崩溃问题 end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s根据端口查找service和删除service</title>
      <link href="/posts/2022/11/2bfdb078.html"/>
      <url>/posts/2022/11/2bfdb078.html</url>
      
        <content type="html"><![CDATA[<p>根据端口查找对应的service</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get service --all-namespaces |grep 31234</span><br></pre></td></tr></table></figure><p>显示所有的service<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure></p><p>删除指定名称的service (在service name前加上svc/)<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete svc/jfinal-demo</span><br></pre></td></tr></table></figure><br> <span id="more"></span> </p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发 - Swift实现检测网络连接状态及网络类型</title>
      <link href="/posts/2022/11/3e32d1cc.html"/>
      <url>/posts/2022/11/3e32d1cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在移动开发中，检测网络的连接状态尤其检测网络的类型尤为重要。本文将介绍在iOS开发中，如何使用Swift检测网络连接状态及网络类型（移动网络、Wifi）。</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>Reachability.swift 是一个使用Swift写的第三方网络检测类，可以用来检测网络连接状态及网络类型（移动网络、Wifi）功能。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li>使用Cocopod安装Reachability.swift<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use_frameworks!</span><br><span class="line">pod &#x27;ReachabilitySwift&#x27;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li>基本使用代码示例</li></ol><p>使用前记得导入ReachabilitySwift类，下面代码放在viewDidLoad()方法中即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reachability: Reachability!</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    reachability = try Reachability.reachabilityForInternetConnection()</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to create Reachability&quot;)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 检测网络连接状态</span><br><span class="line">if reachability.isReachable() &#123;</span><br><span class="line">    print(&quot;网络连接：可用&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    print(&quot;网络连接：不可用&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 检测网络类型</span><br><span class="line">if reachability.isReachableViaWiFi() &#123;</span><br><span class="line">    print(&quot;网络类型：Wifi&quot;)</span><br><span class="line">&#125; else if reachability.isReachableViaWWAN() &#123;</span><br><span class="line">    print(&quot;网络类型：移动网络&quot;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    print(&quot;网络类型：无网络连接&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>监听网络变化  </li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 网络可用或切换网络类型时执行</span><br><span class="line">reachability.whenReachable = &#123; reachability in</span><br><span class="line"></span><br><span class="line">    // 判断网络状态及类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 网络不可用时执行</span><br><span class="line">reachability.whenUnreachable = &#123; reachability in</span><br><span class="line"></span><br><span class="line">    // 判断网络状态及类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    // 开始监听</span><br><span class="line">    try reachability.startNotifier()</span><br><span class="line">&#125; catch &#123;</span><br><span class="line">    print(&quot;Unable to start notifier&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止监听调用reachability.stopNotifier()即可。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>Github地址：<a href="https://github.com/ashleymills/Reachability.swift">https://github.com/ashleymills/Reachability.swift</a></p>]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ANKI启动时OpenGL的问题</title>
      <link href="/posts/2022/11/935d04a.html"/>
      <url>/posts/2022/11/935d04a.html</url>
      
        <content type="html"><![CDATA[<p>在Win10上启动了anki 2.1.22版，出现了<code>Install a driver providing OpenGL 2.0 or higher, or, if this is not possible</code>的错误提醒。类似的问题可见   <a href="https://anki.tenderapp.com/discussions/ankidesktop/36598-installation-issue-with-opengl-file">https://anki.tenderapp.com/discussions/ankidesktop/36598-installation-issue-with-opengl-file</a><br>解决方法：<br>官方的指导文件（ <a href="https://changes.ankiweb.net/#/known-issues%EF%BC%89%E4%B8%AD%E7%9A%84Text">https://changes.ankiweb.net/#/known-issues）中的Text</a> size节中给出了解决方法<br>新建文档，输入以下内容:  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set ANKI_WEBSCALE=0.75</span><br><span class="line">start &quot;Anki&quot; &quot;C:\Program Files\Anki\anki&quot;</span><br></pre></td></tr></table></figure><p>最后保存成startanki.bat，发送快捷方式到桌面,以后都用startant.bat启动ant即可</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Anki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Maven插件打包后，包内没有BOOT-INF目录</title>
      <link href="/posts/2022/11/e2848ec1.html"/>
      <url>/posts/2022/11/e2848ec1.html</url>
      
        <content type="html"><![CDATA[<p>使用maven插件打包后，发现包很小100来kb，显然是不对，包内缺少BOOT-INF目录，BOOT-INF是用于存放引用的外部lib的，所以缺少，打出来的包根本不能运行 。 </p><p>首先尝试使用maven-assembly-plugin来打包，依赖是成功引入了，但是启动会报如下错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.context.ApplicationContextException: </span><br><span class="line">Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean</span><br></pre></td></tr></table></figure><span id="more"></span> <h3 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h3><p>在自己项目的pom中，或者父pom中，在plugin中添加executions节点代码，重新打包即可解决。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s创建持久化存储PV和PVC(kubernetes v1.23)</title>
      <link href="/posts/2022/11/26993213.html"/>
      <url>/posts/2022/11/26993213.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、临时存储"><a href="#一、临时存储" class="headerlink" title="一、临时存储"></a>一、临时存储</h4><p>  当pod的存储方案设定为emptydir的时候，pod启动时就会在pod所在节点的磁盘空间开辟出一块空卷，pod启动后容器产生的数据会存放到那个空卷中，供pod内的容器读取和写入数据，一旦pod容器消失，节点上开辟出的这个临时空间就会随着pod销毁。</p><h4 id="二、半持久化存储"><a href="#二、半持久化存储" class="headerlink" title="二、半持久化存储"></a>二、半持久化存储</h4><p>hostpath类型则是映射node文件系统中的文件或者目录到pod里。因为在k8s中pod会漂移，当pod漂移到其他node节点的时候，pod不会跨节点的去读取目录。所以说是一种半持久化的存储方式</p><h4 id="三、持久化存储"><a href="#三、持久化存储" class="headerlink" title="三、持久化存储"></a>三、持久化存储</h4><p>PV是集群中的一块存储，是集群资源，是持久化存储，对存储资源进行抽象。和普通的 Volume 一样，也是使用卷插件来实现的，只是它们拥有独立于任何使用 PV 的 Pod 的生命周期。</p><span id="more"></span> <p>PVC是用户对存储的请求。概念上与 Pod 类似。 Pod 会耗用节点资源，而 PVC 申领会耗用 PV 资源。Pod 可以请求特定数量的资源（CPU 和内存）；同样 PVC 可以请求特定的大小和访问模式。</p><p>PV、PVC生命周期<br><code>Provisioning ——-&gt; Binding ——–&gt;Using——&gt;Releasing——&gt;Recycling</code></p><p>PV和PVC是最常见的使用存储的方式。</p><h5 id="k8s-PV-是什么？"><a href="#k8s-PV-是什么？" class="headerlink" title="k8s PV 是什么？"></a>k8s PV 是什么？</h5><p>PersistentVolume（PV）是群集中的一块存储，由管理员配置或使用存储类动态配置。 它是集群中的资源，就像 pod 是 k8s 集群资源一样。 PV 是容量插件，如 Volumes，其生命周期独立于使用 PV 的任何单个 pod。</p><h5 id="k8s-PVC-是什么？"><a href="#k8s-PVC-是什么？" class="headerlink" title="k8s PVC 是什么？"></a>k8s PVC 是什么？</h5><p> PersistentVolumeClaim（PVC）是一个持久化存储卷，我们在创建 pod 时可以定义这个类型的存储卷。 它类似于一个 pod。 Pod 消耗节点资源，PVC 消耗 PV 资源。 Pod 可以请求特定级别的资源（CPU 和内存）。 pvc 在申请 pv 的时候也可以请求特定的大小和访问模式（例如，可以一次读写或多次只读）。</p><h5 id="创建一个使用PV和PVC的Pod"><a href="#创建一个使用PV和PVC的Pod" class="headerlink" title="创建一个使用PV和PVC的Pod"></a>创建一个使用PV和PVC的Pod</h5><ul><li>配置nfs服务:</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# yum install nfs-utils rpcbind –y</span><br><span class="line">[root@k8s-master ~]# mkdir /pv-pvc</span><br><span class="line">[root@k8s-master ~]# vi /etc/exports</span><br><span class="line">[root@k8s-master ~]# cat /etc/exports</span><br><span class="line">/pv-pvc *(rw,sync,no_root_squash)</span><br><span class="line">/cloud-demo *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>注意，K8s集群的各个节点都需要安装nfs-utils: <code>yum install nfs-utils</code>,要不然会导致<code>wrong fs type, bad option, bad superblock</code>异常。</p><p>/etc/exports文件参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cloud-demo：共享目录</span><br><span class="line">　　*：所有主机能访问</span><br><span class="line">　　rw：读写权限</span><br><span class="line">　　ro：只读</span><br><span class="line">　　sync：同步</span><br><span class="line">　　no_root_squash：不降低root的权限</span><br></pre></td></tr></table></figure><ul><li><p>nfs服务自检</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exportfs -arv</span><br></pre></td></tr></table></figure><p>如果配置有问题，则会有提示报错信息，根据提示解决问题即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master StorageClass]# exportfs -arv</span><br><span class="line">exporting *:/data/volumes</span><br><span class="line">exportfs: Failed to stat /data/volumes: No such file or directory</span><br><span class="line">exporting *:/cloud-demo</span><br><span class="line">exporting *:/pv-pvc</span><br></pre></td></tr></table></figure><p>正常提示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master volumes]# exportfs -arv</span><br><span class="line">exporting *:/data/volumes</span><br><span class="line">exporting *:/cloud-demo</span><br><span class="line">exporting *:/pv-pvc</span><br></pre></td></tr></table></figure></li><li><p>重启nfs服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# systemctl restart rpcbind</span><br><span class="line">[root@k8s-master ~]# systemctl restart nfs</span><br><span class="line">[root@k8s-master ~]# systemctl restart nfs-server</span><br></pre></td></tr></table></figure></li><li><p>查看nfs服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# showmount</span><br><span class="line">Hosts on k8s-master:</span><br><span class="line">[root@k8s-master ~]# showmount -e</span><br><span class="line">Export list for k8s-master:</span><br><span class="line">/cloud-demo *</span><br><span class="line">/pv-pvc     *</span><br></pre></td></tr></table></figure></li><li><p>开放端口：<br>另外，特别注意，开放端口，不然其他主机不能访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp    111</span><br><span class="line">udp    111</span><br><span class="line">tcp    2049</span><br><span class="line">udp    4046</span><br></pre></td></tr></table></figure></li><li><p>进入挂载目录创建 pv1 目录 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master ~]# cd /pv-pvc/</span><br><span class="line">[root@master pv-pvc]# mkdir pv1</span><br><span class="line">[root@master pv-pvc]# ls</span><br><span class="line">pv1</span><br></pre></td></tr></table></figure></li><li><p>创建PV</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master tmp]# vi pv1.yaml</span><br><span class="line">[root@master tmp]# kubectl apply -f pv1.yaml</span><br><span class="line">persistentvolume/mypv created</span><br><span class="line">[root@master tmp]# cat pv1.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume   #注意类型</span><br><span class="line">metadata:</span><br><span class="line">  name: mypv    #PVC要调用</span><br><span class="line">spec:</span><br><span class="line">  capacity:     #指定PV容量</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  accessModes:     #指定访问模式</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle    #指定回收策略</span><br><span class="line">  nfs:           #配置nfs服务器信息</span><br><span class="line">    path: /cloud-demo/data1</span><br><span class="line">    server: 10.100.57.178</span><br></pre></td></tr></table></figure><p>————————————————————————————————————————————————</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">accessModes</span><br><span class="line">    ReadWriteOnce: 该卷能够以读写模式被加载到一个节点上。</span><br><span class="line">    ReadOnlyMany： 该卷能够以只读模式加载到多个节点上。</span><br><span class="line">    ReadWriteMany: 改卷能够以读写模式加载到多个节点上。</span><br><span class="line">persistentVolumeReclaimPolicy</span><br><span class="line">    Retain（保留） ：不删除，需手动回收</span><br><span class="line">    Recycle（回收）：基本擦除，类似rm -rf ,使它可供其他PVC申请。</span><br><span class="line">    Delete（删除） ：关联存储将被删除。</span><br></pre></td></tr></table></figure></li><li><p>查看PV</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master tmp]# kubectl get pv</span><br><span class="line">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">mypv   1Gi        RWX            Recycle          Available                                   22s</span><br></pre></td></tr></table></figure><ul><li>创建 PVC<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master tmp]# vi pvc1.yaml</span><br><span class="line">[root@master tmp]# kubectl apply -f pvc1.yaml</span><br><span class="line">persistentvolumeclaim/mypvc created</span><br><span class="line">[root@master tmp]# cat pvc1.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: mypvc</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">   - ReadWriteMany</span><br><span class="line">  volumeName: mypv</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br></pre></td></tr></table></figure></li><li>对比查看PV的状态从Avilable变为Bound,pvc的状态也是Bound。  </li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master tmp]# kubectl get pvc</span><br><span class="line">NAME    STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">mypvc   Bound    mypv     1Gi        RWX                           47s</span><br><span class="line">[root@master tmp]# kubectl get pv</span><br><span class="line">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM           STORAGECLASS   REASON   AGE</span><br><span class="line">mypv   1Gi        RWX            Recycle          Bound    default/mypvc                           30m</span><br></pre></td></tr></table></figure><ul><li>创建Pod，使用该PVC<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@master tmp]# vi testpod.yaml</span><br><span class="line">[root@master tmp]# kubectl apply -f testpod.yaml</span><br><span class="line">pod/pvc-pod created</span><br><span class="line">[root@master tmp]# cat testpod.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: pvc-pod</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - sleep 30000;</span><br><span class="line">    image: centos</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /pv-pvc</span><br><span class="line">      name: pvc-volume</span><br><span class="line">  volumes:</span><br><span class="line">    - name: pvc-volume</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: mypvc</span><br></pre></td></tr></table></figure></li><li>另一个使用PVC示例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: newshomebg</span><br><span class="line">  namespace: mod</span><br><span class="line">  labels:</span><br><span class="line">    app: newshomebg</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: newshomebg</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: newshomebg</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: newshomebg</span><br><span class="line">        image: xxx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">        env:</span><br><span class="line">        - name: SPRING_DATASOURCE_USERNAME</span><br><span class="line">          value: &#x27;root&#x27;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: nfs-volume            #设置的名称，和下面的name要一样的</span><br><span class="line">          mountPath: /home/uploads    #需要挂载的目录</span><br><span class="line">          subPath: newshomebg         #卷的子目录，也就是在nfs服务目录里生成这个子目录</span><br><span class="line">      volumes:</span><br><span class="line">      - name: nfs-volume              #这个卷的名称，和上面的name要一样的</span><br><span class="line">        nfs:                          #这里是nfs挂载</span><br><span class="line">          server: 192.168.1.2         #nfs服务器的ip或者域名</span><br><span class="line">          path: &quot;/data&quot;               #nfs服务配置的挂载目录</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: xxx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> PVC </tag>
            
            <tag> 存储卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s的各种命令(v1.23)</title>
      <link href="/posts/2022/11/8c1fadce.html"/>
      <url>/posts/2022/11/8c1fadce.html</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>列出所有运行的Pod信息</strong><br><code> kubectl get pods</code></p></li><li><p><strong>列出所有有关mysql的信息</strong><br><code>kubectl get all | grep mysql</code></p></li><li><p><strong>查看启动进度</strong><br><code>kubectl get pods -l app=mysql --watch</code></p></li><li><p><strong>列出Pod以及运行Pod节点信息。（#加-o可以把node列出来，也就是pod在哪个节点上能列出来）</strong><br><code>kubectl get pods -o wide</code></p></li><li><p><strong>列出指定NAME的 replication controller信息</strong><br><code>kubectl get replicationcontroller web</code></p></li><li><p><strong>以JSON格式输出一个pod信息</strong><br><code>kubectl get -o json pod web-pod-13je7</code></p><span id="more"></span></li><li><p><strong>以“pod.yaml”配置文件中指定资源对象和名称输出JSON格式的Pod信息</strong><br><code>kubectl get -f pod.yaml -o json</code></p></li><li><p><strong>返回指定pod的相位值</strong><br><code>kubectl get -o template pod/web-pod-13je7 --template=&#123;&#123;.status.phase&#125;&#125;</code></p></li><li><p><strong>列出所有replication controllers和service信息</strong><br><code>kubectl get rc,services</code></p></li><li><p><strong>按其资源和名称列出相应信息</strong><br><code>kubectl get rc/web service/frontend pods/web-pod-13je7</code></p></li><li><p><strong>列出所有不同的资源对象</strong><br><code>kubectl get all</code></p></li><li><p><strong>查看ip和端口，也叫端点</strong><br><code>kubectl get ep　　　　 #获取service的endpoint信息</code></p></li><li><p><strong>进入POD内部命令行</strong>： </p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nacos-0为pod名称</span><br><span class="line">kubectl exec -it nacos-0 bash</span><br></pre></td></tr></table></figure><p>会提示：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.</span><br></pre></td></tr></table></figure><p>用新版本的命令代替即可:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec --stdin --tty nacos-0 -- /bin/bash</span><br></pre></td></tr></table></figure><ul><li><strong>查看 kube-dns 的服务详情</strong>  </li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get svc kube-dns -n kube-system</span><br></pre></td></tr></table></figure><p>Kubernetes 集群中部署了一套 DNS 服务，通过 kube-dns 的服务名暴露 DNS 服务。<br>服务后端是两个名为 coredns（下文会介绍 CoreDNS 解析原理） 的 Pod。您可执行以下命令查看 coredns 的 Pod 详情。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get deployment coredns -n kube-system</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift - 延时执行的四种方式</title>
      <link href="/posts/2022/11/6d94e118.html"/>
      <url>/posts/2022/11/6d94e118.html</url>
      
        <content type="html"><![CDATA[<p>Swift - 延时执行的四种方式  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.perform(必须在主线程中执行)</span><br><span class="line">self.perform(#selector(delayExecution), with: nil, afterDelay: 3)</span><br><span class="line">// 取消</span><br><span class="line">NSObject.cancelPreviousPerformRequests(withTarget: self)</span><br><span class="line"></span><br><span class="line">// 2.timer(必须在主线程中执行)</span><br><span class="line">Timer.scheduledTimer(timeInterval: 3, target: self, selector: #selector(delayExecution), userInfo: nil, repeats: false)</span><br><span class="line"></span><br><span class="line">// 3.Thread (在主线程会卡主界面)</span><br><span class="line">Thread.sleep(forTimeInterval: 3)</span><br><span class="line">self.delayExecution()</span><br><span class="line"></span><br><span class="line">// 4.GCD 主线程/子线程</span><br><span class="line">DispatchQueue.main.asyncAfter(deadline: .now() + 3) &#123;</span><br><span class="line">    self.delayExecution()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DispatchQueue.global().asyncAfter(deadline: .now() + 3) &#123;</span><br><span class="line">    self.delayExecution()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span> ]]></content>
      
      
      <categories>
          
          <category> 客户端开发 </category>
          
          <category> Swift开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下hexo博客迁移</title>
      <link href="/posts/2022/11/6b073e5.html"/>
      <url>/posts/2022/11/6b073e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo用户指南-博客迁移"><a href="#Hexo用户指南-博客迁移" class="headerlink" title="Hexo用户指南 - 博客迁移"></a>Hexo用户指南 - 博客迁移</h3><p>GitHub+Hexo搭建博客的过程比较平滑，但是它的配置却非常耗时，一旦电脑出现问题或者需要在另外一台电脑上写博客，那么Hexo博客的迁移非常就让人头疼。下面参考其他博客的方法，针对类似问题，整理出一个能在平时就管理重要文件的方法，方便随时迁移。  </p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><h5 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h5><p>1、安装Git客户端</p><p>2、安装node.JS</p><span id="more"></span> <h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>在cmd任意路径下输入下面指令安装hexo:</p><p><code>npm install hexo-cli -g  </code></p><h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5><p>在D:/MyBlog目录下执行 <code>hexo init</code></p><h5 id="源文件拷贝"><a href="#源文件拷贝" class="headerlink" title="源文件拷贝"></a>源文件拷贝</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"></span><br><span class="line">package.json</span><br><span class="line"></span><br><span class="line">scaffolds/</span><br><span class="line"></span><br><span class="line">source/</span><br><span class="line"></span><br><span class="line">themes/</span><br><span class="line"></span><br><span class="line">.ssh (这个文件在Administrator目录下)</span><br></pre></td></tr></table></figure><h5 id="安装相关模块"><a href="#安装相关模块" class="headerlink" title="安装相关模块"></a>安装相关模块</h5><p>执行<code>npm install</code>安装相关模块</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>这个时候就可以用<code>hexo s</code>来看到你的博客是否迁移成功</p><h5 id="部署发布文章"><a href="#部署发布文章" class="headerlink" title="部署发布文章"></a>部署发布文章</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean // 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line"></span><br><span class="line">hexo g // 生成静态网页</span><br><span class="line"></span><br><span class="line">hexo d // 开始部署</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-admin设置用户名及密码</title>
      <link href="/posts/2022/11/2e087959.html"/>
      <url>/posts/2022/11/2e087959.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h3><h4 id="安装并使用hexo-admin"><a href="#安装并使用hexo-admin" class="headerlink" title="安装并使用hexo-admin"></a>安装并使用hexo-admin</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo -s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以运行hexo，接下来在浏览器地址栏粘贴这个地址，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/admin/</span><br></pre></td></tr></table></figure><p>就可以直接在浏览器里用markdown写博文了。  </p><span id="more"></span> <p>但是为了安全，在进入/admin时，增加一层账户密码的校验逻辑，插件也提供了安全验证 。 </p><h4 id="设置后台密码"><a href="#设置后台密码" class="headerlink" title="设置后台密码"></a>设置后台密码</h4><p>1 得到你的password_hash，进入Settings &gt; Setup authentification，如下图所示：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-41.png" alt=""> <p>得到如下图所示内容：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-42.png" alt=""><p>修改站点配置文件_config.yml，将上面得到的内容粘贴进去:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># admin</span><br><span class="line">admin:</span><br><span class="line">  username: ****</span><br><span class="line">  password_hash: ZwrRbx0gZl8myLbI9/oA4T4TxgSxE.</span><br><span class="line">  secret: *****</span><br></pre></td></tr></table></figure><p>然后<code>hexo s</code>重新启动服务，访问<code>http://localhost:4000/admin/</code>就打开登录界面了。<br>至此，为hexo-admin设置用户名和密码完成。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Tomcat和Web应用及整体打包镜像</title>
      <link href="/posts/2022/05/768a9d0d.html"/>
      <url>/posts/2022/05/768a9d0d.html</url>
      
        <content type="html"><![CDATA[<h3 id="拉取Tomcat镜像"><a href="#拉取Tomcat镜像" class="headerlink" title="拉取Tomcat镜像"></a>拉取Tomcat镜像</h3><p>这里只拉取一个Tomcat容器，运行一个简单的web项目，确保整个docker可以正常运行。</p><p>查看Tomcat镜像：<code>docker search tomcat</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker search tomcat</span><br><span class="line">NAME                                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tomcat                                         Apache Tomcat is an open source implementati…   3326      [OK]</span><br><span class="line">tomee                                          Apache TomEE is an all-Apache Java EE certif…   97        [OK]</span><br><span class="line">bitnami/tomcat                                 Bitnami Tomcat Docker Image                     45                   [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><span id="more"></span> <p>下载下来官方的镜像Starts最高的那个: <code>docker pull tomcat</code>,默认下载最新版本tomcat。但是我们需要的是8.5版本的tomcat，所以指定一下版本号：<code>docker pull tomcat:8.5.50</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker pull tomcat:8.5.50</span><br><span class="line">8.5.50: Pulling from library/tomcat</span><br><span class="line">dc65f448a2e2: Pull complete</span><br><span class="line">346ffb2b67d7: Pull complete</span><br><span class="line">dea4ecac934f: Pull complete</span><br><span class="line">8ac92ddf84b3: Pull complete</span><br><span class="line">d8ef64070a18: Pull complete</span><br><span class="line">6577248b0d6e: Pull complete</span><br><span class="line">576c0a3a6af9: Pull complete</span><br><span class="line">6e0159bd18db: Pull complete</span><br><span class="line">944191e51caa: Pull complete</span><br><span class="line">9ee6a5ca751e: Pull complete</span><br><span class="line">Digest: sha256:d53c2079ea67db92f6d7c39e9450f641610336016fdddef5392c5afd41518e5e</span><br><span class="line">Status: Downloaded newer image for tomcat:8.5.50</span><br><span class="line">docker.io/library/tomcat:8.5.50</span><br></pre></td></tr></table></figure><p>完成后查看本地镜像：<code>docker images</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker images</span><br><span class="line">REPOSITORY                                                        TAG           IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat                                                            latest        5eb506608219   8 days ago      685MB</span><br><span class="line">tomcat                                                            8.5.50        b56d8850aed5   2 years ago     529MB</span><br></pre></td></tr></table></figure><p>启动tomcat镜像，创建一个容器<br><code>docker run --name tomcat -d -p 8080:8080 tomcat:8.5.50</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker run --name tomcat -d -p 8080:8080 tomcat:8.5.50</span><br><span class="line">88ec3e189e60238d791bb3195e3d58d30ec1ecdb2721f8a567d597e26c54431b</span><br></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS                    NAMES</span><br><span class="line">d0224f53abaf   tomcat:8.5.50   &quot;catalina.sh run&quot;   12 minutes ago   Up 12 minutes   0.0.0.0:8080-&gt;8080/tcp   tomcat</span><br></pre></td></tr></table></figure><p>查看8080端口是否已监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# netstat -anp|grep 8080</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      5289/docker-proxy</span><br></pre></td></tr></table></figure><p>在主机中 ，实时查看docker容器日志</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 行数 容器名[containerID]  </span><br><span class="line">-f  按日志输出</span><br><span class="line">-t  显示时间戳</span><br></pre></td></tr></table></figure><p>通过docker ps命令查到containerID为 d0224f53abaf ,敲入如下命令查看日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 1000 d0224f53abaf</span><br></pre></td></tr></table></figure><p>进入容器（containerID 是容器的ID）：<code>docker exec -it containerID /bin/bash</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it d0224f53abaf /bin/bash</span><br></pre></td></tr></table></figure><h3 id="加载web应用"><a href="#加载web应用" class="headerlink" title="加载web应用"></a>加载web应用</h3><p>将准备的工程直接上传到服务器(我这里是ROOT.zip,上传到/root目录下，然后解压)。</p><p>通过docker的cp功能将文件复制到容器中去:<br><code>docker cp ROOT d0224f53abaf:/usr/local/tomcat/webapps</code>  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker cp ROOT d0224f53abaf:/usr/local/tomcat/webapps</span><br><span class="line">[root@k8s-03 ~]# docker exec -it d0224f53abaf /bin/bash</span><br><span class="line">root@d0224f53abaf:/usr/local/tomcat# cd webapps</span><br><span class="line">root@d0224f53abaf:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT</span><br></pre></td></tr></table></figure><p>这里复制完成后Tomcat容器不需要重启就会自动编译运行项目，看Tomcat日志:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-05-26T09:21:58.377404648Z 26-May-2022 09:21:58.376 INFO [localhost-startStop-2] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]</span><br><span class="line">2022-05-26T09:22:00.412601936Z 26-May-2022 09:22:00.412 INFO [localhost-startStop-2] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span><br><span class="line">2022-05-26T09:22:06.579693865Z 26-May-2022 09:22:06.579 INFO [localhost-startStop-2] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished in [8,203] ms</span><br></pre></td></tr></table></figure><p>现在通过 <a href="http://ip:8080/">http://ip:8080/</a> 就能访问目标服务器上的tomcat服务了。</p><h3 id="重新运行镜像"><a href="#重新运行镜像" class="headerlink" title="重新运行镜像"></a>重新运行镜像</h3><p>重新运行镜像要先停止镜像然后删除，之后才能重新运行镜像。<br>停止运行镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#docker container kill [containerID]  #手動停止容器</span><br><span class="line">docker container kill d0224f53abaf</span><br></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm tomcat</span><br></pre></td></tr></table></figure><p>另外，还有个删除镜像的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#docker rmi CONTAINERID</span><br><span class="line">docker rmi  d0224f53abaf</span><br></pre></td></tr></table></figure><h3 id="打包新镜像"><a href="#打包新镜像" class="headerlink" title="打包新镜像"></a>打包新镜像</h3><p>从容器创建一个新的镜像。</p><p>使用的命令：commit</p><p>语法：docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p><p>OPTIONS可添加属性说明：</p><p>   -a :提交的镜像作者；</p><p>   -c :使用Dockerfile指令来创建镜像；</p><p>   -m :提交时的说明文字；</p><p>   -p :在commit时，将容器暂停。</p><p>这里我们使用已经添加了Java Web项目的Tomcat容器创建镜像：</p><p><code>docker commit -a &quot;dx&quot; -m &quot;tomcat-web-demo&quot; d0224f53abaf tomcatwebdemo:v1.0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker commit -a &quot;dx&quot; -m &quot;tomcat-web-demo&quot; d0224f53abaf tomcatwebdemo:v1.0</span><br><span class="line">sha256:a562a5fc5062871190cedc4e6a2e517affba1c59845210bb7a7942fb86b098d7</span><br></pre></td></tr></table></figure><p>创建完查看本地镜像：docker images可以看到我们新创建的镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-03 ~]# docker images</span><br><span class="line">REPOSITORY                                                        TAG           IMAGE ID       CREATED          SIZE</span><br><span class="line">tomcatwebdemo                                                     v1.0          a562a5fc5062   57 seconds ago   535MB</span><br></pre></td></tr></table></figure><p>现在来直接运行这个新镜像:<br><code>docker run --name tomcatwebdemo -d -p 8081:8080 tomcatwebdemo:v1.0</code></p><p>浏览器访问新容器端口;测试成功。<br><code>http://ip:8080/</code></p><p>至此，我们就完成了一次多层镜像的创建。</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h4><p>打标签 <code>docker tag tomcatwebdemo:v2.0 10.100.57.178:5000/jfinaldemo:v2.0</code><br>推送 <code>docker push 10.100.57.178:5000/jfinaldemo:v2.0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -a &quot;dx&quot; -m &quot;jfinalauthdemo&quot; d0224f53abaf jfinalauthdemo:v4.0  </span><br><span class="line">docker run --name jfinalauthdemo -d -p 7999:7999 jfinalauthdemo:v4.0  </span><br><span class="line">#打标签  </span><br><span class="line">docker tag jfinalauthdemo:v4.0 10.100.57.178:5000/jfinalauthdemo:v4.0</span><br><span class="line">#推送到仓库  </span><br><span class="line">docker push 10.100.57.178:5000/jfinalauthdemo:v4.0</span><br></pre></td></tr></table></figure><h4 id="把host主机中的文件和容器相互拷贝"><a href="#把host主机中的文件和容器相互拷贝" class="headerlink" title="把host主机中的文件和容器相互拷贝"></a>把host主机中的文件和容器相互拷贝</h4><p>docker cp 容器名：要拷贝的文件在容器里面的路径       要拷贝到宿主机的相应路径<br>docker cp 宿主机的相应路径  容器名：要拷贝的文件在容器里面的路径  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp d0224f53abaf:/usr/local/tomcat/conf/server.xml /root/  </span><br><span class="line">docker cp /root/server.xml d0224f53abaf:/usr/local/tomcat/conf/  </span><br><span class="line"># 查看容器日志</span><br><span class="line">kubectl logs -f jfinaldemo-666b497ccf-98j5j -n=default</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用moviepy提取视频中的音频</title>
      <link href="/posts/2022/05/2ad0cdc4.html"/>
      <url>/posts/2022/05/2ad0cdc4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MoviePy是一个用于视频编辑的Python模块，它可被用于一些基本操作（如剪切、拼接、插入标题）、视频合成（即非线性编辑）、视频处理和创建高级特效。它可对大多数常见视频格式进行读写，包括GIF。</p><h2 id="安装moviepy"><a href="#安装moviepy" class="headerlink" title="安装moviepy"></a>安装moviepy</h2><blockquote><p>环境要求:Python2.7以上及Python3</p></blockquote><p>安装其实比较简单了，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install moviepy</span><br></pre></td></tr></table></figure><span id="more"></span> <blockquote><p>MoviePy依赖 Numpy 、 imageio 、 Decorator 和 tqdm ，他们将在安装MoviePy的同时自动安装。运行平台为Windows/Mac/Linux，并使用Python2.7以上的版本和Python3。</p></blockquote><blockquote><p>MoviePy依赖FFMPEG软件对视频进行读写，可以自行安装。在你第一次使用MoviePy的时候，FFMPEG将会自动由ImageIO下载和安装（不过需要花一些时间）。如果你想使用FFMPEG的特定版本，你可以设置FFMPEG_BINARY环境变量。  </p></blockquote><h2 id="提取音频"><a href="#提取音频" class="headerlink" title="提取音频"></a>提取音频</h2><p>三行代码搞定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1、使用moviepy模块 提取视频中的音频文件</span><br><span class="line">from moviepy.editor import AudioFileClip</span><br><span class="line"></span><br><span class="line">my_audio_clip = AudioFileClip(&quot;test.mp4&quot;)</span><br><span class="line"></span><br><span class="line">#  提取视频中的音频文件  m4v,mp3等音频格式也是支持的</span><br><span class="line">my_audio_clip.write_audiofile(&quot;test.mp3&quot;)</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>后续将提供从文件夹下的所有视频中批量提取音频的相关代码。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
            <tag> 音频提取 </tag>
            
            <tag> Moviepy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 k8s 1.23.3 安装部署</title>
      <link href="/posts/2022/05/eec2f1a3.html"/>
      <url>/posts/2022/05/eec2f1a3.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>系统环境: CentOS Linux release 7.8.2003 (Core)</p></li><li><p>硬件要求: Cpu调整为2 core  内存调整为 2000M   ( 必须 )</p></li><li><p>网络环境:   </p></li></ul><p>IP 根据当前环境自行调整:  </p><table><thead><tr><th>主机名</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.1.104</td></tr><tr><td>k8s-node1</td><td>192.168.1.105</td></tr><tr><td>k8s-node2</td><td>192.168.1.106</td></tr></tbody></table><span id="more"></span> <h3 id="可能多次使用的命令"><a href="#可能多次使用的命令" class="headerlink" title="可能多次使用的命令:"></a>可能多次使用的命令:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置配置: </span><br><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"># 查看日志: </span><br><span class="line">journalctl -f -u kubelet</span><br><span class="line"></span><br><span class="line"># 查看接点加入方式: </span><br><span class="line">kubeadm token create --print-join-command </span><br><span class="line"></span><br><span class="line"># 删除方式, 此处添加参数 `--grace-period=0 --force` 用于强制从node删除对应的 container , (未知原因有时container不会删除)</span><br><span class="line">kubectl delete -f deployment.yaml --grace-period=0 --force</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl status kubelet</span><br><span class="line"></span><br><span class="line"># ingress 查看</span><br><span class="line">kubectl apply -f ingress.yaml</span><br><span class="line">kubectl get ing </span><br><span class="line">kubectl get ingress</span><br><span class="line"># https://github.com/kubernetes/ingress-nginx</span><br><span class="line"># https://kubernetes.io/docs/concepts/services-networking/ingress/</span><br><span class="line"></span><br><span class="line"># ingress-nginx 部署使用及原理简介</span><br><span class="line">参考: https://blog.51cto.com/u_14034751/2647904</span><br><span class="line"># 新版本配置: https://www.cnblogs.com/Netsharp/p/15501138.html</span><br><span class="line"># https://blog.csdn.net/qq_39218530/article/details/115372879</span><br><span class="line"></span><br><span class="line">iptables -nL    #查看iptables策略</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 如果出现 cnixxx 相关的错误, 可能是因为调整了cidr的值导致的, 可用以下命令进行清理</span><br><span class="line">ip link set cni0 down</span><br><span class="line">brctl delbr cni0</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line">命令方式：nmcli</span><br><span class="line">nmtui要求安装了NetworkManager-tui包</span><br><span class="line">nmcli要求安装了NetworkManager包</span><br><span class="line">注：nmtui与nmcli均是通过NetworkManager实现对网络进行配置</span><br><span class="line">设置k8s环境准备条件</span><br></pre></td></tr></table></figure><p>分别设置主机名:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置 k8s-master 主机名 </span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line">echo &#x27;192.168.1.104 k8s-master&#x27; &gt;&gt; /etc/hosts</span><br><span class="line">echo &#x27;192.168.1.105 k8s-node1&#x27; &gt;&gt; /etc/hosts</span><br><span class="line">echo &#x27;192.168.1.106 k8s-node2&#x27; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"># 设置 k8s-node1 主机名 </span><br><span class="line">hostnamectl set-hostname k8s-node1</span><br><span class="line">echo &#x27;192.168.1.105 k8s-node1&#x27; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置 k8s-node2 主机名 </span><br><span class="line">hostnamectl set-hostname k8s-node2</span><br><span class="line">echo &#x27;192.168.1.106 k8s-node2&#x27; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="基础环境配置-k8s-master"><a href="#基础环境配置-k8s-master" class="headerlink" title="基础环境配置:  k8s-master"></a>基础环境配置:  k8s-master</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭selinux</span><br><span class="line"># 临时禁用selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 禁用交换分区</span><br><span class="line">swapoff -a</span><br><span class="line"># 永久禁用，打开/etc/fstab注释掉swap那一行。</span><br><span class="line">sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"># 删除之前的cni 网络信息 </span><br><span class="line">ip link set cni0 down</span><br><span class="line">brctl delbr cni0</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">yum install -y epel-release conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">systemctl disable firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 设置iptables</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 禁用 SELinux</span><br><span class="line"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span><br><span class="line">sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/&#x27; /etc/sysconfig/selinux</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class="line"></span><br><span class="line"># 加载内核模块</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">modprobe -- br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 修改访问权限</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line"># 配置内核参数，将桥接的IPv4流量传递到iptables的链</span><br><span class="line">cat &lt;&lt; EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># docker 安装: </span><br><span class="line"># 安装docker所需的工具</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"># 配置阿里云的docker源</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># 安装 docker-ce docker-ce-cli</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y docker-ce docker-ce-cli</span><br><span class="line"></span><br><span class="line"># 安装完成后配置启动时的命令，否则 docker 会将 iptables FORWARD chain 的默认策略设置为DROP</span><br><span class="line">sed -i &quot;13i ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT&quot; /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Kubernetes 默认设置cgroup驱动位为 &quot;systemd&quot; ，而 Docker 服务的cgroup驱动默认为 &quot;cgroupfs&quot;, </span><br><span class="line"># 建议将其修改为 “systemd&quot;, 与 Kubernetes 保持一致 ##</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bnc2bedr.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重启Docker 服务</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加阿里云的K8S源:  k8s-master   k8s-node1    k8s-node2  </span><br><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;- EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装kubeadm  kubectl  kubelet</span><br><span class="line">yum install -y kubectl kubeadm kubelet</span><br><span class="line"></span><br><span class="line"># 启动kubelet服务</span><br><span class="line">yum install -y kubectl-1.23.3 kubeadm-1.23.3 kubelet-1.23.3</span><br><span class="line"></span><br><span class="line"># 查看已经安装的版本</span><br><span class="line">kubelet --version</span><br></pre></td></tr></table></figure><h3 id="node-安装-k8s-node1-k8s-node2"><a href="#node-安装-k8s-node1-k8s-node2" class="headerlink" title="node 安装:  k8s-node1    k8s-node2"></a>node 安装:  k8s-node1    k8s-node2</h3><p>基础环境配置:   k8s-node</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭selinux</span><br><span class="line"># 临时禁用selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 禁用交换分区</span><br><span class="line">swapoff -a</span><br><span class="line"># 永久禁用，打开/etc/fstab注释掉swap那一行。</span><br><span class="line">sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">yum install -y epel-release conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">systemctl disable firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 设置iptables</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 禁用 SELinux</span><br><span class="line"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span><br><span class="line">sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/&#x27; /etc/sysconfig/selinux</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class="line"></span><br><span class="line"># 加载内核模块</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">modprobe -- br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 修改访问权限</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line"># 配置内核参数，将桥接的IPv4流量传递到iptables的链</span><br><span class="line">cat &lt;&lt; EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># docker 安装: </span><br><span class="line"># 安装docker所需的工具</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"># 配置阿里云的docker源</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># 安装 docker-ce docker-ce-cli</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y docker-ce docker-ce-cli</span><br><span class="line"></span><br><span class="line"># 安装完成后配置启动时的命令，否则 docker 会将 iptables FORWARD chain 的默认策略设置为DROP</span><br><span class="line">sed -i &quot;13i ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT&quot; /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Kubernetes 默认设置cgroup驱动位为 &quot;systemd&quot; ，而 Docker 服务的cgroup驱动默认为 &quot;cgroupfs&quot;, </span><br><span class="line"># 建议将其修改为 “systemd&quot;, 与 Kubernetes 保持一致 ##</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bnc2bedr.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重启Docker 服务</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加阿里云的K8S源:  k8s-master   k8s-node1    k8s-node2  </span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装kubeadm  kubelet</span><br><span class="line">yum install -y kubeadm kubelet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &#x27;KUBELET_EXTRA_ARGS=&quot;--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice&quot;&#x27; &gt; /etc/sysconfig/kubelet</span><br><span class="line"></span><br><span class="line"># 启动kubelet服务</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line"></span><br><span class="line"># 查看已经安装的版本</span><br><span class="line">kubelet --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果需要指定版本: </span><br><span class="line"></span><br><span class="line">## 安装指定版本</span><br><span class="line">yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p>初始化 k8s-master 环境 或 kubeadm reset 后都要按以下步骤执行, IP地址需根据实际情况调整</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 因为需要下载 images 需要一些时间, 这里会等待一会儿, IP 按当前网络环境自行修改: </span><br><span class="line"># 说明: https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/</span><br><span class="line">kubeadm init \</span><br><span class="line">--kubernetes-version=1.23.3 \</span><br><span class="line">--apiserver-advertise-address=192.168.1.104 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br><span class="line">1643798856184780.png</span><br></pre></td></tr></table></figure><p>命令说明：</p><p><strong>–pod-network-cidr</strong>: 定义pod网段为：10.244.0.0/16</p><p><strong>–apiserver-advertise-address</strong>：master主机内网IP地址</p><p><strong>–image-repository</strong>：指定阿里云镜像仓库地址。由于kubeadm 默认从官网<a href="http://k8s.grc.io下载所需镜像,国内无法访问,因此需要通过–image-repository指定阿里云镜像仓库地址./">http://k8s.grc.io下载所需镜像，国内无法访问，因此需要通过–image-repository指定阿里云镜像仓库地址。</a></p><p>集群初始化会出现如下结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br></pre></td></tr></table></figure><p>上面安装完后，会提示你输入如下命令，复制粘贴过来，执行即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 上面安装完成后，k8s会提示你输入如下命令，执行</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>如果是root用户请执行: 最好加入到 .zshrc  .bashrc, 此处有疑问…. TODO: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p>node机上执行:  此时执行会报错并且执行不成功, 请稍等执行好flannel 再到node机上执行: 如忘记: 可使用命令 kubeadm token create –print-join-command 查看:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.1.104:6443 --token rzruo2.3qa09lso9c51iinx \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:52ed235db605f9db5b78b042a09a628446e6f248bc434f5c9dfc0a6a0ea5f900</span><br></pre></td></tr></table></figure><p>配置: kube-flannel.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改/etc/hosts ,目的是解决无法下载 kube-flannel.yml 情况</span><br><span class="line">echo &#x27;199.232.96.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hosts</span><br><span class="line">curl -k -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>重要: ok, 此时去node机上执行 kubeadm join 即可, 这时在node执行 join 时会自动生 /run/flannel/subnet.env 文件, 而不会再报找不到文件的错误!</p><p>OK  部署完毕!</p><p>后续需要进行 ingress 和 dashboard 的安装  </p><ul><li>安装dashboard</li></ul><p><a href="https://github.com/kubernetes/dashboard/">https://github.com/kubernetes/dashboard/</a></p><p>设置Kubernetes的Master节点参与应用调度（默认安装Master节点不运行应用）。有两种方法：</p><p>长期改变节点的属性，允许Master运行应用，执行：</p><p>kubectl taint nodes –all node-role.kubernetes.io/master-<br>临时允许Master节点执行应用，在应用的yaml文件中添加：</p><pre><code>  tolerations:  - key: node-role.kubernetes.io/master        effect: NoSchedule</code></pre><h3 id="报错信息及解决方法记录"><a href="#报错信息及解决方法记录" class="headerlink" title="报错信息及解决方法记录"></a>报错信息及解决方法记录</h3><p>报错: 要求还挺高的:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[init] Using Kubernetes version: v1.23.3</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR NumCPU]: the number of available CPUs 1 is less than the required 2</span><br><span class="line">        [ERROR Mem]: the system RAM (972 MB) is less than the minimum 1700 MB</span><br><span class="line">        [ERROR DirAvailable--var-lib-etcd]: /var/lib/etcd is not empty</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/etcd</span><br><span class="line"></span><br><span class="line">cpu调整为2 core</span><br><span class="line"></span><br><span class="line">RAM 调整为 2000M</span><br><span class="line"></span><br><span class="line">禁用swap</span><br></pre></td></tr></table></figure><p>报错:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br><span class="line">[kubelet-check] It seems like the kubelet isn&#x27;t running or healthy.</span><br><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br><span class="line">[kubelet-check] It seems like the kubelet isn&#x27;t running or healthy.</span><br><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br><span class="line">[kubelet-check] It seems like the kubelet isn&#x27;t running or healthy.</span><br><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br><span class="line">[kubelet-check] It seems like the kubelet isn&#x27;t running or healthy.</span><br><span class="line">[kubelet-check] The HTTP call equal to &#x27;curl -sSL http://localhost:10248/healthz&#x27; failed with error: Get &quot;http://localhost:10248/healthz&quot;: dial tcp [::1]:10248: connect: connection refused.</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">   &quot;registry-mirrors&quot;:[&quot;https://bnc2bedr.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>init 成功:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.1.104:6443 --token y5xxms.514jm8ttg99byfqw \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:346e61f73686bb756ade89ad02401fab4d66bf12fa1c5be92b2f5ae128aea082</span><br></pre></td></tr></table></figure><p>错误信息:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pod -o wide</span><br><span class="line">Unable to connect to the server: x509: certificate signed by unknown authority </span><br><span class="line">(possibly because of &quot;crypto/rsa: verification error&quot; while trying to verify candidate authority </span><br><span class="line">certificate &quot;kubernetes&quot;)</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">199.232.96.133 raw.githubusercontent.com</span><br><span class="line"></span><br><span class="line">curl -k -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>错误:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r=&quot;failed to get cgroup stats for \&quot;/system.slice/docker.service\&quot;: failed to get container info for \&quot;/system.slice/docker.service\&quot;: unknown container \&quot;/system.slice/docker.service\&quot;&quot; containerName=&quot;/system.slice/docker.service&quot;</span><br><span class="line">Feb 01 18:51:41 k8s-master kubelet[967]: E0201 18:51:41.971405     967 summary_sys_containers.go:48] &quot;Failed to get system container stats&quot; err=&quot;failed to get cgroup stats for \&quot;/system.slice/docker.service\&quot;: failed to get container info for \&quot;/system.slice/docker.service\&quot;: unknown container \&quot;/system.slice/docker.service\&quot;&quot; containerName=&quot;/system.slice/docker.service&quot;</span><br><span class="line">Feb 01 18:51:51 k8s-master kubelet[967]: E0201 18:51:51.983359     967 summary_sys_containers.go:48] &quot;Failed to get system container stats&quot; err=&quot;failed to get cgroup stats for \&quot;/system.slice/docker.service\&quot;: failed to get container info for \&quot;/system.slice/docker.service\&quot;: unknown container \&quot;/system.slice/docker.service\&quot;&quot; containerName=&quot;/system.slice/docker.service&quot;</span><br><span class="line">Feb 01 18:52:01 k8s-master kubelet[967]: E0201 18:52:01.993080     967 summary_sys_containers.go:48] &quot;Failed to get system container stats&quot; err=&quot;failed to get cgroup stats for \&quot;/system.slice/docker.service\&quot;: failed to get container info for \&quot;/system.slice/docker.service\&quot;: unknown container \&quot;/system.slice/docker.service\&quot;&quot; containerName=&quot;/system.slice/docker.service&quot;</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p>按照以下方法修改后报错消失</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /etc/sysconfig/kubelet</span><br><span class="line"></span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice&quot;</span><br></pre></td></tr></table></figure><p>重新加载配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>错误:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.1.104:6443 --token a6o03y.wvcmk7o1d2c12w3c --discovery-token-ca-cert-hash sha256:bab7991421fd20f55bf1142dcb8a68887a2572deeb5a09e94d11c9935044a0ee</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Hostname]: hostname &quot;k8s-node2&quot; could not be reached</span><br><span class="line">[WARNING Hostname]: hostname &quot;k8s-node2&quot;: lookup k8s-node2 on 10.64.0.100:53: no such host</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置/etc/hosts</span><br><span class="line"></span><br><span class="line">echo &#x27;192.168.1.106 k8s-node2&#x27; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>master 上的错误:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Feb 01 21:37:16 k8s-node1 kubelet[24981]: E0201 21:37:16.200352   24981 cni.go:362] &quot;Error adding pod to network&quot; err=&quot;failed to delegate add: failed to set bridge addr: \&quot;cni0\&quot; already has an IP address different from 10.244.1.1/24&quot; pod=&quot;default/nginx-deployment-b5776f7cd-snsq5&quot; podSandboxID=&#123;Type:docker ID:bbb4c549c5c801d03458965a892d22871c5f87aa4ce94842b9c6d169ac51816b&#125; podNetnsPath=&quot;/proc/43241/ns/net&quot; networkType=&quot;flannel&quot; networkName=&quot;cbr0&quot;</span><br><span class="line">Feb 01 21:37:16 k8s-node1 kubelet[24981]: E0201 21:37:16.333645   24981 remote_runtime.go:209] &quot;RunPodSandbox from runtime service failed&quot; err=&quot;rpc error: code = Unknown desc = failed to set up sandbox container \&quot;bbb4c549c5c801d03458965a892d22871c5f87aa4ce94842b9c6d169ac51816b\&quot; network for pod \&quot;nginx-deployment-b5776f7cd-snsq5\&quot;: networkPlugin cni failed to set up pod \&quot;nginx-deployment-b5776f7cd-snsq5_default\&quot; network: failed to delegate add: failed to set bridge addr: \&quot;cni0\&quot; already has an IP address different from 10.244.1.1/24&quot;</span><br></pre></td></tr></table></figure><p>解决方法1:</p><p>发现是 cni0 网桥配置了一个不同网段的 IP 地址导致，删除该网桥（网络插件会自动重新创建）即可修复</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line">ip link set cni0 down</span><br><span class="line">brctl delbr cni0</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>从集群中删除该 Node。使用公有云时，kube-controller-manager 会在 VM 删除后自动删除对应的 Node。而在物理机部署的集群中，需要管理员手动删除 Node（如 kubectl delete node <node-name>。</p><p>Node 恢复正常。Kubelet 会重新跟 kube-apiserver 通信确认这些 Pod 的期待状态，进而再决定删除或者继续运行这些 Pod。</p><p>用户强制删除。用户可以执行 kubectl delete pods <pod> –grace-period=0 –force 强制删除 Pod。除非明确知道 Pod 的确处于停止状态（比如 Node 所在 VM 或物理机已经关机），否则不建议使用该方法。特别是 StatefulSet 管理的 Pod，强制删除容易导致脑裂或者数据丢失等问题。</p><h2 id="其他问题请查看日志命令"><a href="#其他问题请查看日志命令" class="headerlink" title="其他问题请查看日志命令"></a>其他问题请查看日志命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -xefu kubelet</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
            <tag> 容器技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Kuboard时metrics-server报错HTTP probe failed with statuscode: 500</title>
      <link href="/posts/2022/05/8635d5dd.html"/>
      <url>/posts/2022/05/8635d5dd.html</url>
      
        <content type="html"><![CDATA[<p>部署k8s v1.23完成后，安装Kuboard V2:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://kuboard.cn/install-script/kuboard.yaml</span><br><span class="line">kubectl apply -f https://addons.kuboard.cn/metrics-server/0.3.7/metrics-server.yaml</span><br></pre></td></tr></table></figure><p>安装完成后，进入Kuboard控制台界面，会发现Kuboard不能显示节点计算资源利用率情况，页面上提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请 检查metrics-server 是否启动正常</span><br><span class="line"></span><br><span class="line">请 检查Apiservice 状态是否正常</span><br></pre></td></tr></table></figure><span id="more"></span> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-39.png" alt=""><p>执行 kubectl top nodes 指令失败，提示如下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubectl top nodes</span><br><span class="line">Error from server (ServiceUnavailable): the server is currently unable to handle the request (get nodes.metrics.k8s.io)</span><br></pre></td></tr></table></figure><p>点击上图中的“请 检查metrics-server 是否启动正常”，会看到是哪个 metrics-server 节点出错，继续点击该节点会看到详细报错信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Readiness probe failed: HTTP probe failed with statuscode: 500</span><br></pre></td></tr></table></figure><p>拿到节点id，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看pod的详情</span><br><span class="line">kubectl describe -n kube-system po/metrics-server-6d544fd645-8flkv</span><br><span class="line"></span><br><span class="line">#没有什么有效信息，继续查看容器日志</span><br><span class="line"></span><br><span class="line">#输出pod中一个容器的日志</span><br><span class="line">kubectl logs -f metrics-server-6d544fd645-6778k -n=kube-system</span><br></pre></td></tr></table></figure><p>具体报错日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs -f metrics-server-6d544fd645-6778k -n=kube-system</span><br><span class="line"></span><br><span class="line">E0518 07:12:42.090952       1 server.go:132] unable to fully scrape metrics: [unable to fully scrape metrics from node XXX-02: unable to fetch metrics from node XXX-02: Get &quot;https://IP-02:10250/stats/summary?only_cpu_and_memory=true&quot;: x509: cannot validate certificate for IP-02 because it doesn&#x27;t contain any IP SANs, unable to fully scrape metrics from node XXX-01: unable to fetch metrics from node XXX-01: Get &quot;https://IP01:10250/stats/summary?only_cpu_and_memory=true&quot;: x509: cannot validate certificate for IP01 because it doesn&#x27;t contain any IP SANs, unable to fully scrape metrics from node XXX-master: unable to fetch metrics from node XXX-master: Get &quot;https://IP-MASTER:10250/stats/summary?only_cpu_and_memory=true&quot;: x509: cannot validate certificate for IP-MASTER because it doesn&#x27;t contain any IP SANs]</span><br><span class="line">I0518 07:12:42.091126       1 requestheader_controller.go:169] Starting RequestHeaderAuthRequestController</span><br><span class="line">I0518 07:12:42.091139       1 shared_informer.go:240] Waiting for caches to sync for RequestHeaderAuthRequestController</span><br><span class="line">I0518 07:12:42.091167       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file</span><br><span class="line">I0518 07:12:42.091204       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file</span><br><span class="line">I0518 07:12:42.091174       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::client-ca-file</span><br><span class="line">I0518 07:12:42.091246       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file</span><br><span class="line">I0518 07:12:42.091521       1 dynamic_serving_content.go:130] Starting serving-cert::/tmp/apiserver.crt::/tmp/apiserver.key</span><br><span class="line">I0518 07:12:42.091885       1 secure_serving.go:197] Serving securely on [::]:4443</span><br></pre></td></tr></table></figure><p>这个错误就是说“探测失败，因为它无法收集任何指标 。无法验证 IP-02 的证书，因为它不包含任何 IP SAN”。</p><p>怎么解决呢，其实办法很简单。</p><p>传递 ‘–kubelet-insecure-tls’ 以禁用证书验证即可（不建议在生产中）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit deployment.apps/metrics-server -n kube-system</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上述命令后，将 –kubelet-insecure-tls 添加到“spec.template.spec.containers.args”（YAML Path）下的列表中即可。  </p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com/ks8_kk/metrics-server:v0.4.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        livenessProbe:</span><br></pre></td></tr></table></figure><p>然后再回到Kuboard控制台界面，一切都正常了。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> Kuboard </tag>
            
            <tag> metrics-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msg=”getting status of runtime: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService”问题解决</title>
      <link href="/posts/2022/05/8ce9d753.html"/>
      <url>/posts/2022/05/8ce9d753.html</url>
      
        <content type="html"><![CDATA[<p>搭建k8s集群（v1.24.0版本）过程中碰到如下报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">    [WARNING FileExisting-ethtool]: ethtool not found in system path</span><br><span class="line">    [WARNING FileExisting-socat]: socat not found in system path</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">    [ERROR CRI]: container runtime is not running: output: time=&quot;2022-05-23T15:43:15+08:00&quot; level=fatal msg=&quot;getting status of runtime: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService&quot;</span><br><span class="line">, error: exit status 1</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br><span class="line">To see the stack trace of this error execute with --v=5 or higher</span><br></pre></td></tr></table></figure><p>解决办法很简单：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /etc/containerd/config.toml</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
            <tag> 容器技术 </tag>
            
            <tag> containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s v1.24.0搭建高可用(k8s)Kubernetes集群教程</title>
      <link href="/posts/2022/05/741c30b.html"/>
      <url>/posts/2022/05/741c30b.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h5 id="Kubernetes-1-24新特性"><a href="#Kubernetes-1-24新特性" class="headerlink" title="Kubernetes 1.24新特性"></a>Kubernetes 1.24新特性</h5><ul><li>从kubelet中移除dockershim<br>自1.20版本被弃用之后，dockershim组件终于在1.24的kubelet中被删除。从1.24开始，大家需要使用其他受到支持的运行时选项（例如containerd或CRI-O）；如果您选择Docker Engine作为运行时，则需要使用cri-dockerd。</li></ul><p>对于kubelet和containerd重要提示<br>在升级至1.24之前，请确认containerd版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下容器运行时已经或即将全面兼容Kubernetes 1.24：</span><br><span class="line">containerd v1.6.4及更高，v1.5.11及更高</span><br><span class="line">CRI-O 1.24及更高</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若CNI插件尚未升级且/或CNI配置文件中未声明CNI配置版本时，则containerd v1.6.0-v1.6.3版本将导致Pod CNI网络setup及tear down发生问题。containerd团队报告称，这些问题已经在containerd v1.6.4中得到解决。</span><br><span class="line">在containerd v1.6.0-v1.6.3时，如果你未升级CNI插件且/或声明CNI配置版本，则可能遇到CNI版本不兼容或无法为沙箱删除网络等错误。</span><br></pre></td></tr></table></figure><h2 id="Kubernetes-1-24新特性-1"><a href="#Kubernetes-1-24新特性-1" class="headerlink" title="Kubernetes 1.24新特性"></a>Kubernetes 1.24新特性</h2><ul><li><p>各beta API默认关闭<br>在默认情况下，新的各beta API不会在集群内得到启用。但全部原有beta API及其新版本将在1.24中继续默认启用</p></li><li><p>OpenAPI v3<br>Kubernetes 1.24开始为API的OpenAPI v3发布格式提供beta支持。</p></li><li><p>存储容量与存储卷扩展双双迎来通用版本<br>存储容量跟踪通过CSIStorageCapacity对象公开当前可用的存储容量，并对使用后续绑定的CSI存储卷的pod进行调度增强。<br>存储卷扩展则新增对现有持久卷的重新调整功能。</p></li><li><p>NonPreemptingPriority迎来稳定版<br>此功能为PriorityClasses添加了新的选项，可开启或关闭Pod抢占机制</p></li><li><p>存储插件迁移<br>目前Kubernetes开发团队正在迁移树内存储插件，希望在实现CSI插件的同时、保持原有API的正常起效。Azure Disk与OpenStack Cinder等插件已经完成了迁移。</p></li><li><p>gRPC探针升级至beta版<br>在1.24版本中，gRPC探针功能已经进入beta阶段且默认启用。现在，大家可以在Kubernetes中为自己的gRPC应用程序原生配置启动、活动与就绪探测，而且无需公开HTTP商战或者使用额外的可执行文件。</p></li><li><p>Kubelet证书提供程序升级至beta版<br>最初在Kubernetes 1.20版本中以alpha版亮相的kubelet镜像证书提供程序现已升级至beta版。现在，kubelet将使用exec插件动态检索容器镜像注册表的凭证，而不再将凭证存储在节点文件系统之上。</p></li><li><p>避免为服务分配IP时发生冲突<br>Kubernetes 1.24引入了一项新的选择性功能，允许用户为服务的静态IP分配地址保留一个软范围。通过手动启用此项功能，集群将从您指定的服务IP池中自动获取地址，从而降低冲突风险。  </p></li></ul><p>也就是说，服务的ClusterIP能够以下列方式分配：<br><strong>动态分配</strong>，即集群将在配置的服务IP范围内自动选择一个空闲IP。<br><strong>静态分配</strong>，意味着用户需要在已配置的服务IP范围内指定一个IP。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务ClusterIP是唯一的；因此若尝试使用已被分配的ClusterIP进行服务创建，则会返回错误结果。</span><br></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>我本地有kubernetes 1.18环境，接下来对环境进行初始化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#目前kubernetes版本</span><br><span class="line">[root@k8s-01 ~]# kubectl  get node</span><br><span class="line">NAME     STATUS   ROLES    AGE    VERSION</span><br><span class="line">k8s-01   Ready    master   243d   v1.18.3</span><br><span class="line">k8s-02   Ready    master   243d   v1.18.3</span><br><span class="line">k8s-03   Ready    master   243d   v1.18.3</span><br><span class="line">k8s-04   Ready    &lt;none&gt;   243d   v1.18.3</span><br><span class="line">k8s-05   Ready    &lt;none&gt;   243d   v1.18.3</span><br></pre></td></tr></table></figure><p>卸载集群命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#建议所有服务器都执行</span><br><span class="line">#!/bin/bash</span><br><span class="line">kubeadm reset -f</span><br><span class="line">modprobe -r ipip</span><br><span class="line">lsmod</span><br><span class="line">rm -rf ~/.kube/</span><br><span class="line">rm -rf /etc/kubernetes/</span><br><span class="line">rm -rf /etc/systemd/system/kubelet.service.d</span><br><span class="line">rm -rf /etc/systemd/system/kubelet.service</span><br><span class="line">rm -rf /usr/bin/kube*</span><br><span class="line">rm -rf /etc/cni</span><br><span class="line">rm -rf /opt/cni</span><br><span class="line">rm -rf /var/lib/etcd</span><br><span class="line">rm -rf /var/etcd</span><br><span class="line">yum -y remove kubeadm* kubectl* kubelet* docker*</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><table><thead><tr><th>IP地址</th><th>主机名</th><th>服务</th><th>配置</th></tr></thead><tbody><tr><td>192.168.31.10</td><td>k8s-01</td><td>k8s-master、containerd、keepalived、nginx</td><td>2c8g</td></tr><tr><td>192.168.31.11</td><td>k8s-02</td><td>k8s-master、containerd、keepalived、nginx</td><td>2c8g</td></tr><tr><td>192.168.31.12</td><td>k8s-03</td><td>k8s-master、containerd、keepalived、nginx</td><td>2c8g</td></tr><tr><td>192.168.31.13</td><td>k8s-04</td><td>k8s-node、containerd</td><td>1c4g</td></tr><tr><td>192.168.31.14</td><td>k8s-05</td><td>k8s-node、containerd</td><td>1c4g</td></tr><tr><td>VIP: 192.168.31.111 域名:apiserver.frps.cn</td><td></td><td></td><td></td></tr></tbody></table><p>apiserver.frps.cn:6443 为VIP</p><ul><li>kube-apiserver 三台节点</li><li>kube-schedulet 三台节点</li><li>kube-controller-manager 三台节点</li><li>ETCD 三台节点</li></ul><h5 id="服务版本"><a href="#服务版本" class="headerlink" title="服务版本"></a>服务版本</h5><table><thead><tr><th>服务名称</th><th>版本号</th></tr></thead><tbody><tr><td>内核</td><td>5.14.3-1.el7.elrepo.x86_64</td></tr><tr><td>containerd</td><td>v1.6.4</td></tr><tr><td>ctr</td><td>v1.6.4</td></tr><tr><td>k8s</td><td>1.24</td></tr></tbody></table><h5 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化环境需要全部节点都执行</span><br></pre></td></tr></table></figure><p>批量修改主机名，以及免密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s01  #所有机器按照要求修改</span><br><span class="line">bash        #刷新主机名</span><br><span class="line">#配置host</span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">192.168.31.10  k8s-01</span><br><span class="line">192.168.31.11  k8s-02</span><br><span class="line">192.168.31.12  k8s-03</span><br><span class="line">192.168.31.13  k8s-04</span><br><span class="line">192.168.31.14  k8s-05</span><br><span class="line">EOF</span><br><span class="line">#设置k8s-01为分发机 (只需要在k8s-01服务器操作即可)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum install -y expect</span><br><span class="line">#分发公钥</span><br><span class="line">ssh-keygen -t rsa -P &quot;&quot; -f /root/.ssh/id_rsa</span><br><span class="line">for i in k8s-01 k8s-02 k8s-03 k8s-04 k8s-05;do</span><br><span class="line">expect -c &quot;</span><br><span class="line">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@$i</span><br><span class="line">        expect &#123;</span><br><span class="line">                &quot;*yes/no*&quot; &#123;send &quot;yesr&quot;; exp_continue&#125;</span><br><span class="line">                &quot;*password*&quot; &#123;send &quot;123456r&quot;; exp_continue&#125;</span><br><span class="line">                &quot;*Password*&quot; &#123;send &quot;123456r&quot;;&#125;</span><br><span class="line">        &#125; &quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>我这里密码为123456，请根据需求自行更改  </p></blockquote><p>所有节点关闭Selinux、iptables、swap分区</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i &#x27;/ swap / s/^(.*)$/#1/g&#x27; /etc/fstab</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><p>所有节点配置yum源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>新安装的服务器可以安装下面的软件包，可以解决99%的依赖问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssh-clients openssl-devel curl-devel bison patch libmcrypt-devel libmhash-devel ncurses-devel binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel libgcj libtiff pam-devel libicu libicu-devel gettext-devel libaio-devel libaio libgcc libstdc++ libstdc++-devel unixODBC unixODBC-devel numactl-devel glibc-headers sudo bzip2 mlocate flex lrzsz sysstat lsof setuptool system-config-network-tui system-config-firewall-tui ntsysv ntp pv lz4 dos2unix unix2dos rsync dstat iotop innotop mytop telnet iftop expect cmake nc gnuplot screen xorg-x11-utils xorg-x11-xinit rdate bc expat-devel compat-expat1 tcpdump sysstat man nmap curl lrzsz elinks finger bind-utils traceroute mtr ntpdate zip unzip vim wget net-tools</span><br></pre></td></tr></table></figure><p>由于开启内核 ipv4 转发需要加载 br_netfilter 模块，所以加载下该模块：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line">modprobe ip_conntrack</span><br><span class="line">#每台节点</span><br></pre></td></tr></table></figure><p>将上面的命令设置成开机启动，因为重启后模块失效，下面是开机自动加载模块的方式。首先新建 /etc/rc.sysinit 文件，内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt;/etc/rc.sysinit&lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">for file in /etc/sysconfig/modules/*.modules ; do</span><br><span class="line">[ -x $file ] &amp;&amp; $file</span><br><span class="line">done</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后在/etc/sysconfig/modules/目录下新建如下文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;modprobe br_netfilter&quot; &gt;/etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line">echo &quot;modprobe ip_conntrack&quot; &gt;/etc/sysconfig/modules/ip_conntrack.modules</span><br></pre></td></tr></table></figure><p>增加权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ip_conntrack.modules</span><br></pre></td></tr></table></figure><p>然后重启后，模块就可以自动加载了</p><p>优化内核参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span><br><span class="line">vm.overcommit_memory=1 # 不检查物理内存是否够用</span><br><span class="line">vm.panic_on_oom=0 # 开启 OOM</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line">EOF</span><br><span class="line">cp kubernetes.conf  /etc/sysctl.d/kubernetes.conf</span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br><span class="line">#分发到所有节点</span><br><span class="line">for i in k8s-02 k8s-03 k8s-04 k8s-05</span><br><span class="line">do</span><br><span class="line">    scp kubernetes.conf root@$i:/etc/sysctl.d/</span><br><span class="line">    ssh root@$i sysctl -p /etc/sysctl.d/kubernetes.conf</span><br><span class="line">    ssh root@$i echo &#x27;1&#x27; &gt;&gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">done</span><br><span class="line">#for后面节点根据需求修改</span><br></pre></td></tr></table></figure><blockquote><p>bridge-nf 使得netfilter可以对Linux网桥上的 IPv4/ARP/IPv6 包过滤。比如，设置net.bridge.bridge-nf-call-iptables＝1后，二层的网桥在转发包时也会被 iptables的 FORWARD 规则所过滤。常用的选项包括：</p></blockquote><blockquote><blockquote><p>net.bridge.bridge-nf-call-arptables：是否在 arptables 的 FORWARD 中过滤网桥的 ARP 包<br>net.bridge.bridge-nf-call-ip6tables：是否在 ip6tables 链中过滤 IPv6 包<br>net.bridge.bridge-nf-call-iptables：是否在 iptables 链中过滤 IPv4 包<br>net.bridge.bridge-nf-filter-vlan-tagged：是否在 iptables/arptables 中过滤打了 vlan 标签的包。  </p></blockquote></blockquote><p>所有节点安装ipvs</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为什么要使用IPVS,从k8s的1.8版本开始，kube-proxy引入了IPVS模式，IPVS模式与iptables同样基于Netfilter，但是采用的hash表，因此当service数量达到一定规模时，hash查表的速度优势就会显现出来，从而提高service的服务性能。</span><br><span class="line">ipvs依赖于nf_conntrack_ipv4内核模块,4.19包括之后内核里改名为nf_conntrack,1.13.1之前的kube-proxy的代码里没有加判断一直用的nf_conntrack_ipv4,好像是1.13.1后的kube-proxy代码里增加了判断,我测试了是会去load nf_conntrack使用ipvs正常</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack</span><br><span class="line">EOF</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br><span class="line">#查看是否已经正确加载所需的内核模块</span><br></pre></td></tr></table></figure><p>所有节点安装ipset</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ipset -y</span><br></pre></td></tr></table></figure><p>ipset介绍</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables是Linux服务器上进行网络隔离的核心技术，内核在处理网络请求时会对iptables中的策略进行逐条解析，因此当策略较多时效率较低；而是用IPSet技术可以将策略中的五元组(协议，源地址，源端口,目的地址，目的端口)合并到有限的集合中，可以大大减少iptables策略条目从而提高效率。测试结果显示IPSet方式效率将比iptables提高100倍</span><br></pre></td></tr></table></figure><p>为了方面ipvs管理，这里安装一下ipvsadm。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure><p>所有节点设置系统时区</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"> #将当前的 UTC 时间写入硬件时钟</span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line"> #重启依赖于系统时间的服务</span><br><span class="line">systemctl restart rsyslog </span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><p>升级内核 (可选方案)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">#默认安装为最新内核</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line">#修改内核顺序</span><br><span class="line">grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line">#使用下面命令看看确认下是否启动默认内核指向上面安装的内核</span><br><span class="line">grubby --default-kernel</span><br><span class="line">#这里的输出结果应该为我们升级后的内核信息</span><br><span class="line">reboot</span><br><span class="line">#可以等所有初始化步骤结束进行reboot操作</span><br></pre></td></tr></table></figure><p>接下来更新一下软件包版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h2 id="Containerd-安装"><a href="#Containerd-安装" class="headerlink" title="Containerd 安装"></a>Containerd 安装</h2><p>在安装containerd前，我们需要优先升级libseccomp<br>在centos7中yum下载libseccomp的版本是2.3的，版本不满足我们最新containerd的需求，需要下载2.4以上的</p><blockquote><p><strong>Containerd需要在所有节点升级安装</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#卸载原来的</span><br><span class="line">[i4t@web01 ~]# rpm -qa | grep libseccomp</span><br><span class="line">libseccomp-devel-2.3.1-4.el7.x86_64</span><br><span class="line">libseccomp-2.3.1-4.el7.x86_64</span><br><span class="line">[i4t@web01 ~]# rpm -e libseccomp-devel-2.3.1-4.el7.x86_64 --nodeps</span><br><span class="line">[i4t@web01 ~]# rpm -e libseccomp-2.3.1-4.el7.x86_64 --nodeps</span><br><span class="line">#下载高于2.4以上的包</span><br><span class="line">[i4t@web01 ~]# wget http://rpmfind.net/linux/centos/8-stream/BaseOS/x86_64/os/Packages/libseccomp-2.5.1-1.el8.x86_64.rpm</span><br><span class="line">#安装</span><br><span class="line">[i4t@web01 ~]# rpm -ivh libseccomp-2.5.1-1.el8.x86_64.rpm </span><br><span class="line">warning: libseccomp-2.5.1-1.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:libseccomp-2.5.1-1.el8           ################################# [100%]</span><br><span class="line">#查看当前版本</span><br><span class="line">[root@web01 ~]# rpm -qa | grep libseccomp</span><br><span class="line">libseccomp-2.5.1-1.el8.x86_64</span><br></pre></td></tr></table></figure><h5 id="下载安装containerd"><a href="#下载安装containerd" class="headerlink" title="下载安装containerd"></a>下载安装containerd</h5><p>github地址:<a href="https://containerd.io/downloads/">https://containerd.io/downloads/</a></p><p>Containerd安装我们使用<strong>1.6.1</strong>版本号</p><blockquote><p>containerd-1.6.1-linux-amd64.tar.gz 只包含containerd<br>cri-containerd-cni-1.6.4-linux-amd64.tar.gz 包含containerd以及cri runc等相关工具包，建议下载本包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载tar.gz包</span><br><span class="line">#containerd工具包，包含cri runc等</span><br><span class="line">wget https://github.com/containerd/containerd/releases/download/v1.6.4/cri-containerd-cni-1.6.4-linux-amd64.tar.gz</span><br><span class="line">#备用下载地址</span><br><span class="line">wget https://d.frps.cn/file/kubernetes/containerd/cri-containerd-cni-1.6.4-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>工具包文件如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cri-containerd-cni会将我们整个containerd相关的依赖都进行下载下来</span><br><span class="line">[root@k8s-01 containerd]# tar zxvf cri-containerd-cni-1.6.4-linux-amd64.tar.gz -C /   #我们直接让它给我们对应的目录给替换掉</span><br><span class="line">etc/</span><br><span class="line">etc/systemd/</span><br><span class="line">etc/systemd/system/</span><br><span class="line">etc/systemd/system/containerd.service</span><br><span class="line">etc/crictl.yaml</span><br><span class="line">etc/cni/</span><br><span class="line">etc/cni/net.d/</span><br><span class="line">etc/cni/net.d/10-containerd-net.conflist</span><br><span class="line">usr/</span><br><span class="line">usr/local/</span><br><span class="line">usr/local/sbin/</span><br><span class="line">usr/local/sbin/runc</span><br><span class="line">usr/local/bin/</span><br><span class="line">usr/local/bin/crictl</span><br><span class="line">usr/local/bin/ctd-decoder</span><br><span class="line">usr/local/bin/ctr</span><br><span class="line">usr/local/bin/containerd-shim</span><br><span class="line">usr/local/bin/containerd</span><br><span class="line">usr/local/bin/containerd-shim-runc-v1</span><br><span class="line">usr/local/bin/critest</span><br><span class="line">usr/local/bin/containerd-shim-runc-v2</span><br><span class="line">usr/local/bin/containerd-stress</span><br><span class="line">opt/</span><br><span class="line">opt/containerd/</span><br><span class="line">opt/containerd/cluster/</span><br><span class="line">opt/containerd/cluster/version</span><br><span class="line">opt/containerd/cluster/gce/</span><br><span class="line">opt/containerd/cluster/gce/cni.template</span><br><span class="line">opt/containerd/cluster/gce/env</span><br><span class="line">opt/containerd/cluster/gce/configure.sh</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/node.yaml</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/master.yaml</span><br><span class="line">opt/cni/</span><br><span class="line">opt/cni/bin/</span><br><span class="line">opt/cni/bin/firewall</span><br><span class="line">opt/cni/bin/portmap</span><br><span class="line">opt/cni/bin/host-local</span><br><span class="line">opt/cni/bin/ipvlan</span><br><span class="line">opt/cni/bin/host-device</span><br><span class="line">opt/cni/bin/sbr</span><br><span class="line">opt/cni/bin/vrf</span><br><span class="line">opt/cni/bin/static</span><br><span class="line">opt/cni/bin/tuning</span><br><span class="line">opt/cni/bin/bridge</span><br><span class="line">opt/cni/bin/macvlan</span><br><span class="line">opt/cni/bin/bandwidth</span><br><span class="line">opt/cni/bin/vlan</span><br><span class="line">opt/cni/bin/dhcp</span><br><span class="line">opt/cni/bin/loopback</span><br><span class="line">opt/cni/bin/ptp</span><br></pre></td></tr></table></figure><p>上面的文件都是二进制文件，直接移动到对应的目录并配置好环境变量就可以进行使用了。</p><p>如果我们机器上通过yum安装docker了，可以用下面的命令进行卸载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker </span><br><span class="line">                  docker-client </span><br><span class="line">                  docker-client-latest </span><br><span class="line">                  docker-common </span><br><span class="line">                  docker-latest </span><br><span class="line">                  docker-latest-logrotate </span><br><span class="line">                  docker-logrotate </span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>接下来我们为每台服务器配置Containerd</p><p>#创建配置文件目录<br>[root@k8s-01 ~]# mkdir /etc/containerd -p<br>#生成默认配置文件<br>[root@k8s-01 ~]# containerd config default &gt; /etc/containerd/config.toml<br>#–config,-c可以在启动守护程序时更改此路径<br>#配置文件的默认路径位于/etc/containerd/config.toml<br>替换默认pause镜像地址</p><p>默认情况下k8s.gcr.io无法访问，所以使用我提供的阿里云镜像仓库地址即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/k8s.gcr.io/registry.cn-beijing.aliyuncs.com/abcdocker/&#x27; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">#所有节点更换默认镜像地址</span><br><span class="line">#我这里使用阿里云地址</span><br></pre></td></tr></table></figure><p>配置systemd作为容器的cgroup driver</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SystemdCgroup = false/SystemdCgroup = true/&#x27; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>Containerd官方操作手册</p><p>默认cri-containerd-cni包中会有containerd启动脚本，我们已经解压到对应的目录，可以直接调用启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# systemctl enable containerd --now   </span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/containerd.service to /etc/systemd/system/containerd.service.</span><br><span class="line">[root@k8s-01 ~]# systemctl status containerd   #查看containerd启动状态</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/containerd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2022-05-12 22:59:19 EDT; 3s ago</span><br><span class="line">     Docs: https://containerd.io</span><br><span class="line">  Process: 30048 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 30050 (containerd)</span><br><span class="line">   Memory: 24.5M</span><br><span class="line">   CGroup: /system.slice/containerd.service</span><br><span class="line">           └─30050 /usr/local/bin/containerd</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.153514446-04:00&quot; level=info msg=&quot;Get image filesystem path &quot;/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs&quot;&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154085898-04:00&quot; level=info msg=&quot;Start subscribing containerd event&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154137039-04:00&quot; level=info msg=&quot;Start recovering state&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154230615-04:00&quot; level=info msg=&quot;Start event monitor&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154276701-04:00&quot; level=info msg=&quot;Start snapshots syncer&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154299287-04:00&quot; level=info msg=&quot;Start cni network conf syncer for default&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154316094-04:00&quot; level=info msg=&quot;Start streaming server&quot;</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154675632-04:00&quot; level=info msg=serving... address=/run/containerd/containerd.sock.ttrpc</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.154755704-04:00&quot; level=info msg=serving... address=/run/containerd/containerd.sock</span><br><span class="line">May 12 22:59:19 web01 containerd[30050]: time=&quot;2022-05-12T22:59:19.155220379-04:00&quot; level=info msg=&quot;containerd successfully booted in 0.027654s&quot;</span><br></pre></td></tr></table></figure><p>ctr在我们解压包中已经附带了，直接可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# ctr version</span><br><span class="line">Client:     #ctr版本号</span><br><span class="line">  Version:  v1.6.4</span><br><span class="line">  Revision: 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16</span><br><span class="line">  Go version: go1.17.9</span><br><span class="line">Server:</span><br><span class="line">  Version:  v1.6.4     #containerd版本号</span><br><span class="line">  Revision: 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16</span><br><span class="line">  UUID: b376d7b6-c97e-4b39-8144-9624ade3ba84</span><br><span class="line">#可以使用下面命令查看containerd版本号</span><br><span class="line">[root@k8s-01 ~]# containerd --version</span><br><span class="line">containerd github.com/containerd/containerd v1.6.4 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16</span><br></pre></td></tr></table></figure><h2 id="Kubeadm-安装配置"><a href="#Kubeadm-安装配置" class="headerlink" title="Kubeadm 安装配置"></a>Kubeadm 安装配置</h2><p>首先我们需要在k8s-01配置kubeadm源</p><blockquote><p>下面kubeadm操作只需要在k8s-01上即可</p></blockquote><p>国内源</p><p>packages.cloud.google.com这里懂的都懂，下面改成阿里云源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>官方文档推荐源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>k8s-01节点安装kubeadm和master相关依赖组建</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.24.0 kubeadm-1.24.0 kubectl-1.24.0 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><p>将k8s-01节点的kubelet设置成开机启动：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure><p>配置kubeadm文件</p><p>这里我们在k8s-01上配置打印init默认配置信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm config print init-defaults &gt;kubeadm-init.yaml</span><br></pre></td></tr></table></figure><p>虽然kubeadm作为etcd节点的管理工具，但请注意kubeadm不打算支持此类节点的证书轮换或升级。长期计划是使用etcdadm来工具来进行管理。</p><p>因为我这里要做集群，请根据我这里的配置按需修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# cat kubeadm-init.yaml </span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.31.10               #k8s-01 ip地址</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: unix:///var/run/containerd/containerd.sock</span><br><span class="line">  imagePullPolicy: IfNotPresent</span><br><span class="line">  name: k8s-01</span><br><span class="line">  taints: null</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: &#123;&#125;</span><br><span class="line">etcd:</span><br><span class="line">    local:</span><br><span class="line">      dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: 1.24.0</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs                                            # kube-proxy 模式</span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: false</span><br><span class="line">  webhook:</span><br><span class="line">    cacheTTL: 0s</span><br><span class="line">    enabled: true</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /etc/kubernetes/pki/ca.crt</span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">  webhook:</span><br><span class="line">    cacheAuthorizedTTL: 0s</span><br><span class="line">    cacheUnauthorizedTTL: 0s</span><br><span class="line">clusterDNS:</span><br><span class="line">- 10.96.0.10</span><br><span class="line">clusterDomain: cluster.local</span><br><span class="line">cpuManagerReconcilePeriod: 0s</span><br><span class="line">evictionPressureTransitionPeriod: 0s</span><br><span class="line">fileCheckFrequency: 0s</span><br><span class="line">healthzBindAddress: 127.0.0.1</span><br><span class="line">healthzPort: 10248</span><br><span class="line">httpCheckFrequency: 0s</span><br><span class="line">imageMinimumGCAge: 0s</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd                   # 配置 cgroup driver</span><br><span class="line">logging: &#123;&#125;</span><br><span class="line">memorySwap: &#123;&#125;</span><br><span class="line">nodeStatusReportFrequency: 0s</span><br><span class="line">nodeStatusUpdateFrequency: 0s</span><br><span class="line">rotateCertificates: true</span><br><span class="line">runtimeRequestTimeout: 0s</span><br><span class="line">shutdownGracePeriod: 0s</span><br><span class="line">shutdownGracePeriodCriticalPods: 0s</span><br><span class="line">staticPodPath: /etc/kubernetes/manifests</span><br><span class="line">streamingConnectionIdleTimeout: 0s</span><br><span class="line">syncFrequency: 0s</span><br><span class="line">volumeStatsAggPeriod: 0s</span><br></pre></td></tr></table></figure><p>检查配置文件是否有错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# kubeadm init --config kubeadm-init.yaml --dry-run</span><br></pre></td></tr></table></figure><p>正确如下</p><p>1652881108147.png</p><p>预先拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# kubeadm config images list --config kubeadm-init.yaml </span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.24.0</span><br><span class="line">k8s.gcr.io/pause:3.7</span><br><span class="line">k8s.gcr.io/etcd:3.5.3-0</span><br><span class="line">k8s.gcr.io/coredns/coredns:v1.8.6</span><br></pre></td></tr></table></figure><p>提前下载镜像导入，默认情况使用的是k8s.gcr.io，这个镜像地址我们无法pull，所以使用导入的方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://d.frps.cn/file/kubernetes/image/k8s_all_1.24.tar</span><br><span class="line">#拷贝到其它节点</span><br><span class="line">for i in k8s-02 k8s-03 k8s-04 k8s-05;do</span><br><span class="line">    scp k8s_all_1.24.tar root@$i:/root/</span><br><span class="line">    ssh root@$i ctr -n k8s.io i import k8s_all_1.24.tar</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# ctr -n k8s.io i ls -q</span><br><span class="line">k8s.gcr.io/coredns/coredns:v1.8.6</span><br><span class="line">k8s.gcr.io/etcd:3.5.3-0</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.24.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.24.0</span><br><span class="line">k8s.gcr.io/pause:3.7</span><br></pre></td></tr></table></figure><h2 id="Kubectl-安装"><a href="#Kubectl-安装" class="headerlink" title="Kubectl 安装"></a>Kubectl 安装</h2><p>这一步可以省略，可以通过后续yum安装，这一步可以忽略</p><blockquote><p>kubeadm不会安装或管理kubelet，kubectl因此需要确保它们kubeadm和Kubernetes版本相匹配。如果不这样，则存在版本偏差的风险。但是，支持kubelet和k8s之间的一个小版本偏差，但kubelet版本可能永远不会超过API Server版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载1.24.0 kubectl工具</span><br><span class="line">[root@k8s-01 ~]# curl -LO https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl</span><br><span class="line">[root@k8s-01 ~]# chmod +x kubectl &amp;&amp; mv kubectl /usr/local/bin/</span><br><span class="line">#检查kubectl工具版本号</span><br><span class="line">[root@k8s-01 ~]# kubectl version --client --output=yaml</span><br><span class="line">clientVersion:</span><br><span class="line">  buildDate: &quot;2022-05-03T13:46:05Z&quot;</span><br><span class="line">  compiler: gc</span><br><span class="line">  gitCommit: 4ce5a8954017644c5420bae81d72b09b735c21f0</span><br><span class="line">  gitTreeState: clean</span><br><span class="line">  gitVersion: v1.24.0</span><br><span class="line">  goVersion: go1.18.1</span><br><span class="line">  major: &quot;1&quot;</span><br><span class="line">  minor: &quot;24&quot;</span><br><span class="line">  platform: linux/amd64</span><br><span class="line">kustomizeVersion: v4.5.4</span><br><span class="line">#拷贝kubectl到其它master节点</span><br><span class="line">for i in k8s-02 k8s-03;do</span><br><span class="line">    scp /usr/local/bin/kubectl root@$i:/usr/local/bin/kubectl</span><br><span class="line">    ssh root@$i chmod +x /usr/local/bin/kubectl</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>接下来开始初始化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]#  kubeadm init --config kubeadm-init.yaml  --upload-certs</span><br></pre></td></tr></table></figure><p>初始化过程</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-34.png" alt=""><p>初始化完成</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-35.png" alt=""><p>记住init后打印的token，复制kubectl的kubeconfig，kubectl的kubeconfig路径默认是~/.kube/config</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>初始化的配置文件为保存在configmap里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system get cm kubeadm-config -o yaml</span><br></pre></td></tr></table></figure><p>接下来执行kubectl就可以看到node了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# kubectl get node</span><br><span class="line">NAME     STATUS   ROLES           AGE     VERSION</span><br><span class="line">k8s-01   Ready    control-plane   4m18s   v1.24.0</span><br></pre></td></tr></table></figure><h2 id="Master节点配置"><a href="#Master节点配置" class="headerlink" title="Master节点配置"></a>Master节点配置</h2><p>前面我们已经为所有master节点配置了一下服务</p><ul><li>nginx</li><li>keeplived</li><li>containerd </li></ul><p>接下来只需要给其它master节点安装k8s组件  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>安装相关组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.24.0 kubeadm-1.24.0 kubectl-1.24.0 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><p>启动kubelet</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure><p>master执行添加节点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join apiserver.frps.cn:8443 --token abcdef.0123456789abcdef </span><br><span class="line">        --discovery-token-ca-cert-hash sha256:a54c17e514edba57226f969268227b749d8bfb8802ae99112e08cbcabcd22ae0 </span><br><span class="line">        --control-plane --certificate-key f7b0eb9c7e0aac2c95eef083c591950109434250a6df9cc0dc1ec9fb04461250</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置kubectl config文件</span><br></pre></td></tr></table></figure><p>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目前我们3台master节点已经添加完毕</span><br></pre></td></tr></table></figure><p>[root@k8s-02 ~]# kubectl get node<br>NAME     STATUS   ROLES           AGE     VERSION<br>k8s-01   Ready    control-plane   15m     v1.24.0<br>k8s-02   Ready    control-plane   6m25s   v1.24.0<br>k8s-03   Ready    control-plane   14m     v1.24.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Node节点配置</span><br><span class="line">##### node节点安装kubeadm</span><br></pre></td></tr></table></figure><p>cat &lt;<EOF > /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<a href="http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64">http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</a><br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=<a href="http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a><br>        <a href="http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a><br>EOF</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##### 安装相关组件</span><br></pre></td></tr></table></figure><p>yum install -y kubeadm-1.24.0 –disableexcludes=kubernetes</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加join命令</span><br></pre></td></tr></table></figure><p>kubeadm join apiserver.frps.cn:8443 –token abcdef.0123456789abcdef<br>        –discovery-token-ca-cert-hash sha256:a54c17e514edba57226f969268227b749d8bfb8802ae99112e08cbcabcd22ae0 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果我们后续需要添加node节点时，可以到k8s-01节点执行下面的命令获取token相关信息</span><br></pre></td></tr></table></figure><p>[root@k8s-01 ~]# kubeadm token create –print-join-command<br>kubeadm join apiserver.frps.cn:8443 –token sgvcen.qf87ykht9gopqe0d –discovery-token-ca-cert-hash sha256:f535fdf0af19022a30760fd5069c648019a3f4b4828bfb2eb566224d76d21647 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果我们添加某台节点异常了，修改后可以执行下面的命令，然后在重新join加入集群</span><br></pre></td></tr></table></figure><p>kubeadm reset</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">验证所有服务器是否添加到集群中</span><br></pre></td></tr></table></figure><p>[root@k8s-01 ~]# kubectl get node -o wide<br>NAME     STATUS   ROLES           AGE    VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME<br>k8s-01   Ready    control-plane   22m    v1.24.0   192.168.31.10   <none>        CentOS Linux 7 (Core)   5.17.8-1.el7.elrepo.x86_64    containerd://1.6.4<br>k8s-02   Ready    control-plane   13m    v1.24.0   192.168.31.11   <none>        CentOS Linux 7 (Core)   5.17.8-1.el7.elrepo.x86_64    containerd://1.6.4<br>k8s-03   Ready    control-plane   21m    v1.24.0   192.168.31.12   <none>        CentOS Linux 7 (Core)   5.17.8-1.el7.elrepo.x86_64    containerd://1.6.4<br>k8s-04   Ready    <none>          107s   v1.24.0   192.168.31.13   <none>        CentOS Linux 7 (Core)   5.17.8-1.el7.elrepo.x86_64    containerd://1.6.4<br>k8s-05   Ready    <none>          6m6s   v1.24.0   192.168.31.14   <none>        CentOS Linux 7 (Core)   3.10.0-1160.62.1.el7.x86_64   containerd://1.6.4</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 网络配置</span><br><span class="line">这个时候其实集群还不能正常使用，因为还没有安装网络插件，接下来安装网络插件，可以在文档 https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ 中选择我们自己的网络插件，这里我们安装 flannel</span><br></pre></td></tr></table></figure><p>wget <a href="http://down.i4t.com/k8s1.24/kube-flannel.yml">http://down.i4t.com/k8s1.24/kube-flannel.yml</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据需求修改网卡配置，我这里以ens160为主</span><br></pre></td></tr></table></figure><pre><code>  containers:  - name: kube-flannel    image: quay.io/coreos/flannel:v0.12.0-amd64    command:    - /opt/bin/flanneld    args:    - --ip-masq    - --kube-subnet-mgr    - --iface=ens160  # 如果是多网卡的话，指定内网网卡的名称</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">温馨提示: 在kubeadm.yaml文件中设置了podSubnet网段，同时在flannel中网段也要设置相同的。 （我这里默认就是相同的配置）</span><br><span class="line"></span><br><span class="line">执行</span><br></pre></td></tr></table></figure><p>[root@k8s-01 ~]# kubectl apply -f kube-flannel.yml </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## CNI插件问题</span><br><span class="line">默认情况下containerd也会有一个cni插件，但是我们已经安装Flannel了，我们需要使用Flannel的cni插件，需要将containerd里面的cni配置文件进行注释，否则2个配置会产生冲突</span><br><span class="line"></span><br><span class="line">因为如果这个目录中有多个 cni 配置文件，kubelet 将会使用按文件名的字典顺序排列的第一个作为配置文件，所以前面默认选择使用的是 containerd-net 这个插件。</span><br></pre></td></tr></table></figure><p>mv /etc/cni/net.d/10-containerd-net.conflist /etc/cni/net.d/10-containerd-net.conflist.bak<br>ifconfig cni0 down &amp;&amp; ip link delete cni0<br>systemctl daemon-reload<br>systemctl restart containerd kubelet</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接下来我们所有的pod都可以正常运行了</span><br><span class="line"></span><br><span class="line">&#123;% asset_img pasted-36.png  %&#125;</span><br><span class="line"></span><br><span class="line">##### 验证集群</span><br><span class="line">等kube-system命名空间下的Pod都为Running，这里先测试一下dns是否正常</span><br></pre></td></tr></table></figure><p>cat&lt;&lt;EOF | kubectl apply -f -<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: nginx<br>spec:<br>  selector:<br>    matchLabels:<br>      app: nginx<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - image: nginx:alpine<br>        name: nginx<br>        ports:<br>        - containerPort: 80</p><hr><p>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx<br>spec:<br>  selector:<br>    app: nginx<br>  type: NodePort<br>  ports:<br>    - protocol: TCP<br>      port: 80<br>      targetPort: 80<br>      nodePort: 30001</p><hr><p>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: busybox<br>  namespace: default<br>spec:<br>  containers:</p><ul><li>name: busybox<br>image: abcdocker9/centos:v1<br>command:<ul><li>sleep</li><li>“3600”<br>imagePullPolicy: IfNotPresent<br>restartPolicy: Always<br>EOF<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建后Pod我们进行检查</span><br></pre></td></tr></table></figure></li></ul></li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-37.png" alt=""><p>使用nslookup查看是否能返回地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]# kubectl exec -ti busybox -- nslookup kubernetes</span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10#53</span><br><span class="line">Name:   kubernetes.default.svc.cluster.local</span><br><span class="line">Address: 10.96.0.1</span><br></pre></td></tr></table></figure><p>测试nginx svc以及Pod内部网络通信是否正常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in k8s-01 k8s-02 k8s-03 k8s-04 k8s-05</span><br><span class="line">do</span><br><span class="line">   ssh root@$i curl -s 10.99.209.220   #nginx svc ip</span><br><span class="line">   ssh root@$i curl -s 10.244.3.4   #pod ip</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>访问宿主机nodePort端口</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-38.png" alt=""><blockquote><p>转载自 <a href="https://i4t.com/5451.html">https://i4t.com/5451.html</a> ，进行了一些勘误。如侵权，请联系删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Autosub为音频视频自动生成字幕文件</title>
      <link href="/posts/2022/05/e0ba2ad4.html"/>
      <url>/posts/2022/05/e0ba2ad4.html</url>
      
        <content type="html"><![CDATA[<p>Autosub是一个字幕自动生成工具。它能使用Auditok来自动检测语音区域，通过ffmpeg根据语音区域来切割音频，通过多个API将语音转为文字，以及通过py-googletrans将字幕文本翻译。</p><h3 id="autosub"><a href="#autosub" class="headerlink" title="autosub"></a>autosub</h3><p>autosub 原本使用 python 2.X 开发，仅支持 linux 和 macos 系统，现已停止维护</p><p>其原理是对音视频文件进行语音活动检测以查找说话的区域，然后并行调用 Google Web Speech API 进行转录，（可选）翻译成目标语言，并将结果存储下来。</p><h3 id="autosub3"><a href="#autosub3" class="headerlink" title="autosub3"></a>autosub3</h3><p>基于 autosub，升级到 python 3.X 版本，并添加了对 windows 系统的支持。</p><p>源码库：<a href="https://github.com/BingLingGroup/autosub">Github</a></p><span id="more"></span> <h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>依赖 ffmpeg 进行音频提取，需要自己手动安装，并添加到系统环境变量中。</p><p>autosub3 的安装非常简单，执行以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install autosub3</span><br></pre></td></tr></table></figure><p>注意<br>由于要调用 google speech 的 API，请自行翻墙。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autosub abc.mp4</span><br></pre></td></tr></table></figure><p>即可在 abc.mp4 同目录下生成 abc.srt 的字幕文件。  </p><p>指定语言为中文：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autosub -S zh-CN -D zh-CN videoplayback.mp4 </span><br></pre></td></tr></table></figure><p>查看参数说明:  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autosub --help</span><br></pre></td></tr></table></figure><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>请参见Github autosub库的<br><a href="https://github.com/BingLingGroup/autosub/blob/dev/docs/README.zh-Hans.md">使用说明</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频剪辑 </tag>
            
            <tag> 字幕 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用脚本快速安装docker和k8s</title>
      <link href="/posts/2022/05/4feefd57.html"/>
      <url>/posts/2022/05/4feefd57.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用脚本快速安装docker"><a href="#使用脚本快速安装docker" class="headerlink" title="使用脚本快速安装docker"></a>使用脚本快速安装docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境要求：</span><br><span class="line"></span><br><span class="line">Docker 需要安装在 64 位的 x86 平台或 ARM 平台上（如树莓派） ，并且要求内核 版本不低于 3.10。  </span><br><span class="line">但实际上内核越新越好，过低的内核版本可能会出现部分功能无 法使用，或者不稳定。</span><br></pre></td></tr></table></figure><p>执行如下命令即可：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h2 id="使用脚本快速安装k8s"><a href="#使用脚本快速安装k8s" class="headerlink" title="使用脚本快速安装k8s**"></a>使用脚本快速安装k8s**</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境要求：</span><br><span class="line">一台或多台机器，操作系统CentOS7.x-86_x64</span><br><span class="line">硬件配置：内存2GB或2G+，CPU 2核或CPU 2核+</span><br><span class="line">集群内各个机器之间能相互通信</span><br><span class="line">集群内各个机器可以访问外网，需要拉取镜像</span><br><span class="line">禁止swap分区</span><br></pre></td></tr></table></figure><p>下载安装脚本 <a href="https://link.juejin.cn/?target=https://www.aliyundrive.com/s/3yzGyfRjhLu">install_k8s.sh</a><br>上传到待安装机器，并分配执行权限chmod +x install_k8s.sh<br>执行脚本sh install_k8s.sh </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ./install_k8s.sh  </span><br><span class="line">./install_k8s.sh </span><br></pre></td></tr></table></figure><p>安装步骤就是这么简单，so easy ^_^  </p><p>注：如果指定k8s版本号，可直接修改脚本。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员下一个项目的灵感来源</title>
      <link href="/posts/2022/05/3427750e.html"/>
      <url>/posts/2022/05/3427750e.html</url>
      
        <content type="html"><![CDATA[<p>这个网站收集很多从不同应用商店收集到的那些人们愿意付费，但是评分很低的软件 / 插件 / 扩展。你可以在这里找到下一个项目的灵感。</p><p>这些 APP 都是经过市场检验的有真正用户需求，人们有付费意愿的，只是现在的 APP 做的不够好，你可以从中选取你感兴趣的，做一个复刻和升级。</p><span id="more"></span> <p><a href="https://ideasfilter.com/">https://ideasfilter.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何升级nodejs版本</title>
      <link href="/posts/2022/05/4feb9d30.html"/>
      <url>/posts/2022/05/4feb9d30.html</url>
      
        <content type="html"><![CDATA[<p>方法一： 用n升级nodejs</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前node版本</span><br><span class="line">$ node -v</span><br><span class="line"></span><br><span class="line"># 清除npm缓存</span><br><span class="line">$ npm cache clean -f</span><br><span class="line"></span><br><span class="line"># 全局安装n</span><br><span class="line">$ npm install -g n</span><br><span class="line"></span><br><span class="line"># 升级到最新稳定版</span><br><span class="line">$ n stable</span><br><span class="line"></span><br><span class="line"># 升级到最新版</span><br><span class="line">$ n latest</span><br><span class="line"></span><br><span class="line"># 升级到定制版</span><br><span class="line">$ n v14.6.0</span><br><span class="line"></span><br><span class="line"># 切换使用版本</span><br><span class="line">$ n 13.10.0 (ENTER)</span><br><span class="line"></span><br><span class="line"># 删除制定版本</span><br><span class="line">$ n rm 13.10.0</span><br><span class="line"></span><br><span class="line"># 用制定的版本执行脚本</span><br><span class="line">$ n use 13.10.0 some.js</span><br><span class="line"></span><br><span class="line"># 升级完成查看 node版本</span><br><span class="line">$ node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二：官网下载<br>去官网 <a href="http://nodejs.cn/">http://nodejs.cn/</a> 下载指定版本安装即可。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序周日历滑动组件</title>
      <link href="/posts/2022/03/b3b460b2.html"/>
      <url>/posts/2022/03/b3b460b2.html</url>
      
        <content type="html"><![CDATA[<p>最近在做一个小程序的过程中，需要使用到日历的周滑动切换组件，经过查询，找到以下组件满足需求，留着备用。</p><p>实现的功能：  </p><ul><li>可滑动切换上一周和下一周；</li><li>点击年月可跳转到指定日期；</li><li>修复了iOS手机年和日出现NaN的问题。<span id="more"></span> 效果图：</li></ul><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-31.png" alt=""><p>在components组件文件夹下新建calendarWeek文件夹，创建calendarWeek组件。  </p><p>在需要使用的页面导入使用。</p><p>小程序代码片段，可在微信开发者工具导入使用：<a href="https://developers.weixin.qq.com/s/a4y1NCmP7Anv">https://developers.weixin.qq.com/s/a4y1NCmP7Anv</a></p><p>GitHub源码地址：<a href="https://github.com/Lemon-Yan/calendarWeek">小程序周日历滑动组件</a></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux内存占用问题调查——为什么cached占用如此多的内存</title>
      <link href="/posts/2022/03/86365bd7.html"/>
      <url>/posts/2022/03/86365bd7.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述："><a href="#一、问题描述：" class="headerlink" title="一、问题描述："></a>一、问题描述：</h3><p>线上centos服务器查看内容使用情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@t-tomcat-online105-jylt ~]# free -g</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:            31         28          2          0          0         27</span><br><span class="line">-/+ buffers/cache:          1         30</span><br><span class="line">Swap:            3          0          3</span><br></pre></td></tr></table></figure><p>系统总内存32g，看Mem下的free大小为2。系统上没有跑任务服务，用ps大概统计下所有程序占用的总内存：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ps aux | awk &#x27;&#123;mem += $6&#125; END &#123;print mem/1024/1024&#125;&#x27;</span><br><span class="line">0.127075</span><br></pre></td></tr></table></figure><p>发现占用内存也非常少。那么，内存到底被哪些隐藏的设置占用着？</p><span id="more"></span> <h3 id="二、问题分析："><a href="#二、问题分析：" class="headerlink" title="二、问题分析："></a>二、问题分析：</h3><p>根据free -g 命令可以看出来，Mem/cached占用了27g，而Mem/used中包含了系统使用的+buffer+cache+slab。所以，到这里就明朗化了，被占用的内存都被cached占有了。</p><p>1）可以这么理解：在linux的内存分配机制中，优先使用物理内存，当物理内存还有空闲时（还够用），不会释放其占用内存，就算占用内存的程序已经被关闭了，该程序所占用的内存用来做缓存使用，对于开启过的程序、或是读取刚存取过得数据会比较快。</p><p>2）因此查看目前进程正在实际被使用的内存，是used-(buffers+cache)，也可以认为如果swap没有大量使用，mem还是够用的，只有mem被当前进程实际占用完（没有了buffers和cache），才会使用到swap的。或者可以通过free命令的第二行来看剩余内存大小，第二行的free列表示系统未使用的内存+buffer+cached。</p><h3 id="三、Linux内存中的Cache真的能被回收么？"><a href="#三、Linux内存中的Cache真的能被回收么？" class="headerlink" title="三、Linux内存中的Cache真的能被回收么？"></a>三、Linux内存中的Cache真的能被回收么？</h3><h4 id="1、什么是buffer-cache？"><a href="#1、什么是buffer-cache？" class="headerlink" title="1、什么是buffer/cache？"></a>1、什么是buffer/cache？</h4><pre><code>   buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在Linux的内存管理中，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。</code></pre><p>明白了这两套缓存系统的区别，就可以理解它们究竟都可以用来做什么了。</p><p>1）什么是page cache<br>Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到page cache？在当前的系统实现里，page cache也被作为其它文件类型的缓存设备来用，所以事实上page cache也负责了大部分的块设备文件的缓存工作。</p><p>2）什么是buffer cache<br>Buffer cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。这意味着某些对块的操作会使用buffer cache进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，page cache的内容会被改变，而buffer cache则可以用来将page标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个page写回，而只需要写回修改的部分即可。</p><h4 id="2、如何回收cache？"><a href="#2、如何回收cache？" class="headerlink" title="2、如何回收cache？"></a>2、如何回收cache？</h4><p>Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer/cache空间可以被释放，这个理解是正确的。</p><p>但是这种清缓存的工作也并不是没有成本。理解cache是干什么的就可以明白清缓存必须保证cache中的数据跟对应文件中的数据一致，才能对cache进行释放。所以伴随着cache清除的行为的，一般都是系统IO飙高。因为内核要对比cache中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。</p><p>在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以使用下面这个文件来人工触发缓存清除的操作，方法是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>当然，这个文件可以设置的值分别为1、2、3。它们所表示的含义为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches:表示清除pagecache。</span><br><span class="line"></span><br><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches:表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。</span><br><span class="line"></span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches:表示清除pagecache和slab分配器中的缓存对象。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat报错:java.lang.IllegalArgumentException: Invalid character found in the request target解决</title>
      <link href="/posts/2022/03/e9c03763.html"/>
      <url>/posts/2022/03/e9c03763.html</url>
      
        <content type="html"><![CDATA[<p>在web应用的漏洞测试中，在url参数中添加各种非法字符时，会报如下异常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span><br><span class="line">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:476) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:687) ~[tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_161]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_161]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.28.jar:8.5.28]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161]</span><br></pre></td></tr></table></figure><p>这是因为Tomcat严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])。传入的参数中有”{“不在RFC3986中的保留字段中，所以会报这个错。</p><span id="more"></span> <p>解决办法：</p><p>修改Tomcat/conf/server.xml文件，Connector属性修改为如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; relaxedQueryChars=&quot;[]|&#123;&#125;^&amp;#x5c;&amp;#x60;&amp;quot;&amp;lt;&amp;gt;&quot; relaxedPathChars=&quot;[]|&#123;&#125;^&amp;#x5c;&amp;#x60;&amp;quot;&amp;lt;&amp;gt;&quot; redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><p>如果存在18443的端口，把relaxedPathChars和relaxedQueryChars两个属性值一并加上即可。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx 自带拼音输入法卡顿问题解决</title>
      <link href="/posts/2022/02/e36dea63.html"/>
      <url>/posts/2022/02/e36dea63.html</url>
      
        <content type="html"><![CDATA[<p>为什么 mac osx 自带拼音输入法，总是出现卡顿现象？</p><p>这个问题，知乎上回答最多，好像也无法彻底解决。</p><p>如果你用百度，更是无法解决的。</p><p>问题在于什么呢？</p><p>很多，很多，但核心问题，就是 苹果自带的拼音输入法想要处理的问题太多了。</p><span id="more"></span> <p>我们来看看默认的苹果电脑输入法要解决多少问题!<br>1、首先切换到 拼音输入法 然后右键点击 右上角的 拼 字图标</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-28.png" alt=""> <p>2、点击 打开简体拼音偏好设置，然后切换到 文本，可以看到几乎所有的都勾选了</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-29.png" alt="">这些功能我们都需要吗？<p>其实不是的，除了第一个 自动纠正拼写 外，其它都是垃圾功能。 都全部取消勾选。</p><p>如果你日常不输入英文等，其实连 自动纠正拼写 都不需要。<br>3、全部取消勾选后的效果图如下</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-30.png" alt=""><p>然后，世界瞬间清净了…</p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No goals have been specified for this build，maven报错解决</title>
      <link href="/posts/2022/02/87ad95bb.html"/>
      <url>/posts/2022/02/87ad95bb.html</url>
      
        <content type="html"><![CDATA[<p>在对Maven项目进行Build的时候，可能会出现下图这种情况：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-27.png" alt=""><br>出现这种情况的原因是，缺少了一个指定的goal，需要在项目的pom.xml文件中添加一项goal数据。添加的位置在<build>标签当中，添加如下配置：</p><span id="more"></span>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;</span><br></pre></td></tr></table></figure><p>添加后如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;</span><br><span class="line">&lt;!-- 打包目录 --&gt;</span><br><span class="line">&lt;directory&gt;target&lt;/directory&gt;</span><br><span class="line">&lt;!-- 打包名称 --&gt;</span><br><span class="line">&lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt;</span><br><span class="line">   ...</span><br><span class="line">&lt;/build&gt;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 TabBar怎么设置默认选中</title>
      <link href="/posts/2022/02/3b9d274e.html"/>
      <url>/posts/2022/02/3b9d274e.html</url>
      
        <content type="html"><![CDATA[<p>微信小程序 TabBar怎么设置默认选中？app.json中，tabbar按照如下写法，进入界面默认选择第一个tab(代码中为“首页”)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;/images/icon/home.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;/images/icon/home.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          &quot;pagePath&quot;: &quot;pages/message/message&quot;,</span><br><span class="line">          &quot;text&quot;: &quot;消息&quot;,</span><br><span class="line">          &quot;iconPath&quot;: &quot;images/icon/message.png&quot;,</span><br><span class="line">          &quot;selectedIconPath&quot;: &quot;images/icon/message.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/my/my&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;/images/icon/my.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;/images/icon/my.png&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><span id="more"></span> <p>假如我想把“消息”栏放在第一个，且默认选中，该怎么做？我自然而然的修改了”tabBar”里的顺序，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">          &quot;pagePath&quot;: &quot;pages/message/message&quot;,</span><br><span class="line">          &quot;text&quot;: &quot;消息&quot;,</span><br><span class="line">          &quot;iconPath&quot;: &quot;images/icon/message.png&quot;,</span><br><span class="line">          &quot;selectedIconPath&quot;: &quot;images/icon/message.png&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;/images/icon/home.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;/images/icon/home.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/my/my&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;/images/icon/my.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;/images/icon/my.png&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>改完一运行，发现“消息”栏虽然显示在第一个了，但是默认选中的还是“首页”…</p><p>研究了一下，发现如果想修改默认选中的tab，只需要修改”pages”数组里的顺序即可，放在前面的会优先选中。<br>所以，此处应该这么改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;pages&quot;: [</span><br><span class="line">    &quot;pages/message/message&quot;,</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/my/my&quot;</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>OK，就这样搞定了！</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序出错 TypeError: _typeof3 is not a function</title>
      <link href="/posts/2022/02/c3bd5b44.html"/>
      <url>/posts/2022/02/c3bd5b44.html</url>
      
        <content type="html"><![CDATA[<p>升级微信开发者工具后，小程序启动报如下错误：<br>TypeError: _typeof3 is not a function at _typeof (typeof.js? [sm]:2)</p><p>@babel\runtime\helpers文件夹下面的typeof.js报错，因为本地装过这个包npm install –save @babel/runtime，直接进去拷一份typeof.js覆盖就好了，新typeof.js如下：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function _typeof(obj) &#123;</span><br><span class="line">  &quot;@babel/helpers - typeof&quot;;</span><br><span class="line"></span><br><span class="line">  if (typeof Symbol === &quot;function&quot; &amp;&amp; typeof Symbol.iterator === &quot;symbol&quot;) &#123;</span><br><span class="line">    module.exports = _typeof = function _typeof(obj) &#123;</span><br><span class="line">      return typeof obj;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    module.exports[&quot;default&quot;] = module.exports, module.exports.__esModule = true;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    module.exports = _typeof = function _typeof(obj) &#123;</span><br><span class="line">      return obj &amp;&amp; typeof Symbol === &quot;function&quot; &amp;&amp; obj.constructor === Symbol &amp;&amp; obj !== Symbol.prototype ? &quot;symbol&quot; : typeof obj;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    module.exports[&quot;default&quot;] = module.exports, module.exports.__esModule = true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return _typeof(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = _typeof;</span><br><span class="line">module.exports[&quot;default&quot;] = module.exports, module.exports.__esModule = true;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS使用yum安装ffmpeg</title>
      <link href="/posts/2022/01/3f63c42c.html"/>
      <url>/posts/2022/01/3f63c42c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要<br>本文主要解决如下问题：<br>（1）CentOS 7 怎么使用yum安装ffmpeg；<br>（2）CentOS 6 怎么使用yum安装ffmpeg。  </p></blockquote><p>1.安装epel并update yum</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release -y</span><br><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure><p>2.安装Nux Dextop Yum 源</p><p>由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。</p><span id="more"></span> <ol><li>CentOS 7<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>CentOS 6<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm</span><br></pre></td></tr></table></figure></li></ol><p>3.安装FFmpeg 和 FFmpeg开发包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install ffmpeg ffmpeg-devel -y</span><br></pre></td></tr></table></figure><p>4.测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg</span><br></pre></td></tr></table></figure><p>5.如果你想了解更多关于FFmpeg使用方面的资料，可以输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -h</span><br></pre></td></tr></table></figure><p>例子：<br>使用FFmpeg将mp3转为ogg</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i MLKDream_64kb.mp3 -c:a libvorbis -q:a 4 MLKDream_64kb.ogg</span><br></pre></td></tr></table></figure><p>使用FFmpeg将flv转为mp4</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i beeen.flv -y -vcodec copy -acodec copy beeen.mp4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium获取元素的HTML和子元素的方法</title>
      <link href="/posts/2022/01/20e46e56.html"/>
      <url>/posts/2022/01/20e46e56.html</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本文主要解决如下3个问题：</span><br><span class="line">1、Selenium怎么获取一个元素的HTML源代码</span><br><span class="line">2、Selenium怎么获取元素下的子元素</span><br><span class="line">3、Selenium怎么判断元素是否存在</span><br><span class="line">4、Selenium通过子元素来 查找 / 定位 父元素</span><br></pre></td></tr></table></figure><h3 id="Selenium怎么获取一个元素的HTML源代码"><a href="#Selenium怎么获取一个元素的HTML源代码" class="headerlink" title="Selenium怎么获取一个元素的HTML源代码"></a>Selenium怎么获取一个元素的HTML源代码</h3><p>假设需要获取id为articleList的元素的HTML源代码,有两种方法：</p><span id="more"></span> <h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebElement subTag=driver.findElement(By.id(&quot;articleList&quot;));</span><br><span class="line">String contents = liTag.getAttribute(&quot;outerHTML&quot;);</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebElement element = driver.findElement(By.id(&quot;articleList&quot;));</span><br><span class="line">String contents = (String)((JavascriptExecutor)driver).executeScript(&quot;return      arguments[0].innerHTML;&quot;, element); </span><br></pre></td></tr></table></figure><p>相比较而言，方法一更为简洁。</p><h3 id="Selenium怎么获取元素下的子元素"><a href="#Selenium怎么获取元素下的子元素" class="headerlink" title="Selenium怎么获取元素下的子元素"></a>Selenium怎么获取元素下的子元素</h3><p>Selenium提供了以下8个方法来查找页面中的1个元素：  </p><table><thead><tr><th>Selenium方法</th><th>Java方法</th></tr></thead><tbody><tr><td>find_element_by_id</td><td>driver.findElement(By.id())</td></tr><tr><td>find_element_by_name</td><td>driver.findElement(By.name())</td></tr><tr><td>find_element_by_xpath</td><td>driver.findElement(By.xpath()</td></tr><tr><td>find_element_by_link_text</td><td>driver.findElement(By.linkText()</td></tr><tr><td>find_element_by_partial_link_text</td><td>driver.findElement(By.partialLinkText()</td></tr><tr><td>find_element_by_tag_name</td><td>driver.findElement(By.tagName()</td></tr><tr><td>find_element_by_class_name</td><td>driver.findElement(By.className()</td></tr><tr><td>find_element_by_css_selector</td><td>driver.findElement(By.cssSelector()</td></tr></tbody></table><p>以下7个方法来查找页面中的多个元素（这些方法将返回一个列表）：</p><table><thead><tr><th>Selenium方法</th><th>Java方法</th></tr></thead><tbody><tr><td>find_elements_by_name</td><td>driver.findElements(By.name())</td></tr><tr><td>find_elements_by_xpath</td><td>driver.findElements(By.xpath()</td></tr><tr><td>find_elements_by_link_text</td><td>driver.findElements(By.linkText()</td></tr><tr><td>find_elements_by_partial_link_text</td><td>driver.findElements(By.partialLinkText()</td></tr><tr><td>find_elements_by_tag_name</td><td>driver.findElements(By.tagName()</td></tr><tr><td>find_elements_by_class_name</td><td>driver.findElements(By.className()</td></tr><tr><td>find_elements_by_css_selector</td><td>driver.findElements(By.cssSelector()</td></tr></tbody></table><p>上述方法都是查找页面中的元素的，那么怎么获取一个元素下的子元素呢？其实和获取页面元素类似，以获取parentElement元素下的所有a标签为例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;WebElement&gt; aTags = parentElement.findElements(By.tagName(&quot;a&quot;));</span><br></pre></td></tr></table></figure><p>还有一种是根据xpath查找子元素的方法</p><p>代码示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//页面上class=ReactVirtualized__Grid__innerScrollContainer的div元素下有多个/div/div结构,查找/div/div结构下的子元素</span><br><span class="line"></span><br><span class="line">List&lt;WebElement&gt; elements=webDriver.findElements(By.xpath(&quot;//div[@class=&#x27;ReactVirtualized__Grid__innerScrollContainer&#x27;]/div/div&quot;));</span><br><span class="line"></span><br><span class="line">for (WebElement webElement : elements) &#123;</span><br><span class="line">WebElement aElement=webElement.findElement(By.xpath(&quot;div/div/h2/a&quot;));</span><br><span class="line">System.out.println(aElement.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：获取页面元素的15个方法都可以用来获取元素下的子元素。</p><h3 id="Selenium怎么获取判断元素是否存在"><a href="#Selenium怎么获取判断元素是否存在" class="headerlink" title="Selenium怎么获取判断元素是否存在"></a>Selenium怎么获取判断元素是否存在</h3><p>Selenium 中并没有直接判断元素是否存在的方法，只能通过变通的方式判断。</p><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>调用findElement方法获取元素，如果抛出异常，就可以判断为元素不存在。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">          webDriver.findElement(by);</span><br><span class="line">          return true;</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          System.out.println(&quot;不存在此元素&quot;);</span><br><span class="line">          return false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p>通过判断元素个数的方式来判断。  </p><p>WebDriver的findElements()返回一个List<WebElement>元素集合，通过找到元素的size()判断，如果&lt;=0则元素不存在，否则元素存在。另外，findElements方法找不到元素时会返回一个空List，所以不需要进行null判断。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 判断某个元素是否存在</span><br><span class="line">   */</span><br><span class="line">  public boolean isElementExists(WebDriver webDriver, By by) &#123;</span><br><span class="line">      if(webDriver.findElements(by).size()&gt;0)&#123;</span><br><span class="line">      return true;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      return false;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>显然，相比抛异常进行判断，方法二更为合适，可以直接写进工具类里方便调用。</p><h3 id="Selenium通过子元素来查找-定位父元素"><a href="#Selenium通过子元素来查找-定位父元素" class="headerlink" title="Selenium通过子元素来查找/定位父元素"></a>Selenium通过子元素来查找/定位父元素</h3><p> selenium通过父元素来找子元素的方式 很简单，但是反过来 如果通过子元素来找父元素  就不一样了 有的场景是需要通过子元素来找父元素</p><p>直接上代码</p><p><img src="https://img-blog.csdnimg.cn/20200430140430560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMzI4NjQ1,size_16,color_FFFFFF,t_70"></p><p>这个时候该怎么做呢  我们可以通过获取文本的内容进行定位向上找  (//..) 这个是上一级</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">driver.findElementByXpath(&#x27;xpath&#x27;, &#x27;//*[text()=&quot;北京分公司&quot;]//..//../span&#x27;)</span><br></pre></td></tr></table></figure><p>这个时候定位的目标就在</p><p><img src="https://img-blog.csdnimg.cn/20200430140849980.png"></p><p>就找到父元素了</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Selenium </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo教程-从零开始搭建个人博客】5、Hexo博客部署到GitHub Pages</title>
      <link href="/posts/2022/01/face4142.html"/>
      <url>/posts/2022/01/face4142.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>完成<a href="https://www.yeluohuakai.com/posts/2022/01/71127ac7.html">Hexo博客搭建指南</a>前面几个章节的流程后，本地的Butterfly主题的Hexo博客已经能运行起来了，下面的工作就是要把博客发布到GitHub Pages。</p><p>本文主要解决如下4个问题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、怎么创建GitHub Pages仓库</span><br><span class="line">2、怎么把本地的Hexo博客部署到GitHub Pages</span><br><span class="line">3、解决使用git时报错：fatal: unable to access &#x27;https://***.github.io/&#x27;: Received HTTP code 400 from proxy after CONNECT</span><br><span class="line">4、解决使用git时报错：remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure><span id="more"></span> <h2 id="为什么使用GitHub-Pages"><a href="#为什么使用GitHub-Pages" class="headerlink" title="为什么使用GitHub Pages"></a>为什么使用GitHub Pages</h2><p> GitHub有一个非常有用的功能，称为GitHub Pages，它允许您在Web上实时发布网站代码。</p><p> GitHub Pages的优势：</p><ol><li>搭建简单而且<strong>免费</strong>；  </li><li>支持静态脚本；  </li><li>可以绑定你的域名；  </li><li>理想的写博环境，随意DIY，git+github+markdown+其他；</li><li>充分的自由度，毕竟部署在github上…</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>点击你的GitHub主页的”New”，准备创建一个新的仓库；</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-16.png" alt=""></li><li><p>创建仓库有两点要注意：<br><code>仓库类型一定是**public**</code><br><code>仓库名一定是 **你的用户名.github.io**</code><br>以我的测试github账户的用户名yeluohua为例,  仓库名就是 <code>yeluohua.github.io</code>，如图所示:  </p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-17.png" alt=""></li><li><p>仓库创建完成之后，进入仓库主页。</p></li></ol><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-18.png" alt=""><p>点击<code>Settings</code>–&gt;<code>Pages</code>，可以看到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your site is published at https://yeluohua.github.io/</span><br></pre></td></tr></table></figure><p>这就意味着可以用这个链接访问你的网站了。<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-21.png" alt=""><br>4. 在浏览器中访问 <a href="https://yeluohua.github.io/">https://yeluohua.github.io/</a><br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-20.png" alt=""></p><ol start="5"><li>至此，个人GitHub Pages个人仓库已经创建完毕，可以开始部署Hexo博客到仓库了。</li></ol><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li><p>安装模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><!--more--> </li><li><p>配置<br>blog/_config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo:</span><br><span class="line">      github:</span><br><span class="line">        url: https://github.com:name/name.git # GitHub Pages的https链接</span><br><span class="line">        branch: master # GitHub Pages的分支</span><br><span class="line">        token: GitHub Token</span><br><span class="line">    name: name # GitHub用户名</span><br><span class="line">    email: email@qq.com # GitHub登陆邮箱</span><br></pre></td></tr></table></figure></li><li><p>推送到 GitHub 远程仓库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>如果推送成功的话，会看到如下提示信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Counting objects: 244, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (157/157), done.</span><br><span class="line">Writing objects: 100% (244/244), 47.80 KiB | 627.00 KiB/s, done.</span><br><span class="line">Total 244 (delta 128), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (128/128), completed with 84 local objects.</span><br><span class="line">To https://github.com/***.github.io</span><br><span class="line">   36b5718..8a35a87  HEAD -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;https://github.com/***.github.io&#x27;.</span><br><span class="line">[32mINFO [39m Deploy done: [35mgit[39m</span><br></pre></td></tr></table></figure></li><li><p>然后在<a href="https://github.com/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D.github.io%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%E7%9A%84master%E5%88%86%E6%94%AF%E4%B8%8B%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%82">https://github.com/你的用户名.github.io这个仓库的master分支下可以看到已上传的静态文件。</a></p></li><li><p>在浏览器中输入<code>https://你的用户名.github.io</code>就能打开你的博客了。</p></li></ol><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://***.github.io/&#x27;: Received HTTP code 400 from proxy after CONNECT</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (d:\Code\hexo\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (d:\Code\hexo\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>这个错误一般是本地设置了代理导致，尝试使用如下命令解决：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line">git config --global --unset core.gitproxy</span><br></pre></td></tr></table></figure><p>使用<code>git config -l --show-origin|grep -i proxy</code>检查设置是否有遗漏。<br>（注：windows下检查命令为<code>git config -l --show-origin|findstr proxy</code>）</p><h3 id="错误二"><a href="#错误二" class="headerlink" title="错误二"></a>错误二</h3><p>推送代码时，弹出一个GitHub的登陆框，输入用户名密码后，控制台会提示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure><p>这个很简单，2021年8月13日起GitHub不再支持密码身份验证的解决方案，需要通过github personal access token来进行git操作，按如下步骤生成access token:</p><ol><li>进入 <a href="https://github.com/settings/apps">https://github.com/settings/apps</a></li><li> 点击“Personal access tokens”</li></ol><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-22.png" alt=""> 3. 点击右上角的“generate new token”,    - 填入Note（access token的标识，随意填）    - 选择access token期限（最好不选永久），    - 权限只需要选择`repo`即可<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-23.png" alt=""> 4. 点击“Generate token”生成access token,记录生成的access token<img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-24.png" alt=""> 5. 删除之前的git用户密码缓存。这一步很关键，一定要删除之前的缓存，不然还是提示上述错误。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 运行一下命令缓存</span><br><span class="line">git config --global credential.helper wincred</span><br><span class="line"># 清除掉缓存在git中的用户名和密码</span><br><span class="line">git credential-manager uninstall</span><br></pre></td></tr></table></figure>6. 重新执行推送到 GitHub 远程仓库，在弹出的GitHub登陆框的密码区域填入刚才生成的access token即可。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-abbrlink生成的文章链接undefind.html问题解决</title>
      <link href="/posts/2022/01/c7ae70bf.html"/>
      <url>/posts/2022/01/c7ae70bf.html</url>
      
        <content type="html"><![CDATA[<p>使用Hexo博客的过程中，为了生成简洁且唯一链接不变的URL链接，我使用了hexo-abbrlink插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>然后再Hexo根目录下_config.yml里增加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改原链接格式：permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: posts/:year/:month/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure><span id="more"></span> <p>然后执行<code>hexo clean &amp; hexo g &amp; hexo s</code>,打开博客就会看到博客文章的html名称都变成了一串随机数。再去打开文章的md文件，文件头都增加了一行类似<code>abbrlink: e89dcf68</code>，这个abbrlink的值就是hexo-abbrlink插件给文章生成的唯一ID了。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址，相当于每篇文章有了专属链接了，这样找搜索引擎收录也简单多了。</p><hr><p>给文章生成永久链接原本是比较顺利的，但是几天之后新生成的文章链接居然变成了undefind.html，md文件里也没生成abbrlink，执行<code>hexo clean &amp; hexo g</code>也没啥用。 </p><p>去Google了一番这个问题，总结以下产生该问题的原因：  </p><p>1.文章的链接变成了undefined.html,新的文章没问题，老的文章就不行了。首先要执行hexo clean 清楚掉以前生成的文章缓存，然后hexo g重新生成静态文件就ok了。  </p><p>ps：<code>hexo clean &amp; hexo g</code>多次还是无效，我这是老文章没问题，新文章不行。</p><p>2.如果全部文章的链接都有问题或者没有任何规律，总有一部分文章链接是undefined。建议检查一下文章开头的Front-matter，文章的Front-matter中不能设置layout，将layout属性删掉后就可以正常使用了。 </p><p>ps：检查了md文件中并没有layout，再次无效。</p><p>3.与hexo-auto-category插件冲突。这2款插件都是读写 Front-matter 的数据。如果同时启用这2个插件，会导致hexo-abbrlink这个插件无法向 md 文件里写入 abbrlink 属性。</p><p>据hexo-abbrlink插件作者的说法，此问题无法修复，两个插件只能选其一。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abbrlink:</span><br><span class="line">  auto_category: </span><br><span class="line">    enable: false</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>ps：我这里并没有使用hexo-auto-category插件，依旧无效。</p><p>试遍了诸般办法，没能解决问题，心血来潮去看了眼Hexo的扩展包文件package.json……纳尼?居然没有hexo-abbrlink……好吧，我这才想起来，昨天把Hexo给换了个目录，装了一大堆插件，hexo-abbrlink忘记装了。</p><p>所以，第4点原因：  </p><p>4.检查package.json，查看有没有安装hexo-abbrlink插件（比如我这样更换Hexo文件夹的情况）。  </p><hr><p>安装和使用Hexo，请参考<a href="/posts/2022/01/71127ac7.html">Hexo博客搭建指南</a>。  </p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决electron打包时下载nsis等依赖慢的问题</title>
      <link href="/posts/2022/01/753a936a.html"/>
      <url>/posts/2022/01/753a936a.html</url>
      
        <content type="html"><![CDATA[<p>初次学习使用Electron，在打包第一个入门应用时就出现了老大难的问题，<code>npm run package</code>命令在运行时会去下载github的资源（如nsis、winCodeSign等），但是这个速度可就太感人。慢就不说了，最后还赤果果的用一大串红字告诉我打包失败。<br>报错信息如下：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0] npm run build:main exited with code 0</span><br><span class="line">[1] npm run build:renderer exited with code 0</span><br><span class="line">  • electron-builder  version=22.13.1 os=10.0.19043</span><br><span class="line">  • loaded configuration  file=package.json (&quot;build&quot; field)</span><br><span class="line">  • writing effective config  file=release\build\builder-effective-config.yaml</span><br><span class="line">  • installing production dependencies  platform=win32 arch=x64 appDir=D:\Code\Electron\test\release\app</span><br><span class="line">  • packaging       platform=win32 arch=x64 electron=16.0.5 appOutDir=release\build\win-unpacked</span><br><span class="line">  • building        target=nsis file=release\build\ElectronReact Setup 4.5.0.exe archs=x64 oneClick=true perMachine=false</span><br><span class="line">  • downloading     url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.2/nsis-3.0.4.2.7z size=1.4 MB parts=1</span><br><span class="line">  • retrying        attempt=1</span><br><span class="line">  • retrying        attempt=2</span><br><span class="line">  • retrying        attempt=3</span><br><span class="line">  ⨯ part download request failed with status code 401</span><br><span class="line">github.com/develar/app-builder/pkg/download.(*Part).doRequest</span><br><span class="line">        /Volumes/data/Documents/app-builder/pkg/download/Part.go:126</span><br><span class="line">github.com/develar/app-builder/pkg/download.(*Part).download</span><br><span class="line">        /Volumes/data/Documents/app-builder/pkg/download/Part.go:67</span><br><span class="line">github.com/develar/app-builder/pkg/download.(*Downloader).DownloadResolved.func1.1</span><br><span class="line">        /Volumes/data/Documents/app-builder/pkg/download/downloader.go:155</span><br><span class="line">github.com/develar/app-builder/pkg/util.MapAsyncConcurrency.func2</span><br><span class="line">        /Volumes/data/Documents/app-builder/pkg/util/async.go:68</span><br><span class="line">runtime.goexit</span><br><span class="line">        /usr/local/Cellar/go/1.16.5/libexec/src/runtime/asm_amd64.s:1371</span><br><span class="line">  ⨯ D:\Code\Electron\test\node_modules\app-builder-bin\win\x64\app-builder.exe exited with code ERR_ELECTRON_BUILDER_CANNOT_EXECUTE  failedTask=build stackTrace=Error: D:\Code\Electron\test\node_modules\app-builder-bin\win\x64\app-builder.exe exited with code ERR_ELECTRON_BUILDER_CANNOT_EXECUTE</span><br></pre></td></tr></table></figure><p>问题就出在下载github资源太慢了，而cnpm是提供了对应的镜像源的，所以解决办法也挺简单，设置ELECTRON_BUILDER_BINARIES_MIRROR镜像源地址就行了，即修改 <code>C:\Users\你的用户名\.npmrc</code> 文件（如果没有该文件就直接创建）,加入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">isturl=https://npm.taobao.org/mirrors/node</span><br><span class="line">ELECTRON_BUILDER_BINARIES_MIRROR=http://npm.taobao.org/mirrors/electron-builder-binaries/</span><br><span class="line">ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:<code>ELECTRON_BUILDER_BINARIES_MIRROR</code>的地址可以改成https的试试。</p><p>然后再去运行<code>npm run package</code>，发现download部分很快就过去了，程序包也打好了，喜极而泣。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装electron失败：npm ERR electron@16.0.5 postinstall: node install.js</title>
      <link href="/posts/2022/01/npmerrelectron.html"/>
      <url>/posts/2022/01/npmerrelectron.html</url>
      
        <content type="html"><![CDATA[<p>安装Electron时报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! electron@16.0.5 postinstall: `node install.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the electron@16.0.5 postinstall script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br></pre></td></tr></table></figure><p>如图所示：</p><span id="more"></span> <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-15.png" alt="alt:npm ERR! electron@16.0.5 postinstall: node install.js "><p>解决方法：将electron下载地址指向taobao镜像即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set electron_mirror &quot;https://npm.taobao.org/mirrors/electron/&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo教程-从零开始搭建个人博客】4、Hexo安装主题</title>
      <link href="/posts/2022/01/e89dcf68.html"/>
      <url>/posts/2022/01/e89dcf68.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>初步使用了Hexo后，你是否对Hexo的默认主题不满意呢？本篇文章将教你如何安装及美化hexo主题。<br>如果你还没安装和使用Hexo，请参考<a href="https://www.yeluohuakai.com/posts/2022/01/71127ac7.html">Hexo博客搭建指南</a>。</p><p>通过查看Hexo安装目录的_config.yml配置文件，我们可以了解到Hexo的默认主题是landscape。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>更多的主题可以去 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>了解，诸位可以根据自己的喜好选择合适的主题，这里我推荐几个。</p><span id="more"></span> <h3 id="Hexo主题推荐"><a href="#Hexo主题推荐" class="headerlink" title="Hexo主题推荐"></a>Hexo主题推荐</h3><h4 id="Hexo-NexT"><a href="#Hexo-NexT" class="headerlink" title="Hexo NexT"></a>Hexo NexT</h4><p><a href="https://github.com/next-theme/hexo-theme-next">hexo-theme-next</a>是目前最广泛使用的Hexo主题了，优点是简洁，定制度高，因为代码是开源的，所以有很多开发者维护。由于前任管理员不提供权限，故开发了一个新的分支，详情。最新版本为8.0也是我在使用的版本，8.0及前版本请使用github搜索功能。</p><h4 id="Hexo-Butterfly"><a href="#Hexo-Butterfly" class="headerlink" title="Hexo Butterfly"></a>Hexo Butterfly</h4><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a> 动态效果比较丰富，用了很多圆角元素。原生支持的插件很多，比如说绝大部分评论系统、给搜索引擎提交网站和站点地图、页面动效、页内搜索等。</p><p>我个人用的是 <code>Butterfly</code> ，支持功能够多，能节省很多自定义配置，我个人比较喜欢。</p><h3 id="安装Butterfly主题插件"><a href="#安装Butterfly主题插件" class="headerlink" title="安装Butterfly主题插件"></a>安装Butterfly主题插件</h3><ul><li><p>安装Butterfly之前记得先安装pug和stylus依赖：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li><li><p>在Hexo博客根目录通过git指令下载Butterfly最新的主题文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly</span><br></pre></td></tr></table></figure></li></ul><p>或者，直接从<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a>页面下载<a href="https://github.com/jerryc127/hexo-theme-butterfly/archive/refs/heads/dev.zip">源代码</a> ，解压到博客目录/themes目录下。<br>最终目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─_config.yml</span><br><span class="line">├─public</span><br><span class="line">├─scaffolds</span><br><span class="line">├─source</span><br><span class="line">└─themes</span><br><span class="line">    ├─butterfly</span><br><span class="line">       ├─lanuage</span><br><span class="line">         ├─source</span><br><span class="line">         ├─layout</span><br><span class="line">         ├─_config.yml</span><br></pre></td></tr></table></figure><ul><li>修改Hexo安装目录的_config.yml配置文件，将主题修改为butterfly:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li><li>最后，执行<code>hexo g &amp; hexo s</code>看看Butterfly主题风格的博客吧。</li></ul><h3 id="尝试其他主题"><a href="#尝试其他主题" class="headerlink" title="尝试其他主题"></a>尝试其他主题</h3><p>安装NexT主题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>安装Light主题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/hexojs/hexo-theme-light themes/light</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo教程-从零开始搭建个人博客】3、Hexo安装和使用</title>
      <link href="/posts/2022/01/ac4a4b5a.html"/>
      <url>/posts/2022/01/ac4a4b5a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装Hexo"><a href="#1、安装Hexo" class="headerlink" title="1、安装Hexo"></a>1、安装Hexo</h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为MyBlog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p><p>这里以在D:/Code/MyBlog目录下安装Hexo为例,首先在命令行中进入目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d: &amp; cd D:/Code/MyBlog</span><br></pre></td></tr></table></figure><p>使用npm命令安装Hexo，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><span id="more"></span> <p>安装完成后，初始化我们的博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init </span><br></pre></td></tr></table></figure><p>初始化完成后，目录结构如下：<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-10.png" alt="">  </p><p>_config.yml<br>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo配置</a> 文档。</p><h3 id="2、启动Hexo"><a href="#2、启动Hexo" class="headerlink" title="2、启动Hexo"></a>2、启动Hexo</h3><p>输入<code>hexo s</code>启动Hexo服务：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-11.png" alt=""><p>根据启动提示，在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 即可访问博客。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-12.png" alt=""><p>hexo命令详解：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建一篇文章</span><br><span class="line">hexo g == hexo generate #生成html</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP,一般用不到</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h3 id="3、编辑并发布第一篇文章"><a href="#3、编辑并发布第一篇文章" class="headerlink" title="3、编辑并发布第一篇文章"></a>3、编辑并发布第一篇文章</h3><p>根据上文，新建博客命令为 <code>hexo n</code>, 新建一篇名为 HelloWorld！的博客：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;HelloWorld!&quot;</span><br></pre></td></tr></table></figure><p>命令行中会提示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Code\MyBlog&gt;hexo n &quot;HelloWorld!&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\Code\MyBlog\source\_posts\HelloWorld.md</span><br></pre></td></tr></table></figure><p>我们会看到Hexo会在 \source_posts\ 目录下新建一个HelloWorld.md 文件，md文件也就是 Markdown 文件,它会被编译成 html 文件，放到 public 文件夹下。</p><p>md同样也支持中文命名，文件名也就是博客的标题，如下：  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Code\MyBlog&gt;hexo n &quot;第一篇博客&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\Code\MyBlog\source\_posts\第一篇博客.md</span><br></pre></td></tr></table></figure><p>编辑完博客后，即可执行<code>hexo g</code>命令生成html文件</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-13.png" alt="">然后再启动Hexo服务即可。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>再次在浏览器中访问博客页面，新建的博客已经出现在首页博客列表中。  <img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-14.png" alt=""><p>至此，Hexo的安装和初步使用已完成。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo教程-从零开始搭建个人博客】2、Hexo配置基础环境</title>
      <link href="/posts/2022/01/10e17c07.html"/>
      <url>/posts/2022/01/10e17c07.html</url>
      
        <content type="html"><![CDATA[<p>Hexo配置基础环境包括：GitHub Pages、Git、Node。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>1、注册GitHub账号</p><p>2、安装Node</p><p>3、安装Git</p><h3 id="注册GitHub账号和新建仓库"><a href="#注册GitHub账号和新建仓库" class="headerlink" title="注册GitHub账号和新建仓库"></a>注册GitHub账号和新建仓库</h3><ul><li>登录到<a href="https://github.com/">GitHub</a>,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号<span id="more"></span> </li><li>点击GitHub中的New repository创建新仓库，仓库名应该为：你的用户名.github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法。将来你的网站访问地址就是 你的用户名.github.io，弊端就是，我们只能创建一个这样的仓库。</li><li>如果需要搭建多个博客，就需要注册多个GitHub账号。</li></ul><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/zh-cn/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，</p><p>检测Node.js是否安装成功，在命令行中输入 node -v 。<br>检测npm是否安装成功，在命令行中输入npm -v 。</p><p>补充：国内环境下把包的远程服务器设置为淘宝镜像，以加快下载速度。</p><p>使用命令行运行:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>执行完毕后通过<code>npm config get registry</code>命令查看npm源:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Code\MyBlog&gt;npm config get registry</span><br><span class="line">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。<br>从Git官网下载：<a href="https://git-scm.com/download/win">Git - Downloading</a>， 现在的电脑基本都是64位的，选择64位的安装包即可。下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。  </p><p>安装成功后，将你的Git与GitHub帐号绑定  。<br>打开命令行，设置user.name和user.email配置信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：<br>命令行任意位置键入如下命令  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，用编辑器打开将内容全部复制。</p><p>注意：windows环境下id_rsa.pub是在<code>cd C:\Users\你的用户名\.ssh</code>目录下。</p><p>打开<a href="https://github.com/settings/keys">GitHub Settings keys</a> 页面，点击“new SSH Key”来新建新的SSH Key：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-9.png" alt=""><p>Title为标题任意填即可，将刚刚复制的id_rsa.pub内容粘贴到Key中，最后点击“Add SSH key”完成添加。  </p><p>检测GitHub公钥设置是否成功，在命令行中输入 <code>ssh git@github.com </code>，出现<code>You&#39;ve successfully authenticated</code>等字样即代表公钥设置成功。</p><p>至此，安装Hexo的基础环境已经全部搭建完成。  </p><h3 id="完整Hexo博客搭建流程请参考：Hexo博客搭建指南"><a href="#完整Hexo博客搭建流程请参考：Hexo博客搭建指南" class="headerlink" title="完整Hexo博客搭建流程请参考：Hexo博客搭建指南"></a>完整Hexo博客搭建流程请参考：<a href="/posts/2022/01/71127ac7.html">Hexo博客搭建指南</a></h3>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo教程-从零开始搭建个人博客】1、Hexo博客搭建指南</title>
      <link href="/posts/2022/01/71127ac7.html"/>
      <url>/posts/2022/01/71127ac7.html</url>
      
        <content type="html"><![CDATA[<p>怎么搭建一个免费的个人博客，个人采用了Hexo博客框架，下面是我搭建Hexo个人博客的经验总结。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">至于为什么选择Hexo，因为Hexo主题多，漂亮主题更是不少，Huge在这点上差太多了。</span><br><span class="line"></span><br><span class="line">而使用Wordpress搞个人博客，就必须要有虚拟主机或者云服务器才可以。国内的虚拟主机或云服务器，新用户活动价便宜，但是续费的话会非常贵。而利用GitHub pages服务搭建Hexo博客是免费的。</span><br><span class="line"></span><br><span class="line">所以虽然Hexo生成html的速度慢了点，但是依然是我认为的最佳选择。</span><br></pre></td></tr></table></figure><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo拥有丰富的插件系统，常与GitHub等代码托管平台一起构建个人博客网站。</p><p>Hexo可以让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。</p><p>下面正式从零开始搭建年轻人的第一个免费个人博客。</p><h3 id="Hexo博客搭建指南"><a href="#Hexo博客搭建指南" class="headerlink" title="Hexo博客搭建指南"></a>Hexo博客搭建指南</h3><ul><li><a href="/posts/2022/01/10e17c07.html">Hexo配置基础环境(GitHub Pages、Git、Node)</a></li><li><a href="/posts/2022/01/ac4a4b5a.html">Hexo安装和使用</a></li><li><a href="/posts/2022/01/e89dcf68.html">Hexo使用主题</a></li><li><a href="/posts/2022/01/face4142.html">Hexo部署到GitHub</a></li><li>Hexo绑定个人域名<span id="more"></span> </li><li>Hexo怎么写文章(hexo-amdin插件)</li><li>Hexo设置首页文章只显示部分摘要</li><li>Hexo生成永久文章链接</li><li>Hexo设置文章分享</li><li>Hexo设置分页</li><li>Hexo给文章添加版权声明</li><li>Hexo初级SEO优化（增加description和keywords）</li><li>Hexo增加分类页和标签云</li><li>Hexo增加百度统计和Google统计</li><li>Hexo搜索引擎收录（百度、Google、头条、Bing等）</li><li>Hexo图片上传到图床（七牛云）</li><li>Hexo增加评论模块（remark42）</li><li>Hexo页面美化</li><li>Hexo增加站内静态搜索</li><li>Hexo增加RSS订阅</li><li>Hexo加入Google广告联盟</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https网站如何访问http资源？</title>
      <link href="/posts/2022/01/b60222b0.html"/>
      <url>/posts/2022/01/b60222b0.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Chrome中，如果网站开启了https，http资源是无法加载了。</p><p>如，我的博客是hexo+githubpages，开启了https，我的七牛云图床的图片资源是http的，这样我的网站就无法加载七牛云的资源了。  </p><p><em>ps:七牛云的资源开启https访问是收费的，无法享受每个月10G的免费空间，所以此处不考虑https直接访问七牛云。也不考虑拥有云主机的情况下使用nginx进行反向代理。</em></p><h3 id="解决办法-使用cloudflare"><a href="#解决办法-使用cloudflare" class="headerlink" title="解决办法 - 使用cloudflare"></a>解决办法 - 使用cloudflare</h3><span id="more"></span><p>如图所示：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo5.png" alt="title:hexo5 alt:hexo5  ">  <p>cloudflare注册和添加域名的过程此处不详述，直接参考：<br><a href="https://www.cnblogs.com/bonelee/p/8670660.html">使用cloudflare加速你的网站隐藏你的网站IP</a></p><p>在添加域名、修改域名服务器完成后，点击你的域名，点击 <strong>SSL/TLS</strong>–<strong>概述</strong> 菜单，<br>修改SSL/TLS 加密模式为 <strong>灵活</strong> 。<br>稍等几分钟后，你的https网站就能访问http的资源了（在你的网站里http资源的地址都是https开头的）。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo6.png" alt="title:hexo6 alt:hexo6  ">]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo设置同步图片到七牛云碰到怪异问题</title>
      <link href="/posts/2022/01/19da73ba.html"/>
      <url>/posts/2022/01/19da73ba.html</url>
      
        <content type="html"><![CDATA[<p>Hexo设置同步图片到七牛云碰到的一个问题，如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:ENOENT: no such file or directory, mkdir &#x27;static\images&#x27;</span><br></pre></td></tr></table></figure><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo3.png" alt="title:hexo3 alt:hexo3  ">  <span id="more"></span>百度bingGoogle搜索无果...... <p>检查cmd.js的代码<br><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo4.png" alt="title:hexo4 alt:hexo4  ">  </p><p>发现问题可能是fs.mkdirSync只能一层层创建目录，于是手动创建了static目录，这个问题居然就好了。 </p><p>感到很无语，特意记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
          <category> Hexo搭建博客教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中文网页名转换为固定字符串</title>
      <link href="/posts/2022/01/e334963d.html"/>
      <url>/posts/2022/01/e334963d.html</url>
      
        <content type="html"><![CDATA[<p>hexo默认生成的页面链接是文章的标题，如果标题是中文那么网站访问的路径也是中文，这样是不利于搜索引擎的收录，可以使用插件来解决这个问题。</p><p><em><strong>方法一</strong></em></p><p>安装缩短链接插件<br><code>npm install hexo-abbrlink --save</code></p><p>hexo的_config.yml 添加如下配置：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure><p>安装完毕后此时再clean hexo g 会发现生成的网页名称不再是中文，而是固定的字符串，访问路径也统一变成了posts/xxx.html，这种简单的访问路径比较利于搜索引擎收录。</p><p>注：这个插件生成的链接是一串数字+字母的字符串，如果需要更高大上的英文链接，请参考<em><strong>方法二</strong></em>。</p><p><em><strong>方法二</strong></em>  </p><ol><li>安装</li></ol><p><code>npm install hexo-translate-title --save</code></p><ol start="2"><li>配置<br>修改hexo根项目下的_config.yml，建议用google翻译毕竟贴地气，但实测并不稳定，所以也可以用baidu_no_appid，这样也不需要额外的认证配置。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">translate_title:</span><br><span class="line">  translate_way: google  # google,youdao,baidu_with_appid,baidu_no_appid</span><br><span class="line">  is_need_proxy: false     # true | false</span><br><span class="line">  # proxy_url: http://localhost:50018 # Your proxy_url</span><br><span class="line">  # youdao_api_key: &#x27;&#x27; # Your youdao_api_key</span><br><span class="line">  # youdao_keyfrom: xxxx-blog # Your youdao_keyfrom</span><br><span class="line">  # baidu_appid: &#x27;&#x27; # Your baidu_appid</span><br><span class="line">  # baidu_appkey: &#x27;&#x27; # Your baidu_appkey</span><br><span class="line"># 修改原链接格式：permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :year:month:day/:translate_title.html</span><br></pre></td></tr></table></figure><ol start="3"><li><p>测试<br>用hexo d重新生成，留意控制台输出以及public目录下是否有生成相应的<hexo-translate-title>.html文件，如果有代表成功了，再用hexo d部署即可。  </p></li><li><p>注意<br>  Google翻译服务的不稳定，按上述流程安装、配置和部署，有可能生成的链接都是undefined.html。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos6 可用yum源</title>
      <link href="/posts/2022/01/31475.html"/>
      <url>/posts/2022/01/31475.html</url>
      
        <content type="html"><![CDATA[<p><em><strong>小tips：</strong></em></p><p><em><strong>测试yum源能否使用，就看源的url能否在浏览器中访问。</strong></em></p><p>目前可用的几个yum源：</p><p>清华大学：<a href="https://mirrors4.tuna.tsinghua.edu.cn/centos-vault/">https://mirrors4.tuna.tsinghua.edu.cn/centos-vault/</a><br>（去链接里查找需要的源，清华各个版本的源挺全的）</p><p>搜狐源：<a href="http://mirrors.sohu.com/centos/6.10/os/x86_64/">http://mirrors.sohu.com/centos/6.10/os/x86_64/</a>   (已失效)</p><p><a href="http://file.kangle.odata.cc/repo/Centos-6.repo">http://file.kangle.odata.cc/repo/Centos-6.repo</a></p><p><a href="http://file.kangle.odata.cc/repo/epel-6.repo">http://file.kangle.odata.cc/repo/epel-6.repo</a></p><span id="more"></span><h3 id="方法一：设置yum搜狐源"><a href="#方法一：设置yum搜狐源" class="headerlink" title="方法一：设置yum搜狐源"></a>方法一：设置yum搜狐源</h3><p>1、先备份源文件：</p><p><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo-backup</code></p><p>2、编辑文件：vi /etc/yum.repos.d/CentOS-Base.repo</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/CentOS-Base.repo`</span><br><span class="line"></span><br><span class="line">`[base]</span><br><span class="line">name=CentOS-6</span><br><span class="line">failovermethod=priority</span><br><span class="line">#搜狐源</span><br><span class="line">baseurl=http://mirrors.sohu.com/centos/6.10/os/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果baseurl已失效，换成其他可访问的yum源地址即可。</strong></p><p>3、清理软件源</p><p><code>yum clean all</code></p><p>4、建立源数据缓存</p><p><code>yum makecache</code></p><h3 id="方法二：设置其他源"><a href="#方法二：设置其他源" class="headerlink" title="方法二：设置其他源"></a>方法二：设置其他源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接在ssh框中输入</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://file.kangle.odata.cc/repo/Centos-6.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://file.kangle.odata.cc/repo/epel-6.repo</span><br><span class="line">yum makecache</span><br><span class="line">//即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的酒后真言</title>
      <link href="/posts/2021/06/cb37c737.html"/>
      <url>/posts/2021/06/cb37c737.html</url>
      
        <content type="html"><![CDATA[<p>美国最大的论坛 Reddit，最近有一个热帖[1]。</p><p>一个程序员说自己喝醉了，软件工程师已经当了10年，心里有好多话想说，“我可能会后悔今天说了这些话。”</p><p>他洋洋洒洒写了一大堆，获得9700多个赞。内容很有意思，值得一读，下面是节选。</p><p>（1）职业发展的最好方法是换公司。</p><p>（2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。</p><span id="more"></span> <p>（3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。</p><p>（4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。</p><p>（5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。</p><p>（6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。</p><p>（7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。</p><p>（8）网上的口水战，几乎都无关紧要，别去参与。</p><p>（9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。</p><p>（10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。</p><p>（11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。</p><p>（12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。</p><p>（13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。</p><p>（14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。</p><p>（15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。</p><p>（16）再倒一杯酒。</p><p>（17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。</p><p>（18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。</p><p>（19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。</p><p>（20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。</p><p>（21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。</p><p>（22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。</p><p>（23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。</p><p>（24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。</p><p>（25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。</p><p>（26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。</p><p>（27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。</p><p>（28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。</p><p>（29）我挣的钱还不错，对此心存感激，但还是需要省钱。</p><p>（30）糟糕，我没酒了。</p><p>（完）</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><code>[1]</code> 热帖: <em><a href="https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk/_post/_things/_ive/_learned/_as/_a/_sr/_engineer/">https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk\_post\_things\_ive\_learned\_as\_a\_sr\_engineer/</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SM2密钥加密数据，对明文数据长度有什么要求？最大可以加密多少字节明文数据？</title>
      <link href="/posts/2021/05/3fd2352e.html"/>
      <url>/posts/2021/05/3fd2352e.html</url>
      
        <content type="html"><![CDATA[<p>sm2的密文是根据一定规则派生，然后与明文异或 。所以对明文长度没有要求，多长都可以，但是尽量别用SM2加解密长数据，SM2 只是用来 签名，验签， 以及对称密钥的协商，要加解密长数据，肯定还是sm4 对称加解密 更合适。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux带参数的脚本示例（包含进程状态判断）</title>
      <link href="/posts/2021/05/95b43a10.html"/>
      <url>/posts/2021/05/95b43a10.html</url>
      
        <content type="html"><![CDATA[<p>Linux带参数的脚本示例（包含进程状态判断）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;start&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;stop&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;status&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="keyword">while</span> [ 1 ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;`ps -ef | grep ping | grep -v grep`&quot;</span> != <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;running&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> stop</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">sleep</span> 1s</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Beanshell里使用source命令加载java源文件的报错：Method Invocation this.interpreter.source</title>
      <link href="/posts/2021/04/eab7b127.html"/>
      <url>/posts/2021/04/eab7b127.html</url>
      
        <content type="html"><![CDATA[<p>用Jmeter在Beanshell里使用source命令加载java源文件的报错：Method Invocation this.interpreter.source</p><p>具体报错如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanShellSampler: Exception executing script. org.apache.jorphan.util.JMeterException: Error invoking bsh method: eval    </span><br><span class="line">Sourced file: inline evaluation of: <span class="string">&quot;. . . &#x27;&#x27; : Method Invocation this.interpreter.source</span></span><br></pre></td></tr></table></figure><p><strong>原因大概是引用的java源文件里有interface的定义，去掉interface的定义则不会报这个错。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jmeter </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter:通过JAVA代码创建仅一次控制器(OnceOnlyController)和预处理器(BeanShellPreProcessor )</title>
      <link href="/posts/2021/04/a4034006.html"/>
      <url>/posts/2021/04/a4034006.html</url>
      
        <content type="html"><![CDATA[<p>Jmeter:通过JAVA代码创建仅一次控制器(OnceOnlyController)</p><p>最近在研究通过JAVA动态创建Jmeter脚本，对于创建OnceOnlyController ，实在没找到相关资料，就自己研究了下，不是很难，代码如下：</p><span id="more"></span> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建OnceOnlyController  仅一次控制器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadGroupHashTree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createOnceOnlyController</span><span class="params">(HashTree threadGroupHashTree ,String taskId)</span> &#123;</span><br><span class="line">    OnceOnlyController onceOnlyController=<span class="keyword">new</span> <span class="title class_">OnceOnlyController</span>();</span><br><span class="line">    onceOnlyController.setProperty(<span class="string">&quot;testname&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    onceOnlyController.setProperty(<span class="string">&quot;enable&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">HashTree</span> <span class="variable">testPlanTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTree</span>();</span><br><span class="line">    testPlanTree.add(createBeanShellPreProcessor(taskId));</span><br><span class="line">    </span><br><span class="line">    <span class="type">BeanShellSampler</span> <span class="variable">beanShellSampler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanShellSampler</span>();</span><br><span class="line">beanShellSampler.setName(<span class="string">&quot;test&quot;</span> + taskId);</span><br><span class="line">beanShellSampler.setProperty(<span class="string">&quot;BeanShellSampler.query&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">testPlanTree.add(beanShellSampler);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将BeanShellPreProcessor和BeanShellSampler 添加到OnceOnlyController下</span></span><br><span class="line">threadGroupHashTree.add(onceOnlyController,testPlanTree);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建BeanShell 预处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanShellPreProcessor <span class="title function_">createBeanShellPreProcessor</span><span class="params">(String taskId)</span> &#123;</span><br><span class="line">    BeanShellPreProcessor preProcessor=<span class="keyword">new</span> <span class="title class_">BeanShellPreProcessor</span>();</span><br><span class="line">    preProcessor.setEnabled(<span class="literal">true</span>);</span><br><span class="line">    preProcessor.setProperty(<span class="string">&quot;resetInterpreter&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    String script=<span class="string">&quot;System.out.println(\&quot;预处理num:\&quot;+ctx.getThreadNum());&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    preProcessor.setProperty(<span class="string">&quot;script&quot;</span>, script);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    preProcessor.setProperty(TestElement.ENABLED, <span class="literal">true</span>);</span><br><span class="line">    preProcessor.setProperty(TestElement.NAME,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    preProcessor.setProperty(TestElement.TEST_CLASS, preProcessor.getClass().getName());</span><br><span class="line">    preProcessor.setProperty(TestElement.GUI_CLASS, TestBeanGUI.class.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;createBeanShellPreProcessor:&quot;</span>+preProcessor.getPropertyAsString(<span class="string">&quot;script&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> preProcessor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>欢迎留言交流。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jmeter </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JNA时碰到的坑：Can&#39;t obtain InputStream for linux-x86-64/libXXX.so</title>
      <link href="/posts/2021/04/3feb991d.html"/>
      <url>/posts/2021/04/3feb991d.html</url>
      
        <content type="html"><![CDATA[<p>比如使用JNA时需要动态加载 libsgd.so，使用Native.load(“sgd”,FmSGDLibrary.class) 时总是会报   Can’t obtain InputStream for linux-x86-64/libsgd.so 的错误，虽然通过设置环境变量可以解决问题  ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/tmp/lib/ 是so文件所在路径，自由调整</span><br><span class="line">export LD_LIBRARY_PATH=/tmp/lib/:$LD_LIBRARY_PATH  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这个方式也太不灵活了，能不能只通过java代码就能动态加载动态链接库呢？</p><p>答案是有的，通过Native.loadlibrary使用绝对路径加载就行了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Native.loadLibrary(<span class="string">&quot;/tmp/lib/libsgd.so&quot;</span>, FmSGDLibrary.class);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JNA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端技能图谱</title>
      <link href="/posts/2021/01/cd84893a.html"/>
      <url>/posts/2021/01/cd84893a.html</url>
      
        <content type="html"><![CDATA[<p>前端技能图谱<br>如图：</p><span id="more"></span> <p><img src="https://oscimg.oschina.net/oscnet/up-fc97cfb9d77627bcea428a6678f42feabe6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试技能图谱</title>
      <link href="/posts/2021/01/a87b39e5.html"/>
      <url>/posts/2021/01/a87b39e5.html</url>
      
        <content type="html"><![CDATA[<p>测试技能图谱<br>如图：</p><span id="more"></span> <p><img src="https://oscimg.oschina.net/oscnet/up-0bbddd6c2c418d544c227d4533fcba2a3fb.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA技能图谱</title>
      <link href="/posts/2021/01/d11f2b88.html"/>
      <url>/posts/2021/01/d11f2b88.html</url>
      
        <content type="html"><![CDATA[<p>JAVA技能图谱<br>如图：</p><span id="more"></span> <p><img src="https://oscimg.oschina.net/oscnet/up-14ab35097f73549b221301ed9efab49f492.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA项目性能分析工具JConsole的使用</title>
      <link href="/posts/2020/11/f64db4d9.html"/>
      <url>/posts/2020/11/f64db4d9.html</url>
      
        <content type="html"><![CDATA[<p>项目启动参数增加以下选项即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Djava.rmi.server.hostname=192.168.0.129 (服务所在IP)</span><br><span class="line"></span><br><span class="line">-Dcom.sun.management.jmxremote</span><br><span class="line"></span><br><span class="line">-Dcom.sun.management.jmxremote.port=9192 (JConsole要连接的端口，不能与项目一样)</span><br><span class="line"></span><br><span class="line">-Dcom.sun.management.jmxremote.rmi.port=9193 (rmi方式连接，不能与项目一样)</span><br><span class="line"></span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false</span><br><span class="line"></span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false</span><br></pre></td></tr></table></figure><span id="more"></span> <p>以某项目（192.168.0.129,jar文件）为例，启动命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -jar -Djava.rmi.server.hostname=192.168.0.129 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9192 -Dcom.sun.management.jmxremote.rmi.port=9193 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false test-1.0.0.jar &amp;</span><br></pre></td></tr></table></figure><p>然后启动%JAVA_HOME%/bin/jconsole.exe,输入进程ip和端口，点击连接即可。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-8.png" alt=""><p>进程实际情况如下,使用情况：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-0.png" alt=""><p>通过观察发现一次次的堆内存使用量有较大幅度的变化，多次进行GC。</p><p>进一步分析堆内存情况。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-1.png" alt=""><p>每次经过GC之后老年区一直都在提升，说明对象在进行GC后被移动到老年区了。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-2.png" alt=""><p>Eden新生区，对象随着时间的变化生成的速度越来越快，GC不断进行回收操作，系统频繁调用GC。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-3.png" alt=""><p>存活期对象，在不断的进行GC操作之后，将被不断的从eden区copy到survive区，通过经过不多gc回收标记，在14：57时被批量移动到old区，所以空间在不断下降。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-4.png" alt=""><p>而非堆区数据一致保持较平稳状况，所以内存较为平稳。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-5.png" alt=""><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-6.png" alt=""><p> 通过分析发现，堆区对象在不断生成，并且不断增加，即使在进行回收的时候也无法回收掉，可以理解为，此处有与不断产生 斐波那契 序列并存储出现的问题，由于后续的数据非常大，所以非必须应该放弃缓存，或在获得结果后进行转存，如数据库等。</p><p>另外，我们可以查看线程情况，通过下图可以查看main方法中的Thread.sleep();方法话费了2638，可以在程序中去掉。</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/pasted-7.png" alt="">]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java计算中位数、方差、标准差、众数</title>
      <link href="/posts/2019/09/1d8dae74.html"/>
      <url>/posts/2019/09/1d8dae74.html</url>
      
        <content type="html"><![CDATA[<p>Java计算中位数、方差、标准差、众数</p><p>代码如下：<br> <span id="more"></span></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数学算法（数学算法（方差、标准差、中位数、众数））</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathAlgorithm</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">dmax</span> <span class="operator">=</span> <span class="number">999</span>;<span class="comment">// Double.MAX_VALUE;//Double类型的最大值，太大的double值，相乘会达到无穷大</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">dmin</span> <span class="operator">=</span> Double.MIN_VALUE;<span class="comment">// Double类型的最小值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">// 假设求取100个doubl数的方差和标准差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">double</span>[] x = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">// 随机生成n个double数</span></span><br><span class="line">x[i] = Double.valueOf(Math.floor(random.nextDouble() * (dmax - dmin)));</span><br><span class="line">System.out.println(x[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置doubl字符串输出格式，不以科学计数法输出</span></span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#,##0.00&quot;</span>);<span class="comment">// 格式化设置</span></span><br><span class="line"><span class="comment">// 计算方差</span></span><br><span class="line"><span class="type">double</span> <span class="variable">dV</span> <span class="operator">=</span> getVariance(x);</span><br><span class="line">System.out.println(<span class="string">&quot;方差=&quot;</span> + df.format(dV));</span><br><span class="line"><span class="comment">// 计算标准差</span></span><br><span class="line"><span class="type">double</span> <span class="variable">dS</span> <span class="operator">=</span> getStandardDiviation(x);</span><br><span class="line">System.out.println(<span class="string">&quot;标准差=&quot;</span> + df.format(dS));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] intArr=&#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(intArr)+<span class="string">&quot; 中位数:&quot;</span>+median(intArr));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] intArr2=&#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(intArr2)+<span class="string">&quot; 中位数:&quot;</span>+median(intArr2));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; modalNums = getModalNums(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;众数：&quot;</span>+modalNums);</span><br><span class="line">        </span><br><span class="line">        <span class="type">float</span>[] arr2 = &#123;<span class="number">0.1f</span>, <span class="number">1.1f</span>, <span class="number">2.1f</span>, <span class="number">3.1f</span>, <span class="number">4.1f</span>, <span class="number">5.1f</span>, <span class="number">6.1f</span>, <span class="number">7.1f</span>, <span class="number">8.1f</span>, <span class="number">9.1f</span>, <span class="number">10.1f</span>, <span class="number">1.1f</span>, <span class="number">1.1f</span>, <span class="number">2.1f</span>, <span class="number">2.1f</span>, <span class="number">3.1f</span>, <span class="number">4.1f</span>, <span class="number">5.1f</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Float&gt; modalNums2 = getModalNums(arr2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;众数：&quot;</span>+modalNums2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方差s^2=[(x1-x)^2 +...(xn-x)^2]/n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getVariance</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> x.length;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;<span class="comment">// 求和</span></span><br><span class="line">sum += x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="variable">dAve</span> <span class="operator">=</span> sum / m;<span class="comment">// 求平均值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">dVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;<span class="comment">// 求方差</span></span><br><span class="line">dVar += (x[i] - dAve) * (x[i] - dAve);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dVar / m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准差σ=sqrt(s^2)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getStandardDiviation</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> x.length;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;<span class="comment">// 求和</span></span><br><span class="line">sum += x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="variable">dAve</span> <span class="operator">=</span> sum / m;<span class="comment">// 求平均值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">dVar</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;<span class="comment">// 求方差</span></span><br><span class="line">dVar += (x[i] - dAve) * (x[i] - dAve);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.sqrt(dVar / m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中位数(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: A list of integers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer denotes the middle number of the array.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">median</span><span class="params">(<span class="type">int</span> []nums)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> end=nums.length-<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> index=partition(nums, start, end);</span><br><span class="line"><span class="keyword">if</span>(nums.length%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(index!=nums.length/<span class="number">2</span>-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;nums.length/<span class="number">2</span>-<span class="number">1</span>)&#123;</span><br><span class="line">index=partition(nums, start, index-<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index=partition(nums, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index!=nums.length/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;nums.length/<span class="number">2</span>)&#123;</span><br><span class="line">index=partition(nums, start, index-<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index=partition(nums, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[index];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="type">int</span> left=start;</span><br><span class="line"><span class="type">int</span> right=end;</span><br><span class="line"><span class="type">int</span> pivot=nums[left];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]&gt;=pivot)&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">nums[left]=nums[right];</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]&lt;=pivot)&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">nums[right]=nums[left];</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums[left]=pivot;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中位数(float)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: A list of integers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer denotes the middle number of the array.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">median</span><span class="params">(<span class="type">float</span> []nums)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> end=nums.length-<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> index=partition(nums, start, end);</span><br><span class="line"><span class="keyword">if</span>(nums.length%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(index!=nums.length/<span class="number">2</span>-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;nums.length/<span class="number">2</span>-<span class="number">1</span>)&#123;</span><br><span class="line">index=partition(nums, start, index-<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index=partition(nums, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index!=nums.length/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index&gt;nums.length/<span class="number">2</span>)&#123;</span><br><span class="line">index=partition(nums, start, index-<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index=partition(nums, index+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[index];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">float</span> nums[], <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="type">int</span> left=start;</span><br><span class="line"><span class="type">int</span> right=end;</span><br><span class="line"><span class="type">float</span> pivot=nums[left];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]&gt;=pivot)&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">nums[left]=nums[right];</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]&lt;=pivot)&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">nums[right]=nums[left];</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums[left]=pivot;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 众数(int)</span></span><br><span class="line"><span class="comment"> * 众数:在一个数组中出现次数最多的数</span></span><br><span class="line"><span class="comment"> * 如果存在多个众数，则一起返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getModalNums</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(arr[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, Integer&gt; freqMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 统计数组中每个数出现的频率</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">v</span> <span class="operator">=</span> freqMap.get(arr[i]);</span><br><span class="line">            <span class="comment">// v == null 说明 freqMap 中还没有这个 arr[i] 这个键</span></span><br><span class="line">            freqMap.put(arr[i], v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 freqMap 中所有的键值对（键为数，值为数出现的频率）放入一个 ArrayList</span></span><br><span class="line">        List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(freqMap.entrySet());</span><br><span class="line">        <span class="comment">// 对 entries 按出现频率从大到小排序</span></span><br><span class="line">        Collections.sort(entries, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; e1, Map.Entry&lt;Integer, Integer&gt; e2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> e2.getValue() - e1.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; modalNums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        modalNums.add(entries.get(<span class="number">0</span>).getKey()); <span class="comment">// 排序后第一个 entry 的键肯定是一个众数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> entries.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果之后的 entry 与第一个 entry 的 value 相等，那么这个 entry 的键也是众数</span></span><br><span class="line">            <span class="keyword">if</span> (entries.get(i).getValue().equals(entries.get(<span class="number">0</span>).getValue())) &#123;</span><br><span class="line">                modalNums.add(entries.get(i).getKey());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modalNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 众数(float)</span></span><br><span class="line"><span class="comment"> * 众数:在一个数组中出现次数最多的数</span></span><br><span class="line"><span class="comment"> * 如果存在多个众数，则一起返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Float&gt; <span class="title function_">getModalNums</span><span class="params">(<span class="type">float</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(arr[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Float, Integer&gt; freqMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 统计数组中每个数出现的频率</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">v</span> <span class="operator">=</span> freqMap.get(arr[i]);</span><br><span class="line">            <span class="comment">// v == null 说明 freqMap 中还没有这个 arr[i] 这个键</span></span><br><span class="line">            freqMap.put(arr[i], v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 freqMap 中所有的键值对（键为数，值为数出现的频率）放入一个 ArrayList</span></span><br><span class="line">        List&lt;Map.Entry&lt;Float, Integer&gt;&gt; entries = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(freqMap.entrySet());</span><br><span class="line">        <span class="comment">// 对 entries 按出现频率从大到小排序</span></span><br><span class="line">        Collections.sort(entries, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Float, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Float, Integer&gt; e1, Map.Entry&lt;Float, Integer&gt; e2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> e2.getValue() - e1.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;Float&gt; modalNums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        modalNums.add(entries.get(<span class="number">0</span>).getKey()); <span class="comment">// 排序后第一个 entry 的键肯定是一个众数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> entries.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果之后的 entry 与第一个 entry 的 value 相等，那么这个 entry 的键也是众数</span></span><br><span class="line">            <span class="keyword">if</span> (entries.get(i).getValue().equals(entries.get(<span class="number">0</span>).getValue())) &#123;</span><br><span class="line">                modalNums.add(entries.get(i).getKey());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modalNums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成固定格式word并打印word文档解决方案【windows环境】</title>
      <link href="/posts/2018/05/4ef893aa.html"/>
      <url>/posts/2018/05/4ef893aa.html</url>
      
        <content type="html"><![CDATA[<p>   用户要求用程序生成标准的word文档，要能打印（有多个打印机时可以指定打印机进行打印，支持横向打印），而且不能变形，以前用过很多解决方案，都在客户严格要求下牺牲的无比惨烈。</p><p>   POI读word文档还行，写文档实在不敢恭维，复杂的样式很难控制不提，想象一下一个20多页，嵌套很多表格和图像的word文档靠POI来写代码输出，对程序员来说比去山西挖煤还惨，况且文档格式还经常变化。</p><p>   iText操作Excel还行，对于复杂的大量的word也是噩梦。</p><span id="more"></span> <p>   Word从2003开始支持XML格式，用XML还做就很简单了。 大致的思路是先用office2003或者2007编辑好word的样式，然后另存为xml，将xml翻译为FreeMarker模板，最后用java来解析FreeMarker模板并输出Doc。经测试这样方式生成的word文档完全符合office标准，样式、内容控制非常便利，打印也不会变形，生成的文档和office中编辑文档完全一样。</p><p>   具体代码请参见:<a href="https://www.cnblogs.com/zwqh/p/7182953.html">https://www.cnblogs.com/zwqh/p/7182953.html</a> ，此处不再赘述。</p><p>   另外还有一个比较好的生成各种美观的word的组件，分享一下:<a href="https://github.com/Sayi/poi-tl">https://github.com/Sayi/poi-tl</a> 。</p><p>   <strong>本文的重点是如何使用Java来打印word文档。</strong></p><p><strong>一、背景</strong></p><p>    ·查找了Java打印的相关资料，总结如下：</p><ul><li>  Java自带的PrintJob，提供的打印机制并不完整，只能打印pdf、txt、图片之类，无法打印html、word、excel等复杂文档。</li><li>  使用jacob组件打印word，详见：<a href="https://www.cnblogs.com/Joanna-Yan/p/5346084.html">https://www.cnblogs.com/Joanna-Yan/p/5346084.html</a> ，证实可用。但是不能指定打印机打印和不支持设定横向打印（可能是我没找到具体方法）。</li></ul><p>    由于上述两种方法均无法满足客户需求，我只好亲自上阵，完美实现了客户需求，并在实施过程中运行良好。</p><p><strong>二、我的解决方案</strong></p><p>   使用printword.exe ，下载链接：<a href="https://download.csdn.net/download/dong707/10485755">https://download.csdn.net/download/dong707/10485755</a></p><p>   调用printword.exe 时，有3个参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   path：word文档的路径（如果路径中有空格时，整个路径需要用双引号包起来），必填</span><br><span class="line">-   ip：打印机的IP（实际上该参数应为打印机的名字，但是我这边打印机的命名都是用ip来命名的，故用ip），实现指定打印机来打印，必填</span><br><span class="line">-   orientation：0 纵向打印，1 横向打印。可不填，默认纵向打印。</span><br></pre></td></tr></table></figure><p>   使用方法：</p><p>   在命令行中输入:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   c:/printer/printword.exe path=<span class="string">&quot;d:/app data/test.doc&quot;</span> ip=192.168.0.101 orientation=1</span><br></pre></td></tr></table></figure><p>   该命令行就是使用c:/printer/printword.exe调用ip为192.168.0.101的打印机（前提是要把这个ip的打印机添加到设备中，并且重命名为192.168.0.101，如下图所示），横向打印d:/app data/test.doc这个文档。</p><p><img src="https://oscimg.oschina.net/oscnet/3912437de83eb64a6a2471265397925d579.jpg"></p><p>   既然通过命令行可以打印word了，那现在就可以通过java来执行命令行打印word了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取cmd命令 */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String cmd=<span class="string">&quot;cmd /c c:/printer/printword.exe ip=192.168.0.101 orientation=1 path=&quot;</span> + filePath;</span><br><span class="line">System.out.println(cmd);</span><br><span class="line"><span class="type">Process</span> <span class="variable">pro</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd); </span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(pro.getInputStream())); </span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((msg = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">LOG.warn(<span class="string">&quot;打印完成&quot;</span>);</span><br></pre></td></tr></table></figure><p>   综上，算是使用了一个较为简便的方法实现了通过java调用指定打印机横向打印word，特分享至此，欢迎共同讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Word </tag>
            
            <tag> 打印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot + @scheduled 多任务并发</title>
      <link href="/posts/2018/04/f151b914.html"/>
      <url>/posts/2018/04/f151b914.html</url>
      
        <content type="html"><![CDATA[<p>下面讲的是springboot + @scheduled 多任务并发，spring的定时任务（包括多任务并发）详解参见 <strong><a href="https://blog.csdn.net/qq_33556185/article/details/51852537">传送门</a></strong></p><h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>项目采用springboot搭建，想给方法添加@Scheduled注解，实现两个定时任务。可是运行发现，两个task并没有并发执行，而是执行完一个task才会执行另外一个。上代码：</p><span id="more"></span> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.autohome.contentplatform.tasks;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task1</span> &#123;</span><br><span class="line">     <span class="meta">@Scheduled(cron = &quot;0/5 * *  * * ? &quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startSchedule</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;===========1=&gt;&quot;</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;=1==&gt;&quot;</span>+i);</span><br><span class="line">                 Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="meta">@Scheduled(cron = &quot;0/5 * *  * * ? &quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startSchedule2</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;=2==&gt;&quot;</span>+i);</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行发现任务没有并行执行。</p><h3 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTask</span> &#123;</span><br><span class="line">     <span class="meta">@Async</span></span><br><span class="line">     <span class="meta">@Scheduled(cron = &quot;0/5 * *  * * ? &quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startSchedule</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;===========1=&gt;&quot;</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;=1==&gt;&quot;</span>+i);</span><br><span class="line">                 Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">     <span class="meta">@Scheduled(cron = &quot;0/5 * *  * * ? &quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startSchedule2</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;=2==&gt;&quot;</span>+i);</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给类添加注解@EnableAsync，并给方法添加注解@Async。</p><p>再次运行，发现两个任务可以并发执行了。</p><h3 id="三、参考资料："><a href="#三、参考资料：" class="headerlink" title="三、参考资料："></a>三、参考资料：</h3><p><a href="https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/scheduling.html">https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/scheduling.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC整合cxf webservice出现提示No service was found解决办法</title>
      <link href="/posts/2018/04/aadd6311.html"/>
      <url>/posts/2018/04/aadd6311.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、项目环境</strong></p><p>    SpringMVC框架 版本:4.3.1</p><p>    CXF  版本:3.1.6</p><p><strong>二、问题现象</strong></p><p>   配置好相关配置文件，验证webService是否发布成功，访问：</p><p>    <code>http://localhost:8080/CXF_Spring/webservice/HelloWorld?wsdl</code></p><p>   页面提示：</p><p>    <code>No service was found</code><br>   <span id="more"></span></p><p>   后台提示：</p><p>   <code>WARNING: Can&#39;t find the the request for     http://localhost:8080/CXF_Spring/webservice/HelloWorld&#39;s Observer </code></p><p><strong>三、问题分析</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: Can&#x27;t find the the request for http://localhost:8080/CXF_Spring/webservice/HelloWorld&#x27;s Observer </span><br></pre></td></tr></table></figure><p>   出现上述提示则意味着CXF的核心控制器没起作用，CXF的核心控制器要依赖Spring的ContextLoaderListner,而SpringMVC用的是DiapacherServlet的配置方式。问题搞清楚了，那么解决方案就很明显了。</p><p><strong>四、解决方案(其实也是整合SpringMvc和cxf的完整教程)</strong></p><p>    <strong>拆分配置文件，spring-servlet.xml（DiapacherServlet配置方式）中配置Controller组件，root-context.xml(ContextLoaderListner配置方式)中配置普通bean和CXF。</strong></p><p>详细配置如下(只展示与解决这个问题有关的配置)：</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Define spring4.x listener.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Define applicationContext.xml location.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">classpath:root-context.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>SpringMVC dispatcher servlet.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Define springMVC configuration location.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">               org.apache.cxf.transport.servlet.CXFServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webservice/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-servlet.xml（DiapacherServlet配置方式）</strong></p><p>该配置文件没有与CXF有关的配置，略过</p><p><strong>root-context.xml(ContextLoaderListner配置方式)</strong></p><p>在该配置文件<beans>中首先要额外加上这些链接：xmlns:jaxws=”<a href="http://cxf.apache.org/jaxws&quot;">http://cxf.apache.org/jaxws&quot;</a> 和</p><p>xsi:schemaLocation=” <a href="http://cxf.apache.org/jaxws">http://cxf.apache.org/jaxws</a>   <a href="http://cxf.apache.org/schemas/jaxws.xsd&quot;">http://cxf.apache.org/schemas/jaxws.xsd&quot;</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引cxf的一些核心配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:META-INF/cxf/cxf.xml&quot;</span> /&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!--  cxf 3.1.6版本不存在如下两个xml，可能在较早版本中会存在且需要需要</span></span><br><span class="line"><span class="comment">   &lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-soap.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">   &lt;import resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dx.webservice.HelloWorldImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxws:endpoint</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">implementor</span>=<span class="string">&quot;#hello&quot;</span> <span class="attr">address</span>=<span class="string">&quot;/HelloWorld&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0-alpha4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HelloWorld.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding.Style;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="comment">//@WebService(targetNamespace=&quot;tallent&quot;)</span></span><br><span class="line"><span class="comment">//如果不写targetNamespace的值时，默认是包反转，比如服务器项目中包是com.gstd.hw，那么默认值为hw.gstd.com，如果在另外  </span></span><br><span class="line"><span class="comment">//的项目客户端中调用，则创建接口类HelloWorld时，类名可以不一样，但是targetNamespace必须一样。不然调用不成功！最好自己定义一个名称  </span></span><br><span class="line"><span class="meta">@SOAPBinding(style = Style.RPC)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">String <span class="title function_">sayHi</span><span class="params">(String text)</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HelloWorldImpl.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding.Style;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService(endpointInterface = &quot;com.dx.webservice.HelloWorld&quot;)</span><span class="comment">////这里指定服务的接口类的路径，也可以不写  </span></span><br><span class="line"><span class="meta">@SOAPBinding(style = Style.RPC)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(<span class="meta">@WebParam(name = &quot;text&quot;)</span>String text)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sayHi called&quot;</span>);   </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + text;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置完成后，访问 <a href="http://localhost:8080/CXF_Spring/webservice/HelloWorld?wsdl%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%8F%91%E5%B8%83%E7%9A%84webservice%E7%9A%84xml%E4%BA%86%E3%80%82">http://localhost:8080/CXF_Spring/webservice/HelloWorld?wsdl即可看到发布的webservice的xml了。</a></p><p>访问<a href="http://localhost:8080/CXF_Spring/webservice/%E5%8F%AF%E6%9F%A5%E7%9C%8B%E5%8F%91%E5%B8%83%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%88%97%E8%A1%A8%E3%80%82">http://localhost:8080/CXF_Spring/webservice/可查看发布的接口列表。</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用xmlbeans解析xml开发总结</title>
      <link href="/posts/2018/04/472be5ab.html"/>
      <url>/posts/2018/04/472be5ab.html</url>
      
        <content type="html"><![CDATA[<p>   最近在工作中用到了webservice，需要解析webservice接口返回的各种xml格式报文。xml的解析一向是很伤脑筋的，而Java语言里解析xml的传统方式：dom解析和sax解析，对我而言实在是太过于死板僵硬望之却步，多方研究后在本项目中采用了apache提供的xml解析解决方案：xmlbeans，特在此总结xmlbeans的使用方法。</p><p><strong>一、关于xmlbeans</strong></p><p>   xmlbeans通过利用XML Schema的功能来提供结构化和约束性数据类型，开发者可以像Java对象那样直接访问XML文档。通过使用XMLBeans，Java开发者不需要花时间来编写导入/导出和有效性检验代码。<br>   <span id="more"></span></p><p><strong>二、下载配置xmlbeans</strong></p><p>这里我选择的是xmlbeans-2.4.0</p><p>a. 下载xmlbeans，从apache xmlbeans官网 <a href="http://xmlbeans.apache.org/">http://xmlbeans.apache.org/</a>  或者 csdn链接：<a href="https://download.csdn.net/download/dong707/10379022">下载xmlbeans-2.4.0</a>。假定下载到C:\xmlbeans-2.4.0<br>b. 设置环境变量XMLBEANS_HOME= C:\xmlbeans-2.4.0<br>c. 在path中加入%XMLBEANS_HOME%\bin</p><p><strong>三、生成XML Schema文件</strong></p><p>   什么是XML Schema文件? 正常情况下,每个XML文件都有一个Schema文件,XML Schema文件是一个XML的约束文件,它定义了 XML文件的结构和元素.以及对元素和结构的约束. 通俗地讲,如果说XML文件是数据库里的记录,那么Schema就是表结构定义.  <br>  <br>   为什么需要这个文件? xmlbeans需要通过这个文件知道一个XML文件的结构以及约束,比如数据类型等. 利用这个Schema文 件,xmlbeans将会产生一系列相关的Java Classes来实现对XML的操作。</p><p>   虽然有工具可以通过xml直接生成XML Schema文件，但是这种直接生成的通常不能直接使用，需要修改后才能使用。推荐在理解xml结构的基础上用Eclipse图形化界面操作直接生成XML Schema文件，方便快捷。</p><p>   以登录接口返回xml为例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LoginResponse</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tempuri.org/&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">LoginResult</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">SHINE</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">RESULT</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">RESULTCODE</span>&gt;</span>0<span class="tag">&lt;/<span class="name">RESULTCODE</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RESULTMSG</span>&gt;</span>操作成功<span class="tag">&lt;/<span class="name">RESULTMSG</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">RESULT</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">QUEUETYPELIST</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">QUEUE_TYPE</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">SOURCE_ID</span>&gt;</span>001001<span class="tag">&lt;/<span class="name">SOURCE_ID</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">DISPLAY_NAME</span>&gt;</span>第五房间<span class="tag">&lt;/<span class="name">DISPLAY_NAME</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">NAME</span>&gt;</span>第五房间<span class="tag">&lt;/<span class="name">NAME</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">QUEUE_TYPE_ID</span>&gt;</span>7<span class="tag">&lt;/<span class="name">QUEUE_TYPE_ID</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">QUEUE_TYPE</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">QUEUETYPELIST</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">SHINE</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">LoginResult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LoginResponse</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据上述xml，写出如下XML Schema文件：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo7.png" alt=""><p>LoginResponse是根节点，其中最关键的SHINEConfig的配置如下：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo8.png" alt=""><p>这里定义的数据约束如下：RESULTConfig的约束是[1..1],QUEUETYPELISTConfig的约束是[0..1]，QUEUE_TYPEConfig的约束是[1…*]。这里是由于在这个xml结构里RESULT元素只会出现一次，QUEUETYPELIST元素在有QUENE_TYPE数据时才会出现否则不出现，QUENE_TYPE元素至少出现一次。</p><p>CallLogin.xsd文件内容如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://webservice.test.com/CallLogin&quot;</span> <span class="attr">xmlns:tns</span>=<span class="string">&quot;http://webservice.test.com/CallLogin&quot;</span> <span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;SHINEConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;RESULT&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:RESULTConfig&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minOccurs</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;QUEUETYPELIST&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;tns:QUEUETYPELISTConfig&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;1&quot;</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;RESULTConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;RESULTCODE&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;RESULTMSG&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;LoginResponse&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:LoginResponseConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;LoginResultConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;SHINE&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:SHINEConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;QUEUETYPELISTConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;QUEUE_TYPE&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:QUEUE_TYPEConfig&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span> <span class="attr">minOccurs</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;QUEUE_TYPEConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;SOURCE_ID&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;DISPLAY_NAME&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;NAME&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;QUEUE_TYPE_ID&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">complexType</span> <span class="attr">name</span>=<span class="string">&quot;LoginResponseConfig&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;LoginResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:LoginResultConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>四、利用scomp命令来编译XML Schema文件生成jar</strong></p><p>   scomp是xmlbeans提供的一个编译工具,它在bin的目录下. 通过这个工具,  <br>       我们可以将以上的Schema文件生成Java Classes.  <br>       scomp的语法如下:-    </p><p>       scomp [options] [dirs]* [schemaFile.xsd]* [service.wsdl]* [config.xsdconfig]*  <br>   <br>       主要参数说明:  <br>       -src [dir]                  – 生成的Java Classes存放目录  <br>       -srconly                  – 不编译Java Classes,不产生Jar文件  <br>       -out [jarFileName]  – 生成的Jar文件,缺省是xmltypes.jar  <br>       -compiler                 – Java编译器的路径,即Javac的位置  <br>       schemaFile.xsd    – XML Schema文件位置  <br>       config.xsdconfig   – xsdconfig文件的位置, 这个文件主要用来制定生成的Java Class 的一些文件名规则和Package的名称 </p><p>命令行中运行:   </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scomp -out c:\xsd\CallSystem.jar c:\xsd\*.xsd  -compiler <span class="string">&quot;C:\Program Files\Java\jdk1.7.0_80\bin\javac&quot;</span></span><br></pre></td></tr></table></figure><p>这个命令行的意思是告诉scomp在C:\xsd目录生成CallSystem.jar, 要解析的Schema文件是C:\xsd目录下的所有xsd。</p><p><strong>注：这是一个很实用的批量打包的命令，可以将多个xsd文件生成的java class打包进一个jar里。单独编译某个xsd的话直接在scope命令里指定xsd文件名即可。</strong></p><p>执行结果如下：</p><img src="https://fastly.jsdelivr.net/gh/dong706/dong706.github.io@latest/images/hexo9.png" alt=""><p>scomp命令还可以跟上xsdconfig文件，用于配置生成的class的package。（本例中在xsd中文件中已根据包路径配置了命名空间<a href="http://webservice.test.com/CallLogin%EF%BC%8C%E9%82%A3%E4%B9%88%E7%94%9F%E6%88%90%E7%9A%84jar%E9%87%8C%E7%9A%84%E5%8C%85%E8%B7%AF%E5%BE%84%E5%B0%B1%E6%98%AFcom.test.webservice.callLogin%EF%BC%8C%E6%89%80%E4%BB%A5%E6%AD%A4%E5%A4%84%E5%BF%BD%E7%95%A5%E4%BA%86xsdconfig%E9%85%8D%E7%BD%AE%E3%80%82%EF%BC%89">http://webservice.test.com/CallLogin，那么生成的jar里的包路径就是com.test.webservice.callLogin，所以此处忽略了xsdconfig配置。）</a>  </p><p>config.xsdconfig内容如下:  </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xb:config</span> <span class="attr">xmlns:xb</span>=<span class="string">&quot;http://xml.apache.org/xmlbeans/2004/02/xbean/config&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">xb:namespace</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">xb:package</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">xb:package</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">xb:namespace</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">xb:config</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>将xmlbeans/lib下的包和生成的CallSystem.jar包加入到Project的ClassPath中</p><p>pom.xml配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>五、Java程序中读取/构造xml</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.webservice.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.LoginResponseConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.LoginResponseDocument;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.LoginResultConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.QUEUETYPEConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.QUEUETYPELISTConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.RESULTConfig;</span><br><span class="line"><span class="keyword">import</span> com.test.webservice.callLogin.SHINEConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallLogin</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String xml=<span class="string">&quot;&lt;LoginResponse xmlns=\&quot;http://tempuri.org/\&quot;&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;&lt;LoginResult&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;&lt;SHINE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;  &lt;RESULT&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;RESULTCODE&gt;0&lt;/RESULTCODE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;RESULTMSG&gt;操作成功&lt;/RESULTMSG&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;  &lt;/RESULT&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;  &lt;QUEUETYPELIST&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;QUEUE_TYPE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;SOURCE_ID&gt;001001&lt;/SOURCE_ID&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;DISPLAY_NAME&gt; 第五房间&lt;/DISPLAY_NAME&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;NAME&gt; 第五房间&lt;/NAME&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;QUEUE_TYPE_ID&gt;7&lt;/QUEUE_TYPE_ID&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;/QUEUE_TYPE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;QUEUE_TYPE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;SOURCE_ID&gt;001002&lt;/SOURCE_ID&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;DISPLAY_NAME&gt; 第六房间&lt;/DISPLAY_NAME&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;NAME&gt; 第六房间&lt;/NAME&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;      &lt;QUEUE_TYPE_ID&gt;8&lt;/QUEUE_TYPE_ID&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;    &lt;/QUEUE_TYPE&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;  &lt;/QUEUETYPELIST&gt;&quot;</span></span><br><span class="line">+<span class="string">&quot;&lt;/SHINE&gt;&lt;/LoginResult&gt;&lt;/LoginResponse&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">LoginResponseDocument</span> <span class="variable">loginResponseDocument</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">xml=xml.replace(<span class="string">&quot;http://tempuri.org/&quot;</span>, <span class="string">&quot;http://webservice.test.com/CallLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">loginResponseDocument=LoginResponseDocument.Factory.parse(xml);</span><br><span class="line"></span><br><span class="line">LoginResponseConfig loginResponseConfig=loginResponseDocument.getLoginResponse();</span><br><span class="line"></span><br><span class="line">LoginResultConfig callNextResultConfig=loginResponseConfig.getLoginResult();</span><br><span class="line"></span><br><span class="line">SHINEConfig shineConfig=callNextResultConfig.getSHINE();</span><br><span class="line"></span><br><span class="line">RESULTConfig resultConfig=shineConfig.getRESULT();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;RESULTCODE():&quot;</span>+resultConfig.getRESULTCODE());</span><br><span class="line">System.out.println(<span class="string">&quot;RESULTMSG():&quot;</span>+resultConfig.getRESULTMSG());</span><br><span class="line"></span><br><span class="line">QUEUETYPELISTConfig queuetypelistConfig=shineConfig.getQUEUETYPELIST();</span><br><span class="line"><span class="keyword">if</span>(queuetypelistConfig!=<span class="literal">null</span>)&#123;</span><br><span class="line">QUEUETYPEConfig[] queuetypeConfigs= queuetypelistConfig.getQUEUETYPEArray();</span><br><span class="line"><span class="keyword">for</span> (QUEUETYPEConfig queuetypeConfig : queuetypeConfigs) &#123;</span><br><span class="line">System.out.print(queuetypeConfig.getSOURCEID()+<span class="string">&quot;\t&quot;</span>+queuetypeConfig.getDISPLAYNAME()+<span class="string">&quot;\t&quot;</span></span><br><span class="line">+queuetypeConfig.getNAME()+<span class="string">&quot;\t&quot;</span>+queuetypeConfig.getQUEUETYPEID()+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：其中有xml=xml.replace(“<a href="http://tempuri.org/&quot;">http://tempuri.org/&quot;</a>, “<a href="http://webservice.test.com/CallLogin&quot;)%E8%BF%99%E4%B9%88%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BF%99%E6%98%AF%E7%94%B1%E4%BA%8E%E5%A4%9A%E4%B8%AAwebservice%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84xml%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E9%83%BD%E6%98%AF">http://webservice.test.com/CallLogin&quot;)这么一段代码，这是由于多个webservice接口返回的xml命名空间都是</a> <a href="http://tempuri.org/">http://tempuri.org/</a> ，但是编写xsd时必须为各个xsd指定不同的命名空间防止生成jar包里存在冲突。所以在拿到webservice接口返回的xml时，必须把原始的命名空间<a href="http://tempuri.org/%E8%BD%AC%E6%8D%A2%E6%88%90xsd%E4%B8%AD%E5%AE%9E%E9%99%85%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4http://webservice.test.com/CallLogin%E6%89%8D%E8%83%BD%E8%A2%AB%E6%AD%A3%E5%B8%B8%E8%A7%A3%E6%9E%90%E3%80%82">http://tempuri.org/转换成xsd中实际的命名空间http://webservice.test.com/CallLogin才能被正常解析。</a></p><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RESULTCODE():0</span><br><span class="line">RESULTMSG():操作成功</span><br><span class="line">001001 第五房间 第五房间7</span><br><span class="line">001002 第六房间 第六房间8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   可以看到引入xmlbeans根据xsd文件生成的jar包后，就能轻轻松松的以访问对象的方式去访问xml了。这里我只写了读xml的操作，写xml操作其实也是一样的简单，后续有时间我会继续更新。</p><p>**五、结束语  **   </p><p>   xmlbeans能帮助我们轻易读写XML,这将有助于我们降低XML的学习和使用,有了这个基础,开发人员将为学习更多地XML相关技术和Web Services,JMS等其他J2EE技术打下良好地基础。</p><p>   欢迎共同探讨。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
            <tag> xmlbeans </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(六)---常见问题解决办法</title>
      <link href="/posts/2018/03/15547.html"/>
      <url>/posts/2018/03/15547.html</url>
      
        <content type="html"><![CDATA[<p>  由于公司新项目要求，做了一段时间的CORBA接口（中兴+华为）开发，踩了各种大大小小的坑，也算积累了一些经验，特分享至此，经验所限难免会有疏漏，欢迎讨论完善。</p><h4 id="一、初始化管理器报异常-org-omg-CORBA-NO-PERMISSION-vmcid-0x0-minor-code-0-completed-No"><a href="#一、初始化管理器报异常-org-omg-CORBA-NO-PERMISSION-vmcid-0x0-minor-code-0-completed-No" class="headerlink" title="一、初始化管理器报异常 org.omg.CORBA.NO_PERMISSION: vmcid: 0x0 minor code: 0 completed: No"></a>一、初始化管理器报异常 org.omg.CORBA.NO_PERMISSION: vmcid: 0x0 minor code: 0 completed: No</h4><p>     产生该异常的可能原因有两种：（1）使用的账号权限不足，通过网管平台授予更高权限即可；（2）当将账号权限设置为最高权限即管理员权限时也无法解决问题，那么问题可能是华为lisence过期，需联系华为采购licence。</p><span id="more"></span><p><strong>二、获取EmsSession引用对象，异常！—ProcessingFailureException—</strong></p><p>     产生该异常的原因一般是当前使用的登录用户的用户名密码错误，或者权限不够，或者已登录的用户还未退出，或者之前调用corba服务后未关闭连接导致该用户名还在登录状态。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
            <tag> JacORB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(五)---中兴CORBA接口-获取历史告警文件</title>
      <link href="/posts/2018/03/56607.html"/>
      <url>/posts/2018/03/56607.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、历史告警文件准备请求（requireHistoryAlarmFileTransfer）</strong></p><ul><li>  接口定义</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void requireHistoryAlarmFileTransfer (</span><br><span class="line"></span><br><span class="line">in string destination,</span><br><span class="line"></span><br><span class="line">in string userName,</span><br><span class="line"></span><br><span class="line">in string passWord,</span><br><span class="line"></span><br><span class="line">in alarmMgr::QueryAlarmFilter_T queryCondition)</span><br><span class="line"></span><br><span class="line">raises (globaldefs::ProcessingFailureException);</span><br></pre></td></tr></table></figure><ul><li>  说明</li></ul><p>历史告警文件准备请求。NMS向EMS发出大数据量历史告警文件文件传输准备的请求，让EMS开始准备相应数据。当EMS按照要求完成了文件准备之后，将向NMS发送’文件准备好’通知。如果在文件的准备中发生了异常，将向NMS发送’文件准备错误’通知。此方法属于FileTransferMgr_I接口。</p><span id="more"></span><ul><li>  输入参数</li></ul><p>        in string destination</p><p>        ——表示文件在NMS上的存放位置。格式定义请参考Destination_T</p><p>        in string userName</p><p>        ——表示FTP使用的用户名称</p><p>        in string passWord</p><p>        ——表示FTP使用的用户口令</p><p>        in alarmMgr:: QueryAlarmFilter_T queryCondition</p><p>        ——表示查询条件。EMS将根据查询条件准备文件</p><ul><li>  输出参数</li></ul><p>        无</p><ul><li>  返回值</li></ul><p>        无</p><ul><li>  异常</li></ul><p>        EXCPT_INTERNAL_ERROR。—EMS内部错误</p><p>        EXCPT_INVALID_INPUT  —输入参数无效不合法.</p><p>        EXCPT_NOT_IMPLEMENTED  — EMS不支持该操作</p><p>        EXCPT_UNABLE_TO_COMPLY  —超时或EMS不能响应操作</p><p><strong>二、接口分析</strong></p><p> 调用<strong>requireHistoryAlarmFileTransfer</strong>接口后，EMS会根据传入的查询条件得到相应的数据并按照固定的格式组织成文件，然后再通过FTP把文件传输给调用者指定的FTP服务器的指定目录里。</p><p><strong>三、中兴CORBA调用requireHistoryAlarmFileTransfer接口示例代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emsSession =ZxEmsSession.getInstance().getEmsSession();</span><br><span class="line"><span class="comment">//System.out.println(&quot;EMSsession ---&quot; + emsSession.toString());</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(emsSession!=<span class="literal">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化 FileTransfer 管理器!&quot;</span>);</span><br><span class="line"><span class="type">Common_IHolder</span> <span class="variable">mgrHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Common_IHolder</span>();</span><br><span class="line">emsSession.getManager(<span class="string">&quot;FileTransfer&quot;</span>, mgrHolder);</span><br><span class="line">fileTransferMgr = FileTransferMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line"><span class="type">QueryAlarmFilter_T</span> <span class="variable">queryCondition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryAlarmFilter_T</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Duration_T</span> <span class="variable">duration_T</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duration_T</span>();</span><br><span class="line">duration_T.fromTime = startdate;</span><br><span class="line">duration_T.toTime = enddate;</span><br><span class="line">queryCondition.raiseTimeDuration = duration_T;</span><br><span class="line"></span><br><span class="line">queryCondition.alarmTypeSelect = <span class="keyword">new</span> <span class="title class_">AlarmType_T</span>[<span class="number">0</span>];</span><br><span class="line">queryCondition.alarmSourceSelect = <span class="keyword">new</span> <span class="title class_">NameAndStringValue_T</span>[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">queryCondition.perceivedSeveritySelect = <span class="keyword">new</span> <span class="title class_">PerceivedSeverity_T</span>[<span class="number">0</span>];</span><br><span class="line">queryCondition.probableCauseSelect = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line"><span class="type">Duration_T</span> <span class="variable">duration_T2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Duration_T</span>();</span><br><span class="line">duration_T2.fromTime = <span class="string">&quot;&quot;</span>;</span><br><span class="line">duration_T2.toTime = <span class="string">&quot;&quot;</span>;</span><br><span class="line">queryCondition.clearTimeDuration = duration_T2;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;/alarm/&quot;</span> + duration_T.fromTime + <span class="string">&quot;_&quot;</span>+ duration_T.toTime + <span class="string">&quot;.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line">fileTransferMgr.requireHistoryAlarmFileTransfer(<span class="string">&quot;本地FTP服务器IP|&quot;</span>+fileName+<span class="string">&quot;|本地FTP服务器端口&quot;</span>, <span class="string">&quot;本地FTP服务器用户名&quot;</span>, <span class="string">&quot;本地FTP服务器密码&quot;</span>, queryCondition);</span><br><span class="line"></span><br><span class="line">fileTransferMgr._release();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">&quot;未获取到emsSession&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ProcessingFailureException e) &#123;</span><br><span class="line">LOG.error(e);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
            <tag> JacORB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(四)---华为CORBA接口开发</title>
      <link href="/posts/2018/03/57045.html"/>
      <url>/posts/2018/03/57045.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、华为CORBA接口开发过程</strong></p><p>流程与中兴类似：</p><ol><li> 建立连接、建立消息通道</li><li> 获取名字服务</li><li> 获取EMSSession工厂（注意这里传入的NameComponent参数与中兴不同）</li><li> 登录并获取EMSSession</li><li> 使用EMSSession初始化管理器对象</li><li> 管理器对象调用接口获取数据</li><li> 关闭连接<span id="more"></span></li></ol><p>     <strong>注：调用corba接口需要用到EMESession对象，如果在你的应用里要多次访问corba接口，那么多次建立连接和获取EMSSession是非常浪费服务器资源且效率低下的，并且一个corba用户名和密码在同一时间只能被一个连接使用。为了优化访问效率、避免登录冲突和减少重连开销，此处应当在服务启动时就建立连接和获取EMSSession（即步骤1、2、3、4），并不断发送心跳维持连接，在服务关闭时关闭连接即可。就这样就实现了一个corba连接的重复使用，可以用单例模式实现。</strong></p><p><strong>二、管理器对象定义</strong></p><p>    高层网管如果要通过U2000 CORBA接口获取数据或交互请求，必须首先获取到相应的CORBA接口管理对象，即CORBA对象，然后通过该管理对象提供的方法来交互请求。目前U2000 CORBA接口中定义的管理对象以及对应的管理对象的名字如表：</p><table><thead><tr><th><strong>管理对象定义</strong></th><th><strong>管理对象名称</strong></th></tr></thead><tbody><tr><td>EMSMgr_I</td><td>“EMS”</td></tr><tr><td>ManagedElementMgr_I</td><td>“ManagedElement”</td></tr><tr><td>PerformanceManagementMgr_I</td><td>“PerformanceManagement”</td></tr><tr><td>待完善…</td><td></td></tr></tbody></table><p>注：该管理器对象定义只适用于华为corba接口。</p><p><strong>三、华为CORBA接口开发示例</strong></p><p>demo github地址：<a href="https://github.com/dong706/CorbaDemo">https://github.com/dong706/CorbaDemo</a></p><p>调用ManagedElement管理器对象的获取所有网元信息接口（getAllManagedElements）示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dx.corba.hw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.ORB;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.SystemException;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NameComponent;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContext;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextPackage.NotFound;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableServer.POA;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableServer.POAHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.common.Common_IHolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.emsSession.EmsSession_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.emsSession.EmsSession_IHolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.emsSessionFactory.EmsSessionFactory_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.emsSessionFactory.EmsSessionFactory_IHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.managedElement.ManagedElementIterator_IHolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.managedElement.ManagedElementList_THolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.managedElementManager.ManagedElementMgr_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.managedElementManager.ManagedElementMgr_IHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.nmsSession.NmsSession_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.hw.nmsSession.NmsSession_IPOATie;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Module: HelloClient.java Description: 客户端的初始化以及调用的代码 Company: Version: 1.0.0</span></span><br><span class="line"><span class="comment"> * Author: pantp Date: Jul 8, 2012</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HwDemo</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">EmsSession_I</span> <span class="variable">emsSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ManagedElementMgr_I</span> <span class="variable">meMgr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args1)</span> &#123;</span><br><span class="line">Object[] objects = getEmsSession();</span><br><span class="line"><span class="type">POA</span> <span class="variable">rootpoa</span> <span class="operator">=</span> rootpoa = (POA) objects[<span class="number">0</span>];</span><br><span class="line">emsSession = (EmsSession_I) objects[<span class="number">1</span>];</span><br><span class="line"><span class="type">ORB</span> <span class="variable">orb</span> <span class="operator">=</span> (ORB) objects[<span class="number">2</span>];</span><br><span class="line">System.out.println(<span class="string">&quot;EMSsession ---&quot;</span> + emsSession.toString());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化 ManagedElement 管理器!&quot;</span>);</span><br><span class="line"><span class="type">Common_IHolder</span> <span class="variable">mgrHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Common_IHolder</span>();</span><br><span class="line">emsSession.getManager(<span class="string">&quot;ManagedElement&quot;</span>, mgrHolder);</span><br><span class="line">meMgr = ManagedElementMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception pfe) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;初始化 ManagedElement 管理器异常!---ProcessingFailureException---&quot;</span>);</span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ManagedElementList_THolder</span> <span class="variable">meList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagedElementList_THolder</span>();</span><br><span class="line"><span class="type">ManagedElementIterator_IHolder</span> <span class="variable">meIt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagedElementIterator_IHolder</span>();</span><br><span class="line">meMgr.getAllManagedElements(<span class="number">100</span>, meList, meIt);</span><br><span class="line">System.out.println(meList.value.length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = meList.value.length; i &lt; size; i++) &#123;</span><br><span class="line">System.out.println(meList.value[i].nativeEMSName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//meMgr._release();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (orb != <span class="literal">null</span>) &#123;</span><br><span class="line">orb.destroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="keyword">if</span> (emsSession != <span class="literal">null</span>) &#123;</span><br><span class="line">emsSession.endSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rootpoa != <span class="literal">null</span>) &#123;</span><br><span class="line">rootpoa.destroy(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (orb != <span class="literal">null</span>) &#123;</span><br><span class="line">orb.shutdown(<span class="literal">true</span>);</span><br><span class="line">orb.destroy();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;关闭华为corba连接....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object[] getEmsSession() &#123;</span><br><span class="line">Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">ORB</span> <span class="variable">orb</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">EmsSession_I</span> <span class="variable">emsSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 建立连接登录、建立消息通道</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">args[<span class="number">0</span>] = <span class="string">&quot;-ORBInitRef&quot;</span>;</span><br><span class="line">args[<span class="number">1</span>] = <span class="string">&quot;NameService=corbaloc::&quot;</span> + <span class="string">&quot;CORBA服务器IP&quot;</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;CORBA服务器端口&quot;</span></span><br><span class="line">+ <span class="string">&quot;/NameService&quot;</span>;<span class="comment">// 此处使用命名端口</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化ORB对象的启动参数为： arg[&quot;</span> + i + <span class="string">&quot;] = &quot;</span></span><br><span class="line">+ args[i]);</span><br><span class="line">&#125;</span><br><span class="line">orb = org.omg.CORBA.ORB.init(args, <span class="literal">null</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;成功初始化ORB对象!－－－－Initialize Orb&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SystemException ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化ORB对象异常！&quot;</span>);</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (orb == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;orb == null&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get Nameservice reference</span></span><br><span class="line"><span class="type">NamingContext</span> <span class="variable">nsRootContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">org.omg.CORBA.<span class="type">Object</span> <span class="variable">objRef</span> <span class="operator">=</span> orb</span><br><span class="line">.resolve_initial_references(<span class="string">&quot;NameService&quot;</span>);</span><br><span class="line">nsRootContext = NamingContextHelper.narrow(objRef);</span><br><span class="line">System.out.println(<span class="string">&quot;成功获取取名字服务!－－－－Get Nameservice reference&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CORBA.ORBPackage.InvalidName ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取名字服务索引异常!&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nsRootContext == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nsRootContext == null&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.1 Get Reference to EMSSessionFactory</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * org.omg.CORBA.Object obj = null; NameComponent[] name = new</span></span><br><span class="line"><span class="comment"> * NameComponent[1]; name[0] = new</span></span><br><span class="line"><span class="comment"> * NameComponent(strConfigEmsFactoryName, &quot;EMSFactory&quot;); obj =</span></span><br><span class="line"><span class="comment"> * nsRootContext.resolve(name); EmsSessionFactory_I emsSessionFactory =</span></span><br><span class="line"><span class="comment"> * EmsSessionFactory_IHelper.narrow(obj);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NameComponent[] name = <span class="keyword">new</span> <span class="title class_">NameComponent</span>[<span class="number">5</span>];</span><br><span class="line">name[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;TMF_MTNM&quot;</span>, <span class="string">&quot;Class&quot;</span>);</span><br><span class="line">name[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;HUAWEI&quot;</span>, <span class="string">&quot;Vendor&quot;</span>);</span><br><span class="line">name[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;Huawei/U2000&quot;</span>, <span class="string">&quot;EmsInstance&quot;</span>);</span><br><span class="line">name[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;2.0&quot;</span>, <span class="string">&quot;Version&quot;</span>);</span><br><span class="line">name[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;Huawei/U2000&quot;</span>, <span class="string">&quot;EmsSessionFactory_I&quot;</span>);</span><br><span class="line"><span class="comment">// System.out.println(&quot;NameComponent: &#x27;&quot; + &quot;ZTE/T3 &quot; +</span></span><br><span class="line"><span class="comment">// &quot;&#x27;,&#x27;EMSFactory&#x27;&quot;);</span></span><br><span class="line">org.omg.CORBA.<span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">obj = nsRootContext.resolve(name);</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;成功获取EMSSession工厂!   Get Reference to EMSSessionFactory&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NotFound ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---NotFound---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CosNaming.NamingContextPackage.InvalidName ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---InvalidName---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CosNaming.NamingContextPackage.CannotProceed ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---CannotProceed---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始准备登陆并且获取EmsSession!</span></span><br><span class="line"><span class="type">EmsSessionFactory_I</span> <span class="variable">m_emsFactory</span> <span class="operator">=</span> EmsSessionFactory_IHelper</span><br><span class="line">.narrow(obj);</span><br><span class="line"><span class="type">NmsSession_I</span> <span class="variable">csession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">POA</span> <span class="variable">rootpoa</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get reference to rootpoa &amp; activate the POAManager</span></span><br><span class="line">System.out.println(<span class="string">&quot;取得rootpoa并激活POAManager!&quot;</span>);</span><br><span class="line">rootpoa = POAHelper.narrow(orb</span><br><span class="line">.resolve_initial_references(<span class="string">&quot;RootPOA&quot;</span>));</span><br><span class="line">rootpoa.the_POAManager().activate();</span><br><span class="line"><span class="comment">// create servant and register it with the ORB</span></span><br><span class="line">System.out.println(<span class="string">&quot;注册NmsSession到ORB!&quot;</span>);</span><br><span class="line"><span class="type">NmsSessionImpl</span> <span class="variable">nmsSessionImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NmsSessionImpl</span>();</span><br><span class="line"><span class="comment">// nmsSessionImpl.setORB(orb);</span></span><br><span class="line"><span class="type">byte</span>[] objectID = rootpoa.activate_object(nmsSessionImpl);</span><br><span class="line"><span class="comment">// create a tie, with servant being the delegate.</span></span><br><span class="line">System.out.println(<span class="string">&quot;创建NmsSession并且托管给POA!&quot;</span>);</span><br><span class="line"><span class="type">NmsSession_IPOATie</span> <span class="variable">tie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NmsSession_IPOATie</span>(nmsSessionImpl,</span><br><span class="line">rootpoa);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obtain the objectRef for the tie</span></span><br><span class="line"><span class="comment">// this step also implicitly activates the the object</span></span><br><span class="line">System.out.println(<span class="string">&quot;在orb上激活NmsSession对象!&quot;</span>);</span><br><span class="line">csession = tie._this(orb);</span><br><span class="line"></span><br><span class="line">objects[<span class="number">0</span>] = rootpoa;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;创建NmsSession对象过程,执行异常!&quot;</span>);</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">EmsSession_IHolder</span> <span class="variable">sessionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmsSession_IHolder</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;获取EmsSession引用对象&quot;</span>);</span><br><span class="line">m_emsFactory.getEmsSession(<span class="string">&quot;CORBA服务用户名&quot;</span>, <span class="string">&quot;CORBA服务密码&quot;</span>, csession,</span><br><span class="line">sessionHolder);</span><br><span class="line">emsSession = sessionHolder.value;</span><br><span class="line">objects[<span class="number">1</span>] = emsSession;</span><br><span class="line"><span class="comment">// System.out.println(&quot;NMSsession ---&quot; + csession.toString());</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.hw.globaldefs.ProcessingFailureException ex) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;获取EmsSession引用对象，异常！---ProcessingFailureException---&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;可能是用户名或者密码错误，或者权限不够，或者已登陆的用户还未退出！&quot;</span>);</span><br><span class="line">System.out.println(ex.toString());</span><br><span class="line">&#125;</span><br><span class="line">objects[<span class="number">2</span>] = orb;</span><br><span class="line"><span class="comment">// System.out.println(&quot;EMSsession ---&quot; + emsSession.toString());</span></span><br><span class="line"><span class="keyword">return</span> objects;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
            <tag> JacORB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(三)---基于ZTECORBA的Client程序</title>
      <link href="/posts/2018/03/18052.html"/>
      <url>/posts/2018/03/18052.html</url>
      
        <content type="html"><![CDATA[<p>1 获得CORBA Adapter所使用的Naming Service的对象引用，</p><p>2 获得所连接的EMS所对应的在NamingService中注册用的名字，记为nameOfEms。(注：即为名字树图中的id值)，id值为“ZTE/E300”，kind为“EMSFactory”.</p><p>3 根据名字树图构造name, 通过步骤1中得到的NamingService去获取EmsSessionFactory_I对象的引用。</p><p>4 获得访问EMS所需的用户名和密码后，在client端构造emsSession_I CORBA对象，并实现emsSession_I接口定义的四个方法，便于Server端能够检测通讯情况和向Client端报告事件通道的可用情况。调用EmsSessionFactory_I对象引用 的getEmsSession 方法得到EmsSession_I对象引用。</p><span id="more"></span><p>5 调用emsSession_I对象的getEventChannel()获取eventChannel。此步骤也可以省略。</p><p>6 调用emsSession_I对象的getSupportedManagers操作，获取EMS所支持的所有管理者的名称。</p><p>7 根据各个管理者的名称，调用emsSession_I对象的getManager操作，分别获取各个管理者的对象引用，以便对各个管理者所提供的方法进行操作。</p><p>8 对于通知上报：client端需实现StructuredPushConsumer对象，同时可以设置过滤条件。过滤条件的设置必须符合CORBA 2.3的通知服务规范，然后调用管理者“Subscriber”对象提供的subscribe方法。以上就完成了某个通知的订阅。若要暂停或停止通知订阅的话，可以根据先前返回的订阅ID，调用“Subscriber”对象的suspendSubscription和unsubscribe方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zte.application.idl;</span><br><span class="line"></span><br><span class="line">import nmsSession.NmsSession_I;</span><br><span class="line"></span><br><span class="line">import nmsSession.NmsSession_IPOATie;</span><br><span class="line"></span><br><span class="line">import org.omg.CORBA.IntHolder;</span><br><span class="line"></span><br><span class="line">import org.omg.CORBA.ORB;</span><br><span class="line"></span><br><span class="line">import org.omg.CORBA.SystemException;</span><br><span class="line"></span><br><span class="line">import org.omg.CosNaming.NameComponent;</span><br><span class="line"></span><br><span class="line">import org.omg.CosNaming.NamingContext;</span><br><span class="line"></span><br><span class="line">import org.omg.CosNaming.NamingContextHelper;</span><br><span class="line"></span><br><span class="line">import org.omg.CosNaming.NamingContextPackage.NotFound;</span><br><span class="line"></span><br><span class="line">import org.omg.CosNotifyComm.StructuredPushConsumerHelper;</span><br><span class="line"></span><br><span class="line">import org.omg.PortableServer.POA;</span><br><span class="line"></span><br><span class="line">import org.omg.PortableServer.POAHelper;</span><br><span class="line"></span><br><span class="line">import org.omg.PortableServer.POAPackage.WrongPolicy;</span><br><span class="line"></span><br><span class="line">import subscription.EMSSubscriptionMgr_I;</span><br><span class="line"></span><br><span class="line">import subscription.EMSSubscriptionMgr_IHelper;</span><br><span class="line"></span><br><span class="line">import common.Common_IHolder;</span><br><span class="line"></span><br><span class="line">import emsMgr.EMSMgr_I;</span><br><span class="line"></span><br><span class="line">import emsMgr.EMSMgr_IHelper;</span><br><span class="line"></span><br><span class="line">import emsSession.EmsSession_I;</span><br><span class="line"></span><br><span class="line">import emsSession.EmsSession_IHolder;</span><br><span class="line"></span><br><span class="line">import emsSession.EmsSession_IPackage.managerNames_THolder;</span><br><span class="line"></span><br><span class="line">import emsSessionFactory.EmsSessionFactory_I;</span><br><span class="line"></span><br><span class="line">import emsSessionFactory.EmsSessionFactory_IHelper;</span><br><span class="line"></span><br><span class="line">import globaldefs.ProcessingFailureException;</span><br><span class="line"></span><br><span class="line">import managedElement.ManagedElementList_THolder;</span><br><span class="line"></span><br><span class="line">import managedElementManager.ManagedElementMgr_I;</span><br><span class="line"></span><br><span class="line">import managedElementManager.ManagedElementMgr_IHelper;</span><br><span class="line"></span><br><span class="line">public class test</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">static ORB orb;</span><br><span class="line"></span><br><span class="line">static EMSMgr_I emsMgr = null;</span><br><span class="line"></span><br><span class="line">static EmsSession_I emsSession=null;</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line"></span><br><span class="line">tatic ManagedElementMgr_I meMgr = null;</span><br><span class="line"></span><br><span class="line">static EMSSubscriptionMgr_I emsSpMgr = null;</span><br><span class="line"></span><br><span class="line">public static boolean testTai()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">//建立连接登录、建立消息通道</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">String[] args = new String[2];</span><br><span class="line"></span><br><span class="line">args[0] = &quot;-ORBInitRef&quot;;</span><br><span class="line"></span><br><span class="line">args[1] = &quot;NameService=corbaloc::&quot; + &quot;10.217.1.1&quot; + &quot;:&quot; + &quot;6004&quot; + &quot;/NameService&quot;;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化ORB对象的启动参数为： arg[&quot; + i + &quot;] = &quot; + args[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">orb = org.omg.CORBA.ORB.init(args, null);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;成功初始化ORB对象!－－－－Initialize Orb&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (SystemException ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化ORB对象异常！&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (orb == null) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;orb == null&quot;);</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Get Nameservice reference</span><br><span class="line"></span><br><span class="line">NamingContext nsRootContext = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">org.omg.CORBA.Object objRef = orb.resolve_initial_references(</span><br><span class="line"></span><br><span class="line">NameService);</span><br><span class="line"></span><br><span class="line">nsRootContext = NamingContextHelper.narrow(objRef);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;成功获取取名字服务!－－－－Get Nameservice reference&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (org.omg.CORBA.ORBPackage.InvalidName ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;取名字服务索引异常!&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.1 Get Reference to EMSSessionFactory</span><br><span class="line"></span><br><span class="line">NameComponent[] name = new NameComponent[1];</span><br><span class="line"></span><br><span class="line">name[0] = new NameComponent(&quot;ZTE/E300&quot;, &quot;EMSFactory&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;NameComponent: &#x27;&quot; + &quot;ZTE/E300 &quot;+ &quot;&#x27;,&#x27;EMSFactory&#x27;&quot;);</span><br><span class="line"></span><br><span class="line">org.omg.CORBA.Object obj = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">obj = nsRootContext.resolve(name);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;成功获取EMSSession工厂! Get Reference to EMSSessionFactory&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (NotFound ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;取EMSSession工厂异常!---NotFound---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (org.omg.CosNaming.NamingContextPackage.InvalidName ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;取EMSSession工厂异常!---InvalidName---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (org.omg.CosNaming.NamingContextPackage.CannotProceed ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;取EMSSession工厂异常!---CannotProceed---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//开始准备登陆并且获取EmsSession!</span><br><span class="line"></span><br><span class="line">EmsSessionFactory_I m_emsFactory = EmsSessionFactory_IHelper.narrow(obj);</span><br><span class="line"></span><br><span class="line">NmsSession_I csession = null;</span><br><span class="line"></span><br><span class="line">POA rootpoa = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">// get reference to rootpoa &amp; activate the POAManager</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;取得rootpoa并激活POAManager!&quot;);</span><br><span class="line"></span><br><span class="line">rootpoa = POAHelper.narrow(orb.resolve_initial_references(&quot;RootPOA&quot;));</span><br><span class="line"></span><br><span class="line">rootpoa.the_POAManager().activate();</span><br><span class="line"></span><br><span class="line">// create servant and register it with the ORB</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;注册NmsSession到ORB!&quot;);</span><br><span class="line"></span><br><span class="line">NmsSessionImpl nmsSessionImpl = new NmsSessionImpl();</span><br><span class="line"></span><br><span class="line">// nmsSessionImpl.setORB(orb);</span><br><span class="line"></span><br><span class="line">byte [] objectID=rootpoa.activate_object(nmsSessionImpl);</span><br><span class="line"></span><br><span class="line">// create a tie, with servant b</span><br><span class="line"></span><br><span class="line">eing the delegate.</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;创建NmsSession并且托管给POA!&quot;);</span><br><span class="line"></span><br><span class="line">NmsSession_IPOATie tie = new NmsSession_IPOATie(nmsSessionImpl,</span><br><span class="line"></span><br><span class="line">rootpoa);</span><br><span class="line"></span><br><span class="line">// obtain the objectRef for the tie</span><br><span class="line"></span><br><span class="line">// this step also implicitly activates the the object</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;在orb上激活NmsSession对象!&quot;);</span><br><span class="line"></span><br><span class="line">csession = tie._this(orb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;创建NmsSession对象过程,执行异常!&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EmsSession_IHolder sessionHolder = new EmsSession_IHolder();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;获取EmsSession引用对象&quot;);</span><br><span class="line"></span><br><span class="line">m_emsFactory.getEmsSession(&quot;root&quot;,&quot;&quot;, csession, sessionHolder);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;NMSsession ---&quot; + csession.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (globaldefs.ProcessingFailureException ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;获取EmsSession引用对象，异常！---ProcessingFailureException---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;可能是用户名或者密码错误，或者权限不够，或者已登陆的用户还未退出！&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(ex.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emsSession = sessionHolder.value;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;EMSsession ---&quot; + emsSession.toString());</span><br><span class="line"></span><br><span class="line">//获得所支持的管理器</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">managerNames_THolder mgrHolder = new managerNames_THolder();</span><br><span class="line"></span><br><span class="line">emsSession.getSupportedManagers(mgrHolder);</span><br><span class="line"></span><br><span class="line">String[] manages = mgrHolder.value;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; manages.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;管理器--Manager &quot; + i + &quot; &quot; + manages[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;获得所支持的管理器,异常！---ProcessingFailureException---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emsSession.ping();</span><br><span class="line"></span><br><span class="line">// 初始化 ManagedElement 管理器</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化 ManagedElement 管理器!&quot;);</span><br><span class="line"></span><br><span class="line">Common_IHolder mgrHolder = new Common_IHolder();</span><br><span class="line"></span><br><span class="line">emsSession.getManager(&quot;ManagedElement&quot;, mgrHolder);</span><br><span class="line"></span><br><span class="line">meMgr = ManagedElementMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(</span><br><span class="line"></span><br><span class="line">初始化 ManagedElement 管理器异常!---ProcessingFailureException---);</span><br><span class="line"></span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化 EquipmentInventory 管理器</span><br><span class="line"></span><br><span class="line">// try &#123;</span><br><span class="line"></span><br><span class="line">// System.out.println(&quot;初始化 EquipmentInventory 管理器!&quot;);</span><br><span class="line"></span><br><span class="line">// Common_IHolder mgrHolder = new Common_IHolder();</span><br><span class="line"></span><br><span class="line">// emsSession.getManager(&quot;EquipmentInventory&quot;, mgrHolder);</span><br><span class="line"></span><br><span class="line">// eiMgr = EquipmentInventoryMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">// System.out.println(</span><br><span class="line"></span><br><span class="line">// 初始化 EquipmentInventory 管理器异常!---ProcessingFailureException---);</span><br><span class="line"></span><br><span class="line">// System.out.println(pfe);</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 初始化 MultiLayerSubnetwork 管理器</span><br><span class="line"></span><br><span class="line">// try &#123;</span><br><span class="line"></span><br><span class="line">// System.out.println(&quot;初始化 MultiLayerSubnetwork 管理器!&quot;);</span><br><span class="line"></span><br><span class="line">// Common_IHolder mgrHolder = new Common_IHolder();</span><br><span class="line"></span><br><span class="line">// emsSession.getManager(&quot;MultiLayerSubnetw</span><br><span class="line"></span><br><span class="line">ork&quot;, mgrHolder);</span><br><span class="line"></span><br><span class="line">// mlsMgr = MultiLayerSubnetworkMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line">// // mlsMgr.getAllSubnetworkConnections();</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">// System.out.println(</span><br><span class="line"></span><br><span class="line">// 初始化 MultiLayerSubnetwork 管理器异常!---ProcessingFailureException---);</span><br><span class="line"></span><br><span class="line">// System.out.println(pfe);</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 初始化 EMS 管理器</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化 EMS 管理器!&quot;);</span><br><span class="line"></span><br><span class="line">Common_IHolder mgrHolder = new Common_IHolder();</span><br><span class="line"></span><br><span class="line">emsSession.getManager(&quot;EMS&quot;, mgrHolder);</span><br><span class="line"></span><br><span class="line">emsMgr = EMSMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;EMS_Manager To String ---&quot; + emsMgr.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化 EMS 管理器异常!---ProcessingFailureException---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化事件信道管理器（注意这是非标准的自定义管理器！！！！）</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化事件信道管理器!&quot;);</span><br><span class="line"></span><br><span class="line">//我方在IDL中定义的一个基类</span><br><span class="line"></span><br><span class="line">Common_IHolder mgrHolder = new Common_IHolder();</span><br><span class="line"></span><br><span class="line">//获取注册通道管理者(这个对象我方在IDL定义的一个接口）</span><br><span class="line"></span><br><span class="line">emsSession.getManager(&quot;Subscriber&quot;, mgrHolder);</span><br><span class="line"></span><br><span class="line">emsSpMgr = EMSSubscriptionMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;EMSSubscriptionMgr To String ---&quot; + emsSpMgr.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (ProcessingFailureException pfe) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;初始化事件信道管理器!---ProcessingFailureException---&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">initEvent(emsMgr, rootpoa);</span><br><span class="line"></span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void initEvent(EMSMgr_I emsMgr, POA rootpoa) &#123;</span><br><span class="line"></span><br><span class="line">// 通过远程对象获取网元信息</span><br><span class="line"></span><br><span class="line">ManagedElementList_THolder meList = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">meList = new ManagedElementList_THolder();</span><br><span class="line"></span><br><span class="line">meMgr.getAllManagedElements(meList);</span><br><span class="line"></span><br><span class="line">for(int i=0,size=meList.value.length;i&lt;size;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(meList.value[i].name[1].value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;获得节点列表!&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch (ProcessingFailureException ex) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(ex.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">test ss = new test();</span><br><span class="line"></span><br><span class="line">ss.testTai();</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
            <tag> JacORB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(二)---中兴CORBA接口开发</title>
      <link href="/posts/2018/03/375.html"/>
      <url>/posts/2018/03/375.html</url>
      
        <content type="html"><![CDATA[<p>    由于公司新项目要求，做了一段时间的CORBA接口（中兴+华为）开发，踩了各种大大小小的坑，也算积累了一些经验，特分享至此，经验所限难免会有疏漏，欢迎讨论完善。</p><p><strong>一、中兴CORBA接口开发过程</strong></p><ol><li> 建立连接、建立消息通道</li><li> 获取名字服务</li><li> 获取EMSSession工厂</li><li> 登录并获取EMSSession</li><li> 使用EMSSession初始化管理器对象</li><li> 管理器对象调用接口获取数据<span id="more"></span></li></ol><p>     <strong>注：调用corba接口需要用到EMESession对象，如果在你的应用里要多次访问corba接口，那么多次建立连接和获取EMSSession是非常浪费服务器资源且效率低下的，并且一个corba用户名和密码在同一时间只能被一个连接使用。为了优化访问效率、避免登录冲突和减少重连开销，此处应当在服务启动时就建立连接和获取EMSSession（即步骤1、2、3、4），并不断发送心跳维持连接。就这样就实现了一个corba连接的重复使用，可以用单例模式实现。</strong></p><p><strong>二、管理器对象定义</strong></p><p>高层网管如果要通过NetNumen NBI CORBA接口获取数据或交互请求，必须首先获取到相应的CORBA接口管理对象，即CORBA对象，然后通过该管理对象提供的方法来交互请求。目前NetNumen NBI CORBA接口中定义的管理对象以及对应的管理对象的名字如表：</p><table><thead><tr><th><strong>管理对象定义</strong></th><th><strong>管理对象名称</strong></th></tr></thead><tbody><tr><td>EMSMgr_I</td><td>“EMS”</td></tr><tr><td>EMSSubscriptionMgr_I</td><td>“Subscriber”</td></tr><tr><td>EquipmentInventoryMgr_I</td><td>“EquipmentInventory”</td></tr><tr><td>Ethernet_I</td><td>“Ethernet”</td></tr><tr><td>FileTransferMgr_I</td><td>“FileTransfer”</td></tr><tr><td>FlowDomainMgr_I</td><td>“FlowDomain”</td></tr><tr><td>HeartbeatServiceMgr_I</td><td>“CommService”</td></tr><tr><td>ManagedElementMgr_I</td><td>“ManagedElement”</td></tr><tr><td>MSTPCommon_I</td><td>“MSTPCommon”</td></tr><tr><td>MultiLayerSubnetworkMgr_I</td><td>“MultiLayerSubnetwork”</td></tr><tr><td>PerformanceManagementMgr_I</td><td>“PerformanceManagement”</td></tr><tr><td>ProtectionMgr_I</td><td>“Protection”</td></tr><tr><td>TrailNtwProtMgr_I</td><td>“TrailNetworkProtection”</td></tr><tr><td>MaintenanceMgr_I</td><td>“maintenance”</td></tr></tbody></table><p>注：该管理器对象定义只适用于中兴corba接口。</p><p><strong>三、中兴CORBA接口开发示例</strong></p><p>demo github地址：<a href="https://github.com/dong706/CorbaDemo">https://github.com/dong706/CorbaDemo</a></p><p>调用EMS管理器对象的获取所有网元信息接口（getAllManagedElements）和获取所有拓扑连接接口（getAllTopLevelTopologicalLinks）示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dx.corba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.ORB;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.SystemException;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NameComponent;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContext;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextPackage.NotFound;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableServer.POA;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableServer.POAHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.common.Common_IHolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsMgr.EMSMgr_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsMgr.EMSMgr_IHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsSession.EmsSession_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsSession.EmsSession_IHolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsSessionFactory.EmsSessionFactory_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.emsSessionFactory.EmsSessionFactory_IHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.globaldefs.NameAndStringValue_T;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.globaldefs.ProcessingFailureException;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.managedElement.ManagedElementList_THolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.managedElementManager.ManagedElementMgr_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.nmsSession.NmsSession_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.nmsSession.NmsSession_IPOATie;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.subscription.EMSSubscriptionMgr_I;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.topologicalLink.TopologicalLinkList_THolder;</span><br><span class="line"><span class="keyword">import</span> org.omg.zx.topologicalLink.TopologicalLink_T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZxDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ORB orb;</span><br><span class="line"><span class="keyword">static</span> <span class="type">EMSMgr_I</span> <span class="variable">emsMgr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">EmsSession_I</span> <span class="variable">emsSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">ManagedElementMgr_I</span> <span class="variable">meMgr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">EMSSubscriptionMgr_I</span> <span class="variable">emsSpMgr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 建立连接登录、建立消息通道</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">args[<span class="number">0</span>] = <span class="string">&quot;-ORBInitRef&quot;</span>;</span><br><span class="line">args[<span class="number">1</span>] = <span class="string">&quot;NameService=corbaloc::&quot;</span> + <span class="string">&quot;CORBA服务器IP&quot;</span> + <span class="string">&quot;:&quot;</span></span><br><span class="line">+ <span class="string">&quot;CORBA服务器端口&quot;</span> + <span class="string">&quot;/NameService&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化ORB对象的启动参数为： arg[&quot;</span> + i + <span class="string">&quot;] = &quot;</span></span><br><span class="line">+ args[i]);</span><br><span class="line">&#125;</span><br><span class="line">orb = org.omg.CORBA.ORB.init(args, <span class="literal">null</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;成功初始化ORB对象!－－－－Initialize Orb&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SystemException ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化ORB对象异常！&quot;</span>);</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (orb == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;orb == null&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get Nameservice reference</span></span><br><span class="line"><span class="type">NamingContext</span> <span class="variable">nsRootContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">org.omg.CORBA.<span class="type">Object</span> <span class="variable">objRef</span> <span class="operator">=</span> orb</span><br><span class="line">.resolve_initial_references(<span class="string">&quot;NameService&quot;</span>);</span><br><span class="line">nsRootContext = NamingContextHelper.narrow(objRef);</span><br><span class="line">System.out.println(<span class="string">&quot;成功获取取名字服务!－－－－Get Nameservice reference&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CORBA.ORBPackage.InvalidName ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取名字服务索引异常!&quot;</span>);</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.1 Get Reference to EMSSessionFactory</span></span><br><span class="line">NameComponent[] name = <span class="keyword">new</span> <span class="title class_">NameComponent</span>[<span class="number">1</span>];</span><br><span class="line">name[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">NameComponent</span>(<span class="string">&quot;ZTE/T3&quot;</span>, <span class="string">&quot;EMSFactory&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;NameComponent: &#x27;&quot;</span> + <span class="string">&quot;ZTE/T3 &quot;</span> + <span class="string">&quot;&#x27;,&#x27;EMSFactory&#x27;&quot;</span>);</span><br><span class="line">org.omg.CORBA.<span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">obj = nsRootContext.resolve(name);</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;成功获取EMSSession工厂!   Get Reference to EMSSessionFactory&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NotFound ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---NotFound---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CosNaming.NamingContextPackage.InvalidName ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---InvalidName---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.CosNaming.NamingContextPackage.CannotProceed ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;取EMSSession工厂异常!---CannotProceed---&quot;</span>);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始准备登陆并且获取EmsSession!</span></span><br><span class="line"><span class="type">EmsSessionFactory_I</span> <span class="variable">m_emsFactory</span> <span class="operator">=</span> EmsSessionFactory_IHelper</span><br><span class="line">.narrow(obj);</span><br><span class="line"><span class="type">NmsSession_I</span> <span class="variable">csession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">POA</span> <span class="variable">rootpoa</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get reference to rootpoa &amp; activate the POAManager</span></span><br><span class="line">System.out.println(<span class="string">&quot;取得rootpoa并激活POAManager!&quot;</span>);</span><br><span class="line">rootpoa = POAHelper.narrow(orb</span><br><span class="line">.resolve_initial_references(<span class="string">&quot;RootPOA&quot;</span>));</span><br><span class="line">rootpoa.the_POAManager().activate();</span><br><span class="line"><span class="comment">// create servant and register it with the ORB</span></span><br><span class="line">System.out.println(<span class="string">&quot;注册NmsSession到ORB!&quot;</span>);</span><br><span class="line"><span class="type">NmsSessionImpl</span> <span class="variable">nmsSessionImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NmsSessionImpl</span>();</span><br><span class="line"><span class="comment">// nmsSessionImpl.setORB(orb);</span></span><br><span class="line"><span class="type">byte</span>[] objectID = rootpoa.activate_object(nmsSessionImpl);</span><br><span class="line"><span class="comment">// create a tie, with servant being the delegate.</span></span><br><span class="line">System.out.println(<span class="string">&quot;创建NmsSession并且托管给POA!&quot;</span>);</span><br><span class="line"><span class="type">NmsSession_IPOATie</span> <span class="variable">tie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NmsSession_IPOATie</span>(nmsSessionImpl,rootpoa);</span><br><span class="line"><span class="comment">// obtain the objectRef for the tie</span></span><br><span class="line"><span class="comment">// this step also implicitly activates the the object</span></span><br><span class="line">System.out.println(<span class="string">&quot;在orb上激活NmsSession对象!&quot;</span>);</span><br><span class="line">csession = tie._this(orb);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;创建NmsSession对象过程,执行异常!&quot;</span>);</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">EmsSession_IHolder</span> <span class="variable">sessionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmsSession_IHolder</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;获取EmsSession引用对象&quot;</span>);</span><br><span class="line">m_emsFactory.getEmsSession(<span class="string">&quot;CORBA服务用户名&quot;</span>, <span class="string">&quot;CORBA服务密码&quot;</span>, csession,</span><br><span class="line">sessionHolder);</span><br><span class="line">System.out.println(<span class="string">&quot;NMSsession ---&quot;</span> + csession.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (org.omg.zx.globaldefs.ProcessingFailureException ex) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;获取EmsSession引用对象，异常！---ProcessingFailureException---&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;可能是用户名或者密码错误，或者权限不够，或者已登陆的用户还未退出！&quot;</span>);</span><br><span class="line">System.out.println(ex.toString());</span><br><span class="line">&#125;</span><br><span class="line">emsSession = sessionHolder.value;</span><br><span class="line">System.out.println(<span class="string">&quot;EMSsession ---&quot;</span> + emsSession.toString());</span><br><span class="line">emsSession.ping();</span><br><span class="line"><span class="comment">// 初始化 EMS 管理器</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化 EMS 管理器!&quot;</span>);</span><br><span class="line"><span class="type">Common_IHolder</span> <span class="variable">mgrHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Common_IHolder</span>();</span><br><span class="line">emsSession.getManager(<span class="string">&quot;EMS&quot;</span>, mgrHolder);</span><br><span class="line">emsMgr = EMSMgr_IHelper.narrow(mgrHolder.value);</span><br><span class="line">System.out.println(<span class="string">&quot;EMS_Manager To String ---&quot;</span> + emsMgr.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ProcessingFailureException pfe) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;初始化 EMS 管理器异常!---ProcessingFailureException---&quot;</span>);</span><br><span class="line">System.out.println(pfe.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">initEvent(emsMgr, rootpoa);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initEvent</span><span class="params">(EMSMgr_I emsMgr, POA rootpoa)</span> &#123;</span><br><span class="line"><span class="comment">// 通过远程对象获取网元信息</span></span><br><span class="line"><span class="type">ManagedElementList_THolder</span> <span class="variable">meList</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">meList = <span class="keyword">new</span> <span class="title class_">ManagedElementList_THolder</span>();</span><br><span class="line">meMgr.getAllManagedElements(meList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = meList.value.length; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.print(Stringformat(meList.value[i].meType) + <span class="string">&quot;\t&quot;</span></span><br><span class="line">+ Stringformat(meList.value[i].userLabel) + <span class="string">&quot;\t&quot;</span></span><br><span class="line">+ Stringformat(meList.value[i].nativeEMSName) + <span class="string">&quot;\t&quot;</span></span><br><span class="line">+ meList.value[i].hardwareVersion + <span class="string">&quot;\t&quot;</span></span><br><span class="line">+ meList.value[i].productName + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">NameAndStringValue_T[] arr = meList.value[i].name;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">System.out.print(meList.value[i].name[j].name + <span class="string">&quot;:&quot;</span></span><br><span class="line">+ meList.value[i].name[j].value + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">TopologicalLinkList_THolder</span> <span class="variable">topoList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopologicalLinkList_THolder</span>();</span><br><span class="line">emsMgr.getAllTopLevelTopologicalLinks(topoList);</span><br><span class="line">TopologicalLink_T[] a = topoList.value;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = a.length; i &lt; size; i++) &#123;</span><br><span class="line">System.out.println(Stringformat(a[i].userLabel));</span><br><span class="line"></span><br><span class="line">NameAndStringValue_T[] aa = a[i].name;</span><br><span class="line"><span class="keyword">for</span> (NameAndStringValue_T nameAndStringValue_T : aa) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aa:&quot;</span> + nameAndStringValue_T.name + <span class="string">&quot;~&quot;</span></span><br><span class="line">+ nameAndStringValue_T.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NameAndStringValue_T[] b = a[i].aEndTP;</span><br><span class="line"><span class="keyword">for</span> (NameAndStringValue_T nameAndStringValue_T : b) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a:&quot;</span> + nameAndStringValue_T.name + <span class="string">&quot;~&quot;</span></span><br><span class="line">+ nameAndStringValue_T.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NameAndStringValue_T[] c = a[i].zEndTP;</span><br><span class="line"><span class="keyword">for</span> (NameAndStringValue_T nameAndStringValue_T : c) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;z:&quot;</span> + nameAndStringValue_T.name + <span class="string">&quot;~&quot;</span></span><br><span class="line">+ nameAndStringValue_T.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ProcessingFailureException ex) &#123;</span><br><span class="line">System.out.println(ex.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符集转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">Stringformat</span><span class="params">(String value)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(value.getBytes(<span class="string">&quot;ISO8859_1&quot;</span>), <span class="string">&quot;GB2312&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ZxDemo</span> <span class="variable">zxDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZxDemo</span>();</span><br><span class="line">zxDemo.invoke();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
            <tag> JacORB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corba开发总结(一)---JacORB的安装与编译</title>
      <link href="/posts/2018/03/30490.html"/>
      <url>/posts/2018/03/30490.html</url>
      
        <content type="html"><![CDATA[<p>   由于公司新项目要求，做了一段时间的CORBA接口（中兴+华为）开发，踩了各种大大小小的坑，也算积累了一些经验，特分享至此，经验所限难免会有疏漏，欢迎讨论完善。</p><p>iManager<strong>CORBA</strong>网管<strong>北向接口</strong>（以下简称<strong>CORBA 接口</strong>） 用于连接 iManager M2000 移动网网元综合管理系统 （以下简称 M2000） 与上级网管系统 （NMS） 提供 M2000 ， 与 NMS 之间的<strong>接口</strong>转换和业务转换功能。</p><p><strong>一、CORBA技术说明</strong></p><p>CORBA（Common Object Request Broker Architecture，公共对象请求代理体系）是吸收了软件界面向对象技术、分布式计算技术、多层体系结构技术以及接口技术的一种综合技术，是一种对象间通信的工业标准。</p><span id="more"></span><p>CORBA规范包含：</p><ul><li>  接口定义语言 （IDL,Interface Definition Language）</li><li>  IDL语言和高级编程语言之间的映射</li><li>  IIOP（Internet Inter-ORB Protocol）通信协议</li><li>  可透过网络传递的对象引用格式</li></ul><p>CORBA的基本特征：</p><ul><li>  跨平台、跨语言、跨ORB（Object Request Broker）的互操作性</li><li>  即插即用的分布式特性</li></ul><p><strong>二、JacORB安装配置</strong></p><p>1、到<a href="http://www.jacorb.org/download.html%E4%B8%8B%E8%BD%BD%E5%90%88%E9%80%82%E7%9A%84%E7%89%88%E6%9C%AC%E5%B9%B6%E8%A7%A3%E5%8E%8B%E5%88%B0%E6%9C%AC%E5%9C%B0%EF%BC%8C%E6%88%91%E9%80%89%E7%94%A8%E7%9A%84%E6%98%AFJacORB-2.2.4%E7%89%88%E6%9C%AC%E3%80%82">http://www.jacorb.org/download.html下载合适的版本并解压到本地，我选用的是JacORB-2.2.4版本。</a></p><p>本地目录:D:\Programming\JAR\JacORB\JacORB-2.2.4</p><p>2、设置环境变量</p><p>确保有java环境和JAVA_HOME变量，我本地使用的是Java6环境。</p><p>添加D:\Programming\JAR\JacORB\JacORB-2.2.4\bin到环境变量path</p><p>创建JACORB_HOME变量为D:\Programming\JAR\JacORB\JacORB-2.2.4</p><p>ps：此处也可以不用设置系统环境变量，直接在idl.bat里设置。</p><p>3、修改idl.bat</p><p>%JACORB_HOME%\bin目录下会自带一个idl.bat的文件，该文件只是一个示例，需要修改文件内容。</p><p>原内容:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">java -classpath <span class="string">&quot;C:\JacORB-2.2.4\lib\idl.jar;C:\JacORB-2.2.4\lib\logkit-1.2.jar;%CLASSPATH%&quot;</span> org.jacorb.idl.parser %*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后【我自己的版本】：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">rem @JAVA_CMD@ -classpath <span class="string">&quot;@JACORB_HOME@/lib/idl.jar;@JACORB_HOME@/lib/logkit-1.2.jar;%CLASSPATH%&quot;</span> org.jacorb.idl.parser %* </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> JACORB_HOME=D:/Programming/JAR/JacORB/JacORB-2.2.4</span><br><span class="line"><span class="built_in">set</span> JAVA_HOME=D:/Programming/JDK/jdk1.6.0_31</span><br><span class="line"><span class="built_in">set</span> path=%JAVA_HOME%/bin;%path% </span><br><span class="line"><span class="built_in">set</span> CLASSPATH=%JAVA_HOME%/lib/rt.jar </span><br><span class="line"><span class="built_in">set</span> CLASSPATH=%JACORB_HOME%/lib/antlr-2.7.2.jar;%JACORB_HOME%/lib/avalon-framework-4.1.5.jar;%JACORB_HOME%/lib/concurrent-1.3.2.jar;%JACORB_HOME%/lib/idl.jar;%JACORB_HOME%/lib/jacorb.jar;%JACORB_HOME%/lib/logkit-1.2.jar;%JACORB_HOME%/lib/picocontainer-1.2-021105.jar;%JACORB_HOME%/lib/wrapper-3.1.0.jar;%JACORB_HOME%/classes;%CLASSPATH% </span><br><span class="line">%JAVA_HOME%/bin/java -<span class="built_in">cp</span> %CLASSPATH% org.jacorb.idl.parser %* </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、在%JACORB_HOME%\bin目录执行命令行 idl -h，显示帮助信息，说明已配置完成。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Programming\JAR\JacORB\JacORB-2.2.4\bin&gt;idl -h</span><br><span class="line">        -h|<span class="built_in">help</span>         these few lines of <span class="built_in">help</span></span><br><span class="line">        -v|version      <span class="built_in">print</span> version information</span><br><span class="line">        -d <span class="built_in">dir</span>          root of directory tree <span class="keyword">for</span> output</span><br><span class="line">        -Dx             define preprocessor symbol x with value 1</span><br><span class="line">        -Dx=y           define preprocessor symbol x with value y</span><br><span class="line">        -Idir           <span class="built_in">set</span> include path <span class="keyword">for</span> idl files</span><br><span class="line">        -U&lt;symbol&gt;              undefine preprocessor symbol</span><br><span class="line">        -W [1..4]       debug level</span><br><span class="line">        -all            generate code <span class="keyword">for</span> all IDL files, even included ones</span><br><span class="line">        -forceOverwrite generate code even <span class="keyword">if</span> IDL has not changed</span><br><span class="line">        -ami_callback           generate AMI reply handlers and sendc methods</span><br><span class="line">        -ami_polling            generate AMI poller and sendp methods</span><br><span class="line">        -backend classname              use classname as code generator</span><br><span class="line">        -i2jpackage x:a.b.c      replace IDL package name x by a.b.c <span class="keyword">in</span> generate</span><br><span class="line">d Java code (e.g. CORBA:org.omg.CORBA)</span><br><span class="line">        -i2jpackagefile &lt;filename&gt;       replace IDL package names using list fr</span><br><span class="line">om &lt;filename&gt;. Format as above.</span><br><span class="line">        -ir             generate information required by the Interface Repositor</span><br><span class="line">y</span><br><span class="line">        -nofinal        generated Java code will contain no final class definiti</span><br><span class="line">ons</span><br><span class="line">        -unchecked_narrow               use unchecked_narrow <span class="keyword">in</span> generated code f</span><br><span class="line">or IOR parameters <span class="keyword">in</span> operations</span><br><span class="line">        -noskel         disables generation of POA skeletons</span><br><span class="line">        -nostub         disables generation of client stubs</span><br><span class="line">        -cldc10         code generation compatible with J2ME/CLDC 1.0</span><br><span class="line">        -sloppy_forward allow forward declarations wo. later definitions</span><br><span class="line">        -sloppy_names   less strict checking of module name scoping</span><br><span class="line">        -permissive_rmic        tolerate dubious IDL generated by JDK<span class="string">&#x27;s rmic, in</span></span><br><span class="line"><span class="string">cludes -sloppy_names.</span></span><br><span class="line"><span class="string">        -syntax         syntax check only, no code generation</span></span><br><span class="line"><span class="string">        &lt;filelist&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>三、编译IDL文件</strong></p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译中兴IDL</span></span><br><span class="line"><span class="comment">#D:\Programming\JAR\JacORB\JacORB-2.2.4\idl\omg 是编译中兴idl时要依赖的idl文件</span></span><br><span class="line"><span class="comment">#D:\idl\zhongxing\*.idl是中兴idl文件目录</span></span><br><span class="line"><span class="comment">#org.omg.zx是中兴idl编译生成的java服务端接口文件的包名</span></span><br><span class="line"><span class="comment">#c:/corba/zx 是生成中兴idl服务端接口文件所在的目录</span></span><br><span class="line">idl -all -d c:/corba/zx  -ID:\Programming\JAR\JacORB\JacORB-2.2.4\idl\omg -i2jpackage :org.omg.zx -<span class="keyword">in</span> D:\idl\zhongxing\*.idl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#编译华为IDL</span></span><br><span class="line"><span class="comment">#D:\idl\huawei\OMG 是编译华为idl时要依赖的idl文件</span></span><br><span class="line"><span class="comment">#D:\idl\huawei\*.idl是华为idl文件目录</span></span><br><span class="line"><span class="comment">#org.omg.zx是华为idl编译生成的java服务端接口文件的包名</span></span><br><span class="line"><span class="comment">#c:/corba/hw 是生成华为idl服务端接口文件所在的目录</span></span><br><span class="line">idl -all -d c:/corba/hw  -ID:\idl\huawei\OMG -i2jpackage :org.omg.hw -<span class="keyword">in</span> D:\idl\huawei\*.idl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IDL编译完成后即可在c:/corba/zx和c:/corba/hw目录下看到对应的java接口文件，将org.omg.zx和org.omg.hw两个目录都导入项目中就可以开始corba接口的开发了。</p><p><a href="https://github.com/dong706/CorbaDemo">开发corba接口所需idl下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
          <category> Corba开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Corba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用zxing识别二维码</title>
      <link href="/posts/2018/01/bad81be1.html"/>
      <url>/posts/2018/01/bad81be1.html</url>
      
        <content type="html"><![CDATA[<p>最近公司要求扫描二维码和生成二维码的功能。而群里部分网友也提到了。我这里就写了一个demo，和大家分享。代码很简介，希望大家能够喜欢。</p><p>网友表示在网上搜索了很多，发现不是代码不全，就是jar不匹配。</p><p>我这里共享了一个zxing的2.2版本（支持JDK6）的例子，也提供了下载地址。实现代码如下：</p><span id="more"></span> <p>Zxing2.2（支持JDK6） 下载地址：<a href="http://download.csdn.net/download/dong707/10210016">http://download.csdn.net/download/dong707/10210016</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.herman.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BinaryBitmap;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.DecodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatReader;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.WriterException;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Herman.Xiong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015-7-10 上午10:52:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> jdk 1.6,tomcat 6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZxingUtil</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;EncodeHintType, ErrorCorrectionLevel&gt; encodeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;EncodeHintType, ErrorCorrectionLevel&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DecodeHintType, ErrorCorrectionLevel&gt; decodeMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;DecodeHintType, ErrorCorrectionLevel&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String charset=<span class="string">&quot;UTF-8&quot;</span>,format=<span class="string">&quot;png&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> size=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ZxingUtil</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成二维码图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Herman.Xiong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015-7-10 上午10:26:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> WriterException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createQRCode</span><span class="params">(String data, File file)</span></span><br><span class="line"><span class="keyword">throws</span> WriterException, IOException &#123;</span><br><span class="line">MatrixToImageWriter.writeToFile(<span class="keyword">new</span> <span class="title class_">MultiFormatWriter</span>().encode(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(data.getBytes(charset), charset),</span><br><span class="line">BarcodeFormat.QR_CODE, size, size, encodeMap), format, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取二维码信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Herman.Xiong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015-7-10 上午10:25:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 二维码图片路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotFoundException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readQRCode</span><span class="params">(String filePath)</span></span><br><span class="line"><span class="keyword">throws</span> FileNotFoundException, IOException, NotFoundException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MultiFormatReader</span>().decode(<span class="keyword">new</span> <span class="title class_">BinaryBitmap</span>(<span class="keyword">new</span> <span class="title class_">HybridBinarizer</span>(<span class="keyword">new</span> <span class="title class_">BufferedImageLuminanceSource</span>(ImageIO.read(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath))))),decodeMap).getText();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] arg)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">createQRCode(<span class="string">&quot;http://blog.csdn.net/xmtblog&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\111.png&quot;</span>));</span><br><span class="line">System.out.println(readQRCode(<span class="string">&quot;D:\\111.png&quot;</span>));</span><br><span class="line"><span class="comment">//源码下载地址：http://download.csdn.net/detail/xmt1139057136/8886473</span></span><br><span class="line"><span class="comment">//欢迎大家关注我的博客！如有疑问,请加QQ群：454796847共同学习！</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> zxing </tag>
            
            <tag> 二维码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA类初始化顺序</title>
      <link href="/posts/2012/08/fefafa71.html"/>
      <url>/posts/2012/08/fefafa71.html</url>
      
        <content type="html"><![CDATA[<p>* 1 父类static 变量/代码块 初始化(即使父类static是private的也会初始化，只会初始化一次)</p><p> * 2 子类static 变量/代码块 初始化</p><p> * 3 父类可执行代码块(即 {…})</p><p> * 4  父类构造方法</p><p> * 5 子类可执行代码块(即 {…})</p><p> * 6 子类构造方法</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TestMain &#123;</span><br><span class="line">public static void main(String []args)&#123;</span><br><span class="line">new Children();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Parent&#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;A&quot;);</span><br><span class="line">&#125;</span><br><span class="line">static&#123;</span><br><span class="line">System.out.println(&quot;B&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public Parent()&#123;</span><br><span class="line">System.out.println(&quot;C&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Children extends Parent&#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">static&#123;</span><br><span class="line">System.out.println(&quot;2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public Children()&#123;</span><br><span class="line">System.out.println(&quot;3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的执行结果为：B 2 A C 1 3</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具类获取Spring的ApplicationContext对象</title>
      <link href="/posts/2012/07/bd127a33.html"/>
      <url>/posts/2012/07/bd127a33.html</url>
      
        <content type="html"><![CDATA[<p>springMVC想直接获取jdbcTemplate，很苦逼的折腾了一天没解决，好吧，我承认我很菜….最后在网上搜到此方法，亲测可用，遂转发于此，以飨诸位。</p><p>这个方法初始化很慢，ApplicationContext context = new ClassPathXmlApplicationContext();当时我觉得没有这个必要，浪费内存。后来我终于想出了一个解决方法。在此拿来给大家参考下，希望对大家有帮助。</p><p>我写的代码如下：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.task.common;</span><br><span class="line"></span><br><span class="line">import java.util.Locale;</span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">/**</span><br><span class="line"> * 获取Spring上下文及国际化</span><br><span class="line"> * @author bingchuan --&gt;www.vijun.com</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public final class SpringContextUtil implements ApplicationContextAware  &#123;</span><br><span class="line">    private static ApplicationContext context;</span><br><span class="line">    </span><br><span class="line">    @SuppressWarnings(&quot;static-access&quot;)</span><br><span class="line">    public void setApplicationContext(ApplicationContext contex) throws BeansException &#123;</span><br><span class="line">        this.context=contex;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Object getBean(String beanName)&#123;</span><br><span class="line">        return context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public static String getMessage(String key)&#123;</span><br><span class="line">        return context.getMessage(key, null, Locale.getDefault());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以获取ApplicationContext及国际化内容，使用方法如下：</p><p>1.首先在spring配置文件中中初始化  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt; bean class = &quot;com.task.common.SpringContextUtil&quot; id = &quot;springContextUtil&quot; /&gt;</span><br></pre></td></tr></table></figure><p>2.使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate= (JdbcTemplate)SpringContextUtil.getBean(&quot;jdbcTemplate&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache检查httpd.conf的语法错误的方法</title>
      <link href="/posts/2012/05/326e3d8b.html"/>
      <url>/posts/2012/05/326e3d8b.html</url>
      
        <content type="html"><![CDATA[<p>修改了apache httpd.conf文件之后，怎么样验证其语法是否正确呢？当然，我们可以重新启动apache服务器，但这样一来，如果万一存在错误，apache服务器将不能正常启动，也不能提供正常服务。</p><p>所以我们在修改了apache的配置文件之后，最好对其验证，确保了其语法上正确无误之后，才重新启动apache服务器。  </p><span id="more"></span> <p>apache httpd.conf语法验证可以通过下面的命令来验证。<br><strong>Windows环境：</strong><br><code>httpd -t  </code><br>或者：<br><code>httpd.exe -w -t -f &quot;C:\\Apache2.2\\conf\\httpd.conf&quot; -d &quot;C:\\Apache2.2\\.&quot;  </code></p><p><strong>Linux环境：</strong><br><code>apachectl configtest </code><br>或<br><code>apache2ctl configtest  </code><br>SuSE等系统的apache2，可能为apache2ctl命令。  </p><p>如果你不能确认自己的apache服务器到底使用哪个命令，你可以使用<br><code>find / -name &quot;apachectl&quot;  </code><br>或者<br><code>find / -name &quot;apache2ctl&quot;  </code><br>来查找一下。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@myserver bin\]#find / -name &quot;apachectl&quot;  </span><br><span class="line">/usr/local/apache/bin/apachectl                      </span><br></pre></td></tr></table></figure><p>如果正确无误，会显示Syntax OK信息。  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@myserver bin]# ./apachectl configtest  </span><br><span class="line">Syntax</span><br><span class="line">OK                                                 ``` </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">如果存在错误，则会显示出错的行号以及错误信息，如下：  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[root@myserver bin]# ./apachectl configtest<br>Syntax error on line 134</p><p>```                     </p><p> |</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个漂亮的表白方式</title>
      <link href="/posts/2012/03/14968.html"/>
      <url>/posts/2012/03/14968.html</url>
      
        <content type="html"><![CDATA[<p>首先请按ctrl+f 然后输入9 点击全部高亮显示，奇迹出现了有木有！ </p><p>99669999996669999996699666699666999966699666699<br>99699999999699999999699666699669966996699666699<br>99669999999999999996699666699699666699699666699<br>99666699999999999966666999966699666699699666699<br>99666666999999996666666699666699666699699666699<br>99666666669999666666666699666669966996699666699<br>9966666666699666666666669966666699996666999999…</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA异常:java.io.EOFException: No content to map to Object due to end of input</title>
      <link href="/posts/2012/03/21a6ab48.html"/>
      <url>/posts/2012/03/21a6ab48.html</url>
      
        <content type="html"><![CDATA[<p>开发过程中碰到一个异常：<br><code>java.io.EOFException: No content to map to Object due to end of input</code></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完整java异常：</span><br><span class="line"></span><br><span class="line">java.io.EOFException: No content to map to Object due to end of input</span><br><span class="line"></span><br><span class="line">org.codehaus.jackson.map.ObjectMapper._initForReading(ObjectMapper.java:2433) [jackson-mapper-asl-1.8.1.jar:1.8.1] </span><br><span class="line"></span><br><span class="line">at org.codehaus.jackson.map.ObjectMapper._readValue(ObjectMapper.java:2366) [jackson-mapper-asl-1.8.1.jar:1.8.1]</span><br><span class="line"></span><br><span class="line"> at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1162) [jackson-mapper-asl-1.8.1.jar:1.8.1] </span><br><span class="line"></span><br><span class="line">at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:410) [jackson-jaxrs-1.8.1.jar:1.8.1]</span><br></pre></td></tr></table></figure><p> 这个问题困扰了我很久，最后发现原因是：</p><p>   Content-Type我设置为 application/json charset=utf-8，但是实际传递参数至服务端时并没有传递json参数，导致at org.codehaus.jackson.map.ObjectMapper._readValue读取不到json数据导致报错。</p><p>   解决办法：当不传递json数据时，’Content-Type’设置为’application/x-www-form-urlencoded charset=utf-8’即可。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datatables使用笔记</title>
      <link href="/posts/2012/02/8e95b651.html"/>
      <url>/posts/2012/02/8e95b651.html</url>
      
        <content type="html"><![CDATA[<p>​<br>1.若对Datatables提供的css不够满意，可以自己修改page.css和table.css.</p><p>比如，单元格的内容过多会导致自动换行，我修改成了过多内容以省略号代替，同时增加了left类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.css</span><br><span class="line">table.display td.center &#123;</span><br><span class="line">text-align: center;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">table.display td.left &#123;</span><br><span class="line">text-align: left;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p> <br>2.Datatables原有的列属性无法满足我的要求，因此想自己修改jquery.dataTables.js达到自定义列属性的效果。</p><p>   尝试修改_fnAjaxParameters方法,尝试成功，分享如下：</p><p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;aoColumns&quot;: [&#123;&quot;sTitle&quot;: &quot;任务编号&quot;,&quot;sWidth&quot;: &quot;80px&quot;,&quot;dropName&quot;:&quot;123&quot;&#125;]</span><br></pre></td></tr></table></figure> </p><p>如上所示，我想个列属性里增加 dropName属性.故修改_fnAjaxParameters方法如下：</p><p> </p><p> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for ( i=0 ; i&lt;iColumns ; i++ )</span><br><span class="line">&#123;</span><br><span class="line">mDataProp = oSettings.aoColumns[i].mDataProp;</span><br><span class="line">dropName  = oSettings.aoColumns[i].dropName;//新添加代码</span><br><span class="line">aoData.push( &#123; &quot;name&quot;: &quot;mDataProp_&quot;+i, &quot;value&quot;: typeof(mDataProp)===&quot;function&quot; ? &#x27;function&#x27; : mDataProp &#125; );</span><br><span class="line">aoData.push( &#123; &quot;name&quot;: &quot;dropName&quot;+i, &quot;value&quot;: dropName?dropName:&quot;&quot; &#125; );//新添加代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><p>然后，后台就可以接收dropName参数并解析了!</p><p> 3.无法拖拽调整列宽，这是一个要解决的问题。</p><p> 4.无法进行多条件查询，这个另一个要解决的问题！当然还有个多列过滤…</p><p> 5.表格中的超链接，单选框、下拉条等等也可以如此实现.</p><p>   </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;sTitle&quot;: &quot;任务编号&quot;,&quot;sWidth&quot;: &quot;80px&quot;,</span><br><span class="line"></span><br><span class="line">                &quot;fnRender&quot;: function(obj) &#123;</span><br><span class="line"></span><br><span class="line">                  var s = obj.aData[obj.iDataColumn];</span><br><span class="line"></span><br><span class="line">                         s=&quot;&lt;a href=&#x27;http://www.baidu.com&#x27; target=&#x27;_blank&#x27;&gt;&quot;+s+&quot;&lt;/a&gt;&quot;;</span><br><span class="line"></span><br><span class="line">                      return s;</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p> </p><p> </p><p> </p><p> 6.单独给某列定制排序方法</p><p>  <a href="http://datatables.net/plug-ins/sorting#how_to_data_source">http://datatables.net/plug-ins/sorting#how_to_data_source</a></p><p> </p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
